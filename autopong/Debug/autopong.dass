
./Debug/autopong.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#include "startup.h"


void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f804 	bl	20000010 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <main>:
	move_object,
	set_object_speed
};

int main(int argc, char **argv)
{
20000010:	b580      	push	{r7, lr}
20000012:	b084      	sub	sp, #16
20000014:	af00      	add	r7, sp, #0
20000016:	6078      	str	r0, [r7, #4]
20000018:	6039      	str	r1, [r7, #0]
	POBJECT p = &ball;
2000001a:	4b08      	ldr	r3, [pc, #32]	; (2000003c <main+0x2c>)
2000001c:	60fb      	str	r3, [r7, #12]
	graphic_init();
2000001e:	f000 f987 	bl	20000330 <graphic_init>
	
	#ifndef SIMULATOR
		graphic_clear_screen();
	#endif
	
	p->set_speed(p, 4, 1);
20000022:	68fb      	ldr	r3, [r7, #12]
20000024:	6a1b      	ldr	r3, [r3, #32]
20000026:	68f8      	ldr	r0, [r7, #12]
20000028:	2201      	movs	r2, #1
2000002a:	2104      	movs	r1, #4
2000002c:	4798      	blx	r3
	while(1){
		p->move(p);
2000002e:	68fb      	ldr	r3, [r7, #12]
20000030:	69db      	ldr	r3, [r3, #28]
20000032:	68fa      	ldr	r2, [r7, #12]
20000034:	0010      	movs	r0, r2
20000036:	4798      	blx	r3
20000038:	e7f9      	b.n	2000002e <main+0x1e>
2000003a:	46c0      	nop			; (mov r8, r8)
2000003c:	200008f4 	strdcs	r0, [r0], -r4

20000040 <graphic_ctrl_bit_set>:
 *
 */

#include "startup.h"

void graphic_ctrl_bit_set(uint8_t x){
20000040:	b580      	push	{r7, lr}
20000042:	b082      	sub	sp, #8
20000044:	af00      	add	r7, sp, #0
20000046:	0002      	movs	r2, r0
20000048:	1dfb      	adds	r3, r7, #7
2000004a:	701a      	strb	r2, [r3, #0]
	GPIO_ODR_E_LOW |= (~B_SELECT & x); 			//Dubbelkolla sedan
2000004c:	4b09      	ldr	r3, [pc, #36]	; (20000074 <graphic_ctrl_bit_set+0x34>)
2000004e:	781b      	ldrb	r3, [r3, #0]
20000050:	b2db      	uxtb	r3, r3
20000052:	b25a      	sxtb	r2, r3
20000054:	1dfb      	adds	r3, r7, #7
20000056:	781b      	ldrb	r3, [r3, #0]
20000058:	b25b      	sxtb	r3, r3
2000005a:	2104      	movs	r1, #4
2000005c:	438b      	bics	r3, r1
2000005e:	b25b      	sxtb	r3, r3
20000060:	4313      	orrs	r3, r2
20000062:	b25a      	sxtb	r2, r3
20000064:	4b03      	ldr	r3, [pc, #12]	; (20000074 <graphic_ctrl_bit_set+0x34>)
20000066:	b2d2      	uxtb	r2, r2
20000068:	701a      	strb	r2, [r3, #0]
}
2000006a:	46c0      	nop			; (mov r8, r8)
2000006c:	46bd      	mov	sp, r7
2000006e:	b002      	add	sp, #8
20000070:	bd80      	pop	{r7, pc}
20000072:	46c0      	nop			; (mov r8, r8)
20000074:	40021014 	andmi	r1, r2, r4, lsl r0

20000078 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x){
20000078:	b580      	push	{r7, lr}
2000007a:	b082      	sub	sp, #8
2000007c:	af00      	add	r7, sp, #0
2000007e:	0002      	movs	r2, r0
20000080:	1dfb      	adds	r3, r7, #7
20000082:	701a      	strb	r2, [r3, #0]
	GPIO_ODR_E_LOW &= ~(B_SELECT | x);			//Dubbelkolla sedan
20000084:	4b0a      	ldr	r3, [pc, #40]	; (200000b0 <graphic_ctrl_bit_clear+0x38>)
20000086:	781b      	ldrb	r3, [r3, #0]
20000088:	b2db      	uxtb	r3, r3
2000008a:	b25b      	sxtb	r3, r3
2000008c:	1dfa      	adds	r2, r7, #7
2000008e:	7812      	ldrb	r2, [r2, #0]
20000090:	2104      	movs	r1, #4
20000092:	430a      	orrs	r2, r1
20000094:	b2d2      	uxtb	r2, r2
20000096:	b252      	sxtb	r2, r2
20000098:	43d2      	mvns	r2, r2
2000009a:	b252      	sxtb	r2, r2
2000009c:	4013      	ands	r3, r2
2000009e:	b25a      	sxtb	r2, r3
200000a0:	4b03      	ldr	r3, [pc, #12]	; (200000b0 <graphic_ctrl_bit_clear+0x38>)
200000a2:	b2d2      	uxtb	r2, r2
200000a4:	701a      	strb	r2, [r3, #0]
}
200000a6:	46c0      	nop			; (mov r8, r8)
200000a8:	46bd      	mov	sp, r7
200000aa:	b002      	add	sp, #8
200000ac:	bd80      	pop	{r7, pc}
200000ae:	46c0      	nop			; (mov r8, r8)
200000b0:	40021014 	andmi	r1, r2, r4, lsl r0

200000b4 <select_controller>:

static void select_controller(uint8_t controller){
200000b4:	b580      	push	{r7, lr}
200000b6:	b082      	sub	sp, #8
200000b8:	af00      	add	r7, sp, #0
200000ba:	0002      	movs	r2, r0
200000bc:	1dfb      	adds	r3, r7, #7
200000be:	701a      	strb	r2, [r3, #0]
	switch(controller){
200000c0:	1dfb      	adds	r3, r7, #7
200000c2:	781b      	ldrb	r3, [r3, #0]
200000c4:	2b08      	cmp	r3, #8
200000c6:	d00c      	beq.n	200000e2 <select_controller+0x2e>
200000c8:	dc02      	bgt.n	200000d0 <select_controller+0x1c>
200000ca:	2b00      	cmp	r3, #0
200000cc:	d005      	beq.n	200000da <select_controller+0x26>
		case 0: graphic_ctrl_bit_clear(B_CS1 | B_CS2); break;
		case 0x08: graphic_ctrl_bit_set(B_CS1); graphic_ctrl_bit_clear(B_CS2); break;
		case 0x10: graphic_ctrl_bit_set(B_CS2); graphic_ctrl_bit_clear(B_CS1); break;
		case 0x08 | 0x10: graphic_ctrl_bit_set(B_CS1 | B_CS2); break;
	}	
}
200000ce:	e01a      	b.n	20000106 <select_controller+0x52>
	switch(controller){
200000d0:	2b10      	cmp	r3, #16
200000d2:	d00d      	beq.n	200000f0 <select_controller+0x3c>
200000d4:	2b18      	cmp	r3, #24
200000d6:	d012      	beq.n	200000fe <select_controller+0x4a>
}
200000d8:	e015      	b.n	20000106 <select_controller+0x52>
		case 0: graphic_ctrl_bit_clear(B_CS1 | B_CS2); break;
200000da:	2018      	movs	r0, #24
200000dc:	f7ff ffcc 	bl	20000078 <graphic_ctrl_bit_clear>
200000e0:	e011      	b.n	20000106 <select_controller+0x52>
		case 0x08: graphic_ctrl_bit_set(B_CS1); graphic_ctrl_bit_clear(B_CS2); break;
200000e2:	2008      	movs	r0, #8
200000e4:	f7ff ffac 	bl	20000040 <graphic_ctrl_bit_set>
200000e8:	2010      	movs	r0, #16
200000ea:	f7ff ffc5 	bl	20000078 <graphic_ctrl_bit_clear>
200000ee:	e00a      	b.n	20000106 <select_controller+0x52>
		case 0x10: graphic_ctrl_bit_set(B_CS2); graphic_ctrl_bit_clear(B_CS1); break;
200000f0:	2010      	movs	r0, #16
200000f2:	f7ff ffa5 	bl	20000040 <graphic_ctrl_bit_set>
200000f6:	2008      	movs	r0, #8
200000f8:	f7ff ffbe 	bl	20000078 <graphic_ctrl_bit_clear>
200000fc:	e003      	b.n	20000106 <select_controller+0x52>
		case 0x08 | 0x10: graphic_ctrl_bit_set(B_CS1 | B_CS2); break;
200000fe:	2018      	movs	r0, #24
20000100:	f7ff ff9e 	bl	20000040 <graphic_ctrl_bit_set>
20000104:	46c0      	nop			; (mov r8, r8)
}
20000106:	46c0      	nop			; (mov r8, r8)
20000108:	46bd      	mov	sp, r7
2000010a:	b002      	add	sp, #8
2000010c:	bd80      	pop	{r7, pc}

2000010e <graphic_wait_ready>:

static void graphic_wait_ready(void){
2000010e:	b580      	push	{r7, lr}
20000110:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_clear(B_E);
20000112:	2040      	movs	r0, #64	; 0x40
20000114:	f7ff ffb0 	bl	20000078 <graphic_ctrl_bit_clear>
	GPIO_MODER_E = 0x00005555;
20000118:	4b12      	ldr	r3, [pc, #72]	; (20000164 <graphic_wait_ready+0x56>)
2000011a:	4a13      	ldr	r2, [pc, #76]	; (20000168 <graphic_wait_ready+0x5a>)
2000011c:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
2000011e:	2001      	movs	r0, #1
20000120:	f7ff ffaa 	bl	20000078 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
20000124:	2002      	movs	r0, #2
20000126:	f7ff ff8b 	bl	20000040 <graphic_ctrl_bit_set>
	delay_500ns();
2000012a:	f000 fb34 	bl	20000796 <delay_500ns>
	while(GPIO_IDR_E_HIGH & LCD_BUSY){
2000012e:	e009      	b.n	20000144 <graphic_wait_ready+0x36>
		graphic_ctrl_bit_set(B_E);
20000130:	2040      	movs	r0, #64	; 0x40
20000132:	f7ff ff85 	bl	20000040 <graphic_ctrl_bit_set>
		delay_500ns();
20000136:	f000 fb2e 	bl	20000796 <delay_500ns>
		graphic_ctrl_bit_clear(B_E);
2000013a:	2040      	movs	r0, #64	; 0x40
2000013c:	f7ff ff9c 	bl	20000078 <graphic_ctrl_bit_clear>
		delay_500ns();
20000140:	f000 fb29 	bl	20000796 <delay_500ns>
	while(GPIO_IDR_E_HIGH & LCD_BUSY){
20000144:	4b09      	ldr	r3, [pc, #36]	; (2000016c <graphic_wait_ready+0x5e>)
20000146:	781b      	ldrb	r3, [r3, #0]
20000148:	b2db      	uxtb	r3, r3
2000014a:	b25b      	sxtb	r3, r3
2000014c:	2b00      	cmp	r3, #0
2000014e:	dbef      	blt.n	20000130 <graphic_wait_ready+0x22>
	}
	graphic_ctrl_bit_set(B_E);
20000150:	2040      	movs	r0, #64	; 0x40
20000152:	f7ff ff75 	bl	20000040 <graphic_ctrl_bit_set>
	GPIO_MODER_E = 0x55555555;
20000156:	4b03      	ldr	r3, [pc, #12]	; (20000164 <graphic_wait_ready+0x56>)
20000158:	4a05      	ldr	r2, [pc, #20]	; (20000170 <graphic_wait_ready+0x62>)
2000015a:	601a      	str	r2, [r3, #0]
}
2000015c:	46c0      	nop			; (mov r8, r8)
2000015e:	46bd      	mov	sp, r7
20000160:	bd80      	pop	{r7, pc}
20000162:	46c0      	nop			; (mov r8, r8)
20000164:	40021000 	andmi	r1, r2, r0
20000168:	00005555 	andeq	r5, r0, r5, asr r5
2000016c:	40021011 	andmi	r1, r2, r1, lsl r0
20000170:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000174 <graphic_read>:

unsigned char graphic_read(unsigned char controller){
20000174:	b580      	push	{r7, lr}
20000176:	b084      	sub	sp, #16
20000178:	af00      	add	r7, sp, #0
2000017a:	0002      	movs	r2, r0
2000017c:	1dfb      	adds	r3, r7, #7
2000017e:	701a      	strb	r2, [r3, #0]
	unsigned char read_data;
	graphic_ctrl_bit_clear(B_E);
20000180:	2040      	movs	r0, #64	; 0x40
20000182:	f7ff ff79 	bl	20000078 <graphic_ctrl_bit_clear>
	GPIO_MODER_E = 0x00005555;
20000186:	4b1a      	ldr	r3, [pc, #104]	; (200001f0 <graphic_read+0x7c>)
20000188:	4a1a      	ldr	r2, [pc, #104]	; (200001f4 <graphic_read+0x80>)
2000018a:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS | B_RW);
2000018c:	2003      	movs	r0, #3
2000018e:	f7ff ff57 	bl	20000040 <graphic_ctrl_bit_set>
	select_controller(controller);
20000192:	1dfb      	adds	r3, r7, #7
20000194:	781b      	ldrb	r3, [r3, #0]
20000196:	0018      	movs	r0, r3
20000198:	f7ff ff8c 	bl	200000b4 <select_controller>
	delay_500ns();
2000019c:	f000 fafb 	bl	20000796 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200001a0:	2040      	movs	r0, #64	; 0x40
200001a2:	f7ff ff4d 	bl	20000040 <graphic_ctrl_bit_set>
	read_data = GPIO_IDR_E_HIGH;
200001a6:	4a14      	ldr	r2, [pc, #80]	; (200001f8 <graphic_read+0x84>)
200001a8:	230f      	movs	r3, #15
200001aa:	18fb      	adds	r3, r7, r3
200001ac:	7812      	ldrb	r2, [r2, #0]
200001ae:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200001b0:	2040      	movs	r0, #64	; 0x40
200001b2:	f7ff ff61 	bl	20000078 <graphic_ctrl_bit_clear>
	GPIO_MODER_E = 0x55555555;
200001b6:	4b0e      	ldr	r3, [pc, #56]	; (200001f0 <graphic_read+0x7c>)
200001b8:	4a10      	ldr	r2, [pc, #64]	; (200001fc <graphic_read+0x88>)
200001ba:	601a      	str	r2, [r3, #0]
	if(controller == B_CS1){
200001bc:	1dfb      	adds	r3, r7, #7
200001be:	781b      	ldrb	r3, [r3, #0]
200001c0:	2b08      	cmp	r3, #8
200001c2:	d104      	bne.n	200001ce <graphic_read+0x5a>
		select_controller(B_CS1);
200001c4:	2008      	movs	r0, #8
200001c6:	f7ff ff75 	bl	200000b4 <select_controller>
		graphic_wait_ready();
200001ca:	f7ff ffa0 	bl	2000010e <graphic_wait_ready>
	}
	if (controller == B_CS2){
200001ce:	1dfb      	adds	r3, r7, #7
200001d0:	781b      	ldrb	r3, [r3, #0]
200001d2:	2b10      	cmp	r3, #16
200001d4:	d104      	bne.n	200001e0 <graphic_read+0x6c>
		select_controller(B_CS2);
200001d6:	2010      	movs	r0, #16
200001d8:	f7ff ff6c 	bl	200000b4 <select_controller>
		graphic_wait_ready();
200001dc:	f7ff ff97 	bl	2000010e <graphic_wait_ready>
	}
	return read_data;
200001e0:	230f      	movs	r3, #15
200001e2:	18fb      	adds	r3, r7, r3
200001e4:	781b      	ldrb	r3, [r3, #0]
}
200001e6:	0018      	movs	r0, r3
200001e8:	46bd      	mov	sp, r7
200001ea:	b004      	add	sp, #16
200001ec:	bd80      	pop	{r7, pc}
200001ee:	46c0      	nop			; (mov r8, r8)
200001f0:	40021000 	andmi	r1, r2, r0
200001f4:	00005555 	andeq	r5, r0, r5, asr r5
200001f8:	40021011 	andmi	r1, r2, r1, lsl r0
200001fc:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000200 <graphic_write>:

void graphic_write(unsigned char value, unsigned char controller){
20000200:	b580      	push	{r7, lr}
20000202:	b082      	sub	sp, #8
20000204:	af00      	add	r7, sp, #0
20000206:	0002      	movs	r2, r0
20000208:	1dfb      	adds	r3, r7, #7
2000020a:	701a      	strb	r2, [r3, #0]
2000020c:	1dbb      	adds	r3, r7, #6
2000020e:	1c0a      	adds	r2, r1, #0
20000210:	701a      	strb	r2, [r3, #0]
	GPIO_ODR_E_HIGH = value;
20000212:	4a1a      	ldr	r2, [pc, #104]	; (2000027c <graphic_write+0x7c>)
20000214:	1dfb      	adds	r3, r7, #7
20000216:	781b      	ldrb	r3, [r3, #0]
20000218:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
2000021a:	1dbb      	adds	r3, r7, #6
2000021c:	781b      	ldrb	r3, [r3, #0]
2000021e:	0018      	movs	r0, r3
20000220:	f7ff ff48 	bl	200000b4 <select_controller>
	delay_500ns();
20000224:	f000 fab7 	bl	20000796 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20000228:	2040      	movs	r0, #64	; 0x40
2000022a:	f7ff ff09 	bl	20000040 <graphic_ctrl_bit_set>
	delay_500ns();
2000022e:	f000 fab2 	bl	20000796 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
20000232:	2040      	movs	r0, #64	; 0x40
20000234:	f7ff ff20 	bl	20000078 <graphic_ctrl_bit_clear>
	if(controller & B_CS1){
20000238:	1dbb      	adds	r3, r7, #6
2000023a:	781b      	ldrb	r3, [r3, #0]
2000023c:	2208      	movs	r2, #8
2000023e:	4013      	ands	r3, r2
20000240:	d004      	beq.n	2000024c <graphic_write+0x4c>
		select_controller(B_CS1);
20000242:	2008      	movs	r0, #8
20000244:	f7ff ff36 	bl	200000b4 <select_controller>
		graphic_wait_ready();
20000248:	f7ff ff61 	bl	2000010e <graphic_wait_ready>
	}
	if(controller & B_CS2){
2000024c:	1dbb      	adds	r3, r7, #6
2000024e:	781b      	ldrb	r3, [r3, #0]
20000250:	2210      	movs	r2, #16
20000252:	4013      	ands	r3, r2
20000254:	d004      	beq.n	20000260 <graphic_write+0x60>
		select_controller(B_CS2);
20000256:	2010      	movs	r0, #16
20000258:	f7ff ff2c 	bl	200000b4 <select_controller>
		graphic_wait_ready();
2000025c:	f7ff ff57 	bl	2000010e <graphic_wait_ready>
	}
	GPIO_ODR_E_HIGH = 0;
20000260:	4b06      	ldr	r3, [pc, #24]	; (2000027c <graphic_write+0x7c>)
20000262:	2200      	movs	r2, #0
20000264:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);  		//ettställs som förberedelse för nästa arbetscykel
20000266:	2040      	movs	r0, #64	; 0x40
20000268:	f7ff feea 	bl	20000040 <graphic_ctrl_bit_set>
	select_controller(0);
2000026c:	2000      	movs	r0, #0
2000026e:	f7ff ff21 	bl	200000b4 <select_controller>
}
20000272:	46c0      	nop			; (mov r8, r8)
20000274:	46bd      	mov	sp, r7
20000276:	b002      	add	sp, #8
20000278:	bd80      	pop	{r7, pc}
2000027a:	46c0      	nop			; (mov r8, r8)
2000027c:	40021015 	andmi	r1, r2, r5, lsl r0

20000280 <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller){
20000280:	b580      	push	{r7, lr}
20000282:	b082      	sub	sp, #8
20000284:	af00      	add	r7, sp, #0
20000286:	0002      	movs	r2, r0
20000288:	1dfb      	adds	r3, r7, #7
2000028a:	701a      	strb	r2, [r3, #0]
2000028c:	1dbb      	adds	r3, r7, #6
2000028e:	1c0a      	adds	r2, r1, #0
20000290:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000292:	2040      	movs	r0, #64	; 0x40
20000294:	f7ff fef0 	bl	20000078 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000298:	1dbb      	adds	r3, r7, #6
2000029a:	781b      	ldrb	r3, [r3, #0]
2000029c:	0018      	movs	r0, r3
2000029e:	f7ff ff09 	bl	200000b4 <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
200002a2:	2003      	movs	r0, #3
200002a4:	f7ff fee8 	bl	20000078 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
200002a8:	1dbb      	adds	r3, r7, #6
200002aa:	781a      	ldrb	r2, [r3, #0]
200002ac:	1dfb      	adds	r3, r7, #7
200002ae:	781b      	ldrb	r3, [r3, #0]
200002b0:	0011      	movs	r1, r2
200002b2:	0018      	movs	r0, r3
200002b4:	f7ff ffa4 	bl	20000200 <graphic_write>
}
200002b8:	46c0      	nop			; (mov r8, r8)
200002ba:	46bd      	mov	sp, r7
200002bc:	b002      	add	sp, #8
200002be:	bd80      	pop	{r7, pc}

200002c0 <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
200002c0:	b580      	push	{r7, lr}
200002c2:	b082      	sub	sp, #8
200002c4:	af00      	add	r7, sp, #0
200002c6:	0002      	movs	r2, r0
200002c8:	1dfb      	adds	r3, r7, #7
200002ca:	701a      	strb	r2, [r3, #0]
200002cc:	1dbb      	adds	r3, r7, #6
200002ce:	1c0a      	adds	r2, r1, #0
200002d0:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200002d2:	2040      	movs	r0, #64	; 0x40
200002d4:	f7ff fed0 	bl	20000078 <graphic_ctrl_bit_clear>
	select_controller(controller);
200002d8:	1dbb      	adds	r3, r7, #6
200002da:	781b      	ldrb	r3, [r3, #0]
200002dc:	0018      	movs	r0, r3
200002de:	f7ff fee9 	bl	200000b4 <select_controller>
	graphic_ctrl_bit_set(B_RS);
200002e2:	2001      	movs	r0, #1
200002e4:	f7ff feac 	bl	20000040 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
200002e8:	2002      	movs	r0, #2
200002ea:	f7ff fec5 	bl	20000078 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
200002ee:	1dbb      	adds	r3, r7, #6
200002f0:	781a      	ldrb	r2, [r3, #0]
200002f2:	1dfb      	adds	r3, r7, #7
200002f4:	781b      	ldrb	r3, [r3, #0]
200002f6:	0011      	movs	r1, r2
200002f8:	0018      	movs	r0, r3
200002fa:	f7ff ff81 	bl	20000200 <graphic_write>
}
200002fe:	46c0      	nop			; (mov r8, r8)
20000300:	46bd      	mov	sp, r7
20000302:	b002      	add	sp, #8
20000304:	bd80      	pop	{r7, pc}

20000306 <graphic_read_data>:

unsigned char graphic_read_data(unsigned char controller){
20000306:	b580      	push	{r7, lr}
20000308:	b082      	sub	sp, #8
2000030a:	af00      	add	r7, sp, #0
2000030c:	0002      	movs	r2, r0
2000030e:	1dfb      	adds	r3, r7, #7
20000310:	701a      	strb	r2, [r3, #0]
	(void) graphic_read(controller);
20000312:	1dfb      	adds	r3, r7, #7
20000314:	781b      	ldrb	r3, [r3, #0]
20000316:	0018      	movs	r0, r3
20000318:	f7ff ff2c 	bl	20000174 <graphic_read>
	
	return graphic_read(controller);
2000031c:	1dfb      	adds	r3, r7, #7
2000031e:	781b      	ldrb	r3, [r3, #0]
20000320:	0018      	movs	r0, r3
20000322:	f7ff ff27 	bl	20000174 <graphic_read>
20000326:	0003      	movs	r3, r0
}
20000328:	0018      	movs	r0, r3
2000032a:	46bd      	mov	sp, r7
2000032c:	b002      	add	sp, #8
2000032e:	bd80      	pop	{r7, pc}

20000330 <graphic_init>:

void graphic_init(){
20000330:	b580      	push	{r7, lr}
20000332:	af00      	add	r7, sp, #0
	GPIO_MODER_E = 0x55555555;
20000334:	4b15      	ldr	r3, [pc, #84]	; (2000038c <graphic_init+0x5c>)
20000336:	4a16      	ldr	r2, [pc, #88]	; (20000390 <graphic_init+0x60>)
20000338:	601a      	str	r2, [r3, #0]
	
	graphic_ctrl_bit_set(B_E);
2000033a:	2040      	movs	r0, #64	; 0x40
2000033c:	f7ff fe80 	bl	20000040 <graphic_ctrl_bit_set>
	delay_micro(10);
20000340:	200a      	movs	r0, #10
20000342:	f000 f9f5 	bl	20000730 <delay_micro>
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RESET | B_E);
20000346:	2078      	movs	r0, #120	; 0x78
20000348:	f7ff fe96 	bl	20000078 <graphic_ctrl_bit_clear>
	delay_milli(30);
2000034c:	201e      	movs	r0, #30
2000034e:	f000 fa05 	bl	2000075c <delay_milli>
	graphic_ctrl_bit_set(B_RESET);
20000352:	2020      	movs	r0, #32
20000354:	f7ff fe74 	bl	20000040 <graphic_ctrl_bit_set>
	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
20000358:	2118      	movs	r1, #24
2000035a:	203e      	movs	r0, #62	; 0x3e
2000035c:	f7ff ff90 	bl	20000280 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);
20000360:	2118      	movs	r1, #24
20000362:	203f      	movs	r0, #63	; 0x3f
20000364:	f7ff ff8c 	bl	20000280 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
20000368:	2118      	movs	r1, #24
2000036a:	20c0      	movs	r0, #192	; 0xc0
2000036c:	f7ff ff88 	bl	20000280 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
20000370:	2118      	movs	r1, #24
20000372:	2040      	movs	r0, #64	; 0x40
20000374:	f7ff ff84 	bl	20000280 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
20000378:	2118      	movs	r1, #24
2000037a:	20b8      	movs	r0, #184	; 0xb8
2000037c:	f7ff ff80 	bl	20000280 <graphic_write_command>
	select_controller(0);
20000380:	2000      	movs	r0, #0
20000382:	f7ff fe97 	bl	200000b4 <select_controller>
}
20000386:	46c0      	nop			; (mov r8, r8)
20000388:	46bd      	mov	sp, r7
2000038a:	bd80      	pop	{r7, pc}
2000038c:	40021000 	andmi	r1, r2, r0
20000390:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000394 <graphic_clear_screen>:

void graphic_clear_screen(){
20000394:	b580      	push	{r7, lr}
20000396:	b082      	sub	sp, #8
20000398:	af00      	add	r7, sp, #0
	for(int page = 0; page <=7; page++){
2000039a:	2300      	movs	r3, #0
2000039c:	607b      	str	r3, [r7, #4]
2000039e:	e01e      	b.n	200003de <graphic_clear_screen+0x4a>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
200003a0:	687b      	ldr	r3, [r7, #4]
200003a2:	b25b      	sxtb	r3, r3
200003a4:	2248      	movs	r2, #72	; 0x48
200003a6:	4252      	negs	r2, r2
200003a8:	4313      	orrs	r3, r2
200003aa:	b25b      	sxtb	r3, r3
200003ac:	b2db      	uxtb	r3, r3
200003ae:	2118      	movs	r1, #24
200003b0:	0018      	movs	r0, r3
200003b2:	f7ff ff65 	bl	20000280 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1 | B_CS2);
200003b6:	2118      	movs	r1, #24
200003b8:	2040      	movs	r0, #64	; 0x40
200003ba:	f7ff ff61 	bl	20000280 <graphic_write_command>
		for (int adress = 0; adress <= 63; adress++)
200003be:	2300      	movs	r3, #0
200003c0:	603b      	str	r3, [r7, #0]
200003c2:	e006      	b.n	200003d2 <graphic_clear_screen+0x3e>
			graphic_write_data(0, B_CS1 | B_CS2);
200003c4:	2118      	movs	r1, #24
200003c6:	2000      	movs	r0, #0
200003c8:	f7ff ff7a 	bl	200002c0 <graphic_write_data>
		for (int adress = 0; adress <= 63; adress++)
200003cc:	683b      	ldr	r3, [r7, #0]
200003ce:	3301      	adds	r3, #1
200003d0:	603b      	str	r3, [r7, #0]
200003d2:	683b      	ldr	r3, [r7, #0]
200003d4:	2b3f      	cmp	r3, #63	; 0x3f
200003d6:	ddf5      	ble.n	200003c4 <graphic_clear_screen+0x30>
	for(int page = 0; page <=7; page++){
200003d8:	687b      	ldr	r3, [r7, #4]
200003da:	3301      	adds	r3, #1
200003dc:	607b      	str	r3, [r7, #4]
200003de:	687b      	ldr	r3, [r7, #4]
200003e0:	2b07      	cmp	r3, #7
200003e2:	dddd      	ble.n	200003a0 <graphic_clear_screen+0xc>
	}
}
200003e4:	46c0      	nop			; (mov r8, r8)
200003e6:	46bd      	mov	sp, r7
200003e8:	b002      	add	sp, #8
200003ea:	bd80      	pop	{r7, pc}

200003ec <pixel>:

void pixel (unsigned int x, unsigned int y, unsigned int set){
200003ec:	b5b0      	push	{r4, r5, r7, lr}
200003ee:	b088      	sub	sp, #32
200003f0:	af00      	add	r7, sp, #0
200003f2:	60f8      	str	r0, [r7, #12]
200003f4:	60b9      	str	r1, [r7, #8]
200003f6:	607a      	str	r2, [r7, #4]
	uint8_t mask, c, controller;
	int index;
	if (y < 1 || y > 64 || x < 1 || x > 128) 
200003f8:	68bb      	ldr	r3, [r7, #8]
200003fa:	2b00      	cmp	r3, #0
200003fc:	d100      	bne.n	20000400 <pixel+0x14>
200003fe:	e0a9      	b.n	20000554 <pixel+0x168>
20000400:	68bb      	ldr	r3, [r7, #8]
20000402:	2b40      	cmp	r3, #64	; 0x40
20000404:	d900      	bls.n	20000408 <pixel+0x1c>
20000406:	e0a5      	b.n	20000554 <pixel+0x168>
20000408:	68fb      	ldr	r3, [r7, #12]
2000040a:	2b00      	cmp	r3, #0
2000040c:	d100      	bne.n	20000410 <pixel+0x24>
2000040e:	e0a1      	b.n	20000554 <pixel+0x168>
20000410:	68fb      	ldr	r3, [r7, #12]
20000412:	2b80      	cmp	r3, #128	; 0x80
20000414:	d900      	bls.n	20000418 <pixel+0x2c>
20000416:	e09d      	b.n	20000554 <pixel+0x168>
		return;
	
	index = (y-1) / 8;
20000418:	68bb      	ldr	r3, [r7, #8]
2000041a:	3b01      	subs	r3, #1
2000041c:	08db      	lsrs	r3, r3, #3
2000041e:	61bb      	str	r3, [r7, #24]
	
	switch((y-1) % 8){
20000420:	68bb      	ldr	r3, [r7, #8]
20000422:	3b01      	subs	r3, #1
20000424:	2207      	movs	r2, #7
20000426:	4013      	ands	r3, r2
20000428:	2b07      	cmp	r3, #7
2000042a:	d82c      	bhi.n	20000486 <pixel+0x9a>
2000042c:	009a      	lsls	r2, r3, #2
2000042e:	4b4b      	ldr	r3, [pc, #300]	; (2000055c <pixel+0x170>)
20000430:	18d3      	adds	r3, r2, r3
20000432:	681b      	ldr	r3, [r3, #0]
20000434:	469f      	mov	pc, r3
		case 0: mask = 1; break;
20000436:	231f      	movs	r3, #31
20000438:	18fb      	adds	r3, r7, r3
2000043a:	2201      	movs	r2, #1
2000043c:	701a      	strb	r2, [r3, #0]
2000043e:	e022      	b.n	20000486 <pixel+0x9a>
		case 1: mask = 2; break;
20000440:	231f      	movs	r3, #31
20000442:	18fb      	adds	r3, r7, r3
20000444:	2202      	movs	r2, #2
20000446:	701a      	strb	r2, [r3, #0]
20000448:	e01d      	b.n	20000486 <pixel+0x9a>
		case 2: mask = 4; break;
2000044a:	231f      	movs	r3, #31
2000044c:	18fb      	adds	r3, r7, r3
2000044e:	2204      	movs	r2, #4
20000450:	701a      	strb	r2, [r3, #0]
20000452:	e018      	b.n	20000486 <pixel+0x9a>
		case 3: mask = 8; break;
20000454:	231f      	movs	r3, #31
20000456:	18fb      	adds	r3, r7, r3
20000458:	2208      	movs	r2, #8
2000045a:	701a      	strb	r2, [r3, #0]
2000045c:	e013      	b.n	20000486 <pixel+0x9a>
		case 4: mask = 0x10; break;
2000045e:	231f      	movs	r3, #31
20000460:	18fb      	adds	r3, r7, r3
20000462:	2210      	movs	r2, #16
20000464:	701a      	strb	r2, [r3, #0]
20000466:	e00e      	b.n	20000486 <pixel+0x9a>
		case 5: mask = 0x20; break;
20000468:	231f      	movs	r3, #31
2000046a:	18fb      	adds	r3, r7, r3
2000046c:	2220      	movs	r2, #32
2000046e:	701a      	strb	r2, [r3, #0]
20000470:	e009      	b.n	20000486 <pixel+0x9a>
		case 6: mask = 0x40; break;
20000472:	231f      	movs	r3, #31
20000474:	18fb      	adds	r3, r7, r3
20000476:	2240      	movs	r2, #64	; 0x40
20000478:	701a      	strb	r2, [r3, #0]
2000047a:	e004      	b.n	20000486 <pixel+0x9a>
		case 7: mask = 0x80; break;
2000047c:	231f      	movs	r3, #31
2000047e:	18fb      	adds	r3, r7, r3
20000480:	2280      	movs	r2, #128	; 0x80
20000482:	701a      	strb	r2, [r3, #0]
20000484:	46c0      	nop			; (mov r8, r8)
	}
	
	if (!set)
20000486:	687b      	ldr	r3, [r7, #4]
20000488:	2b00      	cmp	r3, #0
2000048a:	d103      	bne.n	20000494 <pixel+0xa8>
		mask &= ~mask;
2000048c:	231f      	movs	r3, #31
2000048e:	18fb      	adds	r3, r7, r3
20000490:	2200      	movs	r2, #0
20000492:	701a      	strb	r2, [r3, #0]
	if(x > 64){
20000494:	68fb      	ldr	r3, [r7, #12]
20000496:	2b40      	cmp	r3, #64	; 0x40
20000498:	d907      	bls.n	200004aa <pixel+0xbe>
		controller = B_CS2;
2000049a:	231e      	movs	r3, #30
2000049c:	18fb      	adds	r3, r7, r3
2000049e:	2210      	movs	r2, #16
200004a0:	701a      	strb	r2, [r3, #0]
		x = x-65;
200004a2:	68fb      	ldr	r3, [r7, #12]
200004a4:	3b41      	subs	r3, #65	; 0x41
200004a6:	60fb      	str	r3, [r7, #12]
200004a8:	e006      	b.n	200004b8 <pixel+0xcc>
	}
	else{
		controller = B_CS1;
200004aa:	231e      	movs	r3, #30
200004ac:	18fb      	adds	r3, r7, r3
200004ae:	2208      	movs	r2, #8
200004b0:	701a      	strb	r2, [r3, #0]
		x = x-1;
200004b2:	68fb      	ldr	r3, [r7, #12]
200004b4:	3b01      	subs	r3, #1
200004b6:	60fb      	str	r3, [r7, #12]
	}
	graphic_write_command(LCD_SET_ADD | x, controller);
200004b8:	68fb      	ldr	r3, [r7, #12]
200004ba:	b2db      	uxtb	r3, r3
200004bc:	2240      	movs	r2, #64	; 0x40
200004be:	4313      	orrs	r3, r2
200004c0:	b2da      	uxtb	r2, r3
200004c2:	251e      	movs	r5, #30
200004c4:	197b      	adds	r3, r7, r5
200004c6:	781b      	ldrb	r3, [r3, #0]
200004c8:	0019      	movs	r1, r3
200004ca:	0010      	movs	r0, r2
200004cc:	f7ff fed8 	bl	20000280 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
200004d0:	69bb      	ldr	r3, [r7, #24]
200004d2:	b25b      	sxtb	r3, r3
200004d4:	2248      	movs	r2, #72	; 0x48
200004d6:	4252      	negs	r2, r2
200004d8:	4313      	orrs	r3, r2
200004da:	b25b      	sxtb	r3, r3
200004dc:	b2da      	uxtb	r2, r3
200004de:	197b      	adds	r3, r7, r5
200004e0:	781b      	ldrb	r3, [r3, #0]
200004e2:	0019      	movs	r1, r3
200004e4:	0010      	movs	r0, r2
200004e6:	f7ff fecb 	bl	20000280 <graphic_write_command>
	c = graphic_read_data(controller);
200004ea:	2317      	movs	r3, #23
200004ec:	18fc      	adds	r4, r7, r3
200004ee:	197b      	adds	r3, r7, r5
200004f0:	781b      	ldrb	r3, [r3, #0]
200004f2:	0018      	movs	r0, r3
200004f4:	f7ff ff07 	bl	20000306 <graphic_read_data>
200004f8:	0003      	movs	r3, r0
200004fa:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | x, controller);
200004fc:	68fb      	ldr	r3, [r7, #12]
200004fe:	b2db      	uxtb	r3, r3
20000500:	2240      	movs	r2, #64	; 0x40
20000502:	4313      	orrs	r3, r2
20000504:	b2da      	uxtb	r2, r3
20000506:	197b      	adds	r3, r7, r5
20000508:	781b      	ldrb	r3, [r3, #0]
2000050a:	0019      	movs	r1, r3
2000050c:	0010      	movs	r0, r2
2000050e:	f7ff feb7 	bl	20000280 <graphic_write_command>
	
	if(set)
20000512:	687b      	ldr	r3, [r7, #4]
20000514:	2b00      	cmp	r3, #0
20000516:	d009      	beq.n	2000052c <pixel+0x140>
		mask = mask | c;
20000518:	221f      	movs	r2, #31
2000051a:	18bb      	adds	r3, r7, r2
2000051c:	18b9      	adds	r1, r7, r2
2000051e:	2217      	movs	r2, #23
20000520:	18ba      	adds	r2, r7, r2
20000522:	7809      	ldrb	r1, [r1, #0]
20000524:	7812      	ldrb	r2, [r2, #0]
20000526:	430a      	orrs	r2, r1
20000528:	701a      	strb	r2, [r3, #0]
2000052a:	e008      	b.n	2000053e <pixel+0x152>
	else
		mask = mask & c;
2000052c:	221f      	movs	r2, #31
2000052e:	18bb      	adds	r3, r7, r2
20000530:	18ba      	adds	r2, r7, r2
20000532:	2117      	movs	r1, #23
20000534:	1879      	adds	r1, r7, r1
20000536:	7812      	ldrb	r2, [r2, #0]
20000538:	7809      	ldrb	r1, [r1, #0]
2000053a:	400a      	ands	r2, r1
2000053c:	701a      	strb	r2, [r3, #0]
		
	graphic_write_data(mask, controller);
2000053e:	231e      	movs	r3, #30
20000540:	18fb      	adds	r3, r7, r3
20000542:	781a      	ldrb	r2, [r3, #0]
20000544:	231f      	movs	r3, #31
20000546:	18fb      	adds	r3, r7, r3
20000548:	781b      	ldrb	r3, [r3, #0]
2000054a:	0011      	movs	r1, r2
2000054c:	0018      	movs	r0, r3
2000054e:	f7ff feb7 	bl	200002c0 <graphic_write_data>
20000552:	e000      	b.n	20000556 <pixel+0x16a>
		return;
20000554:	46c0      	nop			; (mov r8, r8)
}
20000556:	46bd      	mov	sp, r7
20000558:	b008      	add	sp, #32
2000055a:	bdb0      	pop	{r4, r5, r7, pc}
2000055c:	20000918 	andcs	r0, r0, r8, lsl r9

20000560 <set_object_speed>:
#include "startup.h"


void set_object_speed(POBJECT o, int speedx, int speedy){
20000560:	b580      	push	{r7, lr}
20000562:	b084      	sub	sp, #16
20000564:	af00      	add	r7, sp, #0
20000566:	60f8      	str	r0, [r7, #12]
20000568:	60b9      	str	r1, [r7, #8]
2000056a:	607a      	str	r2, [r7, #4]
	o->dirx = speedx;
2000056c:	68fb      	ldr	r3, [r7, #12]
2000056e:	68ba      	ldr	r2, [r7, #8]
20000570:	605a      	str	r2, [r3, #4]
	o->diry = speedy;
20000572:	68fb      	ldr	r3, [r7, #12]
20000574:	687a      	ldr	r2, [r7, #4]
20000576:	609a      	str	r2, [r3, #8]
}	
20000578:	46c0      	nop			; (mov r8, r8)
2000057a:	46bd      	mov	sp, r7
2000057c:	b004      	add	sp, #16
2000057e:	bd80      	pop	{r7, pc}

20000580 <draw_object>:
 
void draw_object(POBJECT o){
20000580:	b580      	push	{r7, lr}
20000582:	b084      	sub	sp, #16
20000584:	af00      	add	r7, sp, #0
20000586:	6078      	str	r0, [r7, #4]
	for(int i= 0; i<= o->geo->numpoints; i++){
20000588:	2300      	movs	r3, #0
2000058a:	60fb      	str	r3, [r7, #12]
2000058c:	e01d      	b.n	200005ca <draw_object+0x4a>
		pixel(o->posx + o->geo->px[i].x, o->posy + o->geo->px[i].y, 1);
2000058e:	687b      	ldr	r3, [r7, #4]
20000590:	68da      	ldr	r2, [r3, #12]
20000592:	687b      	ldr	r3, [r7, #4]
20000594:	6819      	ldr	r1, [r3, #0]
20000596:	68fb      	ldr	r3, [r7, #12]
20000598:	3304      	adds	r3, #4
2000059a:	005b      	lsls	r3, r3, #1
2000059c:	18cb      	adds	r3, r1, r3
2000059e:	3304      	adds	r3, #4
200005a0:	781b      	ldrb	r3, [r3, #0]
200005a2:	18d3      	adds	r3, r2, r3
200005a4:	0018      	movs	r0, r3
200005a6:	687b      	ldr	r3, [r7, #4]
200005a8:	691a      	ldr	r2, [r3, #16]
200005aa:	687b      	ldr	r3, [r7, #4]
200005ac:	6819      	ldr	r1, [r3, #0]
200005ae:	68fb      	ldr	r3, [r7, #12]
200005b0:	3304      	adds	r3, #4
200005b2:	005b      	lsls	r3, r3, #1
200005b4:	18cb      	adds	r3, r1, r3
200005b6:	3305      	adds	r3, #5
200005b8:	781b      	ldrb	r3, [r3, #0]
200005ba:	18d3      	adds	r3, r2, r3
200005bc:	2201      	movs	r2, #1
200005be:	0019      	movs	r1, r3
200005c0:	f7ff ff14 	bl	200003ec <pixel>
	for(int i= 0; i<= o->geo->numpoints; i++){
200005c4:	68fb      	ldr	r3, [r7, #12]
200005c6:	3301      	adds	r3, #1
200005c8:	60fb      	str	r3, [r7, #12]
200005ca:	687b      	ldr	r3, [r7, #4]
200005cc:	681b      	ldr	r3, [r3, #0]
200005ce:	681b      	ldr	r3, [r3, #0]
200005d0:	68fa      	ldr	r2, [r7, #12]
200005d2:	429a      	cmp	r2, r3
200005d4:	dddb      	ble.n	2000058e <draw_object+0xe>
	}
}
200005d6:	46c0      	nop			; (mov r8, r8)
200005d8:	46bd      	mov	sp, r7
200005da:	b004      	add	sp, #16
200005dc:	bd80      	pop	{r7, pc}

200005de <clear_object>:

void clear_object(POBJECT o){
200005de:	b580      	push	{r7, lr}
200005e0:	b084      	sub	sp, #16
200005e2:	af00      	add	r7, sp, #0
200005e4:	6078      	str	r0, [r7, #4]
	for(int i= 0; i<= o->geo->numpoints; i++){
200005e6:	2300      	movs	r3, #0
200005e8:	60fb      	str	r3, [r7, #12]
200005ea:	e01d      	b.n	20000628 <clear_object+0x4a>
		pixel(o->posx + o->geo->px[i].x, o->posy + o->geo->px[i].y, 0);
200005ec:	687b      	ldr	r3, [r7, #4]
200005ee:	68da      	ldr	r2, [r3, #12]
200005f0:	687b      	ldr	r3, [r7, #4]
200005f2:	6819      	ldr	r1, [r3, #0]
200005f4:	68fb      	ldr	r3, [r7, #12]
200005f6:	3304      	adds	r3, #4
200005f8:	005b      	lsls	r3, r3, #1
200005fa:	18cb      	adds	r3, r1, r3
200005fc:	3304      	adds	r3, #4
200005fe:	781b      	ldrb	r3, [r3, #0]
20000600:	18d3      	adds	r3, r2, r3
20000602:	0018      	movs	r0, r3
20000604:	687b      	ldr	r3, [r7, #4]
20000606:	691a      	ldr	r2, [r3, #16]
20000608:	687b      	ldr	r3, [r7, #4]
2000060a:	6819      	ldr	r1, [r3, #0]
2000060c:	68fb      	ldr	r3, [r7, #12]
2000060e:	3304      	adds	r3, #4
20000610:	005b      	lsls	r3, r3, #1
20000612:	18cb      	adds	r3, r1, r3
20000614:	3305      	adds	r3, #5
20000616:	781b      	ldrb	r3, [r3, #0]
20000618:	18d3      	adds	r3, r2, r3
2000061a:	2200      	movs	r2, #0
2000061c:	0019      	movs	r1, r3
2000061e:	f7ff fee5 	bl	200003ec <pixel>
	for(int i= 0; i<= o->geo->numpoints; i++){
20000622:	68fb      	ldr	r3, [r7, #12]
20000624:	3301      	adds	r3, #1
20000626:	60fb      	str	r3, [r7, #12]
20000628:	687b      	ldr	r3, [r7, #4]
2000062a:	681b      	ldr	r3, [r3, #0]
2000062c:	681b      	ldr	r3, [r3, #0]
2000062e:	68fa      	ldr	r2, [r7, #12]
20000630:	429a      	cmp	r2, r3
20000632:	dddb      	ble.n	200005ec <clear_object+0xe>
	}
}
20000634:	46c0      	nop			; (mov r8, r8)
20000636:	46bd      	mov	sp, r7
20000638:	b004      	add	sp, #16
2000063a:	bd80      	pop	{r7, pc}

2000063c <move_object>:
 
void move_object(POBJECT o){
2000063c:	b590      	push	{r4, r7, lr}
2000063e:	b083      	sub	sp, #12
20000640:	af00      	add	r7, sp, #0
20000642:	6078      	str	r0, [r7, #4]
	o->clear(o);
20000644:	687b      	ldr	r3, [r7, #4]
20000646:	699b      	ldr	r3, [r3, #24]
20000648:	687a      	ldr	r2, [r7, #4]
2000064a:	0010      	movs	r0, r2
2000064c:	4798      	blx	r3
	
	if(o->posx < 1)
2000064e:	687b      	ldr	r3, [r7, #4]
20000650:	68db      	ldr	r3, [r3, #12]
20000652:	2b00      	cmp	r3, #0
20000654:	dc09      	bgt.n	2000066a <move_object+0x2e>
		o->set_speed(o, o->dirx*(-1), o->diry);
20000656:	687b      	ldr	r3, [r7, #4]
20000658:	6a1c      	ldr	r4, [r3, #32]
2000065a:	687b      	ldr	r3, [r7, #4]
2000065c:	685b      	ldr	r3, [r3, #4]
2000065e:	4259      	negs	r1, r3
20000660:	687b      	ldr	r3, [r7, #4]
20000662:	689a      	ldr	r2, [r3, #8]
20000664:	687b      	ldr	r3, [r7, #4]
20000666:	0018      	movs	r0, r3
20000668:	47a0      	blx	r4
	
	if(o->posx > 128)
2000066a:	687b      	ldr	r3, [r7, #4]
2000066c:	68db      	ldr	r3, [r3, #12]
2000066e:	2b80      	cmp	r3, #128	; 0x80
20000670:	dd09      	ble.n	20000686 <move_object+0x4a>
		o->set_speed(o, -o->dirx, o->diry);
20000672:	687b      	ldr	r3, [r7, #4]
20000674:	6a1c      	ldr	r4, [r3, #32]
20000676:	687b      	ldr	r3, [r7, #4]
20000678:	685b      	ldr	r3, [r3, #4]
2000067a:	4259      	negs	r1, r3
2000067c:	687b      	ldr	r3, [r7, #4]
2000067e:	689a      	ldr	r2, [r3, #8]
20000680:	687b      	ldr	r3, [r7, #4]
20000682:	0018      	movs	r0, r3
20000684:	47a0      	blx	r4
		
	if(o->posy < 1)
20000686:	687b      	ldr	r3, [r7, #4]
20000688:	691b      	ldr	r3, [r3, #16]
2000068a:	2b00      	cmp	r3, #0
2000068c:	dc09      	bgt.n	200006a2 <move_object+0x66>
		o->set_speed(o, o->dirx, -o->diry);
2000068e:	687b      	ldr	r3, [r7, #4]
20000690:	6a1c      	ldr	r4, [r3, #32]
20000692:	687b      	ldr	r3, [r7, #4]
20000694:	6859      	ldr	r1, [r3, #4]
20000696:	687b      	ldr	r3, [r7, #4]
20000698:	689b      	ldr	r3, [r3, #8]
2000069a:	425a      	negs	r2, r3
2000069c:	687b      	ldr	r3, [r7, #4]
2000069e:	0018      	movs	r0, r3
200006a0:	47a0      	blx	r4
		
	if(o->posy > 64)
200006a2:	687b      	ldr	r3, [r7, #4]
200006a4:	691b      	ldr	r3, [r3, #16]
200006a6:	2b40      	cmp	r3, #64	; 0x40
200006a8:	dd09      	ble.n	200006be <move_object+0x82>
		o->set_speed(o, o->dirx, -o->diry);
200006aa:	687b      	ldr	r3, [r7, #4]
200006ac:	6a1c      	ldr	r4, [r3, #32]
200006ae:	687b      	ldr	r3, [r7, #4]
200006b0:	6859      	ldr	r1, [r3, #4]
200006b2:	687b      	ldr	r3, [r7, #4]
200006b4:	689b      	ldr	r3, [r3, #8]
200006b6:	425a      	negs	r2, r3
200006b8:	687b      	ldr	r3, [r7, #4]
200006ba:	0018      	movs	r0, r3
200006bc:	47a0      	blx	r4
	
	o->posx = o->posx + o->dirx;
200006be:	687b      	ldr	r3, [r7, #4]
200006c0:	68da      	ldr	r2, [r3, #12]
200006c2:	687b      	ldr	r3, [r7, #4]
200006c4:	685b      	ldr	r3, [r3, #4]
200006c6:	18d2      	adds	r2, r2, r3
200006c8:	687b      	ldr	r3, [r7, #4]
200006ca:	60da      	str	r2, [r3, #12]
	o->posy = o->posy + o->diry;
200006cc:	687b      	ldr	r3, [r7, #4]
200006ce:	691a      	ldr	r2, [r3, #16]
200006d0:	687b      	ldr	r3, [r7, #4]
200006d2:	689b      	ldr	r3, [r3, #8]
200006d4:	18d2      	adds	r2, r2, r3
200006d6:	687b      	ldr	r3, [r7, #4]
200006d8:	611a      	str	r2, [r3, #16]
	o->draw(o);
200006da:	687b      	ldr	r3, [r7, #4]
200006dc:	695b      	ldr	r3, [r3, #20]
200006de:	687a      	ldr	r2, [r7, #4]
200006e0:	0010      	movs	r0, r2
200006e2:	4798      	blx	r3
}
200006e4:	46c0      	nop			; (mov r8, r8)
200006e6:	46bd      	mov	sp, r7
200006e8:	b003      	add	sp, #12
200006ea:	bd90      	pop	{r4, r7, pc}

200006ec <delay_250ns>:
 *
 */

#include "startup.h"

void delay_250ns(void){
200006ec:	b580      	push	{r7, lr}
200006ee:	af00      	add	r7, sp, #0
	STK_CTRL = 0;
200006f0:	4b0c      	ldr	r3, [pc, #48]	; (20000724 <delay_250ns+0x38>)
200006f2:	2200      	movs	r2, #0
200006f4:	601a      	str	r2, [r3, #0]
	STK_LOAD = ((168/4) - 1);
200006f6:	4b0c      	ldr	r3, [pc, #48]	; (20000728 <delay_250ns+0x3c>)
200006f8:	2229      	movs	r2, #41	; 0x29
200006fa:	601a      	str	r2, [r3, #0]
	STK_VAL = 0;
200006fc:	4b0b      	ldr	r3, [pc, #44]	; (2000072c <delay_250ns+0x40>)
200006fe:	2200      	movs	r2, #0
20000700:	601a      	str	r2, [r3, #0]
	STK_CTRL = 5;
20000702:	4b08      	ldr	r3, [pc, #32]	; (20000724 <delay_250ns+0x38>)
20000704:	2205      	movs	r2, #5
20000706:	601a      	str	r2, [r3, #0]
	
	while((STK_CTRL & 0x10000) == 0){};
20000708:	46c0      	nop			; (mov r8, r8)
2000070a:	4b06      	ldr	r3, [pc, #24]	; (20000724 <delay_250ns+0x38>)
2000070c:	681a      	ldr	r2, [r3, #0]
2000070e:	2380      	movs	r3, #128	; 0x80
20000710:	025b      	lsls	r3, r3, #9
20000712:	4013      	ands	r3, r2
20000714:	d0f9      	beq.n	2000070a <delay_250ns+0x1e>
	STK_CTRL = 0;
20000716:	4b03      	ldr	r3, [pc, #12]	; (20000724 <delay_250ns+0x38>)
20000718:	2200      	movs	r2, #0
2000071a:	601a      	str	r2, [r3, #0]
}
2000071c:	46c0      	nop			; (mov r8, r8)
2000071e:	46bd      	mov	sp, r7
20000720:	bd80      	pop	{r7, pc}
20000722:	46c0      	nop			; (mov r8, r8)
20000724:	e000e010 	and	lr, r0, r0, lsl r0
20000728:	e000e014 	and	lr, r0, r4, lsl r0
2000072c:	e000e018 	and	lr, r0, r8, lsl r0

20000730 <delay_micro>:

void delay_micro(unsigned int us){
20000730:	b580      	push	{r7, lr}
20000732:	b082      	sub	sp, #8
20000734:	af00      	add	r7, sp, #0
20000736:	6078      	str	r0, [r7, #4]
	while(us--){
20000738:	e007      	b.n	2000074a <delay_micro+0x1a>
		delay_250ns();
2000073a:	f7ff ffd7 	bl	200006ec <delay_250ns>
		delay_250ns();
2000073e:	f7ff ffd5 	bl	200006ec <delay_250ns>
		delay_250ns(); 
20000742:	f7ff ffd3 	bl	200006ec <delay_250ns>
		delay_250ns();
20000746:	f7ff ffd1 	bl	200006ec <delay_250ns>
	while(us--){
2000074a:	687b      	ldr	r3, [r7, #4]
2000074c:	1e5a      	subs	r2, r3, #1
2000074e:	607a      	str	r2, [r7, #4]
20000750:	2b00      	cmp	r3, #0
20000752:	d1f2      	bne.n	2000073a <delay_micro+0xa>
	}
}
20000754:	46c0      	nop			; (mov r8, r8)
20000756:	46bd      	mov	sp, r7
20000758:	b002      	add	sp, #8
2000075a:	bd80      	pop	{r7, pc}

2000075c <delay_milli>:

void delay_milli(unsigned int ms){
2000075c:	b580      	push	{r7, lr}
2000075e:	b082      	sub	sp, #8
20000760:	af00      	add	r7, sp, #0
20000762:	6078      	str	r0, [r7, #4]

#ifdef SIMULATOR
	ms = ms / 100;
20000764:	687b      	ldr	r3, [r7, #4]
20000766:	2164      	movs	r1, #100	; 0x64
20000768:	0018      	movs	r0, r3
2000076a:	f000 f81d 	bl	200007a8 <__udivsi3>
2000076e:	0003      	movs	r3, r0
20000770:	607b      	str	r3, [r7, #4]
	ms++;
20000772:	687b      	ldr	r3, [r7, #4]
20000774:	3301      	adds	r3, #1
20000776:	607b      	str	r3, [r7, #4]
#endif
	
	while( ms-- )
20000778:	e004      	b.n	20000784 <delay_milli+0x28>
		delay_micro(1000);
2000077a:	23fa      	movs	r3, #250	; 0xfa
2000077c:	009b      	lsls	r3, r3, #2
2000077e:	0018      	movs	r0, r3
20000780:	f7ff ffd6 	bl	20000730 <delay_micro>
	while( ms-- )
20000784:	687b      	ldr	r3, [r7, #4]
20000786:	1e5a      	subs	r2, r3, #1
20000788:	607a      	str	r2, [r7, #4]
2000078a:	2b00      	cmp	r3, #0
2000078c:	d1f5      	bne.n	2000077a <delay_milli+0x1e>
}
2000078e:	46c0      	nop			; (mov r8, r8)
20000790:	46bd      	mov	sp, r7
20000792:	b002      	add	sp, #8
20000794:	bd80      	pop	{r7, pc}

20000796 <delay_500ns>:

void delay_500ns(void){
20000796:	b580      	push	{r7, lr}
20000798:	af00      	add	r7, sp, #0
	delay_250ns();
2000079a:	f7ff ffa7 	bl	200006ec <delay_250ns>
	delay_250ns();
2000079e:	f7ff ffa5 	bl	200006ec <delay_250ns>
200007a2:	46c0      	nop			; (mov r8, r8)
200007a4:	46bd      	mov	sp, r7
200007a6:	bd80      	pop	{r7, pc}

200007a8 <__udivsi3>:
200007a8:	2200      	movs	r2, #0
200007aa:	0843      	lsrs	r3, r0, #1
200007ac:	428b      	cmp	r3, r1
200007ae:	d374      	bcc.n	2000089a <__udivsi3+0xf2>
200007b0:	0903      	lsrs	r3, r0, #4
200007b2:	428b      	cmp	r3, r1
200007b4:	d35f      	bcc.n	20000876 <__udivsi3+0xce>
200007b6:	0a03      	lsrs	r3, r0, #8
200007b8:	428b      	cmp	r3, r1
200007ba:	d344      	bcc.n	20000846 <__udivsi3+0x9e>
200007bc:	0b03      	lsrs	r3, r0, #12
200007be:	428b      	cmp	r3, r1
200007c0:	d328      	bcc.n	20000814 <__udivsi3+0x6c>
200007c2:	0c03      	lsrs	r3, r0, #16
200007c4:	428b      	cmp	r3, r1
200007c6:	d30d      	bcc.n	200007e4 <__udivsi3+0x3c>
200007c8:	22ff      	movs	r2, #255	; 0xff
200007ca:	0209      	lsls	r1, r1, #8
200007cc:	ba12      	rev	r2, r2
200007ce:	0c03      	lsrs	r3, r0, #16
200007d0:	428b      	cmp	r3, r1
200007d2:	d302      	bcc.n	200007da <__udivsi3+0x32>
200007d4:	1212      	asrs	r2, r2, #8
200007d6:	0209      	lsls	r1, r1, #8
200007d8:	d065      	beq.n	200008a6 <__udivsi3+0xfe>
200007da:	0b03      	lsrs	r3, r0, #12
200007dc:	428b      	cmp	r3, r1
200007de:	d319      	bcc.n	20000814 <__udivsi3+0x6c>
200007e0:	e000      	b.n	200007e4 <__udivsi3+0x3c>
200007e2:	0a09      	lsrs	r1, r1, #8
200007e4:	0bc3      	lsrs	r3, r0, #15
200007e6:	428b      	cmp	r3, r1
200007e8:	d301      	bcc.n	200007ee <__udivsi3+0x46>
200007ea:	03cb      	lsls	r3, r1, #15
200007ec:	1ac0      	subs	r0, r0, r3
200007ee:	4152      	adcs	r2, r2
200007f0:	0b83      	lsrs	r3, r0, #14
200007f2:	428b      	cmp	r3, r1
200007f4:	d301      	bcc.n	200007fa <__udivsi3+0x52>
200007f6:	038b      	lsls	r3, r1, #14
200007f8:	1ac0      	subs	r0, r0, r3
200007fa:	4152      	adcs	r2, r2
200007fc:	0b43      	lsrs	r3, r0, #13
200007fe:	428b      	cmp	r3, r1
20000800:	d301      	bcc.n	20000806 <__udivsi3+0x5e>
20000802:	034b      	lsls	r3, r1, #13
20000804:	1ac0      	subs	r0, r0, r3
20000806:	4152      	adcs	r2, r2
20000808:	0b03      	lsrs	r3, r0, #12
2000080a:	428b      	cmp	r3, r1
2000080c:	d301      	bcc.n	20000812 <__udivsi3+0x6a>
2000080e:	030b      	lsls	r3, r1, #12
20000810:	1ac0      	subs	r0, r0, r3
20000812:	4152      	adcs	r2, r2
20000814:	0ac3      	lsrs	r3, r0, #11
20000816:	428b      	cmp	r3, r1
20000818:	d301      	bcc.n	2000081e <__udivsi3+0x76>
2000081a:	02cb      	lsls	r3, r1, #11
2000081c:	1ac0      	subs	r0, r0, r3
2000081e:	4152      	adcs	r2, r2
20000820:	0a83      	lsrs	r3, r0, #10
20000822:	428b      	cmp	r3, r1
20000824:	d301      	bcc.n	2000082a <__udivsi3+0x82>
20000826:	028b      	lsls	r3, r1, #10
20000828:	1ac0      	subs	r0, r0, r3
2000082a:	4152      	adcs	r2, r2
2000082c:	0a43      	lsrs	r3, r0, #9
2000082e:	428b      	cmp	r3, r1
20000830:	d301      	bcc.n	20000836 <__udivsi3+0x8e>
20000832:	024b      	lsls	r3, r1, #9
20000834:	1ac0      	subs	r0, r0, r3
20000836:	4152      	adcs	r2, r2
20000838:	0a03      	lsrs	r3, r0, #8
2000083a:	428b      	cmp	r3, r1
2000083c:	d301      	bcc.n	20000842 <__udivsi3+0x9a>
2000083e:	020b      	lsls	r3, r1, #8
20000840:	1ac0      	subs	r0, r0, r3
20000842:	4152      	adcs	r2, r2
20000844:	d2cd      	bcs.n	200007e2 <__udivsi3+0x3a>
20000846:	09c3      	lsrs	r3, r0, #7
20000848:	428b      	cmp	r3, r1
2000084a:	d301      	bcc.n	20000850 <__udivsi3+0xa8>
2000084c:	01cb      	lsls	r3, r1, #7
2000084e:	1ac0      	subs	r0, r0, r3
20000850:	4152      	adcs	r2, r2
20000852:	0983      	lsrs	r3, r0, #6
20000854:	428b      	cmp	r3, r1
20000856:	d301      	bcc.n	2000085c <__udivsi3+0xb4>
20000858:	018b      	lsls	r3, r1, #6
2000085a:	1ac0      	subs	r0, r0, r3
2000085c:	4152      	adcs	r2, r2
2000085e:	0943      	lsrs	r3, r0, #5
20000860:	428b      	cmp	r3, r1
20000862:	d301      	bcc.n	20000868 <__udivsi3+0xc0>
20000864:	014b      	lsls	r3, r1, #5
20000866:	1ac0      	subs	r0, r0, r3
20000868:	4152      	adcs	r2, r2
2000086a:	0903      	lsrs	r3, r0, #4
2000086c:	428b      	cmp	r3, r1
2000086e:	d301      	bcc.n	20000874 <__udivsi3+0xcc>
20000870:	010b      	lsls	r3, r1, #4
20000872:	1ac0      	subs	r0, r0, r3
20000874:	4152      	adcs	r2, r2
20000876:	08c3      	lsrs	r3, r0, #3
20000878:	428b      	cmp	r3, r1
2000087a:	d301      	bcc.n	20000880 <__udivsi3+0xd8>
2000087c:	00cb      	lsls	r3, r1, #3
2000087e:	1ac0      	subs	r0, r0, r3
20000880:	4152      	adcs	r2, r2
20000882:	0883      	lsrs	r3, r0, #2
20000884:	428b      	cmp	r3, r1
20000886:	d301      	bcc.n	2000088c <__udivsi3+0xe4>
20000888:	008b      	lsls	r3, r1, #2
2000088a:	1ac0      	subs	r0, r0, r3
2000088c:	4152      	adcs	r2, r2
2000088e:	0843      	lsrs	r3, r0, #1
20000890:	428b      	cmp	r3, r1
20000892:	d301      	bcc.n	20000898 <__udivsi3+0xf0>
20000894:	004b      	lsls	r3, r1, #1
20000896:	1ac0      	subs	r0, r0, r3
20000898:	4152      	adcs	r2, r2
2000089a:	1a41      	subs	r1, r0, r1
2000089c:	d200      	bcs.n	200008a0 <__udivsi3+0xf8>
2000089e:	4601      	mov	r1, r0
200008a0:	4152      	adcs	r2, r2
200008a2:	4610      	mov	r0, r2
200008a4:	4770      	bx	lr
200008a6:	e7ff      	b.n	200008a8 <__udivsi3+0x100>
200008a8:	b501      	push	{r0, lr}
200008aa:	2000      	movs	r0, #0
200008ac:	f000 f806 	bl	200008bc <__aeabi_idiv0>
200008b0:	bd02      	pop	{r1, pc}
200008b2:	46c0      	nop			; (mov r8, r8)

200008b4 <__aeabi_uidivmod>:
200008b4:	2900      	cmp	r1, #0
200008b6:	d0f7      	beq.n	200008a8 <__udivsi3+0x100>
200008b8:	e776      	b.n	200007a8 <__udivsi3>
200008ba:	4770      	bx	lr

200008bc <__aeabi_idiv0>:
200008bc:	4770      	bx	lr
200008be:	46c0      	nop			; (mov r8, r8)

200008c0 <ball_geometry>:
200008c0:	0000000c 	andeq	r0, r0, ip
200008c4:	00000004 	andeq	r0, r0, r4
200008c8:	00000004 	andeq	r0, r0, r4
200008cc:	02000100 	andeq	r0, r0, #0, 2
200008d0:	01010001 	tsteq	r1, r1
200008d4:	03010201 	movweq	r0, #4609	; 0x1201
200008d8:	01020002 	tsteq	r2, r2
200008dc:	03020202 	movweq	r0, #8706	; 0x2202
200008e0:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

200008f4 <ball>:
200008f4:	200008c0 	andcs	r0, r0, r0, asr #17
	...
20000900:	00000001 	andeq	r0, r0, r1
20000904:	00000001 	andeq	r0, r0, r1
20000908:	20000581 	andcs	r0, r0, r1, lsl #11
2000090c:	200005df 	ldrdcs	r0, [r0], -pc	; <UNPREDICTABLE>
20000910:	2000063d 	andcs	r0, r0, sp, lsr r6
20000914:	20000561 	andcs	r0, r0, r1, ror #10
20000918:	20000436 	andcs	r0, r0, r6, lsr r4
2000091c:	20000440 	andcs	r0, r0, r0, asr #8
20000920:	2000044a 	andcs	r0, r0, sl, asr #8
20000924:	20000454 	andcs	r0, r0, r4, asr r4
20000928:	2000045e 	andcs	r0, r0, lr, asr r4
2000092c:	20000468 	andcs	r0, r0, r8, ror #8
20000930:	20000472 	andcs	r0, r0, r2, ror r4
20000934:	2000047c 	andcs	r0, r0, ip, ror r4

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000214 	andeq	r0, r0, r4, lsl r2
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000000 	andeq	r0, r0, r0
  10:	0001630c 	andeq	r6, r1, ip, lsl #6
  14:	0000c200 	andeq	ip, r0, r0, lsl #4
	...
  24:	08010200 	stmdaeq	r1, {r9}
  28:	00000109 	andeq	r0, r0, r9, lsl #2
  2c:	0000f103 	andeq	pc, r0, r3, lsl #2
  30:	75020200 	strvc	r0, [r2, #-512]	; 0xfffffe00
  34:	0000004d 	andeq	r0, r0, sp, asr #32
  38:	02007804 	andeq	r7, r0, #4, 16	; 0x40000
  3c:	00002576 	andeq	r2, r0, r6, ror r5
  40:	79040000 	stmdbvc	r4, {}	; <UNPREDICTABLE>
  44:	25770200 	ldrbcs	r0, [r7, #-512]!	; 0xfffffe00
  48:	01000000 	mrseq	r0, (UNDEF: 0)
  4c:	019e0500 	orrseq	r0, lr, r0, lsl #10
  50:	78020000 	stmdavc	r2, {}	; <UNPREDICTABLE>
  54:	0000002c 	andeq	r0, r0, ip, lsr #32
  58:	00012603 	andeq	r2, r1, r3, lsl #12
  5c:	7c023400 	cfstrsvc	mvf3, [r2], {-0}
  60:	00000094 	muleq	r0, r4, r0
  64:	00014706 	andeq	r4, r1, r6, lsl #14
  68:	947d0200 	ldrbtls	r0, [sp], #-512	; 0xfffffe00
  6c:	00000000 	andeq	r0, r0, r0
  70:	0000fd06 	andeq	pc, r0, r6, lsl #26
  74:	947e0200 	ldrbtls	r0, [lr], #-512	; 0xfffffe00
  78:	04000000 	streq	r0, [r0], #-0
  7c:	00010306 	andeq	r0, r1, r6, lsl #6
  80:	947f0200 	ldrbtls	r0, [pc], #-512	; 88 <startup-0x1fffff78>
  84:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  88:	00787004 	rsbseq	r7, r8, r4
  8c:	009b8002 	addseq	r8, fp, r2
  90:	000c0000 	andeq	r0, ip, r0
  94:	69050407 	stmdbvs	r5, {r0, r1, r2, sl}
  98:	0800746e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
  9c:	0000004d 	andeq	r0, r0, sp, asr #32
  a0:	000000ab 	andeq	r0, r0, fp, lsr #1
  a4:	0000ab09 	andeq	sl, r0, r9, lsl #22
  a8:	02001300 	andeq	r1, r0, #0, 6
  ac:	00980704 	addseq	r0, r8, r4, lsl #14
  b0:	18050000 	stmdane	r5, {}	; <UNPREDICTABLE>
  b4:	02000001 	andeq	r0, r0, #1
  b8:	00005881 	andeq	r5, r0, r1, lsl #17
  bc:	01170500 	tsteq	r7, r0, lsl #10
  c0:	81020000 	mrshi	r0, (UNDEF: 2)
  c4:	000000c8 	andeq	r0, r0, r8, asr #1
  c8:	0058040a 	subseq	r0, r8, sl, lsl #8
  cc:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
  d0:	24000001 	strcs	r0, [r0], #-1
  d4:	01478302 	cmpeq	r7, r2, lsl #6
  d8:	67040000 	strvs	r0, [r4, -r0]
  dc:	02006f65 	andeq	r6, r0, #404	; 0x194
  e0:	0000bd84 	andeq	fp, r0, r4, lsl #27
  e4:	f8060000 			; <UNDEFINED> instruction: 0xf8060000
  e8:	02000000 	andeq	r0, r0, #0
  ec:	00009485 	andeq	r9, r0, r5, lsl #9
  f0:	42060400 	andmi	r0, r6, #0, 8
  f4:	02000001 	andeq	r0, r0, #1
  f8:	00009485 	andeq	r9, r0, r5, lsl #9
  fc:	a4060800 	strge	r0, [r6], #-2048	; 0xfffff800
 100:	02000001 	andeq	r0, r0, #1
 104:	00009486 	andeq	r9, r0, r6, lsl #9
 108:	21060c00 	tstcs	r6, r0, lsl #24
 10c:	02000001 	andeq	r0, r0, #1
 110:	00009486 	andeq	r9, r0, r6, lsl #9
 114:	a5061000 	strge	r1, [r6, #-0]
 118:	02000000 	andeq	r0, r0, #0
 11c:	00015887 	andeq	r5, r1, r7, lsl #17
 120:	4a061400 	bmi	185128 <startup-0x1fe7aed8>
 124:	02000002 	andeq	r0, r0, #2
 128:	00015888 	andeq	r5, r1, r8, lsl #17
 12c:	99061800 	stmdbls	r6, {fp, ip}
 130:	02000001 	andeq	r0, r0, #1
 134:	00015889 	andeq	r5, r1, r9, lsl #17
 138:	aa061c00 	bge	187140 <startup-0x1fe78ec0>
 13c:	02000000 	andeq	r0, r0, #0
 140:	0001738a 	andeq	r7, r1, sl, lsl #7
 144:	0b002000 	bleq	814c <startup-0x1fff7eb4>
 148:	00000152 	andeq	r0, r0, r2, asr r1
 14c:	0001520c 	andeq	r5, r1, ip, lsl #4
 150:	040a0000 	streq	r0, [sl], #-0
 154:	000000ce 	andeq	r0, r0, lr, asr #1
 158:	0147040a 	cmpeq	r7, sl, lsl #8
 15c:	730b0000 	movwvc	r0, #45056	; 0xb000
 160:	0c000001 	stceq	0, cr0, [r0], {1}
 164:	00000152 	andeq	r0, r0, r2, asr r1
 168:	0000940c 	andeq	r9, r0, ip, lsl #8
 16c:	00940c00 	addseq	r0, r4, r0, lsl #24
 170:	0a000000 	beq	178 <startup-0x1ffffe88>
 174:	00015e04 	andeq	r5, r1, r4, lsl #28
 178:	01570500 	cmpeq	r7, r0, lsl #10
 17c:	8b020000 	blhi	80184 <startup-0x1ff7fe7c>
 180:	000000ce 	andeq	r0, r0, lr, asr #1
 184:	00015605 	andeq	r5, r1, r5, lsl #12
 188:	528b0200 	addpl	r0, fp, #0, 4
 18c:	0d000001 	stceq	0, cr0, [r0, #-4]
 190:	000000b4 	strheq	r0, [r0], -r4
 194:	00b21301 	adcseq	r1, r2, r1, lsl #6
 198:	03050000 	movweq	r0, #20480	; 0x5000
 19c:	200008c0 	andcs	r0, r0, r0, asr #17
 1a0:	00015e0e 	andeq	r5, r1, lr, lsl #28
 1a4:	791a0100 	ldmdbvc	sl, {r8}
 1a8:	05000001 	streq	r0, [r0, #-1]
 1ac:	0008f403 	andeq	pc, r8, r3, lsl #8
 1b0:	01510f20 	cmpeq	r1, r0, lsr #30
 1b4:	25010000 	strcs	r0, [r1, #-0]
 1b8:	00000094 	muleq	r0, r4, r0
 1bc:	20000010 	andcs	r0, r0, r0, lsl r0
 1c0:	00000030 	andeq	r0, r0, r0, lsr r0
 1c4:	01f39c01 	mvnseq	r9, r1, lsl #24
 1c8:	3d100000 	ldccc	0, cr0, [r0, #-0]
 1cc:	01000001 	tsteq	r0, r1
 1d0:	00009425 	andeq	r9, r0, r5, lsr #8
 1d4:	6c910200 	lfmvs	f0, 4, [r1], {0}
 1d8:	00013010 	andeq	r3, r1, r0, lsl r0
 1dc:	f3250100 	vrhadd.u32	d0, d5, d0
 1e0:	02000001 	andeq	r0, r0, #1
 1e4:	70116891 	mulsvc	r1, r1, r8
 1e8:	84270100 	strthi	r0, [r7], #-256	; 0xffffff00
 1ec:	02000001 	andeq	r0, r0, #1
 1f0:	0a007491 	beq	1d43c <startup-0x1ffe2bc4>
 1f4:	0001f904 	andeq	pc, r1, r4, lsl #18
 1f8:	ff040a00 			; <UNDEFINED> instruction: 0xff040a00
 1fc:	02000001 	andeq	r0, r0, #1
 200:	01120801 	tsteq	r2, r1, lsl #16
 204:	35120000 	ldrcc	r0, [r2, #-0]
 208:	01000001 	tsteq	r0, r1
 20c:	00000009 	andeq	r0, r0, r9
 210:	00000c20 	andeq	r0, r0, r0, lsr #24
 214:	009c0100 	addseq	r0, ip, r0, lsl #2
 218:	00000274 	andeq	r0, r0, r4, ror r2
 21c:	01010004 	tsteq	r1, r4
 220:	01040000 	mrseq	r0, (UNDEF: 4)
 224:	00000000 	andeq	r0, r0, r0
 228:	0001c00c 	andeq	ip, r1, ip
 22c:	0000c200 	andeq	ip, r0, r0, lsl #4
 230:	00004000 	andeq	r4, r0, r0
 234:	00052020 	andeq	r2, r5, r0, lsr #32
 238:	00008b00 	andeq	r8, r0, r0, lsl #22
 23c:	02650200 	rsbeq	r0, r5, #0, 4
 240:	3e020000 	cdpcc	0, 0, cr0, cr2, cr0, {0}
 244:	00000030 	andeq	r0, r0, r0, lsr r0
 248:	09080103 	stmdbeq	r8, {r0, r1, r8}
 24c:	04000001 	streq	r0, [r0], #-1
 250:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 254:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
 258:	00009807 	andeq	r9, r0, r7, lsl #16
 25c:	026d0500 	rsbeq	r0, sp, #0, 10
 260:	81010000 	mrshi	r0, (UNDEF: 1)
 264:	200003ec 	andcs	r0, r0, ip, ror #7
 268:	00000174 	andeq	r0, r0, r4, ror r1
 26c:	00b79c01 	adcseq	r9, r7, r1, lsl #24
 270:	78060000 	stmdavc	r6, {}	; <UNPREDICTABLE>
 274:	3e810100 	rmfccs	f0, f1, f0
 278:	02000000 	andeq	r0, r0, #0
 27c:	79065c91 	stmdbvc	r6, {r0, r4, r7, sl, fp, ip, lr}
 280:	3e810100 	rmfccs	f0, f1, f0
 284:	02000000 	andeq	r0, r0, #0
 288:	73065891 	movwvc	r5, #26769	; 0x6891
 28c:	01007465 	tsteq	r0, r5, ror #8
 290:	00003e81 	andeq	r3, r0, r1, lsl #29
 294:	54910200 	ldrpl	r0, [r1], #512	; 0x200
 298:	00027307 	andeq	r7, r2, r7, lsl #6
 29c:	25820100 	strcs	r0, [r2, #256]	; 0x100
 2a0:	02000000 	andeq	r0, r0, #0
 2a4:	63086f91 	movwvs	r6, #36753	; 0x8f91
 2a8:	25820100 	strcs	r0, [r2, #256]	; 0x100
 2ac:	02000000 	andeq	r0, r0, #0
 2b0:	01076791 			; <UNDEFINED> instruction: 0x01076791
 2b4:	01000002 	tsteq	r0, r2
 2b8:	00002582 	andeq	r2, r0, r2, lsl #11
 2bc:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
 2c0:	00027807 	andeq	r7, r2, r7, lsl #16
 2c4:	37830100 	strcc	r0, [r3, r0, lsl #2]
 2c8:	02000000 	andeq	r0, r0, #0
 2cc:	05006891 	streq	r6, [r0, #-2193]	; 0xfffff76f
 2d0:	000002a4 	andeq	r0, r0, r4, lsr #5
 2d4:	03947801 	orrseq	r7, r4, #65536	; 0x10000
 2d8:	00582000 	subseq	r2, r8, r0
 2dc:	9c010000 	stcls	0, cr0, [r1], {-0}
 2e0:	000000fd 	strdeq	r0, [r0], -sp
 2e4:	00039a09 	andeq	r9, r3, r9, lsl #20
 2e8:	00004a20 	andeq	r4, r0, r0, lsr #20
 2ec:	01ae0700 			; <UNDEFINED> instruction: 0x01ae0700
 2f0:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
 2f4:	00000037 	andeq	r0, r0, r7, lsr r0
 2f8:	09749102 	ldmdbeq	r4!, {r1, r8, ip, pc}^
 2fc:	200003be 			; <UNDEFINED> instruction: 0x200003be
 300:	0000001a 	andeq	r0, r0, sl, lsl r0
 304:	0001b307 	andeq	fp, r1, r7, lsl #6
 308:	377c0100 	ldrbcc	r0, [ip, -r0, lsl #2]!
 30c:	02000000 	andeq	r0, r0, #0
 310:	00007091 	muleq	r0, r1, r0
 314:	022c0a00 	eoreq	r0, ip, #0, 20
 318:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
 31c:	20000330 	andcs	r0, r0, r0, lsr r3
 320:	00000064 	andeq	r0, r0, r4, rrx
 324:	0c0b9c01 	stceq	12, cr9, [fp], {1}
 328:	01000002 	tsteq	r0, r2
 32c:	00003062 	andeq	r3, r0, r2, rrx
 330:	00030600 	andeq	r0, r3, r0, lsl #12
 334:	00002a20 	andeq	r2, r0, r0, lsr #20
 338:	369c0100 	ldrcc	r0, [ip], r0, lsl #2
 33c:	0c000001 	stceq	0, cr0, [r0], {1}
 340:	00000201 	andeq	r0, r0, r1, lsl #4
 344:	00306201 	eorseq	r6, r0, r1, lsl #4
 348:	91020000 	mrsls	r0, (UNDEF: 2)
 34c:	7e050077 	mcrvc	0, 0, r0, cr5, cr7, {3}
 350:	01000002 	tsteq	r0, r2
 354:	0002c05a 	andeq	ip, r2, sl, asr r0
 358:	00004620 	andeq	r4, r0, r0, lsr #12
 35c:	689c0100 	ldmvs	ip, {r8}
 360:	0c000001 	stceq	0, cr0, [r0], {1}
 364:	00000219 	andeq	r0, r0, r9, lsl r2
 368:	00255a01 	eoreq	r5, r5, r1, lsl #20
 36c:	91020000 	mrsls	r0, (UNDEF: 2)
 370:	02010c77 	andeq	r0, r1, #30464	; 0x7700
 374:	5a010000 	bpl	4037c <startup-0x1ffbfc84>
 378:	00000025 	andeq	r0, r0, r5, lsr #32
 37c:	00769102 	rsbseq	r9, r6, r2, lsl #2
 380:	0002c605 	andeq	ip, r2, r5, lsl #12
 384:	80530100 	subshi	r0, r3, r0, lsl #2
 388:	40200002 	eormi	r0, r0, r2
 38c:	01000000 	mrseq	r0, (UNDEF: 0)
 390:	00019a9c 	muleq	r1, ip, sl
 394:	02d40c00 	sbcseq	r0, r4, #0, 24
 398:	53010000 	movwpl	r0, #4096	; 0x1000
 39c:	00000025 	andeq	r0, r0, r5, lsr #32
 3a0:	0c779102 	ldfeqp	f1, [r7], #-8
 3a4:	00000201 	andeq	r0, r0, r1, lsl #4
 3a8:	00255301 	eoreq	r5, r5, r1, lsl #6
 3ac:	91020000 	mrsls	r0, (UNDEF: 2)
 3b0:	1e050076 	mcrne	0, 0, r0, cr5, cr6, {3}
 3b4:	01000002 	tsteq	r0, r2
 3b8:	0002003f 	andeq	r0, r2, pc, lsr r0
 3bc:	00008020 	andeq	r8, r0, r0, lsr #32
 3c0:	cc9c0100 	ldfgts	f0, [ip], {0}
 3c4:	0c000001 	stceq	0, cr0, [r0], {1}
 3c8:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
 3cc:	00303f01 	eorseq	r3, r0, r1, lsl #30
 3d0:	91020000 	mrsls	r0, (UNDEF: 2)
 3d4:	02010c77 	andeq	r0, r1, #30464	; 0x7700
 3d8:	3f010000 	svccc	0x00010000
 3dc:	00000030 	andeq	r0, r0, r0, lsr r0
 3e0:	00769102 	rsbseq	r9, r6, r2, lsl #2
 3e4:	0002b90b 	andeq	fp, r2, fp, lsl #18
 3e8:	30290100 	eorcc	r0, r9, r0, lsl #2
 3ec:	74000000 	strvc	r0, [r0], #-0
 3f0:	8c200001 	stchi	0, cr0, [r0], #-4
 3f4:	01000000 	mrseq	r0, (UNDEF: 0)
 3f8:	0002029c 	muleq	r2, ip, r2
 3fc:	02010c00 	andeq	r0, r1, #0, 24
 400:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
 404:	00000030 	andeq	r0, r0, r0, lsr r0
 408:	076f9102 	strbeq	r9, [pc, -r2, lsl #2]!
 40c:	00000214 	andeq	r0, r0, r4, lsl r2
 410:	00302a01 	eorseq	r2, r0, r1, lsl #20
 414:	91020000 	mrsls	r0, (UNDEF: 2)
 418:	910d0077 	tstls	sp, r7, ror r0
 41c:	01000002 	tsteq	r0, r2
 420:	00010e19 	andeq	r0, r1, r9, lsl lr
 424:	00006620 	andeq	r6, r0, r0, lsr #12
 428:	0e9c0100 	fmleqe	f0, f4, f0
 42c:	000001fa 	strdeq	r0, [r0], -sl
 430:	00b41001 	adcseq	r1, r4, r1
 434:	005a2000 	subseq	r2, sl, r0
 438:	9c010000 	stcls	0, cr0, [r1], {-0}
 43c:	00000237 	andeq	r0, r0, r7, lsr r2
 440:	0002010c 	andeq	r0, r2, ip, lsl #2
 444:	25100100 	ldrcs	r0, [r0, #-256]	; 0xffffff00
 448:	02000000 	andeq	r0, r0, #0
 44c:	0f007791 	svceq	0x00007791
 450:	00000239 	andeq	r0, r0, r9, lsr r2
 454:	00780c01 	rsbseq	r0, r8, r1, lsl #24
 458:	003c2000 	eorseq	r2, ip, r0
 45c:	9c010000 	stcls	0, cr0, [r1], {-0}
 460:	00000259 	andeq	r0, r0, r9, asr r2
 464:	01007806 	tsteq	r0, r6, lsl #16
 468:	0000250c 	andeq	r2, r0, ip, lsl #10
 46c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 470:	02501000 	subseq	r1, r0, #0
 474:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
 478:	20000040 	andcs	r0, r0, r0, asr #32
 47c:	00000038 	andeq	r0, r0, r8, lsr r0
 480:	78069c01 	stmdavc	r6, {r0, sl, fp, ip, pc}
 484:	25080100 	strcs	r0, [r8, #-256]	; 0xffffff00
 488:	02000000 	andeq	r0, r0, #0
 48c:	00007791 	muleq	r0, r1, r7
 490:	00000242 	andeq	r0, r0, r2, asr #4
 494:	022b0004 	eoreq	r0, fp, #4
 498:	01040000 	mrseq	r0, (UNDEF: 4)
 49c:	00000000 	andeq	r0, r0, r0
 4a0:	0002f40c 	andeq	pc, r2, ip, lsl #8
 4a4:	0000c200 	andeq	ip, r0, r0, lsl #4
 4a8:	00056000 	andeq	r6, r5, r0
 4ac:	00018c20 	andeq	r8, r1, r0, lsr #24
 4b0:	0001b700 	andeq	fp, r1, r0, lsl #14
 4b4:	08010200 	stmdaeq	r1, {r9}
 4b8:	00000109 	andeq	r0, r0, r9, lsl #2
 4bc:	0000f103 	andeq	pc, r0, r3, lsl #2
 4c0:	75020200 	strvc	r0, [r2, #-512]	; 0xfffffe00
 4c4:	0000004d 	andeq	r0, r0, sp, asr #32
 4c8:	02007804 	andeq	r7, r0, #4, 16	; 0x40000
 4cc:	00002576 	andeq	r2, r0, r6, ror r5
 4d0:	79040000 	stmdbvc	r4, {}	; <UNPREDICTABLE>
 4d4:	25770200 	ldrbcs	r0, [r7, #-512]!	; 0xfffffe00
 4d8:	01000000 	mrseq	r0, (UNDEF: 0)
 4dc:	019e0500 	orrseq	r0, lr, r0, lsl #10
 4e0:	78020000 	stmdavc	r2, {}	; <UNPREDICTABLE>
 4e4:	0000002c 	andeq	r0, r0, ip, lsr #32
 4e8:	00012603 	andeq	r2, r1, r3, lsl #12
 4ec:	7c023400 	cfstrsvc	mvf3, [r2], {-0}
 4f0:	00000094 	muleq	r0, r4, r0
 4f4:	00014706 	andeq	r4, r1, r6, lsl #14
 4f8:	947d0200 	ldrbtls	r0, [sp], #-512	; 0xfffffe00
 4fc:	00000000 	andeq	r0, r0, r0
 500:	0000fd06 	andeq	pc, r0, r6, lsl #26
 504:	947e0200 	ldrbtls	r0, [lr], #-512	; 0xfffffe00
 508:	04000000 	streq	r0, [r0], #-0
 50c:	00010306 	andeq	r0, r1, r6, lsl #6
 510:	947f0200 	ldrbtls	r0, [pc], #-512	; 518 <startup-0x1ffffae8>
 514:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 518:	00787004 	rsbseq	r7, r8, r4
 51c:	009b8002 	addseq	r8, fp, r2
 520:	000c0000 	andeq	r0, ip, r0
 524:	69050407 	stmdbvs	r5, {r0, r1, r2, sl}
 528:	0800746e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 52c:	0000004d 	andeq	r0, r0, sp, asr #32
 530:	000000ab 	andeq	r0, r0, fp, lsr #1
 534:	0000ab09 	andeq	sl, r0, r9, lsl #22
 538:	02001300 	andeq	r1, r0, #0, 6
 53c:	00980704 	addseq	r0, r8, r4, lsl #14
 540:	17050000 	strne	r0, [r5, -r0]
 544:	02000001 	andeq	r0, r0, #1
 548:	0000bd81 	andeq	fp, r0, r1, lsl #27
 54c:	58040a00 	stmdapl	r4, {r9, fp}
 550:	03000000 	movweq	r0, #0
 554:	000001a9 	andeq	r0, r0, r9, lsr #3
 558:	3c830224 	sfmcc	f0, 4, [r3], {36}	; 0x24
 55c:	04000001 	streq	r0, [r0], #-1
 560:	006f6567 	rsbeq	r6, pc, r7, ror #10
 564:	00b28402 	adcseq	r8, r2, r2, lsl #8
 568:	06000000 	streq	r0, [r0], -r0
 56c:	000000f8 	strdeq	r0, [r0], -r8
 570:	00948502 	addseq	r8, r4, r2, lsl #10
 574:	06040000 	streq	r0, [r4], -r0
 578:	00000142 	andeq	r0, r0, r2, asr #2
 57c:	00948502 	addseq	r8, r4, r2, lsl #10
 580:	06080000 	streq	r0, [r8], -r0
 584:	000001a4 	andeq	r0, r0, r4, lsr #3
 588:	00948602 	addseq	r8, r4, r2, lsl #12
 58c:	060c0000 	streq	r0, [ip], -r0
 590:	00000121 	andeq	r0, r0, r1, lsr #2
 594:	00948602 	addseq	r8, r4, r2, lsl #12
 598:	06100000 	ldreq	r0, [r0], -r0
 59c:	000000a5 	andeq	r0, r0, r5, lsr #1
 5a0:	014d8702 	cmpeq	sp, r2, lsl #14
 5a4:	06140000 	ldreq	r0, [r4], -r0
 5a8:	0000024a 	andeq	r0, r0, sl, asr #4
 5ac:	014d8802 	cmpeq	sp, r2, lsl #16
 5b0:	06180000 	ldreq	r0, [r8], -r0
 5b4:	00000199 	muleq	r0, r9, r1
 5b8:	014d8902 	cmpeq	sp, r2, lsl #18
 5bc:	061c0000 	ldreq	r0, [ip], -r0
 5c0:	000000aa 	andeq	r0, r0, sl, lsr #1
 5c4:	01688a02 	cmneq	r8, r2, lsl #20
 5c8:	00200000 	eoreq	r0, r0, r0
 5cc:	0001470b 	andeq	r4, r1, fp, lsl #14
 5d0:	01470c00 	cmpeq	r7, r0, lsl #24
 5d4:	0a000000 	beq	5dc <startup-0x1ffffa24>
 5d8:	0000c304 	andeq	ip, r0, r4, lsl #6
 5dc:	3c040a00 			; <UNDEFINED> instruction: 0x3c040a00
 5e0:	0b000001 	bleq	5ec <startup-0x1ffffa14>
 5e4:	00000168 	andeq	r0, r0, r8, ror #2
 5e8:	0001470c 	andeq	r4, r1, ip, lsl #14
 5ec:	00940c00 	addseq	r0, r4, r0, lsl #24
 5f0:	940c0000 	strls	r0, [ip], #-0
 5f4:	00000000 	andeq	r0, r0, r0
 5f8:	0153040a 	cmpeq	r3, sl, lsl #8
 5fc:	56050000 	strpl	r0, [r5], -r0
 600:	02000001 	andeq	r0, r0, #1
 604:	0001478b 	andeq	r4, r1, fp, lsl #15
 608:	034d0d00 	movteq	r0, #56576	; 0xdd00
 60c:	15010000 	strne	r0, [r1, #-0]
 610:	2000063c 	andcs	r0, r0, ip, lsr r6
 614:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 618:	019b9c01 	orrseq	r9, fp, r1, lsl #24
 61c:	6f0e0000 	svcvs	0x000e0000
 620:	6e150100 	mufvss	f0, f5, f0
 624:	02000001 	andeq	r0, r0, #1
 628:	0d006c91 	stceq	12, cr6, [r0, #-580]	; 0xfffffdbc
 62c:	00000340 	andeq	r0, r0, r0, asr #6
 630:	05de0f01 	ldrbeq	r0, [lr, #3841]	; 0xf01
 634:	005e2000 	subseq	r2, lr, r0
 638:	9c010000 	stcls	0, cr0, [r1], {-0}
 63c:	000001d3 	ldrdeq	r0, [r0], -r3
 640:	01006f0e 	tsteq	r0, lr, lsl #30
 644:	00016e0f 	andeq	r6, r1, pc, lsl #28
 648:	6c910200 	lfmvs	f0, 4, [r1], {0}
 64c:	0005e60f 	andeq	lr, r5, pc, lsl #12
 650:	00004e20 	andeq	r4, r0, r0, lsr #28
 654:	00691000 	rsbeq	r1, r9, r0
 658:	00941001 	addseq	r1, r4, r1
 65c:	91020000 	mrsls	r0, (UNDEF: 2)
 660:	0d000074 	stceq	0, cr0, [r0, #-464]	; 0xfffffe30
 664:	00000334 	andeq	r0, r0, r4, lsr r3
 668:	05800901 	streq	r0, [r0, #2305]	; 0x901
 66c:	005e2000 	subseq	r2, lr, r0
 670:	9c010000 	stcls	0, cr0, [r1], {-0}
 674:	0000020b 	andeq	r0, r0, fp, lsl #4
 678:	01006f0e 	tsteq	r0, lr, lsl #30
 67c:	00016e09 	andeq	r6, r1, r9, lsl #28
 680:	6c910200 	lfmvs	f0, 4, [r1], {0}
 684:	0005880f 	andeq	r8, r5, pc, lsl #16
 688:	00004e20 	andeq	r4, r0, r0, lsr #28
 68c:	00691000 	rsbeq	r1, r9, r0
 690:	00940a01 	addseq	r0, r4, r1, lsl #20
 694:	91020000 	mrsls	r0, (UNDEF: 2)
 698:	11000074 	tstne	r0, r4, ror r0
 69c:	000002e3 	andeq	r0, r0, r3, ror #5
 6a0:	05600401 	strbeq	r0, [r0, #-1025]!	; 0xfffffbff
 6a4:	00202000 	eoreq	r2, r0, r0
 6a8:	9c010000 	stcls	0, cr0, [r1], {-0}
 6ac:	01006f0e 	tsteq	r0, lr, lsl #30
 6b0:	00016e04 	andeq	r6, r1, r4, lsl #28
 6b4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 6b8:	0002dc12 	andeq	sp, r2, r2, lsl ip
 6bc:	94040100 	strls	r0, [r4], #-256	; 0xffffff00
 6c0:	02000000 	andeq	r0, r0, #0
 6c4:	2d127091 	ldccs	0, cr7, [r2, #-580]	; 0xfffffdbc
 6c8:	01000003 	tsteq	r0, r3
 6cc:	00009404 	andeq	r9, r0, r4, lsl #8
 6d0:	6c910200 	lfmvs	f0, 4, [r1], {0}
 6d4:	009f0000 	addseq	r0, pc, r0
 6d8:	00040000 	andeq	r0, r4, r0
 6dc:	00000322 	andeq	r0, r0, r2, lsr #6
 6e0:	00000104 	andeq	r0, r0, r4, lsl #2
 6e4:	650c0000 	strvs	r0, [ip, #-0]
 6e8:	c2000003 	andgt	r0, r0, #3
 6ec:	ec000000 	stc	0, cr0, [r0], {-0}
 6f0:	bc200006 	stclt	0, cr0, [r0], #-24	; 0xffffffe8
 6f4:	65000000 	strvs	r0, [r0, #-0]
 6f8:	02000002 	andeq	r0, r0, #2
 6fc:	01090801 	tsteq	r9, r1, lsl #16
 700:	04030000 	streq	r0, [r3], #-0
 704:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 708:	07040200 	streq	r0, [r4, -r0, lsl #4]
 70c:	00000098 	muleq	r0, r8, r0
 710:	0003a904 	andeq	sl, r3, r4, lsl #18
 714:	96260100 	strtls	r0, [r6], -r0, lsl #2
 718:	12200007 	eorne	r0, r0, #7
 71c:	01000000 	mrseq	r0, (UNDEF: 0)
 720:	0359059c 	cmpeq	r9, #156, 10	; 0x27000000
 724:	1b010000 	blne	4072c <startup-0x1ffbf8d4>
 728:	2000075c 	andcs	r0, r0, ip, asr r7
 72c:	0000003a 	andeq	r0, r0, sl, lsr r0
 730:	006e9c01 	rsbeq	r9, lr, r1, lsl #24
 734:	6d060000 	stcvs	0, cr0, [r6, #-0]
 738:	1b010073 	blne	4090c <startup-0x1ffbf6f4>
 73c:	00000033 	andeq	r0, r0, r3, lsr r0
 740:	00749102 	rsbseq	r9, r4, r2, lsl #2
 744:	0003b505 	andeq	fp, r3, r5, lsl #10
 748:	30120100 	andscc	r0, r2, r0, lsl #2
 74c:	2c200007 	stccs	0, cr0, [r0], #-28	; 0xffffffe4
 750:	01000000 	mrseq	r0, (UNDEF: 0)
 754:	0000919c 	muleq	r0, ip, r1
 758:	73750600 	cmnvc	r5, #0, 12
 75c:	33120100 	tstcc	r2, #0, 2
 760:	02000000 	andeq	r0, r0, #0
 764:	07007491 			; <UNDEFINED> instruction: 0x07007491
 768:	0000039d 	muleq	r0, sp, r3
 76c:	06ec0801 	strbteq	r0, [ip], r1, lsl #16
 770:	00442000 	subeq	r2, r4, r0
 774:	9c010000 	stcls	0, cr0, [r1], {-0}
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	13030000 	movwne	r0, #12288	; 0x3000
  20:	0b0e0301 	bleq	380c2c <startup-0x1fc7f3d4>
  24:	3b0b3a0b 	blcc	2ce858 <startup-0x1fd317a8>
  28:	0013010b 	andseq	r0, r3, fp, lsl #2
  2c:	000d0400 	andeq	r0, sp, r0, lsl #8
  30:	0b3a0803 	bleq	e82044 <startup-0x1f17dfbc>
  34:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  38:	00000b38 	andeq	r0, r0, r8, lsr fp
  3c:	03001605 	movweq	r1, #1541	; 0x605
  40:	3b0b3a0e 	blcc	2ce880 <startup-0x1fd31780>
  44:	0013490b 	andseq	r4, r3, fp, lsl #18
  48:	000d0600 	andeq	r0, sp, r0, lsl #12
  4c:	0b3a0e03 	bleq	e83860 <startup-0x1f17c7a0>
  50:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  54:	00000b38 	andeq	r0, r0, r8, lsr fp
  58:	0b002407 	bleq	907c <startup-0x1fff6f84>
  5c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  60:	08000008 	stmdaeq	r0, {r3}
  64:	13490101 	movtne	r0, #37121	; 0x9101
  68:	00001301 	andeq	r1, r0, r1, lsl #6
  6c:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
  70:	000b2f13 	andeq	r2, fp, r3, lsl pc
  74:	000f0a00 	andeq	r0, pc, r0, lsl #20
  78:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  7c:	150b0000 	strne	r0, [fp, #-0]
  80:	01192701 	tsteq	r9, r1, lsl #14
  84:	0c000013 	stceq	0, cr0, [r0], {19}
  88:	13490005 	movtne	r0, #36869	; 0x9005
  8c:	340d0000 	strcc	r0, [sp], #-0
  90:	3a0e0300 	bcc	380c98 <startup-0x1fc7f368>
  94:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  98:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
  9c:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
  a0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  a4:	0b3b0b3a 	bleq	ec2d94 <startup-0x1f13d26c>
  a8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  ac:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
  b0:	03193f01 	tsteq	r9, #1, 30
  b4:	3b0b3a0e 	blcc	2ce8f4 <startup-0x1fd3170c>
  b8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
  bc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
  c0:	96184006 	ldrls	r4, [r8], -r6
  c4:	13011942 	movwne	r1, #6466	; 0x1942
  c8:	05100000 	ldreq	r0, [r0, #-0]
  cc:	3a0e0300 	bcc	380cd4 <startup-0x1fc7f32c>
  d0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  d4:	00180213 	andseq	r0, r8, r3, lsl r2
  d8:	00341100 	eorseq	r1, r4, r0, lsl #2
  dc:	0b3a0803 	bleq	e820f0 <startup-0x1f17df10>
  e0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  e4:	00001802 	andeq	r1, r0, r2, lsl #16
  e8:	3f002e12 	svccc	0x00002e12
  ec:	3a0e0319 	bcc	380d58 <startup-0x1fc7f2a8>
  f0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  f4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  f8:	97184006 	ldrls	r4, [r8, -r6]
  fc:	00001942 	andeq	r1, r0, r2, asr #18
 100:	01110100 	tsteq	r1, r0, lsl #2
 104:	0b130e25 	bleq	4c39a0 <startup-0x1fb3c660>
 108:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 10c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 110:	00001710 	andeq	r1, r0, r0, lsl r7
 114:	03001602 	movweq	r1, #1538	; 0x602
 118:	3b0b3a0e 	blcc	2ce958 <startup-0x1fd316a8>
 11c:	0013490b 	andseq	r4, r3, fp, lsl #18
 120:	00240300 	eoreq	r0, r4, r0, lsl #6
 124:	0b3e0b0b 	bleq	f82d58 <startup-0x1f07d2a8>
 128:	00000e03 	andeq	r0, r0, r3, lsl #28
 12c:	0b002404 	bleq	9144 <startup-0x1fff6ebc>
 130:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 134:	05000008 	streq	r0, [r0, #-8]
 138:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 13c:	0b3a0e03 	bleq	e83950 <startup-0x1f17c6b0>
 140:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 144:	06120111 			; <UNDEFINED> instruction: 0x06120111
 148:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 14c:	00130119 	andseq	r0, r3, r9, lsl r1
 150:	00050600 	andeq	r0, r5, r0, lsl #12
 154:	0b3a0803 	bleq	e82168 <startup-0x1f17de98>
 158:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 15c:	00001802 	andeq	r1, r0, r2, lsl #16
 160:	03003407 	movweq	r3, #1031	; 0x407
 164:	3b0b3a0e 	blcc	2ce9a4 <startup-0x1fd3165c>
 168:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 16c:	08000018 	stmdaeq	r0, {r3, r4}
 170:	08030034 	stmdaeq	r3, {r2, r4, r5}
 174:	0b3b0b3a 	bleq	ec2e64 <startup-0x1f13d19c>
 178:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 17c:	0b090000 	bleq	240184 <startup-0x1fdbfe7c>
 180:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 184:	0a000006 	beq	1a4 <startup-0x1ffffe5c>
 188:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 18c:	0b3a0e03 	bleq	e839a0 <startup-0x1f17c660>
 190:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 194:	06120111 			; <UNDEFINED> instruction: 0x06120111
 198:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 19c:	0b000019 	bleq	208 <startup-0x1ffffdf8>
 1a0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1a4:	0b3a0e03 	bleq	e839b8 <startup-0x1f17c648>
 1a8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1ac:	01111349 	tsteq	r1, r9, asr #6
 1b0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1b4:	01194296 			; <UNDEFINED> instruction: 0x01194296
 1b8:	0c000013 	stceq	0, cr0, [r0], {19}
 1bc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 1c0:	0b3b0b3a 	bleq	ec2eb0 <startup-0x1f13d150>
 1c4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1c8:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
 1cc:	3a0e0300 	bcc	380dd4 <startup-0x1fc7f22c>
 1d0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 1d4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 1d8:	96184006 	ldrls	r4, [r8], -r6
 1dc:	00001942 	andeq	r1, r0, r2, asr #18
 1e0:	03012e0e 	movweq	r2, #7694	; 0x1e0e
 1e4:	3b0b3a0e 	blcc	2cea24 <startup-0x1fd315dc>
 1e8:	1119270b 	tstne	r9, fp, lsl #14
 1ec:	40061201 	andmi	r1, r6, r1, lsl #4
 1f0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1f4:	00001301 	andeq	r1, r0, r1, lsl #6
 1f8:	3f012e0f 	svccc	0x00012e0f
 1fc:	3a0e0319 	bcc	380e68 <startup-0x1fc7f198>
 200:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 204:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 208:	97184006 	ldrls	r4, [r8, -r6]
 20c:	13011942 	movwne	r1, #6466	; 0x1942
 210:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 214:	03193f01 	tsteq	r9, #1, 30
 218:	3b0b3a0e 	blcc	2cea58 <startup-0x1fd315a8>
 21c:	1119270b 	tstne	r9, fp, lsl #14
 220:	40061201 	andmi	r1, r6, r1, lsl #4
 224:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 228:	01000000 	mrseq	r0, (UNDEF: 0)
 22c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 230:	0e030b13 	vmoveq.32	d3[0], r0
 234:	01110e1b 	tsteq	r1, fp, lsl lr
 238:	17100612 			; <UNDEFINED> instruction: 0x17100612
 23c:	24020000 	strcs	r0, [r2], #-0
 240:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 244:	000e030b 	andeq	r0, lr, fp, lsl #6
 248:	01130300 	tsteq	r3, r0, lsl #6
 24c:	0b0b0e03 	bleq	2c3a60 <startup-0x1fd3c5a0>
 250:	0b3b0b3a 	bleq	ec2f40 <startup-0x1f13d0c0>
 254:	00001301 	andeq	r1, r0, r1, lsl #6
 258:	03000d04 	movweq	r0, #3332	; 0xd04
 25c:	3b0b3a08 	blcc	2cea84 <startup-0x1fd3157c>
 260:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 264:	0500000b 	streq	r0, [r0, #-11]
 268:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 26c:	0b3b0b3a 	bleq	ec2f5c <startup-0x1f13d0a4>
 270:	00001349 	andeq	r1, r0, r9, asr #6
 274:	03000d06 	movweq	r0, #3334	; 0xd06
 278:	3b0b3a0e 	blcc	2ceab8 <startup-0x1fd31548>
 27c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 280:	0700000b 	streq	r0, [r0, -fp]
 284:	0b0b0024 	bleq	2c031c <startup-0x1fd3fce4>
 288:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 28c:	01080000 	mrseq	r0, (UNDEF: 8)
 290:	01134901 	tsteq	r3, r1, lsl #18
 294:	09000013 	stmdbeq	r0, {r0, r1, r4}
 298:	13490021 	movtne	r0, #36897	; 0x9021
 29c:	00000b2f 	andeq	r0, r0, pc, lsr #22
 2a0:	0b000f0a 	bleq	3ed0 <startup-0x1fffc130>
 2a4:	0013490b 	andseq	r4, r3, fp, lsl #18
 2a8:	01150b00 	tsteq	r5, r0, lsl #22
 2ac:	13011927 	movwne	r1, #6439	; 0x1927
 2b0:	050c0000 	streq	r0, [ip, #-0]
 2b4:	00134900 	andseq	r4, r3, r0, lsl #18
 2b8:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
 2bc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2c0:	0b3b0b3a 	bleq	ec2fb0 <startup-0x1f13d050>
 2c4:	01111927 	tsteq	r1, r7, lsr #18
 2c8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2cc:	01194296 			; <UNDEFINED> instruction: 0x01194296
 2d0:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 2d4:	08030005 	stmdaeq	r3, {r0, r2}
 2d8:	0b3b0b3a 	bleq	ec2fc8 <startup-0x1f13d038>
 2dc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 2e0:	0b0f0000 	bleq	3c02e8 <startup-0x1fc3fd18>
 2e4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 2e8:	10000006 	andne	r0, r0, r6
 2ec:	08030034 	stmdaeq	r3, {r2, r4, r5}
 2f0:	0b3b0b3a 	bleq	ec2fe0 <startup-0x1f13d020>
 2f4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 2f8:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 2fc:	03193f01 	tsteq	r9, #1, 30
 300:	3b0b3a0e 	blcc	2ceb40 <startup-0x1fd314c0>
 304:	1119270b 	tstne	r9, fp, lsl #14
 308:	40061201 	andmi	r1, r6, r1, lsl #4
 30c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 310:	05120000 	ldreq	r0, [r2, #-0]
 314:	3a0e0300 	bcc	380f1c <startup-0x1fc7f0e4>
 318:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 31c:	00180213 	andseq	r0, r8, r3, lsl r2
 320:	11010000 	mrsne	r0, (UNDEF: 1)
 324:	130e2501 	movwne	r2, #58625	; 0xe501
 328:	1b0e030b 	blne	380f5c <startup-0x1fc7f0a4>
 32c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 330:	00171006 	andseq	r1, r7, r6
 334:	00240200 	eoreq	r0, r4, r0, lsl #4
 338:	0b3e0b0b 	bleq	f82f6c <startup-0x1f07d094>
 33c:	00000e03 	andeq	r0, r0, r3, lsl #28
 340:	0b002403 	bleq	9354 <startup-0x1fff6cac>
 344:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 348:	04000008 	streq	r0, [r0], #-8
 34c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 350:	0b3a0e03 	bleq	e83b64 <startup-0x1f17c49c>
 354:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 358:	06120111 			; <UNDEFINED> instruction: 0x06120111
 35c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 360:	05000019 	streq	r0, [r0, #-25]	; 0xffffffe7
 364:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 368:	0b3a0e03 	bleq	e83b7c <startup-0x1f17c484>
 36c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 370:	06120111 			; <UNDEFINED> instruction: 0x06120111
 374:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 378:	00130119 	andseq	r0, r3, r9, lsl r1
 37c:	00050600 	andeq	r0, r5, r0, lsl #12
 380:	0b3a0803 	bleq	e82394 <startup-0x1f17dc6c>
 384:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 388:	00001802 	andeq	r1, r0, r2, lsl #16
 38c:	3f002e07 	svccc	0x00002e07
 390:	3a0e0319 	bcc	380ffc <startup-0x1fc7f004>
 394:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 398:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 39c:	97184006 	ldrls	r4, [r8, -r6]
 3a0:	00001942 	andeq	r1, r0, r2, asr #18
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000030 	andeq	r0, r0, r0, lsr r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	02180002 	andseq	r0, r8, #2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000040 	andcs	r0, r0, r0, asr #32
  3c:	00000520 	andeq	r0, r0, r0, lsr #10
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	04900002 	ldreq	r0, [r0], #2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000560 	andcs	r0, r0, r0, ror #10
  5c:	0000018c 	andeq	r0, r0, ip, lsl #3
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	06d60002 	ldrbeq	r0, [r6], r2
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	200006ec 	andcs	r0, r0, ip, ror #13
  7c:	000000bc 	strheq	r0, [r0], -ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000040 	andcs	r0, r0, r0, asr #32
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000087 	andeq	r0, r0, r7, lsl #1
   4:	00590002 	subseq	r0, r9, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	72646e41 	rsbvc	r6, r4, #1040	; 0x410
  28:	65442f65 	strbvs	r2, [r4, #-3941]	; 0xfffff09b
  2c:	6f746b73 	svcvs	0x00746b73
  30:	41442f70 	hvcmi	17136	; 0x42f0
  34:	30393354 	eorscc	r3, r9, r4, asr r3
  38:	62616c5f 	rsbvs	r6, r1, #24320	; 0x5f00
  3c:	34765f62 	ldrbtcc	r5, [r6], #-3938	; 0xfffff09e
  40:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0xfffffed1
  44:	6e6f706f 	cdpvs	0, 6, cr7, cr15, cr15, {3}
  48:	6d000067 	stcvs	0, cr0, [r0, #-412]	; 0xfffffe64
  4c:	2e6e6961 	vnmulcs.f16	s13, s28, s3	; <UNPREDICTABLE>
  50:	00010063 	andeq	r0, r1, r3, rrx
  54:	61747300 	cmnvs	r4, r0, lsl #6
  58:	70757472 	rsbsvc	r7, r5, r2, ror r4
  5c:	0100682e 	tsteq	r0, lr, lsr #16
  60:	00000000 	andeq	r0, r0, r0
  64:	00000205 	andeq	r0, r0, r5, lsl #4
  68:	09032000 	stmdbeq	r3, {sp}
  6c:	025e1301 	subseq	r1, lr, #67108864	; 0x4000000
  70:	01010003 	tsteq	r1, r3
  74:	10020500 	andne	r0, r2, r0, lsl #10
  78:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  7c:	2f590125 	svccs	0x00590125
  80:	04020034 	streq	r0, [r2], #-52	; 0xffffffcc
  84:	09026801 	stmdbeq	r2, {r0, fp, sp, lr}
  88:	28010100 	stmdacs	r1, {r8}
  8c:	02000001 	andeq	r0, r0, #1
  90:	00005d00 	andeq	r5, r0, r0, lsl #26
  94:	fb010200 	blx	4089e <startup-0x1ffbf762>
  98:	01000d0e 	tsteq	r0, lr, lsl #26
  9c:	00010101 	andeq	r0, r1, r1, lsl #2
  a0:	00010000 	andeq	r0, r1, r0
  a4:	3a430100 	bcc	10c04ac <startup-0x1ef3fb54>
  a8:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
  ac:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
  b0:	6572646e 	ldrbvs	r6, [r2, #-1134]!	; 0xfffffb92
  b4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
  b8:	706f746b 	rsbvc	r7, pc, fp, ror #8
  bc:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
  c0:	5f303933 	svcpl	0x00303933
  c4:	6262616c 	rsbvs	r6, r2, #108, 2
  c8:	2f34765f 	svccs	0x0034765f
  cc:	6f747561 	svcvs	0x00747561
  d0:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
  d4:	72670000 	rsbvc	r0, r7, #0
  d8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  dc:	632e7363 			; <UNDEFINED> instruction: 0x632e7363
  e0:	00000100 	andeq	r0, r0, r0, lsl #2
  e4:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  e8:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
  ec:	00010068 	andeq	r0, r1, r8, rrx
  f0:	05000000 	streq	r0, [r0, #-0]
  f4:	00004002 	andeq	r4, r0, r2
  f8:	e5671920 	strb	r1, [r7, #-2336]!	; 0xfffff6e0
  fc:	13086776 	movwne	r6, #34678	; 0x8776
 100:	037a6776 	cmneq	sl, #30932992	; 0x1d80000
 104:	1b50207a 	blne	14082f4 <startup-0x1ebf7d0c>
 108:	4c75754b 	cfldr64mi	mvdx7, [r5], #-300	; 0xfffffed4
 10c:	3d3d2f4c 	ldccc	15, cr2, [sp, #-304]!	; 0xfffffed0
 110:	212f3d3d 			; <UNDEFINED> instruction: 0x212f3d3d
 114:	2a3d2f3d 	bcs	f4be10 <startup-0x1f0b41f0>
 118:	bc3d3d6c 	ldclt	13, cr3, [sp], #-432	; 0xfffffe50
 11c:	3d3d3d68 	ldccc	13, cr3, [sp, #-416]!	; 0xfffffe60
 120:	593d2f59 	ldmdbpl	sp!, {r0, r3, r4, r6, r8, r9, sl, fp, sp}
 124:	3d4b3d3d 	stclcc	13, cr3, [fp, #-244]	; 0xffffff0c
 128:	303d4b30 	eorscc	r4, sp, r0, lsr fp
 12c:	4b91ca3d 	blmi	fe472a28 <ball+0xde472134>
 130:	2f3d2f59 	svccs	0x003d2f59
 134:	303d593d 	eorscc	r5, sp, sp, lsr r9
 138:	3d303d59 	ldccc	13, cr3, [r0, #-356]!	; 0xfffffe9c
 13c:	91763d3d 	cmnls	r6, sp, lsr sp
 140:	833d593d 	teqhi	sp, #999424	; 0xf4000
 144:	593d914c 	ldmdbpl	sp!, {r2, r3, r6, r8, ip, pc}
 148:	4c833d3d 	stcmi	13, cr3, [r3], {61}	; 0x3d
 14c:	4c675a67 			; <UNDEFINED> instruction: 0x4c675a67
 150:	3d3d3e2f 	ldccc	14, cr3, [sp, #-188]!	; 0xffffff44
 154:	4b3d3d3d 	blmi	f4f650 <startup-0x1f0b09b0>
 158:	4b4b4b4b 	blmi	12d2e8c <startup-0x1ed2d174>
 15c:	3d3d763d 	ldccc	6, cr7, [sp, #-244]!	; 0xffffff0c
 160:	02004bad 	andeq	r4, r0, #177152	; 0x2b400
 164:	003d0304 	eorseq	r0, sp, r4, lsl #6
 168:	49030402 	stmdbmi	r3, {r1, sl}
 16c:	01040200 	mrseq	r0, R12_usr
 170:	02003c06 	andeq	r3, r0, #1536	; 0x600
 174:	39060204 	stmdbcc	r6, {r2, r9}
 178:	01040200 	mrseq	r0, R12_usr
 17c:	42063c06 	andmi	r3, r6, #1536	; 0x600
 180:	0200694c 	andeq	r6, r0, #76, 18	; 0x130000
 184:	4a060104 	bmi	18059c <startup-0x1fe7fa64>
 188:	02040200 	andeq	r0, r4, #0, 4
 18c:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
 190:	4d064a03 	vstrmi	s8, [r6, #-12]
 194:	5959ad4c 	ldmdbpl	r9, {r2, r3, r6, r8, sl, fp, sp, pc}^
 198:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
 19c:	4b3d5b59 	blmi	f56f08 <startup-0x1f0a90f8>
 1a0:	4b4d4b3d 	blmi	1352e9c <startup-0x1ecad164>
 1a4:	91c9bb3e 	bicls	fp, r9, lr, lsr fp
 1a8:	92a03dae 	adcls	r3, r0, #11136	; 0x2b80
 1ac:	03ac5d03 			; <UNDEFINED> instruction: 0x03ac5d03
 1b0:	05022024 	streq	r2, [r2, #-36]	; 0xffffffdc
 1b4:	aa010100 	bge	405bc <startup-0x1ffbfa44>
 1b8:	02000000 	andeq	r0, r0, #0
 1bc:	00005c00 	andeq	r5, r0, r0, lsl #24
 1c0:	fb010200 	blx	409ca <startup-0x1ffbf636>
 1c4:	01000d0e 	tsteq	r0, lr, lsl #26
 1c8:	00010101 	andeq	r0, r1, r1, lsl #2
 1cc:	00010000 	andeq	r0, r1, r0
 1d0:	3a430100 	bcc	10c05d8 <startup-0x1ef3fa28>
 1d4:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 1d8:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
 1dc:	6572646e 	ldrbvs	r6, [r2, #-1134]!	; 0xfffffb92
 1e0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 1e4:	706f746b 	rsbvc	r7, pc, fp, ror #8
 1e8:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 1ec:	5f303933 	svcpl	0x00303933
 1f0:	6262616c 	rsbvs	r6, r2, #108, 2
 1f4:	2f34765f 	svccs	0x0034765f
 1f8:	6f747561 	svcvs	0x00747561
 1fc:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 200:	74730000 	ldrbtvc	r0, [r3], #-0
 204:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
 208:	00632e73 	rsbeq	r2, r3, r3, ror lr
 20c:	73000001 	movwvc	r0, #1
 210:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 214:	682e7075 	stmdavs	lr!, {r0, r2, r4, r5, r6, ip, sp, lr}
 218:	00000100 	andeq	r0, r0, r0, lsl #2
 21c:	02050000 	andeq	r0, r5, #0
 220:	20000560 	andcs	r0, r0, r0, ror #10
 224:	3d3d6715 	ldccc	7, cr6, [sp, #-84]!	; 0xffffffac
 228:	02004b4c 	andeq	r4, r0, #76, 22	; 0x13000
 22c:	003d0304 	eorseq	r0, sp, r4, lsl #6
 230:	08030402 	stmdaeq	r3, {r1, sl}
 234:	0402009d 	streq	r0, [r2], #-157	; 0xffffff63
 238:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 23c:	004b4c69 	subeq	r4, fp, r9, ror #24
 240:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 244:	03040200 	movweq	r0, #16896	; 0x4200
 248:	02009d08 	andeq	r9, r0, #8, 26	; 0x200
 24c:	3c060104 	stfccs	f0, [r6], {4}
 250:	4b4c6906 	blmi	131a670 <startup-0x1ece5990>
 254:	4ba04b5a 	blmi	fe812fc4 <ball+0xde8126d0>
 258:	4ba04ba0 	blmi	fe8130e0 <ball+0xde8127ec>
 25c:	597575a0 	ldmdbpl	r5!, {r5, r7, r8, sl, ip, sp, lr}^
 260:	01000402 	tsteq	r0, r2, lsl #8
 264:	00008201 	andeq	r8, r0, r1, lsl #4
 268:	4e000200 	cdpmi	2, 0, cr0, cr0, cr0, {0}
 26c:	02000000 	andeq	r0, r0, #0
 270:	0d0efb01 	vstreq	d15, [lr, #-4]
 274:	01010100 	mrseq	r0, (UNDEF: 17)
 278:	00000001 	andeq	r0, r0, r1
 27c:	01000001 	tsteq	r0, r1
 280:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff845 <ball+0xdfffef51>
 284:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 288:	646e412f 	strbtvs	r4, [lr], #-303	; 0xfffffed1
 28c:	442f6572 	strtmi	r6, [pc], #-1394	; 294 <startup-0x1ffffd6c>
 290:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 294:	442f706f 	strtmi	r7, [pc], #-111	; 29c <startup-0x1ffffd64>
 298:	39335441 	ldmdbcc	r3!, {r0, r6, sl, ip, lr}
 29c:	616c5f30 	cmnvs	ip, r0, lsr pc
 2a0:	765f6262 	ldrbvc	r6, [pc], -r2, ror #4
 2a4:	75612f34 	strbvc	r2, [r1, #-3892]!	; 0xfffff0cc
 2a8:	6f706f74 	svcvs	0x00706f74
 2ac:	0000676e 	andeq	r6, r0, lr, ror #14
 2b0:	616c6564 	cmnvs	ip, r4, ror #10
 2b4:	632e7379 			; <UNDEFINED> instruction: 0x632e7379
 2b8:	00000100 	andeq	r0, r0, r0, lsl #2
 2bc:	02050000 	andeq	r0, r5, #0
 2c0:	200006ec 	andcs	r0, r0, ip, ror #13
 2c4:	3d3d2f19 	ldccc	15, cr2, [sp, #-100]!	; 0xffffff9c
 2c8:	02003e3d 	andeq	r3, r0, #976	; 0x3d0
 2cc:	20060104 	andcs	r0, r6, r4, lsl #2
 2d0:	a03d6706 	eorsge	r6, sp, r6, lsl #14
 2d4:	2f2f214b 	svccs	0x002f214b
 2d8:	4c5e2a2f 	mrrcmi	10, 2, r2, lr, cr15
 2dc:	213f754d 	teqcs	pc, sp, asr #10
 2e0:	2f4c5a57 	svccs	0x004c5a57
 2e4:	03022f2f 	movweq	r2, #12079	; 0x2f2f
 2e8:	Address 0x000002e8 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	20554e47 	subscs	r4, r5, r7, asr #28
   4:	20393943 	eorscs	r3, r9, r3, asr #18
   8:	2e322e37 	mrccs	14, 1, r2, cr2, cr7, {1}
   c:	30322031 	eorscc	r2, r2, r1, lsr r0
  10:	39303731 	ldmdbcc	r0!, {r0, r4, r5, r8, r9, sl, ip, sp}
  14:	28203430 	stmdacs	r0!, {r4, r5, sl, ip, sp}
  18:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  1c:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  20:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
  24:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
  28:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
  2c:	372d6465 	strcc	r6, [sp, -r5, ror #8]!
  30:	6172622d 	cmnvs	r2, sp, lsr #4
  34:	2068636e 	rsbcs	r6, r8, lr, ror #6
  38:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  3c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  40:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
  44:	5d343032 	ldcpl	0, cr3, [r4, #-200]!	; 0xffffff38
  48:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  4c:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  50:	616d2d20 	cmnvs	sp, r0, lsr #26
  54:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  58:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  5c:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  60:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  64:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  68:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  6c:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  70:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  74:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  78:	616d2d20 	cmnvs	sp, r0, lsr #26
  7c:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  80:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  84:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  88:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
  8c:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
  90:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
  94:	00393963 	eorseq	r3, r9, r3, ror #18
  98:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  9c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  a0:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
  a4:	61726400 	cmnvs	r2, r0, lsl #8
  a8:	65730077 	ldrbvs	r0, [r3, #-119]!	; 0xffffff89
  ac:	70735f74 	rsbsvc	r5, r3, r4, ror pc
  b0:	00646565 	rsbeq	r6, r4, r5, ror #10
  b4:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
  b8:	6f65675f 	svcvs	0x0065675f
  bc:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
  c0:	3a430079 	bcc	10c02ac <startup-0x1ef3fd54>
  c4:	6573555c 	ldrbvs	r5, [r3, #-1372]!	; 0xfffffaa4
  c8:	415c7372 	cmpmi	ip, r2, ror r3
  cc:	6572646e 	ldrbvs	r6, [r2, #-1134]!	; 0xfffffb92
  d0:	7365445c 	cmnvc	r5, #92, 8	; 0x5c000000
  d4:	706f746b 	rsbvc	r7, pc, fp, ror #8
  d8:	5441445c 	strbpl	r4, [r1], #-1116	; 0xfffffba4
  dc:	5f303933 	svcpl	0x00303933
  e0:	6262616c 	rsbvs	r6, r2, #108, 2
  e4:	5c34765f 	ldcpl	6, cr7, [r4], #-380	; 0xfffffe84
  e8:	6f747561 	svcvs	0x00747561
  ec:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
  f0:	6f507400 	svcvs	0x00507400
  f4:	00746e69 	rsbseq	r6, r4, r9, ror #28
  f8:	78726964 	ldmdavc	r2!, {r2, r5, r6, r8, fp, sp, lr}^
  fc:	7a697300 	bvc	1a5cd04 <startup-0x1e5a32fc>
 100:	73007865 	movwvc	r7, #2149	; 0x865
 104:	79657a69 	stmdbvc	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 108:	736e7500 	cmnvc	lr, #0, 10
 10c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 110:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
 114:	50007261 	andpl	r7, r0, r1, ror #4
 118:	4d4f4547 	cfstr64mi	mvdx4, [pc, #-284]	; 4 <startup-0x1ffffffc>
 11c:	59525445 	ldmdbpl	r2, {r0, r2, r6, sl, ip, lr}^
 120:	736f7000 	cmnvc	pc, #0
 124:	47740079 			; <UNDEFINED> instruction: 0x47740079
 128:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 12c:	00797274 	rsbseq	r7, r9, r4, ror r2
 130:	76677261 	strbtvc	r7, [r7], -r1, ror #4
 134:	61747300 	cmnvs	r4, r0, lsl #6
 138:	70757472 	rsbsvc	r7, r5, r2, ror r4
 13c:	67726100 	ldrbvs	r6, [r2, -r0, lsl #2]!
 140:	69640063 	stmdbvs	r4!, {r0, r1, r5, r6}^
 144:	6e007972 			; <UNDEFINED> instruction: 0x6e007972
 148:	6f706d75 	svcvs	0x00706d75
 14c:	73746e69 	cmnvc	r4, #1680	; 0x690
 150:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 154:	4f50006e 	svcmi	0x0050006e
 158:	43454a42 	movtmi	r4, #23106	; 0x5a42
 15c:	61620054 	qdsubvs	r0, r4, r2
 160:	43006c6c 	movwmi	r6, #3180	; 0xc6c
 164:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 168:	2f737265 	svccs	0x00737265
 16c:	72646e41 	rsbvc	r6, r4, #1040	; 0x410
 170:	65442f65 	strbvs	r2, [r4, #-3941]	; 0xfffff09b
 174:	6f746b73 	svcvs	0x00746b73
 178:	41442f70 	hvcmi	17136	; 0x42f0
 17c:	30393354 	eorscc	r3, r9, r4, asr r3
 180:	62616c5f 	rsbvs	r6, r1, #24320	; 0x5f00
 184:	34765f62 	ldrbtcc	r5, [r6], #-3938	; 0xfffff09e
 188:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0xfffffed1
 18c:	6e6f706f 	cdpvs	0, 6, cr7, cr15, cr15, {3}
 190:	616d2f67 	cmnvs	sp, r7, ror #30
 194:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
 198:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 19c:	4f500065 	svcmi	0x00500065
 1a0:	00544e49 	subseq	r4, r4, r9, asr #28
 1a4:	78736f70 	ldmdavc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 1a8:	624f7400 	subvs	r7, pc, #0, 8
 1ac:	6170006a 	cmnvs	r0, sl, rrx
 1b0:	61006567 	tstvs	r0, r7, ror #10
 1b4:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 1b8:	61760073 	cmnvs	r6, r3, ror r0
 1bc:	0065756c 	rsbeq	r7, r5, ip, ror #10
 1c0:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff785 <ball+0xdfffee91>
 1c4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 1c8:	646e412f 	strbtvs	r4, [lr], #-303	; 0xfffffed1
 1cc:	442f6572 	strtmi	r6, [pc], #-1394	; 1d4 <startup-0x1ffffe2c>
 1d0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 1d4:	442f706f 	strtmi	r7, [pc], #-111	; 1dc <startup-0x1ffffe24>
 1d8:	39335441 	ldmdbcc	r3!, {r0, r6, sl, ip, lr}
 1dc:	616c5f30 	cmnvs	ip, r0, lsr pc
 1e0:	765f6262 	ldrbvc	r6, [pc], -r2, ror #4
 1e4:	75612f34 	strbvc	r2, [r1, #-3892]!	; 0xfffff0cc
 1e8:	6f706f74 	svcvs	0x00706f74
 1ec:	672f676e 	strvs	r6, [pc, -lr, ror #14]!
 1f0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 1f4:	2e736369 	cdpcs	3, 7, cr6, cr3, cr9, {3}
 1f8:	65730063 	ldrbvs	r0, [r3, #-99]!	; 0xffffff9d
 1fc:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
 200:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 204:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 3c <startup-0x1fffffc4>
 208:	0072656c 	rsbseq	r6, r2, ip, ror #10
 20c:	70617267 	rsbvc	r7, r1, r7, ror #4
 210:	5f636968 	svcpl	0x00636968
 214:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 218:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 21c:	72670061 	rsbvc	r0, r7, #97	; 0x61
 220:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 224:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 228:	00657469 	rsbeq	r7, r5, r9, ror #8
 22c:	70617267 	rsbvc	r7, r1, r7, ror #4
 230:	5f636968 	svcpl	0x00636968
 234:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 238:	61726700 	cmnvs	r2, r0, lsl #14
 23c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 240:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 244:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 248:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 24c:	00726165 	rsbseq	r6, r2, r5, ror #2
 250:	70617267 	rsbvc	r7, r1, r7, ror #4
 254:	5f636968 	svcpl	0x00636968
 258:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 25c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 260:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 264:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
 268:	745f3874 	ldrbvc	r3, [pc], #-2164	; 270 <startup-0x1ffffd90>
 26c:	78697000 	stmdavc	r9!, {ip, sp, lr}^
 270:	6d006c65 	stcvs	12, cr6, [r0, #-404]	; 0xfffffe6c
 274:	006b7361 	rsbeq	r7, fp, r1, ror #6
 278:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 27c:	72670078 	rsbvc	r0, r7, #120	; 0x78
 280:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 284:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 288:	5f657469 	svcpl	0x00657469
 28c:	61746164 	cmnvs	r4, r4, ror #2
 290:	61726700 	cmnvs	r2, r0, lsl #14
 294:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 298:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 29c:	65725f74 	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
 2a0:	00796461 	rsbseq	r6, r9, r1, ror #8
 2a4:	70617267 	rsbvc	r7, r1, r7, ror #4
 2a8:	5f636968 	svcpl	0x00636968
 2ac:	61656c63 	cmnvs	r5, r3, ror #24
 2b0:	63735f72 	cmnvs	r3, #456	; 0x1c8
 2b4:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 2b8:	61726700 	cmnvs	r2, r0, lsl #14
 2bc:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 2c0:	6165725f 	cmnvs	r5, pc, asr r2
 2c4:	72670064 	rsbvc	r0, r7, #100	; 0x64
 2c8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2cc:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 2d0:	5f657469 	svcpl	0x00657469
 2d4:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 2d8:	00646e61 	rsbeq	r6, r4, r1, ror #28
 2dc:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 2e0:	73007864 	movwvc	r7, #2148	; 0x864
 2e4:	6f5f7465 	svcvs	0x005f7465
 2e8:	63656a62 	cmnvs	r5, #401408	; 0x62000
 2ec:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 2f0:	00646565 	rsbeq	r6, r4, r5, ror #10
 2f4:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff8b9 <ball+0xdfffefc5>
 2f8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 2fc:	646e412f 	strbtvs	r4, [lr], #-303	; 0xfffffed1
 300:	442f6572 	strtmi	r6, [pc], #-1394	; 308 <startup-0x1ffffcf8>
 304:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 308:	442f706f 	strtmi	r7, [pc], #-111	; 310 <startup-0x1ffffcf0>
 30c:	39335441 	ldmdbcc	r3!, {r0, r6, sl, ip, lr}
 310:	616c5f30 	cmnvs	ip, r0, lsr pc
 314:	765f6262 	ldrbvc	r6, [pc], -r2, ror #4
 318:	75612f34 	strbvc	r2, [r1, #-3892]!	; 0xfffff0cc
 31c:	6f706f74 	svcvs	0x00706f74
 320:	732f676e 			; <UNDEFINED> instruction: 0x732f676e
 324:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
 328:	632e7374 			; <UNDEFINED> instruction: 0x632e7374
 32c:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 330:	00796465 	rsbseq	r6, r9, r5, ror #8
 334:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 338:	6a626f5f 	bvs	189c0bc <startup-0x1e763f44>
 33c:	00746365 	rsbseq	r6, r4, r5, ror #6
 340:	61656c63 	cmnvs	r5, r3, ror #24
 344:	626f5f72 	rsbvs	r5, pc, #456	; 0x1c8
 348:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 34c:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 350:	626f5f65 	rsbvs	r5, pc, #404	; 0x194
 354:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 358:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 35c:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 2a2 <startup-0x1ffffd5e>	; <UNPREDICTABLE>
 360:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
 364:	2f3a4300 	svccs	0x003a4300
 368:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 36c:	6e412f73 	mcrvs	15, 2, r2, cr1, cr3, {3}
 370:	2f657264 	svccs	0x00657264
 374:	6b736544 	blvs	1cd988c <startup-0x1e326774>
 378:	2f706f74 	svccs	0x00706f74
 37c:	33544144 	cmpcc	r4, #68, 2
 380:	6c5f3039 	mrrcvs	0, 3, r3, pc, cr9	; <UNPREDICTABLE>
 384:	5f626261 	svcpl	0x00626261
 388:	612f3476 			; <UNDEFINED> instruction: 0x612f3476
 38c:	706f7475 	rsbvc	r7, pc, r5, ror r4	; <UNPREDICTABLE>
 390:	2f676e6f 	svccs	0x00676e6f
 394:	616c6564 	cmnvs	ip, r4, ror #10
 398:	632e7379 			; <UNDEFINED> instruction: 0x632e7379
 39c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 3a0:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 3a4:	736e3035 	cmnvc	lr, #53	; 0x35
 3a8:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 3ac:	355f7961 	ldrbcc	r7, [pc, #-2401]	; fffffa53 <ball+0xdffff15f>
 3b0:	736e3030 	cmnvc	lr, #48	; 0x30
 3b4:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 3b8:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 2fe <startup-0x1ffffd02>	; <UNPREDICTABLE>
 3bc:	6f726369 	svcvs	0x00726369
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <ball+0xdfffea1a>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000030 	andeq	r0, r0, r0, lsr r0
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	180e4101 	stmdane	lr, {r0, r8, lr}
  3c:	00070d41 	andeq	r0, r7, r1, asr #26
  40:	0000000c 	andeq	r0, r0, ip
  44:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  48:	7c020001 	stcvc	0, cr0, [r2], {1}
  4c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  50:	0000001c 	andeq	r0, r0, ip, lsl r0
  54:	00000040 	andeq	r0, r0, r0, asr #32
  58:	20000040 	andcs	r0, r0, r0, asr #32
  5c:	00000038 	andeq	r0, r0, r8, lsr r0
  60:	40080e41 	andmi	r0, r8, r1, asr #28
  64:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  68:	100e4101 	andne	r4, lr, r1, lsl #2
  6c:	00070d41 	andeq	r0, r7, r1, asr #26
  70:	0000001c 	andeq	r0, r0, ip, lsl r0
  74:	00000040 	andeq	r0, r0, r0, asr #32
  78:	20000078 	andcs	r0, r0, r8, ror r0
  7c:	0000003c 	andeq	r0, r0, ip, lsr r0
  80:	40080e41 	andmi	r0, r8, r1, asr #28
  84:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  88:	100e4101 	andne	r4, lr, r1, lsl #2
  8c:	00070d41 	andeq	r0, r7, r1, asr #26
  90:	0000001c 	andeq	r0, r0, ip, lsl r0
  94:	00000040 	andeq	r0, r0, r0, asr #32
  98:	200000b4 	strhcs	r0, [r0], -r4
  9c:	0000005a 	andeq	r0, r0, sl, asr r0
  a0:	40080e41 	andmi	r0, r8, r1, asr #28
  a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a8:	100e4101 	andne	r4, lr, r1, lsl #2
  ac:	00070d41 	andeq	r0, r7, r1, asr #26
  b0:	00000018 	andeq	r0, r0, r8, lsl r0
  b4:	00000040 	andeq	r0, r0, r0, asr #32
  b8:	2000010e 	andcs	r0, r0, lr, lsl #2
  bc:	00000066 	andeq	r0, r0, r6, rrx
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  cc:	0000001c 	andeq	r0, r0, ip, lsl r0
  d0:	00000040 	andeq	r0, r0, r0, asr #32
  d4:	20000174 	andcs	r0, r0, r4, ror r1
  d8:	0000008c 	andeq	r0, r0, ip, lsl #1
  dc:	40080e41 	andmi	r0, r8, r1, asr #28
  e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e4:	180e4101 	stmdane	lr, {r0, r8, lr}
  e8:	00070d41 	andeq	r0, r7, r1, asr #26
  ec:	0000001c 	andeq	r0, r0, ip, lsl r0
  f0:	00000040 	andeq	r0, r0, r0, asr #32
  f4:	20000200 	andcs	r0, r0, r0, lsl #4
  f8:	00000080 	andeq	r0, r0, r0, lsl #1
  fc:	40080e41 	andmi	r0, r8, r1, asr #28
 100:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 104:	100e4101 	andne	r4, lr, r1, lsl #2
 108:	00070d41 	andeq	r0, r7, r1, asr #26
 10c:	0000001c 	andeq	r0, r0, ip, lsl r0
 110:	00000040 	andeq	r0, r0, r0, asr #32
 114:	20000280 	andcs	r0, r0, r0, lsl #5
 118:	00000040 	andeq	r0, r0, r0, asr #32
 11c:	40080e41 	andmi	r0, r8, r1, asr #28
 120:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 124:	100e4101 	andne	r4, lr, r1, lsl #2
 128:	00070d41 	andeq	r0, r7, r1, asr #26
 12c:	0000001c 	andeq	r0, r0, ip, lsl r0
 130:	00000040 	andeq	r0, r0, r0, asr #32
 134:	200002c0 	andcs	r0, r0, r0, asr #5
 138:	00000046 	andeq	r0, r0, r6, asr #32
 13c:	40080e41 	andmi	r0, r8, r1, asr #28
 140:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 144:	100e4101 	andne	r4, lr, r1, lsl #2
 148:	00070d41 	andeq	r0, r7, r1, asr #26
 14c:	0000001c 	andeq	r0, r0, ip, lsl r0
 150:	00000040 	andeq	r0, r0, r0, asr #32
 154:	20000306 	andcs	r0, r0, r6, lsl #6
 158:	0000002a 	andeq	r0, r0, sl, lsr #32
 15c:	40080e41 	andmi	r0, r8, r1, asr #28
 160:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 164:	100e4101 	andne	r4, lr, r1, lsl #2
 168:	00070d41 	andeq	r0, r7, r1, asr #26
 16c:	00000018 	andeq	r0, r0, r8, lsl r0
 170:	00000040 	andeq	r0, r0, r0, asr #32
 174:	20000330 	andcs	r0, r0, r0, lsr r3
 178:	00000064 	andeq	r0, r0, r4, rrx
 17c:	40080e41 	andmi	r0, r8, r1, asr #28
 180:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 184:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 188:	0000001c 	andeq	r0, r0, ip, lsl r0
 18c:	00000040 	andeq	r0, r0, r0, asr #32
 190:	20000394 	mulcs	r0, r4, r3
 194:	00000058 	andeq	r0, r0, r8, asr r0
 198:	40080e41 	andmi	r0, r8, r1, asr #28
 19c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1a0:	100e4101 	andne	r4, lr, r1, lsl #2
 1a4:	00070d41 	andeq	r0, r7, r1, asr #26
 1a8:	00000024 	andeq	r0, r0, r4, lsr #32
 1ac:	00000040 	andeq	r0, r0, r0, asr #32
 1b0:	200003ec 	andcs	r0, r0, ip, ror #7
 1b4:	00000174 	andeq	r0, r0, r4, ror r1
 1b8:	40100e41 	andsmi	r0, r0, r1, asr #28
 1bc:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 1c0:	02874003 	addeq	r4, r7, #3
 1c4:	41018e40 	tstmi	r1, r0, asr #28
 1c8:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 1cc:	00000007 	andeq	r0, r0, r7
 1d0:	0000000c 	andeq	r0, r0, ip
 1d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1d8:	7c020001 	stcvc	0, cr0, [r2], {1}
 1dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e4:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 1e8:	20000560 	andcs	r0, r0, r0, ror #10
 1ec:	00000020 	andeq	r0, r0, r0, lsr #32
 1f0:	40080e41 	andmi	r0, r8, r1, asr #28
 1f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f8:	180e4101 	stmdane	lr, {r0, r8, lr}
 1fc:	00070d41 	andeq	r0, r7, r1, asr #26
 200:	0000001c 	andeq	r0, r0, ip, lsl r0
 204:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 208:	20000580 	andcs	r0, r0, r0, lsl #11
 20c:	0000005e 	andeq	r0, r0, lr, asr r0
 210:	40080e41 	andmi	r0, r8, r1, asr #28
 214:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 218:	180e4101 	stmdane	lr, {r0, r8, lr}
 21c:	00070d41 	andeq	r0, r7, r1, asr #26
 220:	0000001c 	andeq	r0, r0, ip, lsl r0
 224:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 228:	200005de 	ldrdcs	r0, [r0], -lr
 22c:	0000005e 	andeq	r0, r0, lr, asr r0
 230:	40080e41 	andmi	r0, r8, r1, asr #28
 234:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 238:	180e4101 	stmdane	lr, {r0, r8, lr}
 23c:	00070d41 	andeq	r0, r7, r1, asr #26
 240:	00000020 	andeq	r0, r0, r0, lsr #32
 244:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 248:	2000063c 	andcs	r0, r0, ip, lsr r6
 24c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 250:	400c0e41 	andmi	r0, ip, r1, asr #28
 254:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 258:	018e4002 	orreq	r4, lr, r2
 25c:	41180e41 	tstmi	r8, r1, asr #28
 260:	0000070d 	andeq	r0, r0, sp, lsl #14
 264:	0000000c 	andeq	r0, r0, ip
 268:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 26c:	7c020001 	stcvc	0, cr0, [r2], {1}
 270:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 274:	00000018 	andeq	r0, r0, r8, lsl r0
 278:	00000264 	andeq	r0, r0, r4, ror #4
 27c:	200006ec 	andcs	r0, r0, ip, ror #13
 280:	00000044 	andeq	r0, r0, r4, asr #32
 284:	40080e41 	andmi	r0, r8, r1, asr #28
 288:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 28c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 290:	0000001c 	andeq	r0, r0, ip, lsl r0
 294:	00000264 	andeq	r0, r0, r4, ror #4
 298:	20000730 	andcs	r0, r0, r0, lsr r7
 29c:	0000002c 	andeq	r0, r0, ip, lsr #32
 2a0:	40080e41 	andmi	r0, r8, r1, asr #28
 2a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2a8:	100e4101 	andne	r4, lr, r1, lsl #2
 2ac:	00070d41 	andeq	r0, r7, r1, asr #26
 2b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b4:	00000264 	andeq	r0, r0, r4, ror #4
 2b8:	2000075c 	andcs	r0, r0, ip, asr r7
 2bc:	0000003a 	andeq	r0, r0, sl, lsr r0
 2c0:	40080e41 	andmi	r0, r8, r1, asr #28
 2c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2c8:	100e4101 	andne	r4, lr, r1, lsl #2
 2cc:	00070d41 	andeq	r0, r7, r1, asr #26
 2d0:	00000018 	andeq	r0, r0, r8, lsl r0
 2d4:	00000264 	andeq	r0, r0, r4, ror #4
 2d8:	20000796 	mulcs	r0, r6, r7
 2dc:	00000012 	andeq	r0, r0, r2, lsl r0
 2e0:	40080e41 	andmi	r0, r8, r1, asr #28
 2e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2e8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2ec:	0000000c 	andeq	r0, r0, ip
 2f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2f4:	7c010001 	stcvc	0, cr0, [r1], {1}
 2f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2fc:	0000000c 	andeq	r0, r0, ip
 300:	000002ec 	andeq	r0, r0, ip, ror #5
 304:	200007a9 	andcs	r0, r0, r9, lsr #15
 308:	0000010a 	andeq	r0, r0, sl, lsl #2
