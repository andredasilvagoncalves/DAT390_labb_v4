
./Debug/1_GAME.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#include "backGround.xbm"


void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f8c6 	bl	20000194 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <load_sprite>:
unsigned char height;
unsigned char* data;
} sprite;

static void load_sprite(sprite* s, unsigned char* data, int width, int height)
{
20000010:	b580      	push	{r7, lr}
20000012:	b084      	sub	sp, #16
20000014:	af00      	add	r7, sp, #0
20000016:	60f8      	str	r0, [r7, #12]
20000018:	60b9      	str	r1, [r7, #8]
2000001a:	607a      	str	r2, [r7, #4]
2000001c:	603b      	str	r3, [r7, #0]
s->width = width;
2000001e:	687b      	ldr	r3, [r7, #4]
20000020:	b2da      	uxtb	r2, r3
20000022:	68fb      	ldr	r3, [r7, #12]
20000024:	701a      	strb	r2, [r3, #0]
s->height = height;
20000026:	683b      	ldr	r3, [r7, #0]
20000028:	b2da      	uxtb	r2, r3
2000002a:	68fb      	ldr	r3, [r7, #12]
2000002c:	705a      	strb	r2, [r3, #1]
s->data = data;
2000002e:	68fb      	ldr	r3, [r7, #12]
20000030:	68ba      	ldr	r2, [r7, #8]
20000032:	605a      	str	r2, [r3, #4]
}
20000034:	46c0      	nop			; (mov r8, r8)
20000036:	46bd      	mov	sp, r7
20000038:	b004      	add	sp, #16
2000003a:	bd80      	pop	{r7, pc}

2000003c <draw_sprite>:

void draw_sprite(sprite* s, int x, int y, int set) {
2000003c:	b580      	push	{r7, lr}
2000003e:	b08a      	sub	sp, #40	; 0x28
20000040:	af00      	add	r7, sp, #0
20000042:	60f8      	str	r0, [r7, #12]
20000044:	60b9      	str	r1, [r7, #8]
20000046:	607a      	str	r2, [r7, #4]
20000048:	603b      	str	r3, [r7, #0]
int i,j,k, width_in_bytes;
if (s->width % 8 == 0)
2000004a:	68fb      	ldr	r3, [r7, #12]
2000004c:	781b      	ldrb	r3, [r3, #0]
2000004e:	2207      	movs	r2, #7
20000050:	4013      	ands	r3, r2
20000052:	b2db      	uxtb	r3, r3
20000054:	2b00      	cmp	r3, #0
20000056:	d105      	bne.n	20000064 <draw_sprite+0x28>
width_in_bytes = s->width / 8;
20000058:	68fb      	ldr	r3, [r7, #12]
2000005a:	781b      	ldrb	r3, [r3, #0]
2000005c:	08db      	lsrs	r3, r3, #3
2000005e:	b2db      	uxtb	r3, r3
20000060:	61bb      	str	r3, [r7, #24]
20000062:	e005      	b.n	20000070 <draw_sprite+0x34>
else
width_in_bytes = s->width / 8 + 1;
20000064:	68fb      	ldr	r3, [r7, #12]
20000066:	781b      	ldrb	r3, [r3, #0]
20000068:	08db      	lsrs	r3, r3, #3
2000006a:	b2db      	uxtb	r3, r3
2000006c:	3301      	adds	r3, #1
2000006e:	61bb      	str	r3, [r7, #24]
for (i = 0; i < s->height; i++)
20000070:	2300      	movs	r3, #0
20000072:	627b      	str	r3, [r7, #36]	; 0x24
20000074:	e039      	b.n	200000ea <draw_sprite+0xae>
for (j = 0; j < width_in_bytes; j++) {
20000076:	2300      	movs	r3, #0
20000078:	623b      	str	r3, [r7, #32]
2000007a:	e02f      	b.n	200000dc <draw_sprite+0xa0>
unsigned char byte = s->data[i * width_in_bytes + j];
2000007c:	68fb      	ldr	r3, [r7, #12]
2000007e:	685b      	ldr	r3, [r3, #4]
20000080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000082:	69b9      	ldr	r1, [r7, #24]
20000084:	4351      	muls	r1, r2
20000086:	6a3a      	ldr	r2, [r7, #32]
20000088:	188a      	adds	r2, r1, r2
2000008a:	189a      	adds	r2, r3, r2
2000008c:	2317      	movs	r3, #23
2000008e:	18fb      	adds	r3, r7, r3
20000090:	7812      	ldrb	r2, [r2, #0]
20000092:	701a      	strb	r2, [r3, #0]
for (k =0; k < 8; k++) {
20000094:	2300      	movs	r3, #0
20000096:	61fb      	str	r3, [r7, #28]
20000098:	e01a      	b.n	200000d0 <draw_sprite+0x94>
if (byte & (1 << k))
2000009a:	2317      	movs	r3, #23
2000009c:	18fb      	adds	r3, r7, r3
2000009e:	781a      	ldrb	r2, [r3, #0]
200000a0:	69fb      	ldr	r3, [r7, #28]
200000a2:	411a      	asrs	r2, r3
200000a4:	0013      	movs	r3, r2
200000a6:	2201      	movs	r2, #1
200000a8:	4013      	ands	r3, r2
200000aa:	d00e      	beq.n	200000ca <draw_sprite+0x8e>
pixel(8 * j + k + x + 1, i + y + 1);
200000ac:	6a3b      	ldr	r3, [r7, #32]
200000ae:	00da      	lsls	r2, r3, #3
200000b0:	69fb      	ldr	r3, [r7, #28]
200000b2:	18d2      	adds	r2, r2, r3
200000b4:	68bb      	ldr	r3, [r7, #8]
200000b6:	18d3      	adds	r3, r2, r3
200000b8:	3301      	adds	r3, #1
200000ba:	0018      	movs	r0, r3
200000bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200000be:	687b      	ldr	r3, [r7, #4]
200000c0:	18d3      	adds	r3, r2, r3
200000c2:	3301      	adds	r3, #1
200000c4:	0019      	movs	r1, r3
200000c6:	f000 fb21 	bl	2000070c <pixel>
for (k =0; k < 8; k++) {
200000ca:	69fb      	ldr	r3, [r7, #28]
200000cc:	3301      	adds	r3, #1
200000ce:	61fb      	str	r3, [r7, #28]
200000d0:	69fb      	ldr	r3, [r7, #28]
200000d2:	2b07      	cmp	r3, #7
200000d4:	dde1      	ble.n	2000009a <draw_sprite+0x5e>
for (j = 0; j < width_in_bytes; j++) {
200000d6:	6a3b      	ldr	r3, [r7, #32]
200000d8:	3301      	adds	r3, #1
200000da:	623b      	str	r3, [r7, #32]
200000dc:	6a3a      	ldr	r2, [r7, #32]
200000de:	69bb      	ldr	r3, [r7, #24]
200000e0:	429a      	cmp	r2, r3
200000e2:	dbcb      	blt.n	2000007c <draw_sprite+0x40>
for (i = 0; i < s->height; i++)
200000e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200000e6:	3301      	adds	r3, #1
200000e8:	627b      	str	r3, [r7, #36]	; 0x24
200000ea:	68fb      	ldr	r3, [r7, #12]
200000ec:	785b      	ldrb	r3, [r3, #1]
200000ee:	001a      	movs	r2, r3
200000f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200000f2:	4293      	cmp	r3, r2
200000f4:	dbbf      	blt.n	20000076 <draw_sprite+0x3a>
}
}
}
200000f6:	46c0      	nop			; (mov r8, r8)
200000f8:	46bd      	mov	sp, r7
200000fa:	b00a      	add	sp, #40	; 0x28
200000fc:	bd80      	pop	{r7, pc}

200000fe <ascii_message>:
	backGround_width, 
	backGround_height, 
	backGround_bits
};

void ascii_message(){
200000fe:	b5b0      	push	{r4, r5, r7, lr}
20000100:	b088      	sub	sp, #32
20000102:	af00      	add	r7, sp, #0
	char *s;
	char test1[] = "Welcome ";
20000104:	2410      	movs	r4, #16
20000106:	193b      	adds	r3, r7, r4
20000108:	4a19      	ldr	r2, [pc, #100]	; (20000170 <ascii_message+0x72>)
2000010a:	ca03      	ldmia	r2!, {r0, r1}
2000010c:	c303      	stmia	r3!, {r0, r1}
2000010e:	7812      	ldrb	r2, [r2, #0]
20000110:	701a      	strb	r2, [r3, #0]
	char test2[] = "to the game!";
20000112:	003b      	movs	r3, r7
20000114:	4a17      	ldr	r2, [pc, #92]	; (20000174 <ascii_message+0x76>)
20000116:	ca23      	ldmia	r2!, {r0, r1, r5}
20000118:	c323      	stmia	r3!, {r0, r1, r5}
2000011a:	7812      	ldrb	r2, [r2, #0]
2000011c:	701a      	strb	r2, [r3, #0]
	ascii_gotoxy(1,1);
2000011e:	2101      	movs	r1, #1
20000120:	2001      	movs	r0, #1
20000122:	f000 fe4b 	bl	20000dbc <ascii_gotoxy>
	s = test1;
20000126:	193b      	adds	r3, r7, r4
20000128:	61fb      	str	r3, [r7, #28]
	while (*s){
2000012a:	e006      	b.n	2000013a <ascii_message+0x3c>
		ascii_write_char(*s++); // ascii_write_char
2000012c:	69fb      	ldr	r3, [r7, #28]
2000012e:	1c5a      	adds	r2, r3, #1
20000130:	61fa      	str	r2, [r7, #28]
20000132:	781b      	ldrb	r3, [r3, #0]
20000134:	0018      	movs	r0, r3
20000136:	f000 fe23 	bl	20000d80 <ascii_write_char>
	while (*s){
2000013a:	69fb      	ldr	r3, [r7, #28]
2000013c:	781b      	ldrb	r3, [r3, #0]
2000013e:	2b00      	cmp	r3, #0
20000140:	d1f4      	bne.n	2000012c <ascii_message+0x2e>
	}
	ascii_gotoxy(1,2);
20000142:	2102      	movs	r1, #2
20000144:	2001      	movs	r0, #1
20000146:	f000 fe39 	bl	20000dbc <ascii_gotoxy>
	s = test2;
2000014a:	003b      	movs	r3, r7
2000014c:	61fb      	str	r3, [r7, #28]
	while (*s){
2000014e:	e006      	b.n	2000015e <ascii_message+0x60>
		ascii_write_char(*s++); // ascii_write_char
20000150:	69fb      	ldr	r3, [r7, #28]
20000152:	1c5a      	adds	r2, r3, #1
20000154:	61fa      	str	r2, [r7, #28]
20000156:	781b      	ldrb	r3, [r3, #0]
20000158:	0018      	movs	r0, r3
2000015a:	f000 fe11 	bl	20000d80 <ascii_write_char>
	while (*s){
2000015e:	69fb      	ldr	r3, [r7, #28]
20000160:	781b      	ldrb	r3, [r3, #0]
20000162:	2b00      	cmp	r3, #0
20000164:	d1f4      	bne.n	20000150 <ascii_message+0x52>
	}
}
20000166:	46c0      	nop			; (mov r8, r8)
20000168:	46bd      	mov	sp, r7
2000016a:	b008      	add	sp, #32
2000016c:	bdb0      	pop	{r4, r5, r7, pc}
2000016e:	46c0      	nop			; (mov r8, r8)
20000170:	20001794 	mulcs	r0, r4, r7
20000174:	200017a0 	andcs	r1, r0, r0, lsr #15

20000178 <init_spel>:

void init_spel(){
20000178:	b580      	push	{r7, lr}
2000017a:	af00      	add	r7, sp, #0
	GPIO_MODER_E = 0x55555555;
2000017c:	4b03      	ldr	r3, [pc, #12]	; (2000018c <init_spel+0x14>)
2000017e:	4a04      	ldr	r2, [pc, #16]	; (20000190 <init_spel+0x18>)
20000180:	601a      	str	r2, [r3, #0]
	ascii_init();
20000182:	f000 fde0 	bl	20000d46 <ascii_init>
	//ascii_message();
}
20000186:	46c0      	nop			; (mov r8, r8)
20000188:	46bd      	mov	sp, r7
2000018a:	bd80      	pop	{r7, pc}
2000018c:	40021000 	andmi	r1, r2, r0
20000190:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000194 <main>:


int main(int argc, char **argv)
{
20000194:	b580      	push	{r7, lr}
20000196:	b084      	sub	sp, #16
20000198:	af00      	add	r7, sp, #0
2000019a:	6078      	str	r0, [r7, #4]
2000019c:	6039      	str	r1, [r7, #0]
	init_spel();
2000019e:	f7ff ffeb 	bl	20000178 <init_spel>
	POBJECT p = &ball;
200001a2:	4b14      	ldr	r3, [pc, #80]	; (200001f4 <main+0x60>)
200001a4:	60fb      	str	r3, [r7, #12]
	graphic_init();
200001a6:	f000 fa59 	bl	2000065c <graphic_init>
#ifndef	SIMULATOR
	graphic_clear_screen();
#endif
	
//	load_sprite(&plant, plant_bits, plant_width, plant_height);
	load_sprite(&backGround, backGround_bits, backGround_width, backGround_height);
200001aa:	4913      	ldr	r1, [pc, #76]	; (200001f8 <main+0x64>)
200001ac:	4813      	ldr	r0, [pc, #76]	; (200001fc <main+0x68>)
200001ae:	2340      	movs	r3, #64	; 0x40
200001b0:	2280      	movs	r2, #128	; 0x80
200001b2:	f7ff ff2d 	bl	20000010 <load_sprite>
	
	
	p->set_speed(p, 12, 20);
200001b6:	68fb      	ldr	r3, [r7, #12]
200001b8:	6a1b      	ldr	r3, [r3, #32]
200001ba:	68f8      	ldr	r0, [r7, #12]
200001bc:	2214      	movs	r2, #20
200001be:	210c      	movs	r1, #12
200001c0:	4798      	blx	r3
	while(1){
		clear_backBuffer();
200001c2:	f000 fb4d 	bl	20000860 <clear_backBuffer>
		p->move(p);
200001c6:	68fb      	ldr	r3, [r7, #12]
200001c8:	69db      	ldr	r3, [r3, #28]
200001ca:	68fa      	ldr	r2, [r7, #12]
200001cc:	0010      	movs	r0, r2
200001ce:	4798      	blx	r3
		draw_sprite(&plant, 50, 50, 1);
200001d0:	480b      	ldr	r0, [pc, #44]	; (20000200 <main+0x6c>)
200001d2:	2301      	movs	r3, #1
200001d4:	2232      	movs	r2, #50	; 0x32
200001d6:	2132      	movs	r1, #50	; 0x32
200001d8:	f7ff ff30 	bl	2000003c <draw_sprite>
		draw_sprite(&backGround, 1, 1, 1);
200001dc:	4807      	ldr	r0, [pc, #28]	; (200001fc <main+0x68>)
200001de:	2301      	movs	r3, #1
200001e0:	2201      	movs	r2, #1
200001e2:	2101      	movs	r1, #1
200001e4:	f7ff ff2a 	bl	2000003c <draw_sprite>
		graphic_draw_screen();
200001e8:	f000 fad4 	bl	20000794 <graphic_draw_screen>
		//delay_milli(40); //25 fps
		graphic_clear_screen();
200001ec:	f000 fa62 	bl	200006b4 <graphic_clear_screen>
		clear_backBuffer();
200001f0:	e7e7      	b.n	200001c2 <main+0x2e>
200001f2:	46c0      	nop			; (mov r8, r8)
200001f4:	20001760 	andcs	r1, r0, r0, ror #14
200001f8:	2000132c 	andcs	r1, r0, ip, lsr #6
200001fc:	2000178c 	andcs	r1, r0, ip, lsl #15
20000200:	20001784 	andcs	r1, r0, r4, lsl #15

20000204 <set_object_speed>:
#include "game_startup.h"

void set_object_speed(POBJECT o, int speedx, int speedy){
20000204:	b580      	push	{r7, lr}
20000206:	b084      	sub	sp, #16
20000208:	af00      	add	r7, sp, #0
2000020a:	60f8      	str	r0, [r7, #12]
2000020c:	60b9      	str	r1, [r7, #8]
2000020e:	607a      	str	r2, [r7, #4]
	o->dirx = speedx;
20000210:	68fb      	ldr	r3, [r7, #12]
20000212:	68ba      	ldr	r2, [r7, #8]
20000214:	605a      	str	r2, [r3, #4]
	o->diry = speedy;
20000216:	68fb      	ldr	r3, [r7, #12]
20000218:	687a      	ldr	r2, [r7, #4]
2000021a:	609a      	str	r2, [r3, #8]
}	
2000021c:	46c0      	nop			; (mov r8, r8)
2000021e:	46bd      	mov	sp, r7
20000220:	b004      	add	sp, #16
20000222:	bd80      	pop	{r7, pc}

20000224 <draw_object>:
 
void draw_object(POBJECT o){
20000224:	b580      	push	{r7, lr}
20000226:	b084      	sub	sp, #16
20000228:	af00      	add	r7, sp, #0
2000022a:	6078      	str	r0, [r7, #4]
	for(int i= 0; i<= o->geo->numpoints; i++){
2000022c:	2300      	movs	r3, #0
2000022e:	60fb      	str	r3, [r7, #12]
20000230:	e01c      	b.n	2000026c <draw_object+0x48>
		pixel(o->posx + o->geo->px[i].x, o->posy + o->geo->px[i].y);
20000232:	687b      	ldr	r3, [r7, #4]
20000234:	68da      	ldr	r2, [r3, #12]
20000236:	687b      	ldr	r3, [r7, #4]
20000238:	6819      	ldr	r1, [r3, #0]
2000023a:	68fb      	ldr	r3, [r7, #12]
2000023c:	3304      	adds	r3, #4
2000023e:	005b      	lsls	r3, r3, #1
20000240:	18cb      	adds	r3, r1, r3
20000242:	3304      	adds	r3, #4
20000244:	781b      	ldrb	r3, [r3, #0]
20000246:	18d3      	adds	r3, r2, r3
20000248:	0018      	movs	r0, r3
2000024a:	687b      	ldr	r3, [r7, #4]
2000024c:	691a      	ldr	r2, [r3, #16]
2000024e:	687b      	ldr	r3, [r7, #4]
20000250:	6819      	ldr	r1, [r3, #0]
20000252:	68fb      	ldr	r3, [r7, #12]
20000254:	3304      	adds	r3, #4
20000256:	005b      	lsls	r3, r3, #1
20000258:	18cb      	adds	r3, r1, r3
2000025a:	3305      	adds	r3, #5
2000025c:	781b      	ldrb	r3, [r3, #0]
2000025e:	18d3      	adds	r3, r2, r3
20000260:	0019      	movs	r1, r3
20000262:	f000 fa53 	bl	2000070c <pixel>
	for(int i= 0; i<= o->geo->numpoints; i++){
20000266:	68fb      	ldr	r3, [r7, #12]
20000268:	3301      	adds	r3, #1
2000026a:	60fb      	str	r3, [r7, #12]
2000026c:	687b      	ldr	r3, [r7, #4]
2000026e:	681b      	ldr	r3, [r3, #0]
20000270:	681b      	ldr	r3, [r3, #0]
20000272:	68fa      	ldr	r2, [r7, #12]
20000274:	429a      	cmp	r2, r3
20000276:	dddc      	ble.n	20000232 <draw_object+0xe>
	}
}
20000278:	46c0      	nop			; (mov r8, r8)
2000027a:	46bd      	mov	sp, r7
2000027c:	b004      	add	sp, #16
2000027e:	bd80      	pop	{r7, pc}

20000280 <clear_object>:


void clear_object(POBJECT o){
20000280:	b580      	push	{r7, lr}
20000282:	b084      	sub	sp, #16
20000284:	af00      	add	r7, sp, #0
20000286:	6078      	str	r0, [r7, #4]
	for(int i= 0; i<= o->geo->numpoints; i++){
20000288:	2300      	movs	r3, #0
2000028a:	60fb      	str	r3, [r7, #12]
2000028c:	e01c      	b.n	200002c8 <clear_object+0x48>
		 pixel(o->posx + o->geo->px[i].x, o->posy + o->geo->px[i].y);
2000028e:	687b      	ldr	r3, [r7, #4]
20000290:	68da      	ldr	r2, [r3, #12]
20000292:	687b      	ldr	r3, [r7, #4]
20000294:	6819      	ldr	r1, [r3, #0]
20000296:	68fb      	ldr	r3, [r7, #12]
20000298:	3304      	adds	r3, #4
2000029a:	005b      	lsls	r3, r3, #1
2000029c:	18cb      	adds	r3, r1, r3
2000029e:	3304      	adds	r3, #4
200002a0:	781b      	ldrb	r3, [r3, #0]
200002a2:	18d3      	adds	r3, r2, r3
200002a4:	0018      	movs	r0, r3
200002a6:	687b      	ldr	r3, [r7, #4]
200002a8:	691a      	ldr	r2, [r3, #16]
200002aa:	687b      	ldr	r3, [r7, #4]
200002ac:	6819      	ldr	r1, [r3, #0]
200002ae:	68fb      	ldr	r3, [r7, #12]
200002b0:	3304      	adds	r3, #4
200002b2:	005b      	lsls	r3, r3, #1
200002b4:	18cb      	adds	r3, r1, r3
200002b6:	3305      	adds	r3, #5
200002b8:	781b      	ldrb	r3, [r3, #0]
200002ba:	18d3      	adds	r3, r2, r3
200002bc:	0019      	movs	r1, r3
200002be:	f000 fa25 	bl	2000070c <pixel>
	for(int i= 0; i<= o->geo->numpoints; i++){
200002c2:	68fb      	ldr	r3, [r7, #12]
200002c4:	3301      	adds	r3, #1
200002c6:	60fb      	str	r3, [r7, #12]
200002c8:	687b      	ldr	r3, [r7, #4]
200002ca:	681b      	ldr	r3, [r3, #0]
200002cc:	681b      	ldr	r3, [r3, #0]
200002ce:	68fa      	ldr	r2, [r7, #12]
200002d0:	429a      	cmp	r2, r3
200002d2:	dddc      	ble.n	2000028e <clear_object+0xe>
	}
}
200002d4:	46c0      	nop			; (mov r8, r8)
200002d6:	46bd      	mov	sp, r7
200002d8:	b004      	add	sp, #16
200002da:	bd80      	pop	{r7, pc}

200002dc <move_object>:

void move_object(POBJECT o){
200002dc:	b590      	push	{r4, r7, lr}
200002de:	b083      	sub	sp, #12
200002e0:	af00      	add	r7, sp, #0
200002e2:	6078      	str	r0, [r7, #4]
//	o->clear(o);
	
	if(o->posx < 1)
200002e4:	687b      	ldr	r3, [r7, #4]
200002e6:	68db      	ldr	r3, [r3, #12]
200002e8:	2b00      	cmp	r3, #0
200002ea:	dc09      	bgt.n	20000300 <move_object+0x24>
		o->set_speed(o, o->dirx*(-1), o->diry);
200002ec:	687b      	ldr	r3, [r7, #4]
200002ee:	6a1c      	ldr	r4, [r3, #32]
200002f0:	687b      	ldr	r3, [r7, #4]
200002f2:	685b      	ldr	r3, [r3, #4]
200002f4:	4259      	negs	r1, r3
200002f6:	687b      	ldr	r3, [r7, #4]
200002f8:	689a      	ldr	r2, [r3, #8]
200002fa:	687b      	ldr	r3, [r7, #4]
200002fc:	0018      	movs	r0, r3
200002fe:	47a0      	blx	r4
	
	if(o->posx > 128)
20000300:	687b      	ldr	r3, [r7, #4]
20000302:	68db      	ldr	r3, [r3, #12]
20000304:	2b80      	cmp	r3, #128	; 0x80
20000306:	dd09      	ble.n	2000031c <move_object+0x40>
		o->set_speed(o, -o->dirx, o->diry);
20000308:	687b      	ldr	r3, [r7, #4]
2000030a:	6a1c      	ldr	r4, [r3, #32]
2000030c:	687b      	ldr	r3, [r7, #4]
2000030e:	685b      	ldr	r3, [r3, #4]
20000310:	4259      	negs	r1, r3
20000312:	687b      	ldr	r3, [r7, #4]
20000314:	689a      	ldr	r2, [r3, #8]
20000316:	687b      	ldr	r3, [r7, #4]
20000318:	0018      	movs	r0, r3
2000031a:	47a0      	blx	r4
		
	if(o->posy < 1)
2000031c:	687b      	ldr	r3, [r7, #4]
2000031e:	691b      	ldr	r3, [r3, #16]
20000320:	2b00      	cmp	r3, #0
20000322:	dc09      	bgt.n	20000338 <move_object+0x5c>
		o->set_speed(o, o->dirx, -o->diry);
20000324:	687b      	ldr	r3, [r7, #4]
20000326:	6a1c      	ldr	r4, [r3, #32]
20000328:	687b      	ldr	r3, [r7, #4]
2000032a:	6859      	ldr	r1, [r3, #4]
2000032c:	687b      	ldr	r3, [r7, #4]
2000032e:	689b      	ldr	r3, [r3, #8]
20000330:	425a      	negs	r2, r3
20000332:	687b      	ldr	r3, [r7, #4]
20000334:	0018      	movs	r0, r3
20000336:	47a0      	blx	r4
		
	if(o->posy > 64)
20000338:	687b      	ldr	r3, [r7, #4]
2000033a:	691b      	ldr	r3, [r3, #16]
2000033c:	2b40      	cmp	r3, #64	; 0x40
2000033e:	dd09      	ble.n	20000354 <move_object+0x78>
		o->set_speed(o, o->dirx, -o->diry);
20000340:	687b      	ldr	r3, [r7, #4]
20000342:	6a1c      	ldr	r4, [r3, #32]
20000344:	687b      	ldr	r3, [r7, #4]
20000346:	6859      	ldr	r1, [r3, #4]
20000348:	687b      	ldr	r3, [r7, #4]
2000034a:	689b      	ldr	r3, [r3, #8]
2000034c:	425a      	negs	r2, r3
2000034e:	687b      	ldr	r3, [r7, #4]
20000350:	0018      	movs	r0, r3
20000352:	47a0      	blx	r4
	
	o->posx = o->posx + o->dirx;
20000354:	687b      	ldr	r3, [r7, #4]
20000356:	68da      	ldr	r2, [r3, #12]
20000358:	687b      	ldr	r3, [r7, #4]
2000035a:	685b      	ldr	r3, [r3, #4]
2000035c:	18d2      	adds	r2, r2, r3
2000035e:	687b      	ldr	r3, [r7, #4]
20000360:	60da      	str	r2, [r3, #12]
	o->posy = o->posy + o->diry;
20000362:	687b      	ldr	r3, [r7, #4]
20000364:	691a      	ldr	r2, [r3, #16]
20000366:	687b      	ldr	r3, [r7, #4]
20000368:	689b      	ldr	r3, [r3, #8]
2000036a:	18d2      	adds	r2, r2, r3
2000036c:	687b      	ldr	r3, [r7, #4]
2000036e:	611a      	str	r2, [r3, #16]
	o->draw(o);
20000370:	687b      	ldr	r3, [r7, #4]
20000372:	695b      	ldr	r3, [r3, #20]
20000374:	687a      	ldr	r2, [r7, #4]
20000376:	0010      	movs	r0, r2
20000378:	4798      	blx	r3
2000037a:	46c0      	nop			; (mov r8, r8)
2000037c:	46bd      	mov	sp, r7
2000037e:	b003      	add	sp, #12
20000380:	bd90      	pop	{r4, r7, pc}
	...

20000384 <graphic_ctrl_bit_set>:
 *
 */

#include "game_startup.h"

void graphic_ctrl_bit_set(uint8_t x){
20000384:	b580      	push	{r7, lr}
20000386:	b082      	sub	sp, #8
20000388:	af00      	add	r7, sp, #0
2000038a:	0002      	movs	r2, r0
2000038c:	1dfb      	adds	r3, r7, #7
2000038e:	701a      	strb	r2, [r3, #0]
	GPIO_ODR_E_LOW |= (~B_SELECT & x); 			//Dubbelkolla sedan
20000390:	4b09      	ldr	r3, [pc, #36]	; (200003b8 <graphic_ctrl_bit_set+0x34>)
20000392:	781b      	ldrb	r3, [r3, #0]
20000394:	b2db      	uxtb	r3, r3
20000396:	b25a      	sxtb	r2, r3
20000398:	1dfb      	adds	r3, r7, #7
2000039a:	781b      	ldrb	r3, [r3, #0]
2000039c:	b25b      	sxtb	r3, r3
2000039e:	2104      	movs	r1, #4
200003a0:	438b      	bics	r3, r1
200003a2:	b25b      	sxtb	r3, r3
200003a4:	4313      	orrs	r3, r2
200003a6:	b25a      	sxtb	r2, r3
200003a8:	4b03      	ldr	r3, [pc, #12]	; (200003b8 <graphic_ctrl_bit_set+0x34>)
200003aa:	b2d2      	uxtb	r2, r2
200003ac:	701a      	strb	r2, [r3, #0]
}
200003ae:	46c0      	nop			; (mov r8, r8)
200003b0:	46bd      	mov	sp, r7
200003b2:	b002      	add	sp, #8
200003b4:	bd80      	pop	{r7, pc}
200003b6:	46c0      	nop			; (mov r8, r8)
200003b8:	40021014 	andmi	r1, r2, r4, lsl r0

200003bc <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x){
200003bc:	b580      	push	{r7, lr}
200003be:	b082      	sub	sp, #8
200003c0:	af00      	add	r7, sp, #0
200003c2:	0002      	movs	r2, r0
200003c4:	1dfb      	adds	r3, r7, #7
200003c6:	701a      	strb	r2, [r3, #0]
	GPIO_ODR_E_LOW &= ~(B_SELECT | x);			//Dubbelkolla sedan
200003c8:	4b0a      	ldr	r3, [pc, #40]	; (200003f4 <graphic_ctrl_bit_clear+0x38>)
200003ca:	781b      	ldrb	r3, [r3, #0]
200003cc:	b2db      	uxtb	r3, r3
200003ce:	b25b      	sxtb	r3, r3
200003d0:	1dfa      	adds	r2, r7, #7
200003d2:	7812      	ldrb	r2, [r2, #0]
200003d4:	2104      	movs	r1, #4
200003d6:	430a      	orrs	r2, r1
200003d8:	b2d2      	uxtb	r2, r2
200003da:	b252      	sxtb	r2, r2
200003dc:	43d2      	mvns	r2, r2
200003de:	b252      	sxtb	r2, r2
200003e0:	4013      	ands	r3, r2
200003e2:	b25a      	sxtb	r2, r3
200003e4:	4b03      	ldr	r3, [pc, #12]	; (200003f4 <graphic_ctrl_bit_clear+0x38>)
200003e6:	b2d2      	uxtb	r2, r2
200003e8:	701a      	strb	r2, [r3, #0]
}
200003ea:	46c0      	nop			; (mov r8, r8)
200003ec:	46bd      	mov	sp, r7
200003ee:	b002      	add	sp, #8
200003f0:	bd80      	pop	{r7, pc}
200003f2:	46c0      	nop			; (mov r8, r8)
200003f4:	40021014 	andmi	r1, r2, r4, lsl r0

200003f8 <select_controller>:

static void select_controller(uint8_t controller){
200003f8:	b580      	push	{r7, lr}
200003fa:	b082      	sub	sp, #8
200003fc:	af00      	add	r7, sp, #0
200003fe:	0002      	movs	r2, r0
20000400:	1dfb      	adds	r3, r7, #7
20000402:	701a      	strb	r2, [r3, #0]
	switch(controller){
20000404:	1dfb      	adds	r3, r7, #7
20000406:	781b      	ldrb	r3, [r3, #0]
20000408:	2b08      	cmp	r3, #8
2000040a:	d00c      	beq.n	20000426 <select_controller+0x2e>
2000040c:	dc02      	bgt.n	20000414 <select_controller+0x1c>
2000040e:	2b00      	cmp	r3, #0
20000410:	d005      	beq.n	2000041e <select_controller+0x26>
		case 0: graphic_ctrl_bit_clear(B_CS1 | B_CS2); break;
		case 0x08: graphic_ctrl_bit_set(B_CS1); graphic_ctrl_bit_clear(B_CS2); break;
		case 0x10: graphic_ctrl_bit_set(B_CS2); graphic_ctrl_bit_clear(B_CS1); break;
		case 0x08 | 0x10: graphic_ctrl_bit_set(B_CS1 | B_CS2); break;
	}	
}
20000412:	e01a      	b.n	2000044a <select_controller+0x52>
	switch(controller){
20000414:	2b10      	cmp	r3, #16
20000416:	d00d      	beq.n	20000434 <select_controller+0x3c>
20000418:	2b18      	cmp	r3, #24
2000041a:	d012      	beq.n	20000442 <select_controller+0x4a>
}
2000041c:	e015      	b.n	2000044a <select_controller+0x52>
		case 0: graphic_ctrl_bit_clear(B_CS1 | B_CS2); break;
2000041e:	2018      	movs	r0, #24
20000420:	f7ff ffcc 	bl	200003bc <graphic_ctrl_bit_clear>
20000424:	e011      	b.n	2000044a <select_controller+0x52>
		case 0x08: graphic_ctrl_bit_set(B_CS1); graphic_ctrl_bit_clear(B_CS2); break;
20000426:	2008      	movs	r0, #8
20000428:	f7ff ffac 	bl	20000384 <graphic_ctrl_bit_set>
2000042c:	2010      	movs	r0, #16
2000042e:	f7ff ffc5 	bl	200003bc <graphic_ctrl_bit_clear>
20000432:	e00a      	b.n	2000044a <select_controller+0x52>
		case 0x10: graphic_ctrl_bit_set(B_CS2); graphic_ctrl_bit_clear(B_CS1); break;
20000434:	2010      	movs	r0, #16
20000436:	f7ff ffa5 	bl	20000384 <graphic_ctrl_bit_set>
2000043a:	2008      	movs	r0, #8
2000043c:	f7ff ffbe 	bl	200003bc <graphic_ctrl_bit_clear>
20000440:	e003      	b.n	2000044a <select_controller+0x52>
		case 0x08 | 0x10: graphic_ctrl_bit_set(B_CS1 | B_CS2); break;
20000442:	2018      	movs	r0, #24
20000444:	f7ff ff9e 	bl	20000384 <graphic_ctrl_bit_set>
20000448:	46c0      	nop			; (mov r8, r8)
}
2000044a:	46c0      	nop			; (mov r8, r8)
2000044c:	46bd      	mov	sp, r7
2000044e:	b002      	add	sp, #8
20000450:	bd80      	pop	{r7, pc}

20000452 <graphic_wait_ready>:

static void graphic_wait_ready(void){
20000452:	b580      	push	{r7, lr}
20000454:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_clear(B_E);
20000456:	2040      	movs	r0, #64	; 0x40
20000458:	f7ff ffb0 	bl	200003bc <graphic_ctrl_bit_clear>
	GPIO_MODER_E = 0x00005555;
2000045c:	4b0f      	ldr	r3, [pc, #60]	; (2000049c <graphic_wait_ready+0x4a>)
2000045e:	4a10      	ldr	r2, [pc, #64]	; (200004a0 <graphic_wait_ready+0x4e>)
20000460:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
20000462:	2001      	movs	r0, #1
20000464:	f7ff ffaa 	bl	200003bc <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
20000468:	2002      	movs	r0, #2
2000046a:	f7ff ff8b 	bl	20000384 <graphic_ctrl_bit_set>
//	delay_500ns();
	while(GPIO_IDR_E_HIGH & LCD_BUSY){
2000046e:	e005      	b.n	2000047c <graphic_wait_ready+0x2a>
		graphic_ctrl_bit_set(B_E);
20000470:	2040      	movs	r0, #64	; 0x40
20000472:	f7ff ff87 	bl	20000384 <graphic_ctrl_bit_set>
//		delay_500ns();
		graphic_ctrl_bit_clear(B_E);
20000476:	2040      	movs	r0, #64	; 0x40
20000478:	f7ff ffa0 	bl	200003bc <graphic_ctrl_bit_clear>
	while(GPIO_IDR_E_HIGH & LCD_BUSY){
2000047c:	4b09      	ldr	r3, [pc, #36]	; (200004a4 <graphic_wait_ready+0x52>)
2000047e:	781b      	ldrb	r3, [r3, #0]
20000480:	b2db      	uxtb	r3, r3
20000482:	b25b      	sxtb	r3, r3
20000484:	2b00      	cmp	r3, #0
20000486:	dbf3      	blt.n	20000470 <graphic_wait_ready+0x1e>
//		delay_500ns();
	}
	graphic_ctrl_bit_set(B_E);
20000488:	2040      	movs	r0, #64	; 0x40
2000048a:	f7ff ff7b 	bl	20000384 <graphic_ctrl_bit_set>
	GPIO_MODER_E = 0x55555555;
2000048e:	4b03      	ldr	r3, [pc, #12]	; (2000049c <graphic_wait_ready+0x4a>)
20000490:	4a05      	ldr	r2, [pc, #20]	; (200004a8 <graphic_wait_ready+0x56>)
20000492:	601a      	str	r2, [r3, #0]
}
20000494:	46c0      	nop			; (mov r8, r8)
20000496:	46bd      	mov	sp, r7
20000498:	bd80      	pop	{r7, pc}
2000049a:	46c0      	nop			; (mov r8, r8)
2000049c:	40021000 	andmi	r1, r2, r0
200004a0:	00005555 	andeq	r5, r0, r5, asr r5
200004a4:	40021011 	andmi	r1, r2, r1, lsl r0
200004a8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200004ac <graphic_read>:

unsigned char graphic_read(unsigned char controller){
200004ac:	b580      	push	{r7, lr}
200004ae:	b084      	sub	sp, #16
200004b0:	af00      	add	r7, sp, #0
200004b2:	0002      	movs	r2, r0
200004b4:	1dfb      	adds	r3, r7, #7
200004b6:	701a      	strb	r2, [r3, #0]
	unsigned char read_data;
	graphic_ctrl_bit_clear(B_E);
200004b8:	2040      	movs	r0, #64	; 0x40
200004ba:	f7ff ff7f 	bl	200003bc <graphic_ctrl_bit_clear>
	GPIO_MODER_E = 0x00005555;
200004be:	4b19      	ldr	r3, [pc, #100]	; (20000524 <graphic_read+0x78>)
200004c0:	4a19      	ldr	r2, [pc, #100]	; (20000528 <graphic_read+0x7c>)
200004c2:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS | B_RW);
200004c4:	2003      	movs	r0, #3
200004c6:	f7ff ff5d 	bl	20000384 <graphic_ctrl_bit_set>
	select_controller(controller);
200004ca:	1dfb      	adds	r3, r7, #7
200004cc:	781b      	ldrb	r3, [r3, #0]
200004ce:	0018      	movs	r0, r3
200004d0:	f7ff ff92 	bl	200003f8 <select_controller>
//	delay_500ns();
	graphic_ctrl_bit_set(B_E);
200004d4:	2040      	movs	r0, #64	; 0x40
200004d6:	f7ff ff55 	bl	20000384 <graphic_ctrl_bit_set>
	read_data = GPIO_IDR_E_HIGH;
200004da:	4a14      	ldr	r2, [pc, #80]	; (2000052c <graphic_read+0x80>)
200004dc:	230f      	movs	r3, #15
200004de:	18fb      	adds	r3, r7, r3
200004e0:	7812      	ldrb	r2, [r2, #0]
200004e2:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200004e4:	2040      	movs	r0, #64	; 0x40
200004e6:	f7ff ff69 	bl	200003bc <graphic_ctrl_bit_clear>
	GPIO_MODER_E = 0x55555555;
200004ea:	4b0e      	ldr	r3, [pc, #56]	; (20000524 <graphic_read+0x78>)
200004ec:	4a10      	ldr	r2, [pc, #64]	; (20000530 <graphic_read+0x84>)
200004ee:	601a      	str	r2, [r3, #0]
	if(controller == B_CS1){
200004f0:	1dfb      	adds	r3, r7, #7
200004f2:	781b      	ldrb	r3, [r3, #0]
200004f4:	2b08      	cmp	r3, #8
200004f6:	d104      	bne.n	20000502 <graphic_read+0x56>
		select_controller(B_CS1);
200004f8:	2008      	movs	r0, #8
200004fa:	f7ff ff7d 	bl	200003f8 <select_controller>
		graphic_wait_ready();
200004fe:	f7ff ffa8 	bl	20000452 <graphic_wait_ready>
	}
	if (controller == B_CS2){
20000502:	1dfb      	adds	r3, r7, #7
20000504:	781b      	ldrb	r3, [r3, #0]
20000506:	2b10      	cmp	r3, #16
20000508:	d104      	bne.n	20000514 <graphic_read+0x68>
		select_controller(B_CS2);
2000050a:	2010      	movs	r0, #16
2000050c:	f7ff ff74 	bl	200003f8 <select_controller>
		graphic_wait_ready();
20000510:	f7ff ff9f 	bl	20000452 <graphic_wait_ready>
	}
	return read_data;
20000514:	230f      	movs	r3, #15
20000516:	18fb      	adds	r3, r7, r3
20000518:	781b      	ldrb	r3, [r3, #0]
}
2000051a:	0018      	movs	r0, r3
2000051c:	46bd      	mov	sp, r7
2000051e:	b004      	add	sp, #16
20000520:	bd80      	pop	{r7, pc}
20000522:	46c0      	nop			; (mov r8, r8)
20000524:	40021000 	andmi	r1, r2, r0
20000528:	00005555 	andeq	r5, r0, r5, asr r5
2000052c:	40021011 	andmi	r1, r2, r1, lsl r0
20000530:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000534 <graphic_write>:

void graphic_write(unsigned char value, unsigned char controller){
20000534:	b580      	push	{r7, lr}
20000536:	b082      	sub	sp, #8
20000538:	af00      	add	r7, sp, #0
2000053a:	0002      	movs	r2, r0
2000053c:	1dfb      	adds	r3, r7, #7
2000053e:	701a      	strb	r2, [r3, #0]
20000540:	1dbb      	adds	r3, r7, #6
20000542:	1c0a      	adds	r2, r1, #0
20000544:	701a      	strb	r2, [r3, #0]
	GPIO_ODR_E_HIGH = value;
20000546:	4a18      	ldr	r2, [pc, #96]	; (200005a8 <graphic_write+0x74>)
20000548:	1dfb      	adds	r3, r7, #7
2000054a:	781b      	ldrb	r3, [r3, #0]
2000054c:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
2000054e:	1dbb      	adds	r3, r7, #6
20000550:	781b      	ldrb	r3, [r3, #0]
20000552:	0018      	movs	r0, r3
20000554:	f7ff ff50 	bl	200003f8 <select_controller>
//	delay_500ns();
	graphic_ctrl_bit_set(B_E);
20000558:	2040      	movs	r0, #64	; 0x40
2000055a:	f7ff ff13 	bl	20000384 <graphic_ctrl_bit_set>
//	delay_500ns();
	graphic_ctrl_bit_clear(B_E);
2000055e:	2040      	movs	r0, #64	; 0x40
20000560:	f7ff ff2c 	bl	200003bc <graphic_ctrl_bit_clear>
	if(controller & B_CS1){
20000564:	1dbb      	adds	r3, r7, #6
20000566:	781b      	ldrb	r3, [r3, #0]
20000568:	2208      	movs	r2, #8
2000056a:	4013      	ands	r3, r2
2000056c:	d004      	beq.n	20000578 <graphic_write+0x44>
		select_controller(B_CS1);
2000056e:	2008      	movs	r0, #8
20000570:	f7ff ff42 	bl	200003f8 <select_controller>
		graphic_wait_ready();
20000574:	f7ff ff6d 	bl	20000452 <graphic_wait_ready>
	}
	if(controller & B_CS2){
20000578:	1dbb      	adds	r3, r7, #6
2000057a:	781b      	ldrb	r3, [r3, #0]
2000057c:	2210      	movs	r2, #16
2000057e:	4013      	ands	r3, r2
20000580:	d004      	beq.n	2000058c <graphic_write+0x58>
		select_controller(B_CS2);
20000582:	2010      	movs	r0, #16
20000584:	f7ff ff38 	bl	200003f8 <select_controller>
		graphic_wait_ready();
20000588:	f7ff ff63 	bl	20000452 <graphic_wait_ready>
	}
	GPIO_ODR_E_HIGH = 0;
2000058c:	4b06      	ldr	r3, [pc, #24]	; (200005a8 <graphic_write+0x74>)
2000058e:	2200      	movs	r2, #0
20000590:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);  		//ettställs som förberedelse för nästa arbetscykel
20000592:	2040      	movs	r0, #64	; 0x40
20000594:	f7ff fef6 	bl	20000384 <graphic_ctrl_bit_set>
	select_controller(0);
20000598:	2000      	movs	r0, #0
2000059a:	f7ff ff2d 	bl	200003f8 <select_controller>
}
2000059e:	46c0      	nop			; (mov r8, r8)
200005a0:	46bd      	mov	sp, r7
200005a2:	b002      	add	sp, #8
200005a4:	bd80      	pop	{r7, pc}
200005a6:	46c0      	nop			; (mov r8, r8)
200005a8:	40021015 	andmi	r1, r2, r5, lsl r0

200005ac <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller){
200005ac:	b580      	push	{r7, lr}
200005ae:	b082      	sub	sp, #8
200005b0:	af00      	add	r7, sp, #0
200005b2:	0002      	movs	r2, r0
200005b4:	1dfb      	adds	r3, r7, #7
200005b6:	701a      	strb	r2, [r3, #0]
200005b8:	1dbb      	adds	r3, r7, #6
200005ba:	1c0a      	adds	r2, r1, #0
200005bc:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200005be:	2040      	movs	r0, #64	; 0x40
200005c0:	f7ff fefc 	bl	200003bc <graphic_ctrl_bit_clear>
	select_controller(controller);
200005c4:	1dbb      	adds	r3, r7, #6
200005c6:	781b      	ldrb	r3, [r3, #0]
200005c8:	0018      	movs	r0, r3
200005ca:	f7ff ff15 	bl	200003f8 <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
200005ce:	2003      	movs	r0, #3
200005d0:	f7ff fef4 	bl	200003bc <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
200005d4:	1dbb      	adds	r3, r7, #6
200005d6:	781a      	ldrb	r2, [r3, #0]
200005d8:	1dfb      	adds	r3, r7, #7
200005da:	781b      	ldrb	r3, [r3, #0]
200005dc:	0011      	movs	r1, r2
200005de:	0018      	movs	r0, r3
200005e0:	f7ff ffa8 	bl	20000534 <graphic_write>
}
200005e4:	46c0      	nop			; (mov r8, r8)
200005e6:	46bd      	mov	sp, r7
200005e8:	b002      	add	sp, #8
200005ea:	bd80      	pop	{r7, pc}

200005ec <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
200005ec:	b580      	push	{r7, lr}
200005ee:	b082      	sub	sp, #8
200005f0:	af00      	add	r7, sp, #0
200005f2:	0002      	movs	r2, r0
200005f4:	1dfb      	adds	r3, r7, #7
200005f6:	701a      	strb	r2, [r3, #0]
200005f8:	1dbb      	adds	r3, r7, #6
200005fa:	1c0a      	adds	r2, r1, #0
200005fc:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200005fe:	2040      	movs	r0, #64	; 0x40
20000600:	f7ff fedc 	bl	200003bc <graphic_ctrl_bit_clear>
	select_controller(controller);
20000604:	1dbb      	adds	r3, r7, #6
20000606:	781b      	ldrb	r3, [r3, #0]
20000608:	0018      	movs	r0, r3
2000060a:	f7ff fef5 	bl	200003f8 <select_controller>
	graphic_ctrl_bit_set(B_RS);
2000060e:	2001      	movs	r0, #1
20000610:	f7ff feb8 	bl	20000384 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
20000614:	2002      	movs	r0, #2
20000616:	f7ff fed1 	bl	200003bc <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
2000061a:	1dbb      	adds	r3, r7, #6
2000061c:	781a      	ldrb	r2, [r3, #0]
2000061e:	1dfb      	adds	r3, r7, #7
20000620:	781b      	ldrb	r3, [r3, #0]
20000622:	0011      	movs	r1, r2
20000624:	0018      	movs	r0, r3
20000626:	f7ff ff85 	bl	20000534 <graphic_write>
}
2000062a:	46c0      	nop			; (mov r8, r8)
2000062c:	46bd      	mov	sp, r7
2000062e:	b002      	add	sp, #8
20000630:	bd80      	pop	{r7, pc}

20000632 <graphic_read_data>:

unsigned char graphic_read_data(unsigned char controller){
20000632:	b580      	push	{r7, lr}
20000634:	b082      	sub	sp, #8
20000636:	af00      	add	r7, sp, #0
20000638:	0002      	movs	r2, r0
2000063a:	1dfb      	adds	r3, r7, #7
2000063c:	701a      	strb	r2, [r3, #0]
	(void) graphic_read(controller);
2000063e:	1dfb      	adds	r3, r7, #7
20000640:	781b      	ldrb	r3, [r3, #0]
20000642:	0018      	movs	r0, r3
20000644:	f7ff ff32 	bl	200004ac <graphic_read>
	
	return graphic_read(controller);
20000648:	1dfb      	adds	r3, r7, #7
2000064a:	781b      	ldrb	r3, [r3, #0]
2000064c:	0018      	movs	r0, r3
2000064e:	f7ff ff2d 	bl	200004ac <graphic_read>
20000652:	0003      	movs	r3, r0
}
20000654:	0018      	movs	r0, r3
20000656:	46bd      	mov	sp, r7
20000658:	b002      	add	sp, #8
2000065a:	bd80      	pop	{r7, pc}

2000065c <graphic_init>:

void graphic_init(){
2000065c:	b580      	push	{r7, lr}
2000065e:	af00      	add	r7, sp, #0
	GPIO_MODER_E = 0x55555555;
20000660:	4b12      	ldr	r3, [pc, #72]	; (200006ac <graphic_init+0x50>)
20000662:	4a13      	ldr	r2, [pc, #76]	; (200006b0 <graphic_init+0x54>)
20000664:	601a      	str	r2, [r3, #0]
	
	graphic_ctrl_bit_set(B_E);
20000666:	2040      	movs	r0, #64	; 0x40
20000668:	f7ff fe8c 	bl	20000384 <graphic_ctrl_bit_set>
//	delay_micro(10);
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RESET | B_E);
2000066c:	2078      	movs	r0, #120	; 0x78
2000066e:	f7ff fea5 	bl	200003bc <graphic_ctrl_bit_clear>
//	delay_milli(30);
	graphic_ctrl_bit_set(B_RESET);
20000672:	2020      	movs	r0, #32
20000674:	f7ff fe86 	bl	20000384 <graphic_ctrl_bit_set>
	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
20000678:	2118      	movs	r1, #24
2000067a:	203e      	movs	r0, #62	; 0x3e
2000067c:	f7ff ff96 	bl	200005ac <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);
20000680:	2118      	movs	r1, #24
20000682:	203f      	movs	r0, #63	; 0x3f
20000684:	f7ff ff92 	bl	200005ac <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
20000688:	2118      	movs	r1, #24
2000068a:	20c0      	movs	r0, #192	; 0xc0
2000068c:	f7ff ff8e 	bl	200005ac <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
20000690:	2118      	movs	r1, #24
20000692:	2040      	movs	r0, #64	; 0x40
20000694:	f7ff ff8a 	bl	200005ac <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
20000698:	2118      	movs	r1, #24
2000069a:	20b8      	movs	r0, #184	; 0xb8
2000069c:	f7ff ff86 	bl	200005ac <graphic_write_command>
	select_controller(0);
200006a0:	2000      	movs	r0, #0
200006a2:	f7ff fea9 	bl	200003f8 <select_controller>
}
200006a6:	46c0      	nop			; (mov r8, r8)
200006a8:	46bd      	mov	sp, r7
200006aa:	bd80      	pop	{r7, pc}
200006ac:	40021000 	andmi	r1, r2, r0
200006b0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200006b4 <graphic_clear_screen>:

void graphic_clear_screen(){
200006b4:	b580      	push	{r7, lr}
200006b6:	b082      	sub	sp, #8
200006b8:	af00      	add	r7, sp, #0
	for(int page = 0; page <=7; page++){
200006ba:	2300      	movs	r3, #0
200006bc:	607b      	str	r3, [r7, #4]
200006be:	e01e      	b.n	200006fe <graphic_clear_screen+0x4a>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
200006c0:	687b      	ldr	r3, [r7, #4]
200006c2:	b25b      	sxtb	r3, r3
200006c4:	2248      	movs	r2, #72	; 0x48
200006c6:	4252      	negs	r2, r2
200006c8:	4313      	orrs	r3, r2
200006ca:	b25b      	sxtb	r3, r3
200006cc:	b2db      	uxtb	r3, r3
200006ce:	2118      	movs	r1, #24
200006d0:	0018      	movs	r0, r3
200006d2:	f7ff ff6b 	bl	200005ac <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1 | B_CS2);
200006d6:	2118      	movs	r1, #24
200006d8:	2040      	movs	r0, #64	; 0x40
200006da:	f7ff ff67 	bl	200005ac <graphic_write_command>
		for (int adress = 0; adress <= 63; adress++)
200006de:	2300      	movs	r3, #0
200006e0:	603b      	str	r3, [r7, #0]
200006e2:	e006      	b.n	200006f2 <graphic_clear_screen+0x3e>
			graphic_write_data(0, B_CS1 | B_CS2);
200006e4:	2118      	movs	r1, #24
200006e6:	2000      	movs	r0, #0
200006e8:	f7ff ff80 	bl	200005ec <graphic_write_data>
		for (int adress = 0; adress <= 63; adress++)
200006ec:	683b      	ldr	r3, [r7, #0]
200006ee:	3301      	adds	r3, #1
200006f0:	603b      	str	r3, [r7, #0]
200006f2:	683b      	ldr	r3, [r7, #0]
200006f4:	2b3f      	cmp	r3, #63	; 0x3f
200006f6:	ddf5      	ble.n	200006e4 <graphic_clear_screen+0x30>
	for(int page = 0; page <=7; page++){
200006f8:	687b      	ldr	r3, [r7, #4]
200006fa:	3301      	adds	r3, #1
200006fc:	607b      	str	r3, [r7, #4]
200006fe:	687b      	ldr	r3, [r7, #4]
20000700:	2b07      	cmp	r3, #7
20000702:	dddd      	ble.n	200006c0 <graphic_clear_screen+0xc>
	}
}
20000704:	46c0      	nop			; (mov r8, r8)
20000706:	46bd      	mov	sp, r7
20000708:	b002      	add	sp, #8
2000070a:	bd80      	pop	{r7, pc}

2000070c <pixel>:

uint8_t backBuffer[1024]; // 128 * 64 / 8

void pixel (unsigned int x, unsigned int y){
2000070c:	b580      	push	{r7, lr}
2000070e:	b084      	sub	sp, #16
20000710:	af00      	add	r7, sp, #0
20000712:	6078      	str	r0, [r7, #4]
20000714:	6039      	str	r1, [r7, #0]
	uint8_t mask;
	int index = 0;
20000716:	2300      	movs	r3, #0
20000718:	60fb      	str	r3, [r7, #12]
	if (y < 1 || y > 64 || x < 1 || x > 128) 
2000071a:	683b      	ldr	r3, [r7, #0]
2000071c:	2b00      	cmp	r3, #0
2000071e:	d032      	beq.n	20000786 <pixel+0x7a>
20000720:	683b      	ldr	r3, [r7, #0]
20000722:	2b40      	cmp	r3, #64	; 0x40
20000724:	d82f      	bhi.n	20000786 <pixel+0x7a>
20000726:	687b      	ldr	r3, [r7, #4]
20000728:	2b00      	cmp	r3, #0
2000072a:	d02c      	beq.n	20000786 <pixel+0x7a>
2000072c:	687b      	ldr	r3, [r7, #4]
2000072e:	2b80      	cmp	r3, #128	; 0x80
20000730:	d829      	bhi.n	20000786 <pixel+0x7a>
		return;
	
	mask = 1 << ((y-1) % 8);
20000732:	683b      	ldr	r3, [r7, #0]
20000734:	3b01      	subs	r3, #1
20000736:	2207      	movs	r2, #7
20000738:	4013      	ands	r3, r2
2000073a:	2201      	movs	r2, #1
2000073c:	409a      	lsls	r2, r3
2000073e:	230b      	movs	r3, #11
20000740:	18fb      	adds	r3, r7, r3
20000742:	701a      	strb	r2, [r3, #0]
	
	if(x > 64){
20000744:	687b      	ldr	r3, [r7, #4]
20000746:	2b40      	cmp	r3, #64	; 0x40
20000748:	d905      	bls.n	20000756 <pixel+0x4a>
		index = 512;
2000074a:	2380      	movs	r3, #128	; 0x80
2000074c:	009b      	lsls	r3, r3, #2
2000074e:	60fb      	str	r3, [r7, #12]
		x -= 65;
20000750:	687b      	ldr	r3, [r7, #4]
20000752:	3b41      	subs	r3, #65	; 0x41
20000754:	607b      	str	r3, [r7, #4]
	}
	
	index += x + ((y-1) / 8) * 64; 
20000756:	683b      	ldr	r3, [r7, #0]
20000758:	3b01      	subs	r3, #1
2000075a:	08db      	lsrs	r3, r3, #3
2000075c:	019a      	lsls	r2, r3, #6
2000075e:	687b      	ldr	r3, [r7, #4]
20000760:	18d2      	adds	r2, r2, r3
20000762:	68fb      	ldr	r3, [r7, #12]
20000764:	18d3      	adds	r3, r2, r3
20000766:	60fb      	str	r3, [r7, #12]
	
	backBuffer[index] |= mask;
20000768:	4a09      	ldr	r2, [pc, #36]	; (20000790 <pixel+0x84>)
2000076a:	68fb      	ldr	r3, [r7, #12]
2000076c:	18d3      	adds	r3, r2, r3
2000076e:	781a      	ldrb	r2, [r3, #0]
20000770:	230b      	movs	r3, #11
20000772:	18fb      	adds	r3, r7, r3
20000774:	781b      	ldrb	r3, [r3, #0]
20000776:	4313      	orrs	r3, r2
20000778:	b2d9      	uxtb	r1, r3
2000077a:	4a05      	ldr	r2, [pc, #20]	; (20000790 <pixel+0x84>)
2000077c:	68fb      	ldr	r3, [r7, #12]
2000077e:	18d3      	adds	r3, r2, r3
20000780:	1c0a      	adds	r2, r1, #0
20000782:	701a      	strb	r2, [r3, #0]
20000784:	e000      	b.n	20000788 <pixel+0x7c>
		return;
20000786:	46c0      	nop			; (mov r8, r8)
}
20000788:	46bd      	mov	sp, r7
2000078a:	b004      	add	sp, #16
2000078c:	bd80      	pop	{r7, pc}
2000078e:	46c0      	nop			; (mov r8, r8)
20000790:	20000f20 	andcs	r0, r0, r0, lsr #30

20000794 <graphic_draw_screen>:

void graphic_draw_screen(void) {
20000794:	b580      	push	{r7, lr}
20000796:	b084      	sub	sp, #16
20000798:	af00      	add	r7, sp, #0
	uint8_t i, j, controller, c;
	unsigned int k = 0;
2000079a:	2300      	movs	r3, #0
2000079c:	60bb      	str	r3, [r7, #8]
	for(c = 0; c < 2; c++) {
2000079e:	230d      	movs	r3, #13
200007a0:	18fb      	adds	r3, r7, r3
200007a2:	2200      	movs	r2, #0
200007a4:	701a      	strb	r2, [r3, #0]
200007a6:	e04f      	b.n	20000848 <graphic_draw_screen+0xb4>
		controller = (c == 0) ? B_CS1 : B_CS2;
200007a8:	230d      	movs	r3, #13
200007aa:	18fb      	adds	r3, r7, r3
200007ac:	781b      	ldrb	r3, [r3, #0]
200007ae:	2b00      	cmp	r3, #0
200007b0:	d101      	bne.n	200007b6 <graphic_draw_screen+0x22>
200007b2:	2208      	movs	r2, #8
200007b4:	e000      	b.n	200007b8 <graphic_draw_screen+0x24>
200007b6:	2210      	movs	r2, #16
200007b8:	1dfb      	adds	r3, r7, #7
200007ba:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 8; j++) {
200007bc:	230e      	movs	r3, #14
200007be:	18fb      	adds	r3, r7, r3
200007c0:	2200      	movs	r2, #0
200007c2:	701a      	strb	r2, [r3, #0]
200007c4:	e035      	b.n	20000832 <graphic_draw_screen+0x9e>
			graphic_write_command(LCD_SET_PAGE | j, controller);
200007c6:	230e      	movs	r3, #14
200007c8:	18fb      	adds	r3, r7, r3
200007ca:	781b      	ldrb	r3, [r3, #0]
200007cc:	2248      	movs	r2, #72	; 0x48
200007ce:	4252      	negs	r2, r2
200007d0:	4313      	orrs	r3, r2
200007d2:	b2da      	uxtb	r2, r3
200007d4:	1dfb      	adds	r3, r7, #7
200007d6:	781b      	ldrb	r3, [r3, #0]
200007d8:	0019      	movs	r1, r3
200007da:	0010      	movs	r0, r2
200007dc:	f7ff fee6 	bl	200005ac <graphic_write_command>
			graphic_write_command(LCD_SET_ADD | 0, controller);
200007e0:	1dfb      	adds	r3, r7, #7
200007e2:	781b      	ldrb	r3, [r3, #0]
200007e4:	0019      	movs	r1, r3
200007e6:	2040      	movs	r0, #64	; 0x40
200007e8:	f7ff fee0 	bl	200005ac <graphic_write_command>
			for(i = 0; i <= 63; i++, k++) {
200007ec:	230f      	movs	r3, #15
200007ee:	18fb      	adds	r3, r7, r3
200007f0:	2200      	movs	r2, #0
200007f2:	701a      	strb	r2, [r3, #0]
200007f4:	e012      	b.n	2000081c <graphic_draw_screen+0x88>
				graphic_write_data(backBuffer[k], controller);
200007f6:	4a19      	ldr	r2, [pc, #100]	; (2000085c <graphic_draw_screen+0xc8>)
200007f8:	68bb      	ldr	r3, [r7, #8]
200007fa:	18d3      	adds	r3, r2, r3
200007fc:	781a      	ldrb	r2, [r3, #0]
200007fe:	1dfb      	adds	r3, r7, #7
20000800:	781b      	ldrb	r3, [r3, #0]
20000802:	0019      	movs	r1, r3
20000804:	0010      	movs	r0, r2
20000806:	f7ff fef1 	bl	200005ec <graphic_write_data>
			for(i = 0; i <= 63; i++, k++) {
2000080a:	210f      	movs	r1, #15
2000080c:	187b      	adds	r3, r7, r1
2000080e:	781a      	ldrb	r2, [r3, #0]
20000810:	187b      	adds	r3, r7, r1
20000812:	3201      	adds	r2, #1
20000814:	701a      	strb	r2, [r3, #0]
20000816:	68bb      	ldr	r3, [r7, #8]
20000818:	3301      	adds	r3, #1
2000081a:	60bb      	str	r3, [r7, #8]
2000081c:	230f      	movs	r3, #15
2000081e:	18fb      	adds	r3, r7, r3
20000820:	781b      	ldrb	r3, [r3, #0]
20000822:	2b3f      	cmp	r3, #63	; 0x3f
20000824:	d9e7      	bls.n	200007f6 <graphic_draw_screen+0x62>
		for(j = 0; j < 8; j++) {
20000826:	210e      	movs	r1, #14
20000828:	187b      	adds	r3, r7, r1
2000082a:	781a      	ldrb	r2, [r3, #0]
2000082c:	187b      	adds	r3, r7, r1
2000082e:	3201      	adds	r2, #1
20000830:	701a      	strb	r2, [r3, #0]
20000832:	230e      	movs	r3, #14
20000834:	18fb      	adds	r3, r7, r3
20000836:	781b      	ldrb	r3, [r3, #0]
20000838:	2b07      	cmp	r3, #7
2000083a:	d9c4      	bls.n	200007c6 <graphic_draw_screen+0x32>
	for(c = 0; c < 2; c++) {
2000083c:	210d      	movs	r1, #13
2000083e:	187b      	adds	r3, r7, r1
20000840:	781a      	ldrb	r2, [r3, #0]
20000842:	187b      	adds	r3, r7, r1
20000844:	3201      	adds	r2, #1
20000846:	701a      	strb	r2, [r3, #0]
20000848:	230d      	movs	r3, #13
2000084a:	18fb      	adds	r3, r7, r3
2000084c:	781b      	ldrb	r3, [r3, #0]
2000084e:	2b01      	cmp	r3, #1
20000850:	d9aa      	bls.n	200007a8 <graphic_draw_screen+0x14>
	}	}	}
}
20000852:	46c0      	nop			; (mov r8, r8)
20000854:	46bd      	mov	sp, r7
20000856:	b004      	add	sp, #16
20000858:	bd80      	pop	{r7, pc}
2000085a:	46c0      	nop			; (mov r8, r8)
2000085c:	20000f20 	andcs	r0, r0, r0, lsr #30

20000860 <clear_backBuffer>:

void clear_backBuffer() {
20000860:	b580      	push	{r7, lr}
20000862:	b082      	sub	sp, #8
20000864:	af00      	add	r7, sp, #0
	int i;
	for (i = 0; i < 1024; i++)
20000866:	2300      	movs	r3, #0
20000868:	607b      	str	r3, [r7, #4]
2000086a:	e007      	b.n	2000087c <clear_backBuffer+0x1c>
		backBuffer[i] = 0;
2000086c:	4a07      	ldr	r2, [pc, #28]	; (2000088c <clear_backBuffer+0x2c>)
2000086e:	687b      	ldr	r3, [r7, #4]
20000870:	18d3      	adds	r3, r2, r3
20000872:	2200      	movs	r2, #0
20000874:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 1024; i++)
20000876:	687b      	ldr	r3, [r7, #4]
20000878:	3301      	adds	r3, #1
2000087a:	607b      	str	r3, [r7, #4]
2000087c:	687b      	ldr	r3, [r7, #4]
2000087e:	4a04      	ldr	r2, [pc, #16]	; (20000890 <clear_backBuffer+0x30>)
20000880:	4293      	cmp	r3, r2
20000882:	ddf3      	ble.n	2000086c <clear_backBuffer+0xc>
}
20000884:	46c0      	nop			; (mov r8, r8)
20000886:	46bd      	mov	sp, r7
20000888:	b002      	add	sp, #8
2000088a:	bd80      	pop	{r7, pc}
2000088c:	20000f20 	andcs	r0, r0, r0, lsr #30
20000890:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20000894 <keyb_init>:
 *
 */

#include "game_startup.h"

void keyb_init(void){
20000894:	b580      	push	{r7, lr}
20000896:	af00      	add	r7, sp, #0
#ifdef USBDM
	*((unsigned long *) 0x40023830) = 0x18; //starta clockor port E, D
	//__asm volatile ( " LDR R0,=0x8000209\n BLX R0 \n //initiera PLL");
#endif

	GPIO_MODER_D &= 0;
20000898:	4b0c      	ldr	r3, [pc, #48]	; (200008cc <keyb_init+0x38>)
2000089a:	681b      	ldr	r3, [r3, #0]
2000089c:	4b0b      	ldr	r3, [pc, #44]	; (200008cc <keyb_init+0x38>)
2000089e:	2200      	movs	r2, #0
200008a0:	601a      	str	r2, [r3, #0]
	GPIO_MODER_D |= 0x55005555; //pin 1 - 8 display, pin 9 - 15 keyboard ( b0 - b3 input, b4 - b7 output) 
200008a2:	4b0a      	ldr	r3, [pc, #40]	; (200008cc <keyb_init+0x38>)
200008a4:	681a      	ldr	r2, [r3, #0]
200008a6:	4b09      	ldr	r3, [pc, #36]	; (200008cc <keyb_init+0x38>)
200008a8:	4909      	ldr	r1, [pc, #36]	; (200008d0 <keyb_init+0x3c>)
200008aa:	430a      	orrs	r2, r1
200008ac:	601a      	str	r2, [r3, #0]
	
	GPIO_OTYPER_D |= 0x0000; //push-pull output type
200008ae:	4a09      	ldr	r2, [pc, #36]	; (200008d4 <keyb_init+0x40>)
200008b0:	4b08      	ldr	r3, [pc, #32]	; (200008d4 <keyb_init+0x40>)
200008b2:	8812      	ldrh	r2, [r2, #0]
200008b4:	b292      	uxth	r2, r2
200008b6:	801a      	strh	r2, [r3, #0]
	
	GPIO_PUPDR_D |= 0x00AA0000; //pull-down input
200008b8:	4b07      	ldr	r3, [pc, #28]	; (200008d8 <keyb_init+0x44>)
200008ba:	681a      	ldr	r2, [r3, #0]
200008bc:	4b06      	ldr	r3, [pc, #24]	; (200008d8 <keyb_init+0x44>)
200008be:	21aa      	movs	r1, #170	; 0xaa
200008c0:	0409      	lsls	r1, r1, #16
200008c2:	430a      	orrs	r2, r1
200008c4:	601a      	str	r2, [r3, #0]
}
200008c6:	46c0      	nop			; (mov r8, r8)
200008c8:	46bd      	mov	sp, r7
200008ca:	bd80      	pop	{r7, pc}
200008cc:	40020c00 	andmi	r0, r2, r0, lsl #24
200008d0:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
200008d4:	40020c04 	andmi	r0, r2, r4, lsl #24
200008d8:	40020c0c 	andmi	r0, r2, ip, lsl #24

200008dc <out7seg>:

void out7seg (unsigned char c){
200008dc:	b580      	push	{r7, lr}
200008de:	b082      	sub	sp, #8
200008e0:	af00      	add	r7, sp, #0
200008e2:	0002      	movs	r2, r0
200008e4:	1dfb      	adds	r3, r7, #7
200008e6:	701a      	strb	r2, [r3, #0]
	switch(c){
200008e8:	1dfb      	adds	r3, r7, #7
200008ea:	781b      	ldrb	r3, [r3, #0]
200008ec:	2b0f      	cmp	r3, #15
200008ee:	d844      	bhi.n	2000097a <out7seg+0x9e>
200008f0:	009a      	lsls	r2, r3, #2
200008f2:	4b26      	ldr	r3, [pc, #152]	; (2000098c <out7seg+0xb0>)
200008f4:	18d3      	adds	r3, r2, r3
200008f6:	681b      	ldr	r3, [r3, #0]
200008f8:	469f      	mov	pc, r3
		case 0: GPIO_ODR_D_LOW = 0x3F; break;
200008fa:	4b25      	ldr	r3, [pc, #148]	; (20000990 <out7seg+0xb4>)
200008fc:	223f      	movs	r2, #63	; 0x3f
200008fe:	701a      	strb	r2, [r3, #0]
20000900:	e03f      	b.n	20000982 <out7seg+0xa6>
		case 1: GPIO_ODR_D_LOW = 0x06; break;
20000902:	4b23      	ldr	r3, [pc, #140]	; (20000990 <out7seg+0xb4>)
20000904:	2206      	movs	r2, #6
20000906:	701a      	strb	r2, [r3, #0]
20000908:	e03b      	b.n	20000982 <out7seg+0xa6>
		case 2: GPIO_ODR_D_LOW = 0x5B; break;
2000090a:	4b21      	ldr	r3, [pc, #132]	; (20000990 <out7seg+0xb4>)
2000090c:	225b      	movs	r2, #91	; 0x5b
2000090e:	701a      	strb	r2, [r3, #0]
20000910:	e037      	b.n	20000982 <out7seg+0xa6>
		case 3: GPIO_ODR_D_LOW = 0x4F; break;
20000912:	4b1f      	ldr	r3, [pc, #124]	; (20000990 <out7seg+0xb4>)
20000914:	224f      	movs	r2, #79	; 0x4f
20000916:	701a      	strb	r2, [r3, #0]
20000918:	e033      	b.n	20000982 <out7seg+0xa6>
		case 4: GPIO_ODR_D_LOW = 0x66; break;
2000091a:	4b1d      	ldr	r3, [pc, #116]	; (20000990 <out7seg+0xb4>)
2000091c:	2266      	movs	r2, #102	; 0x66
2000091e:	701a      	strb	r2, [r3, #0]
20000920:	e02f      	b.n	20000982 <out7seg+0xa6>
		case 5: GPIO_ODR_D_LOW = 0x6D; break;
20000922:	4b1b      	ldr	r3, [pc, #108]	; (20000990 <out7seg+0xb4>)
20000924:	226d      	movs	r2, #109	; 0x6d
20000926:	701a      	strb	r2, [r3, #0]
20000928:	e02b      	b.n	20000982 <out7seg+0xa6>
		case 6: GPIO_ODR_D_LOW = 0x7D; break;
2000092a:	4b19      	ldr	r3, [pc, #100]	; (20000990 <out7seg+0xb4>)
2000092c:	227d      	movs	r2, #125	; 0x7d
2000092e:	701a      	strb	r2, [r3, #0]
20000930:	e027      	b.n	20000982 <out7seg+0xa6>
		case 7: GPIO_ODR_D_LOW = 0x07; break;
20000932:	4b17      	ldr	r3, [pc, #92]	; (20000990 <out7seg+0xb4>)
20000934:	2207      	movs	r2, #7
20000936:	701a      	strb	r2, [r3, #0]
20000938:	e023      	b.n	20000982 <out7seg+0xa6>
		case 8: GPIO_ODR_D_LOW = 0x7F; break;
2000093a:	4b15      	ldr	r3, [pc, #84]	; (20000990 <out7seg+0xb4>)
2000093c:	227f      	movs	r2, #127	; 0x7f
2000093e:	701a      	strb	r2, [r3, #0]
20000940:	e01f      	b.n	20000982 <out7seg+0xa6>
		case 9: GPIO_ODR_D_LOW = 0x6F; break;
20000942:	4b13      	ldr	r3, [pc, #76]	; (20000990 <out7seg+0xb4>)
20000944:	226f      	movs	r2, #111	; 0x6f
20000946:	701a      	strb	r2, [r3, #0]
20000948:	e01b      	b.n	20000982 <out7seg+0xa6>
		case 0xA: GPIO_ODR_D_LOW = 0x77; break;
2000094a:	4b11      	ldr	r3, [pc, #68]	; (20000990 <out7seg+0xb4>)
2000094c:	2277      	movs	r2, #119	; 0x77
2000094e:	701a      	strb	r2, [r3, #0]
20000950:	e017      	b.n	20000982 <out7seg+0xa6>
		case 0xB: GPIO_ODR_D_LOW = 0x7C; break;
20000952:	4b0f      	ldr	r3, [pc, #60]	; (20000990 <out7seg+0xb4>)
20000954:	227c      	movs	r2, #124	; 0x7c
20000956:	701a      	strb	r2, [r3, #0]
20000958:	e013      	b.n	20000982 <out7seg+0xa6>
		case 0xC: GPIO_ODR_D_LOW = 0x39; break;
2000095a:	4b0d      	ldr	r3, [pc, #52]	; (20000990 <out7seg+0xb4>)
2000095c:	2239      	movs	r2, #57	; 0x39
2000095e:	701a      	strb	r2, [r3, #0]
20000960:	e00f      	b.n	20000982 <out7seg+0xa6>
		case 0xD: GPIO_ODR_D_LOW = 0x3F; break;
20000962:	4b0b      	ldr	r3, [pc, #44]	; (20000990 <out7seg+0xb4>)
20000964:	223f      	movs	r2, #63	; 0x3f
20000966:	701a      	strb	r2, [r3, #0]
20000968:	e00b      	b.n	20000982 <out7seg+0xa6>
		case 0xE: GPIO_ODR_D_LOW = 0x79; break;
2000096a:	4b09      	ldr	r3, [pc, #36]	; (20000990 <out7seg+0xb4>)
2000096c:	2279      	movs	r2, #121	; 0x79
2000096e:	701a      	strb	r2, [r3, #0]
20000970:	e007      	b.n	20000982 <out7seg+0xa6>
		case 0xF: GPIO_ODR_D_LOW = 0x71; break;
20000972:	4b07      	ldr	r3, [pc, #28]	; (20000990 <out7seg+0xb4>)
20000974:	2271      	movs	r2, #113	; 0x71
20000976:	701a      	strb	r2, [r3, #0]
20000978:	e003      	b.n	20000982 <out7seg+0xa6>
		
		default: GPIO_ODR_D_LOW = 0x00; break;
2000097a:	4b05      	ldr	r3, [pc, #20]	; (20000990 <out7seg+0xb4>)
2000097c:	2200      	movs	r2, #0
2000097e:	701a      	strb	r2, [r3, #0]
20000980:	46c0      	nop			; (mov r8, r8)
	}
}
20000982:	46c0      	nop			; (mov r8, r8)
20000984:	46bd      	mov	sp, r7
20000986:	b002      	add	sp, #8
20000988:	bd80      	pop	{r7, pc}
2000098a:	46c0      	nop			; (mov r8, r8)
2000098c:	200017b0 			; <UNDEFINED> instruction: 0x200017b0
20000990:	40020c14 	andmi	r0, r2, r4, lsl ip

20000994 <keybActivate>:

void keybActivate(unsigned int row){
20000994:	b580      	push	{r7, lr}
20000996:	b082      	sub	sp, #8
20000998:	af00      	add	r7, sp, #0
2000099a:	6078      	str	r0, [r7, #4]
	switch(row){
2000099c:	687b      	ldr	r3, [r7, #4]
2000099e:	2b04      	cmp	r3, #4
200009a0:	d819      	bhi.n	200009d6 <keybActivate+0x42>
200009a2:	687b      	ldr	r3, [r7, #4]
200009a4:	009a      	lsls	r2, r3, #2
200009a6:	4b0e      	ldr	r3, [pc, #56]	; (200009e0 <keybActivate+0x4c>)
200009a8:	18d3      	adds	r3, r2, r3
200009aa:	681b      	ldr	r3, [r3, #0]
200009ac:	469f      	mov	pc, r3
		case 1: GPIO_ODR_D_HIGH = 0x10; break;//eller GPIO_ODR_D_HIGH = (1<<(row+3));
200009ae:	4b0d      	ldr	r3, [pc, #52]	; (200009e4 <keybActivate+0x50>)
200009b0:	2210      	movs	r2, #16
200009b2:	701a      	strb	r2, [r3, #0]
200009b4:	e00f      	b.n	200009d6 <keybActivate+0x42>
		case 2: GPIO_ODR_D_HIGH = 0x20; break;
200009b6:	4b0b      	ldr	r3, [pc, #44]	; (200009e4 <keybActivate+0x50>)
200009b8:	2220      	movs	r2, #32
200009ba:	701a      	strb	r2, [r3, #0]
200009bc:	e00b      	b.n	200009d6 <keybActivate+0x42>
		case 3: GPIO_ODR_D_HIGH = 0x40; break;
200009be:	4b09      	ldr	r3, [pc, #36]	; (200009e4 <keybActivate+0x50>)
200009c0:	2240      	movs	r2, #64	; 0x40
200009c2:	701a      	strb	r2, [r3, #0]
200009c4:	e007      	b.n	200009d6 <keybActivate+0x42>
		case 4: GPIO_ODR_D_HIGH = 0x80; break;
200009c6:	4b07      	ldr	r3, [pc, #28]	; (200009e4 <keybActivate+0x50>)
200009c8:	2280      	movs	r2, #128	; 0x80
200009ca:	701a      	strb	r2, [r3, #0]
200009cc:	e003      	b.n	200009d6 <keybActivate+0x42>
		case 0: GPIO_ODR_D_HIGH = 0x00; break;
200009ce:	4b05      	ldr	r3, [pc, #20]	; (200009e4 <keybActivate+0x50>)
200009d0:	2200      	movs	r2, #0
200009d2:	701a      	strb	r2, [r3, #0]
200009d4:	46c0      	nop			; (mov r8, r8)
	}
}
200009d6:	46c0      	nop			; (mov r8, r8)
200009d8:	46bd      	mov	sp, r7
200009da:	b002      	add	sp, #8
200009dc:	bd80      	pop	{r7, pc}
200009de:	46c0      	nop			; (mov r8, r8)
200009e0:	200017f0 	strdcs	r1, [r0], -r0
200009e4:	40020c15 	andmi	r0, r2, r5, lsl ip

200009e8 <keybGetCol>:

int keybGetCol(void){
200009e8:	b580      	push	{r7, lr}
200009ea:	b082      	sub	sp, #8
200009ec:	af00      	add	r7, sp, #0
	unsigned char c = GPIO_IDR_D_HIGH;
200009ee:	4a12      	ldr	r2, [pc, #72]	; (20000a38 <keybGetCol+0x50>)
200009f0:	1dfb      	adds	r3, r7, #7
200009f2:	7812      	ldrb	r2, [r2, #0]
200009f4:	701a      	strb	r2, [r3, #0]
	if(c & 0x8) return 4;
200009f6:	1dfb      	adds	r3, r7, #7
200009f8:	781b      	ldrb	r3, [r3, #0]
200009fa:	2208      	movs	r2, #8
200009fc:	4013      	ands	r3, r2
200009fe:	d001      	beq.n	20000a04 <keybGetCol+0x1c>
20000a00:	2304      	movs	r3, #4
20000a02:	e015      	b.n	20000a30 <keybGetCol+0x48>
	if(c & 0x4) return 3;
20000a04:	1dfb      	adds	r3, r7, #7
20000a06:	781b      	ldrb	r3, [r3, #0]
20000a08:	2204      	movs	r2, #4
20000a0a:	4013      	ands	r3, r2
20000a0c:	d001      	beq.n	20000a12 <keybGetCol+0x2a>
20000a0e:	2303      	movs	r3, #3
20000a10:	e00e      	b.n	20000a30 <keybGetCol+0x48>
	if(c & 0x2) return 2;
20000a12:	1dfb      	adds	r3, r7, #7
20000a14:	781b      	ldrb	r3, [r3, #0]
20000a16:	2202      	movs	r2, #2
20000a18:	4013      	ands	r3, r2
20000a1a:	d001      	beq.n	20000a20 <keybGetCol+0x38>
20000a1c:	2302      	movs	r3, #2
20000a1e:	e007      	b.n	20000a30 <keybGetCol+0x48>
	if(c & 0x1) return 1;
20000a20:	1dfb      	adds	r3, r7, #7
20000a22:	781b      	ldrb	r3, [r3, #0]
20000a24:	2201      	movs	r2, #1
20000a26:	4013      	ands	r3, r2
20000a28:	d001      	beq.n	20000a2e <keybGetCol+0x46>
20000a2a:	2301      	movs	r3, #1
20000a2c:	e000      	b.n	20000a30 <keybGetCol+0x48>
	return 0;
20000a2e:	2300      	movs	r3, #0
}
20000a30:	0018      	movs	r0, r3
20000a32:	46bd      	mov	sp, r7
20000a34:	b002      	add	sp, #8
20000a36:	bd80      	pop	{r7, pc}
20000a38:	40020c11 	andmi	r0, r2, r1, lsl ip

20000a3c <keyb>:

unsigned char keyb(void){
20000a3c:	b590      	push	{r4, r7, lr}
20000a3e:	b087      	sub	sp, #28
20000a40:	af00      	add	r7, sp, #0
	int row, column;
	unsigned char key[] = {1,2,3,0xA,4,5,6,0xB,7,8,9,0xC,0xE,0,0xF,0xD};
20000a42:	003b      	movs	r3, r7
20000a44:	4a16      	ldr	r2, [pc, #88]	; (20000aa0 <keyb+0x64>)
20000a46:	ca13      	ldmia	r2!, {r0, r1, r4}
20000a48:	c313      	stmia	r3!, {r0, r1, r4}
20000a4a:	6812      	ldr	r2, [r2, #0]
20000a4c:	601a      	str	r2, [r3, #0]
	for(row = 1; row <=4; row++){
20000a4e:	2301      	movs	r3, #1
20000a50:	617b      	str	r3, [r7, #20]
20000a52:	e019      	b.n	20000a88 <keyb+0x4c>
		keybActivate(row);
20000a54:	697b      	ldr	r3, [r7, #20]
20000a56:	0018      	movs	r0, r3
20000a58:	f7ff ff9c 	bl	20000994 <keybActivate>
		if( (column = keybGetCol()) )
20000a5c:	f7ff ffc4 	bl	200009e8 <keybGetCol>
20000a60:	0003      	movs	r3, r0
20000a62:	613b      	str	r3, [r7, #16]
20000a64:	693b      	ldr	r3, [r7, #16]
20000a66:	2b00      	cmp	r3, #0
20000a68:	d00b      	beq.n	20000a82 <keyb+0x46>
		{
			keybActivate(0); //To clear the register??
20000a6a:	2000      	movs	r0, #0
20000a6c:	f7ff ff92 	bl	20000994 <keybActivate>
			return key[4*(row-1) + (column-1)];
20000a70:	697b      	ldr	r3, [r7, #20]
20000a72:	3b01      	subs	r3, #1
20000a74:	009a      	lsls	r2, r3, #2
20000a76:	693b      	ldr	r3, [r7, #16]
20000a78:	3b01      	subs	r3, #1
20000a7a:	18d3      	adds	r3, r2, r3
20000a7c:	003a      	movs	r2, r7
20000a7e:	5cd3      	ldrb	r3, [r2, r3]
20000a80:	e009      	b.n	20000a96 <keyb+0x5a>
	for(row = 1; row <=4; row++){
20000a82:	697b      	ldr	r3, [r7, #20]
20000a84:	3301      	adds	r3, #1
20000a86:	617b      	str	r3, [r7, #20]
20000a88:	697b      	ldr	r3, [r7, #20]
20000a8a:	2b04      	cmp	r3, #4
20000a8c:	dde2      	ble.n	20000a54 <keyb+0x18>
		}
	}
	keybActivate(0);
20000a8e:	2000      	movs	r0, #0
20000a90:	f7ff ff80 	bl	20000994 <keybActivate>
	return 0xFF;
20000a94:	23ff      	movs	r3, #255	; 0xff
}
20000a96:	0018      	movs	r0, r3
20000a98:	46bd      	mov	sp, r7
20000a9a:	b007      	add	sp, #28
20000a9c:	bd90      	pop	{r4, r7, pc}
20000a9e:	46c0      	nop			; (mov r8, r8)
20000aa0:	20001804 	andcs	r1, r0, r4, lsl #16

20000aa4 <delay_250ns>:
 *
 */

#include "game_startup.h"

void delay_250ns(void){
20000aa4:	b580      	push	{r7, lr}
20000aa6:	af00      	add	r7, sp, #0
	STK_CTRL = 0;
20000aa8:	4b0c      	ldr	r3, [pc, #48]	; (20000adc <delay_250ns+0x38>)
20000aaa:	2200      	movs	r2, #0
20000aac:	601a      	str	r2, [r3, #0]
	STK_LOAD = ((168/4) - 1);
20000aae:	4b0c      	ldr	r3, [pc, #48]	; (20000ae0 <delay_250ns+0x3c>)
20000ab0:	2229      	movs	r2, #41	; 0x29
20000ab2:	601a      	str	r2, [r3, #0]
	STK_VAL = 0;
20000ab4:	4b0b      	ldr	r3, [pc, #44]	; (20000ae4 <delay_250ns+0x40>)
20000ab6:	2200      	movs	r2, #0
20000ab8:	601a      	str	r2, [r3, #0]
	STK_CTRL = 5;
20000aba:	4b08      	ldr	r3, [pc, #32]	; (20000adc <delay_250ns+0x38>)
20000abc:	2205      	movs	r2, #5
20000abe:	601a      	str	r2, [r3, #0]
	
	while((STK_CTRL & 0x10000) == 0){};
20000ac0:	46c0      	nop			; (mov r8, r8)
20000ac2:	4b06      	ldr	r3, [pc, #24]	; (20000adc <delay_250ns+0x38>)
20000ac4:	681a      	ldr	r2, [r3, #0]
20000ac6:	2380      	movs	r3, #128	; 0x80
20000ac8:	025b      	lsls	r3, r3, #9
20000aca:	4013      	ands	r3, r2
20000acc:	d0f9      	beq.n	20000ac2 <delay_250ns+0x1e>
	STK_CTRL = 0;
20000ace:	4b03      	ldr	r3, [pc, #12]	; (20000adc <delay_250ns+0x38>)
20000ad0:	2200      	movs	r2, #0
20000ad2:	601a      	str	r2, [r3, #0]
}
20000ad4:	46c0      	nop			; (mov r8, r8)
20000ad6:	46bd      	mov	sp, r7
20000ad8:	bd80      	pop	{r7, pc}
20000ada:	46c0      	nop			; (mov r8, r8)
20000adc:	e000e010 	and	lr, r0, r0, lsl r0
20000ae0:	e000e014 	and	lr, r0, r4, lsl r0
20000ae4:	e000e018 	and	lr, r0, r8, lsl r0

20000ae8 <delay_micro>:

void delay_micro(unsigned int us){
20000ae8:	b580      	push	{r7, lr}
20000aea:	b082      	sub	sp, #8
20000aec:	af00      	add	r7, sp, #0
20000aee:	6078      	str	r0, [r7, #4]
	while(us--){
20000af0:	e007      	b.n	20000b02 <delay_micro+0x1a>
		delay_250ns();
20000af2:	f7ff ffd7 	bl	20000aa4 <delay_250ns>
		delay_250ns();
20000af6:	f7ff ffd5 	bl	20000aa4 <delay_250ns>
		delay_250ns(); 
20000afa:	f7ff ffd3 	bl	20000aa4 <delay_250ns>
		delay_250ns();
20000afe:	f7ff ffd1 	bl	20000aa4 <delay_250ns>
	while(us--){
20000b02:	687b      	ldr	r3, [r7, #4]
20000b04:	1e5a      	subs	r2, r3, #1
20000b06:	607a      	str	r2, [r7, #4]
20000b08:	2b00      	cmp	r3, #0
20000b0a:	d1f2      	bne.n	20000af2 <delay_micro+0xa>
	}
}
20000b0c:	46c0      	nop			; (mov r8, r8)
20000b0e:	46bd      	mov	sp, r7
20000b10:	b002      	add	sp, #8
20000b12:	bd80      	pop	{r7, pc}

20000b14 <delay_milli>:

void delay_milli(unsigned int ms){
20000b14:	b580      	push	{r7, lr}
20000b16:	b082      	sub	sp, #8
20000b18:	af00      	add	r7, sp, #0
20000b1a:	6078      	str	r0, [r7, #4]

#ifdef SIMULATOR
	ms = ms / 100;
20000b1c:	687b      	ldr	r3, [r7, #4]
20000b1e:	2164      	movs	r1, #100	; 0x64
20000b20:	0018      	movs	r0, r3
20000b22:	f000 f971 	bl	20000e08 <__udivsi3>
20000b26:	0003      	movs	r3, r0
20000b28:	607b      	str	r3, [r7, #4]
	ms++;
20000b2a:	687b      	ldr	r3, [r7, #4]
20000b2c:	3301      	adds	r3, #1
20000b2e:	607b      	str	r3, [r7, #4]
#endif
	
	while( ms-- )
20000b30:	e004      	b.n	20000b3c <delay_milli+0x28>
		delay_micro(1000);
20000b32:	23fa      	movs	r3, #250	; 0xfa
20000b34:	009b      	lsls	r3, r3, #2
20000b36:	0018      	movs	r0, r3
20000b38:	f7ff ffd6 	bl	20000ae8 <delay_micro>
	while( ms-- )
20000b3c:	687b      	ldr	r3, [r7, #4]
20000b3e:	1e5a      	subs	r2, r3, #1
20000b40:	607a      	str	r2, [r7, #4]
20000b42:	2b00      	cmp	r3, #0
20000b44:	d1f5      	bne.n	20000b32 <delay_milli+0x1e>
}
20000b46:	46c0      	nop			; (mov r8, r8)
20000b48:	46bd      	mov	sp, r7
20000b4a:	b002      	add	sp, #8
20000b4c:	bd80      	pop	{r7, pc}

20000b4e <delay_500ns>:

void delay_500ns(void){
20000b4e:	b580      	push	{r7, lr}
20000b50:	af00      	add	r7, sp, #0
	delay_250ns();
20000b52:	f7ff ffa7 	bl	20000aa4 <delay_250ns>
	delay_250ns();
20000b56:	f7ff ffa5 	bl	20000aa4 <delay_250ns>
20000b5a:	46c0      	nop			; (mov r8, r8)
20000b5c:	46bd      	mov	sp, r7
20000b5e:	bd80      	pop	{r7, pc}

20000b60 <ascii_write_controller>:
 */
 
 #include "game_startup.h"


void ascii_write_controller (unsigned char byte){                   //#define B_E		0x40
20000b60:	b580      	push	{r7, lr}
20000b62:	b082      	sub	sp, #8
20000b64:	af00      	add	r7, sp, #0
20000b66:	0002      	movs	r2, r0
20000b68:	1dfb      	adds	r3, r7, #7
20000b6a:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_E);
20000b6c:	2040      	movs	r0, #64	; 0x40
20000b6e:	f000 f829 	bl	20000bc4 <ascii_ctrl_bit_set>
	GPIO_ODR_E_HIGH = byte;															//#define B_SELECT 	4
20000b72:	4a06      	ldr	r2, [pc, #24]	; (20000b8c <ascii_write_controller+0x2c>)
20000b74:	1dfb      	adds	r3, r7, #7
20000b76:	781b      	ldrb	r3, [r3, #0]
20000b78:	7013      	strb	r3, [r2, #0]
	delay_250ns();															//#define B_RW 		2
20000b7a:	f7ff ff93 	bl	20000aa4 <delay_250ns>
	ascii_ctrl_bit_clear(B_E);																//#define B_RS 		1
20000b7e:	2040      	movs	r0, #64	; 0x40
20000b80:	f000 f838 	bl	20000bf4 <ascii_ctrl_bit_clear>
}
20000b84:	46c0      	nop			; (mov r8, r8)
20000b86:	46bd      	mov	sp, r7
20000b88:	b002      	add	sp, #8
20000b8a:	bd80      	pop	{r7, pc}
20000b8c:	40021015 	andmi	r1, r2, r5, lsl r0

20000b90 <ascii_read_controller>:

unsigned char ascii_read_controller (void){
20000b90:	b580      	push	{r7, lr}
20000b92:	b082      	sub	sp, #8
20000b94:	af00      	add	r7, sp, #0
	ascii_ctrl_bit_set(B_E);															//#define B_SELECT 	4
20000b96:	2040      	movs	r0, #64	; 0x40
20000b98:	f000 f814 	bl	20000bc4 <ascii_ctrl_bit_set>
	delay_250ns();
20000b9c:	f7ff ff82 	bl	20000aa4 <delay_250ns>
	delay_250ns();
20000ba0:	f7ff ff80 	bl	20000aa4 <delay_250ns>
	unsigned char byte = GPIO_IDR_E_HIGH;													//#define B_RW 		2
20000ba4:	4a06      	ldr	r2, [pc, #24]	; (20000bc0 <ascii_read_controller+0x30>)
20000ba6:	1dfb      	adds	r3, r7, #7
20000ba8:	7812      	ldrb	r2, [r2, #0]
20000baa:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
20000bac:	2040      	movs	r0, #64	; 0x40
20000bae:	f000 f821 	bl	20000bf4 <ascii_ctrl_bit_clear>
	return byte;
20000bb2:	1dfb      	adds	r3, r7, #7
20000bb4:	781b      	ldrb	r3, [r3, #0]
}
20000bb6:	0018      	movs	r0, r3
20000bb8:	46bd      	mov	sp, r7
20000bba:	b002      	add	sp, #8
20000bbc:	bd80      	pop	{r7, pc}
20000bbe:	46c0      	nop			; (mov r8, r8)
20000bc0:	40021011 	andmi	r1, r2, r1, lsl r0

20000bc4 <ascii_ctrl_bit_set>:

//Adresserar displayen och ettställer de bitar som är 1 i x
void ascii_ctrl_bit_set(unsigned char x){
20000bc4:	b580      	push	{r7, lr}
20000bc6:	b082      	sub	sp, #8
20000bc8:	af00      	add	r7, sp, #0
20000bca:	0002      	movs	r2, r0
20000bcc:	1dfb      	adds	r3, r7, #7
20000bce:	701a      	strb	r2, [r3, #0]
	GPIO_ODR_E_LOW |= (B_SELECT | x); 		
20000bd0:	4b07      	ldr	r3, [pc, #28]	; (20000bf0 <ascii_ctrl_bit_set+0x2c>)
20000bd2:	781b      	ldrb	r3, [r3, #0]
20000bd4:	b2da      	uxtb	r2, r3
20000bd6:	1dfb      	adds	r3, r7, #7
20000bd8:	781b      	ldrb	r3, [r3, #0]
20000bda:	4313      	orrs	r3, r2
20000bdc:	b2db      	uxtb	r3, r3
20000bde:	4a04      	ldr	r2, [pc, #16]	; (20000bf0 <ascii_ctrl_bit_set+0x2c>)
20000be0:	2104      	movs	r1, #4
20000be2:	430b      	orrs	r3, r1
20000be4:	b2db      	uxtb	r3, r3
20000be6:	7013      	strb	r3, [r2, #0]
}
20000be8:	46c0      	nop			; (mov r8, r8)
20000bea:	46bd      	mov	sp, r7
20000bec:	b002      	add	sp, #8
20000bee:	bd80      	pop	{r7, pc}
20000bf0:	40021014 	andmi	r1, r2, r4, lsl r0

20000bf4 <ascii_ctrl_bit_clear>:

//Adresserar displayen och nollställer de bitar som är 1 i x
void ascii_ctrl_bit_clear(unsigned char x){
20000bf4:	b580      	push	{r7, lr}
20000bf6:	b082      	sub	sp, #8
20000bf8:	af00      	add	r7, sp, #0
20000bfa:	0002      	movs	r2, r0
20000bfc:	1dfb      	adds	r3, r7, #7
20000bfe:	701a      	strb	r2, [r3, #0]
	GPIO_ODR_E_LOW &= (B_SELECT | ~x);
20000c00:	4b0a      	ldr	r3, [pc, #40]	; (20000c2c <ascii_ctrl_bit_clear+0x38>)
20000c02:	781b      	ldrb	r3, [r3, #0]
20000c04:	b2db      	uxtb	r3, r3
20000c06:	b25b      	sxtb	r3, r3
20000c08:	1dfa      	adds	r2, r7, #7
20000c0a:	7812      	ldrb	r2, [r2, #0]
20000c0c:	b252      	sxtb	r2, r2
20000c0e:	43d2      	mvns	r2, r2
20000c10:	b252      	sxtb	r2, r2
20000c12:	2104      	movs	r1, #4
20000c14:	430a      	orrs	r2, r1
20000c16:	b252      	sxtb	r2, r2
20000c18:	4013      	ands	r3, r2
20000c1a:	b25a      	sxtb	r2, r3
20000c1c:	4b03      	ldr	r3, [pc, #12]	; (20000c2c <ascii_ctrl_bit_clear+0x38>)
20000c1e:	b2d2      	uxtb	r2, r2
20000c20:	701a      	strb	r2, [r3, #0]
}
20000c22:	46c0      	nop			; (mov r8, r8)
20000c24:	46bd      	mov	sp, r7
20000c26:	b002      	add	sp, #8
20000c28:	bd80      	pop	{r7, pc}
20000c2a:	46c0      	nop			; (mov r8, r8)
20000c2c:	40021014 	andmi	r1, r2, r4, lsl r0

20000c30 <ascii_write_command>:

void ascii_write_command(unsigned char command){
20000c30:	b580      	push	{r7, lr}
20000c32:	b082      	sub	sp, #8
20000c34:	af00      	add	r7, sp, #0
20000c36:	0002      	movs	r2, r0
20000c38:	1dfb      	adds	r3, r7, #7
20000c3a:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20000c3c:	2001      	movs	r0, #1
20000c3e:	f7ff ffd9 	bl	20000bf4 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20000c42:	2002      	movs	r0, #2
20000c44:	f7ff ffd6 	bl	20000bf4 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20000c48:	1dfb      	adds	r3, r7, #7
20000c4a:	781b      	ldrb	r3, [r3, #0]
20000c4c:	0018      	movs	r0, r3
20000c4e:	f7ff ff87 	bl	20000b60 <ascii_write_controller>
}
20000c52:	46c0      	nop			; (mov r8, r8)
20000c54:	46bd      	mov	sp, r7
20000c56:	b002      	add	sp, #8
20000c58:	bd80      	pop	{r7, pc}

20000c5a <ascii_write_data>:

void ascii_write_data(unsigned char data){
20000c5a:	b580      	push	{r7, lr}
20000c5c:	b082      	sub	sp, #8
20000c5e:	af00      	add	r7, sp, #0
20000c60:	0002      	movs	r2, r0
20000c62:	1dfb      	adds	r3, r7, #7
20000c64:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000c66:	2001      	movs	r0, #1
20000c68:	f7ff ffac 	bl	20000bc4 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
20000c6c:	2002      	movs	r0, #2
20000c6e:	f7ff ffc1 	bl	20000bf4 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20000c72:	1dfb      	adds	r3, r7, #7
20000c74:	781b      	ldrb	r3, [r3, #0]
20000c76:	0018      	movs	r0, r3
20000c78:	f7ff ff72 	bl	20000b60 <ascii_write_controller>
}
20000c7c:	46c0      	nop			; (mov r8, r8)
20000c7e:	46bd      	mov	sp, r7
20000c80:	b002      	add	sp, #8
20000c82:	bd80      	pop	{r7, pc}

20000c84 <ascii_read_status>:

unsigned char ascii_read_status(void){
20000c84:	b590      	push	{r4, r7, lr}
20000c86:	b083      	sub	sp, #12
20000c88:	af00      	add	r7, sp, #0
	GPIO_MODER_E &= 0x0000FFFF;
20000c8a:	4b0e      	ldr	r3, [pc, #56]	; (20000cc4 <ascii_read_status+0x40>)
20000c8c:	681a      	ldr	r2, [r3, #0]
20000c8e:	4b0d      	ldr	r3, [pc, #52]	; (20000cc4 <ascii_read_status+0x40>)
20000c90:	0412      	lsls	r2, r2, #16
20000c92:	0c12      	lsrs	r2, r2, #16
20000c94:	601a      	str	r2, [r3, #0]
	unsigned char read_status;
	ascii_ctrl_bit_clear(B_RS);
20000c96:	2001      	movs	r0, #1
20000c98:	f7ff ffac 	bl	20000bf4 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
20000c9c:	2002      	movs	r0, #2
20000c9e:	f7ff ff91 	bl	20000bc4 <ascii_ctrl_bit_set>
	read_status = ascii_read_controller();
20000ca2:	1dfc      	adds	r4, r7, #7
20000ca4:	f7ff ff74 	bl	20000b90 <ascii_read_controller>
20000ca8:	0003      	movs	r3, r0
20000caa:	7023      	strb	r3, [r4, #0]
	GPIO_MODER_E |= 0x55550000;
20000cac:	4b05      	ldr	r3, [pc, #20]	; (20000cc4 <ascii_read_status+0x40>)
20000cae:	681a      	ldr	r2, [r3, #0]
20000cb0:	4b04      	ldr	r3, [pc, #16]	; (20000cc4 <ascii_read_status+0x40>)
20000cb2:	4905      	ldr	r1, [pc, #20]	; (20000cc8 <ascii_read_status+0x44>)
20000cb4:	430a      	orrs	r2, r1
20000cb6:	601a      	str	r2, [r3, #0]
    return read_status;
20000cb8:	1dfb      	adds	r3, r7, #7
20000cba:	781b      	ldrb	r3, [r3, #0]
}
20000cbc:	0018      	movs	r0, r3
20000cbe:	46bd      	mov	sp, r7
20000cc0:	b003      	add	sp, #12
20000cc2:	bd90      	pop	{r4, r7, pc}
20000cc4:	40021000 	andmi	r1, r2, r0
20000cc8:	55550000 	ldrbpl	r0, [r5, #-0]

20000ccc <ascii_read_data>:

unsigned char ascii_read_data(void){
20000ccc:	b590      	push	{r4, r7, lr}
20000cce:	b083      	sub	sp, #12
20000cd0:	af00      	add	r7, sp, #0
	GPIO_MODER_E &= 0x0000FFFF;
20000cd2:	4b0e      	ldr	r3, [pc, #56]	; (20000d0c <ascii_read_data+0x40>)
20000cd4:	681a      	ldr	r2, [r3, #0]
20000cd6:	4b0d      	ldr	r3, [pc, #52]	; (20000d0c <ascii_read_data+0x40>)
20000cd8:	0412      	lsls	r2, r2, #16
20000cda:	0c12      	lsrs	r2, r2, #16
20000cdc:	601a      	str	r2, [r3, #0]
	unsigned char read_data;
	ascii_ctrl_bit_set(B_RS);
20000cde:	2001      	movs	r0, #1
20000ce0:	f7ff ff70 	bl	20000bc4 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
20000ce4:	2002      	movs	r0, #2
20000ce6:	f7ff ff6d 	bl	20000bc4 <ascii_ctrl_bit_set>
	read_data = ascii_read_controller();
20000cea:	1dfc      	adds	r4, r7, #7
20000cec:	f7ff ff50 	bl	20000b90 <ascii_read_controller>
20000cf0:	0003      	movs	r3, r0
20000cf2:	7023      	strb	r3, [r4, #0]
	GPIO_MODER_E |= 0x55550000;
20000cf4:	4b05      	ldr	r3, [pc, #20]	; (20000d0c <ascii_read_data+0x40>)
20000cf6:	681a      	ldr	r2, [r3, #0]
20000cf8:	4b04      	ldr	r3, [pc, #16]	; (20000d0c <ascii_read_data+0x40>)
20000cfa:	4905      	ldr	r1, [pc, #20]	; (20000d10 <ascii_read_data+0x44>)
20000cfc:	430a      	orrs	r2, r1
20000cfe:	601a      	str	r2, [r3, #0]
    return read_data;
20000d00:	1dfb      	adds	r3, r7, #7
20000d02:	781b      	ldrb	r3, [r3, #0]
}
20000d04:	0018      	movs	r0, r3
20000d06:	46bd      	mov	sp, r7
20000d08:	b003      	add	sp, #12
20000d0a:	bd90      	pop	{r4, r7, pc}
20000d0c:	40021000 	andmi	r1, r2, r0
20000d10:	55550000 	ldrbpl	r0, [r5, #-0]

20000d14 <ascii_command>:


void ascii_command (unsigned char command){
20000d14:	b580      	push	{r7, lr}
20000d16:	b082      	sub	sp, #8
20000d18:	af00      	add	r7, sp, #0
20000d1a:	0002      	movs	r2, r0
20000d1c:	1dfb      	adds	r3, r7, #7
20000d1e:	701a      	strb	r2, [r3, #0]
	while ((ascii_read_status() & (1<<7))){}
20000d20:	46c0      	nop			; (mov r8, r8)
20000d22:	f7ff ffaf 	bl	20000c84 <ascii_read_status>
20000d26:	0003      	movs	r3, r0
20000d28:	b25b      	sxtb	r3, r3
20000d2a:	2b00      	cmp	r3, #0
20000d2c:	dbf9      	blt.n	20000d22 <ascii_command+0xe>
	delay_micro(8);
20000d2e:	2008      	movs	r0, #8
20000d30:	f7ff feda 	bl	20000ae8 <delay_micro>
	ascii_write_command(command);
20000d34:	1dfb      	adds	r3, r7, #7
20000d36:	781b      	ldrb	r3, [r3, #0]
20000d38:	0018      	movs	r0, r3
20000d3a:	f7ff ff79 	bl	20000c30 <ascii_write_command>
}
20000d3e:	46c0      	nop			; (mov r8, r8)
20000d40:	46bd      	mov	sp, r7
20000d42:	b002      	add	sp, #8
20000d44:	bd80      	pop	{r7, pc}

20000d46 <ascii_init>:

void ascii_init(){
20000d46:	b580      	push	{r7, lr}
20000d48:	af00      	add	r7, sp, #0
	ascii_command(0x38); //Function set
20000d4a:	2038      	movs	r0, #56	; 0x38
20000d4c:	f7ff ffe2 	bl	20000d14 <ascii_command>
	delay_micro(40); 
20000d50:	2028      	movs	r0, #40	; 0x28
20000d52:	f7ff fec9 	bl	20000ae8 <delay_micro>
	
	ascii_command(0xC); //Display control
20000d56:	200c      	movs	r0, #12
20000d58:	f7ff ffdc 	bl	20000d14 <ascii_command>
	delay_micro(40); 
20000d5c:	2028      	movs	r0, #40	; 0x28
20000d5e:	f7ff fec3 	bl	20000ae8 <delay_micro>
	
	ascii_command(1); // clear display
20000d62:	2001      	movs	r0, #1
20000d64:	f7ff ffd6 	bl	20000d14 <ascii_command>
	delay_milli(2);
20000d68:	2002      	movs	r0, #2
20000d6a:	f7ff fed3 	bl	20000b14 <delay_milli>
	
	ascii_command(0x6); //entry mode set
20000d6e:	2006      	movs	r0, #6
20000d70:	f7ff ffd0 	bl	20000d14 <ascii_command>
	delay_micro(40);
20000d74:	2028      	movs	r0, #40	; 0x28
20000d76:	f7ff feb7 	bl	20000ae8 <delay_micro>
}
20000d7a:	46c0      	nop			; (mov r8, r8)
20000d7c:	46bd      	mov	sp, r7
20000d7e:	bd80      	pop	{r7, pc}

20000d80 <ascii_write_char>:

void ascii_write_char (unsigned char character){
20000d80:	b580      	push	{r7, lr}
20000d82:	b082      	sub	sp, #8
20000d84:	af00      	add	r7, sp, #0
20000d86:	0002      	movs	r2, r0
20000d88:	1dfb      	adds	r3, r7, #7
20000d8a:	701a      	strb	r2, [r3, #0]
	//while ((ascii_read_status() & (1<<7))){};
	
	while ((ascii_read_status() & 0x80) == 0x80) {};
20000d8c:	46c0      	nop			; (mov r8, r8)
20000d8e:	f7ff ff79 	bl	20000c84 <ascii_read_status>
20000d92:	0003      	movs	r3, r0
20000d94:	001a      	movs	r2, r3
20000d96:	2380      	movs	r3, #128	; 0x80
20000d98:	4013      	ands	r3, r2
20000d9a:	2b80      	cmp	r3, #128	; 0x80
20000d9c:	d0f7      	beq.n	20000d8e <ascii_write_char+0xe>
		delay_micro(8);
20000d9e:	2008      	movs	r0, #8
20000da0:	f7ff fea2 	bl	20000ae8 <delay_micro>
		ascii_write_data(character);
20000da4:	1dfb      	adds	r3, r7, #7
20000da6:	781b      	ldrb	r3, [r3, #0]
20000da8:	0018      	movs	r0, r3
20000daa:	f7ff ff56 	bl	20000c5a <ascii_write_data>
		delay_micro(40);
20000dae:	2028      	movs	r0, #40	; 0x28
20000db0:	f7ff fe9a 	bl	20000ae8 <delay_micro>
}
20000db4:	46c0      	nop			; (mov r8, r8)
20000db6:	46bd      	mov	sp, r7
20000db8:	b002      	add	sp, #8
20000dba:	bd80      	pop	{r7, pc}

20000dbc <ascii_gotoxy>:

void ascii_gotoxy(int x,int y){ //x = rad, y = column
20000dbc:	b580      	push	{r7, lr}
20000dbe:	b084      	sub	sp, #16
20000dc0:	af00      	add	r7, sp, #0
20000dc2:	6078      	str	r0, [r7, #4]
20000dc4:	6039      	str	r1, [r7, #0]
	unsigned char adress = 0;
20000dc6:	210f      	movs	r1, #15
20000dc8:	187b      	adds	r3, r7, r1
20000dca:	2200      	movs	r2, #0
20000dcc:	701a      	strb	r2, [r3, #0]
	adress = x-1;
20000dce:	687b      	ldr	r3, [r7, #4]
20000dd0:	b2da      	uxtb	r2, r3
20000dd2:	187b      	adds	r3, r7, r1
20000dd4:	3a01      	subs	r2, #1
20000dd6:	701a      	strb	r2, [r3, #0]
	
	if(y==2)
20000dd8:	683b      	ldr	r3, [r7, #0]
20000dda:	2b02      	cmp	r3, #2
20000ddc:	d105      	bne.n	20000dea <ascii_gotoxy+0x2e>
		adress = adress + 0x40;
20000dde:	220f      	movs	r2, #15
20000de0:	18bb      	adds	r3, r7, r2
20000de2:	18ba      	adds	r2, r7, r2
20000de4:	7812      	ldrb	r2, [r2, #0]
20000de6:	3240      	adds	r2, #64	; 0x40
20000de8:	701a      	strb	r2, [r3, #0]
		
	ascii_write_command(0x80 | adress);
20000dea:	230f      	movs	r3, #15
20000dec:	18fb      	adds	r3, r7, r3
20000dee:	781b      	ldrb	r3, [r3, #0]
20000df0:	2280      	movs	r2, #128	; 0x80
20000df2:	4252      	negs	r2, r2
20000df4:	4313      	orrs	r3, r2
20000df6:	b2db      	uxtb	r3, r3
20000df8:	0018      	movs	r0, r3
20000dfa:	f7ff ff19 	bl	20000c30 <ascii_write_command>
20000dfe:	46c0      	nop			; (mov r8, r8)
20000e00:	46bd      	mov	sp, r7
20000e02:	b004      	add	sp, #16
20000e04:	bd80      	pop	{r7, pc}
20000e06:	46c0      	nop			; (mov r8, r8)

20000e08 <__udivsi3>:
20000e08:	2200      	movs	r2, #0
20000e0a:	0843      	lsrs	r3, r0, #1
20000e0c:	428b      	cmp	r3, r1
20000e0e:	d374      	bcc.n	20000efa <__udivsi3+0xf2>
20000e10:	0903      	lsrs	r3, r0, #4
20000e12:	428b      	cmp	r3, r1
20000e14:	d35f      	bcc.n	20000ed6 <__udivsi3+0xce>
20000e16:	0a03      	lsrs	r3, r0, #8
20000e18:	428b      	cmp	r3, r1
20000e1a:	d344      	bcc.n	20000ea6 <__udivsi3+0x9e>
20000e1c:	0b03      	lsrs	r3, r0, #12
20000e1e:	428b      	cmp	r3, r1
20000e20:	d328      	bcc.n	20000e74 <__udivsi3+0x6c>
20000e22:	0c03      	lsrs	r3, r0, #16
20000e24:	428b      	cmp	r3, r1
20000e26:	d30d      	bcc.n	20000e44 <__udivsi3+0x3c>
20000e28:	22ff      	movs	r2, #255	; 0xff
20000e2a:	0209      	lsls	r1, r1, #8
20000e2c:	ba12      	rev	r2, r2
20000e2e:	0c03      	lsrs	r3, r0, #16
20000e30:	428b      	cmp	r3, r1
20000e32:	d302      	bcc.n	20000e3a <__udivsi3+0x32>
20000e34:	1212      	asrs	r2, r2, #8
20000e36:	0209      	lsls	r1, r1, #8
20000e38:	d065      	beq.n	20000f06 <__udivsi3+0xfe>
20000e3a:	0b03      	lsrs	r3, r0, #12
20000e3c:	428b      	cmp	r3, r1
20000e3e:	d319      	bcc.n	20000e74 <__udivsi3+0x6c>
20000e40:	e000      	b.n	20000e44 <__udivsi3+0x3c>
20000e42:	0a09      	lsrs	r1, r1, #8
20000e44:	0bc3      	lsrs	r3, r0, #15
20000e46:	428b      	cmp	r3, r1
20000e48:	d301      	bcc.n	20000e4e <__udivsi3+0x46>
20000e4a:	03cb      	lsls	r3, r1, #15
20000e4c:	1ac0      	subs	r0, r0, r3
20000e4e:	4152      	adcs	r2, r2
20000e50:	0b83      	lsrs	r3, r0, #14
20000e52:	428b      	cmp	r3, r1
20000e54:	d301      	bcc.n	20000e5a <__udivsi3+0x52>
20000e56:	038b      	lsls	r3, r1, #14
20000e58:	1ac0      	subs	r0, r0, r3
20000e5a:	4152      	adcs	r2, r2
20000e5c:	0b43      	lsrs	r3, r0, #13
20000e5e:	428b      	cmp	r3, r1
20000e60:	d301      	bcc.n	20000e66 <__udivsi3+0x5e>
20000e62:	034b      	lsls	r3, r1, #13
20000e64:	1ac0      	subs	r0, r0, r3
20000e66:	4152      	adcs	r2, r2
20000e68:	0b03      	lsrs	r3, r0, #12
20000e6a:	428b      	cmp	r3, r1
20000e6c:	d301      	bcc.n	20000e72 <__udivsi3+0x6a>
20000e6e:	030b      	lsls	r3, r1, #12
20000e70:	1ac0      	subs	r0, r0, r3
20000e72:	4152      	adcs	r2, r2
20000e74:	0ac3      	lsrs	r3, r0, #11
20000e76:	428b      	cmp	r3, r1
20000e78:	d301      	bcc.n	20000e7e <__udivsi3+0x76>
20000e7a:	02cb      	lsls	r3, r1, #11
20000e7c:	1ac0      	subs	r0, r0, r3
20000e7e:	4152      	adcs	r2, r2
20000e80:	0a83      	lsrs	r3, r0, #10
20000e82:	428b      	cmp	r3, r1
20000e84:	d301      	bcc.n	20000e8a <__udivsi3+0x82>
20000e86:	028b      	lsls	r3, r1, #10
20000e88:	1ac0      	subs	r0, r0, r3
20000e8a:	4152      	adcs	r2, r2
20000e8c:	0a43      	lsrs	r3, r0, #9
20000e8e:	428b      	cmp	r3, r1
20000e90:	d301      	bcc.n	20000e96 <__udivsi3+0x8e>
20000e92:	024b      	lsls	r3, r1, #9
20000e94:	1ac0      	subs	r0, r0, r3
20000e96:	4152      	adcs	r2, r2
20000e98:	0a03      	lsrs	r3, r0, #8
20000e9a:	428b      	cmp	r3, r1
20000e9c:	d301      	bcc.n	20000ea2 <__udivsi3+0x9a>
20000e9e:	020b      	lsls	r3, r1, #8
20000ea0:	1ac0      	subs	r0, r0, r3
20000ea2:	4152      	adcs	r2, r2
20000ea4:	d2cd      	bcs.n	20000e42 <__udivsi3+0x3a>
20000ea6:	09c3      	lsrs	r3, r0, #7
20000ea8:	428b      	cmp	r3, r1
20000eaa:	d301      	bcc.n	20000eb0 <__udivsi3+0xa8>
20000eac:	01cb      	lsls	r3, r1, #7
20000eae:	1ac0      	subs	r0, r0, r3
20000eb0:	4152      	adcs	r2, r2
20000eb2:	0983      	lsrs	r3, r0, #6
20000eb4:	428b      	cmp	r3, r1
20000eb6:	d301      	bcc.n	20000ebc <__udivsi3+0xb4>
20000eb8:	018b      	lsls	r3, r1, #6
20000eba:	1ac0      	subs	r0, r0, r3
20000ebc:	4152      	adcs	r2, r2
20000ebe:	0943      	lsrs	r3, r0, #5
20000ec0:	428b      	cmp	r3, r1
20000ec2:	d301      	bcc.n	20000ec8 <__udivsi3+0xc0>
20000ec4:	014b      	lsls	r3, r1, #5
20000ec6:	1ac0      	subs	r0, r0, r3
20000ec8:	4152      	adcs	r2, r2
20000eca:	0903      	lsrs	r3, r0, #4
20000ecc:	428b      	cmp	r3, r1
20000ece:	d301      	bcc.n	20000ed4 <__udivsi3+0xcc>
20000ed0:	010b      	lsls	r3, r1, #4
20000ed2:	1ac0      	subs	r0, r0, r3
20000ed4:	4152      	adcs	r2, r2
20000ed6:	08c3      	lsrs	r3, r0, #3
20000ed8:	428b      	cmp	r3, r1
20000eda:	d301      	bcc.n	20000ee0 <__udivsi3+0xd8>
20000edc:	00cb      	lsls	r3, r1, #3
20000ede:	1ac0      	subs	r0, r0, r3
20000ee0:	4152      	adcs	r2, r2
20000ee2:	0883      	lsrs	r3, r0, #2
20000ee4:	428b      	cmp	r3, r1
20000ee6:	d301      	bcc.n	20000eec <__udivsi3+0xe4>
20000ee8:	008b      	lsls	r3, r1, #2
20000eea:	1ac0      	subs	r0, r0, r3
20000eec:	4152      	adcs	r2, r2
20000eee:	0843      	lsrs	r3, r0, #1
20000ef0:	428b      	cmp	r3, r1
20000ef2:	d301      	bcc.n	20000ef8 <__udivsi3+0xf0>
20000ef4:	004b      	lsls	r3, r1, #1
20000ef6:	1ac0      	subs	r0, r0, r3
20000ef8:	4152      	adcs	r2, r2
20000efa:	1a41      	subs	r1, r0, r1
20000efc:	d200      	bcs.n	20000f00 <__udivsi3+0xf8>
20000efe:	4601      	mov	r1, r0
20000f00:	4152      	adcs	r2, r2
20000f02:	4610      	mov	r0, r2
20000f04:	4770      	bx	lr
20000f06:	e7ff      	b.n	20000f08 <__udivsi3+0x100>
20000f08:	b501      	push	{r0, lr}
20000f0a:	2000      	movs	r0, #0
20000f0c:	f000 f806 	bl	20000f1c <__aeabi_idiv0>
20000f10:	bd02      	pop	{r1, pc}
20000f12:	46c0      	nop			; (mov r8, r8)

20000f14 <__aeabi_uidivmod>:
20000f14:	2900      	cmp	r1, #0
20000f16:	d0f7      	beq.n	20000f08 <__udivsi3+0x100>
20000f18:	e776      	b.n	20000e08 <__udivsi3>
20000f1a:	4770      	bx	lr

20000f1c <__aeabi_idiv0>:
20000f1c:	4770      	bx	lr
20000f1e:	46c0      	nop			; (mov r8, r8)

20000f20 <backBuffer>:
	...

20001320 <plant_bits>:
20001320:	3e1c0800 	cdpcc	8, 1, cr0, cr12, cr0, {0}
20001324:	1c087f7f 	stcne	15, cr7, [r8], {127}	; 0x7f
20001328:	0000001c 	andeq	r0, r0, ip, lsl r0

2000132c <backGround_bits>:
	...
200013f0:	00000ffc 	strdeq	r0, [r0], -ip
	...
20001400:	00000007 	andeq	r0, r0, r7
	...
2000140c:	c0000000 	andgt	r0, r0, r0
20001410:	00000001 	andeq	r0, r0, r1
	...
2000141c:	40000000 	andmi	r0, r0, r0
20001420:	00200000 	eoreq	r0, r0, r0
	...
2000142c:	40000000 	andmi	r0, r0, r0
20001430:	00300000 	eorseq	r0, r0, r0
	...
2000143c:	40000000 	andmi	r0, r0, r0
20001440:	00500000 	subseq	r0, r0, r0
20001444:	00000200 	andeq	r0, r0, r0, lsl #4
20001448:	0001f800 	andeq	pc, r1, r0, lsl #16
2000144c:	40000000 	andmi	r0, r0, r0
20001450:	00900000 	addseq	r0, r0, r0
20001454:	00000200 	andeq	r0, r0, r0, lsl #4
20001458:	00000ffc 	strdeq	r0, [r0], -ip
2000145c:	40000000 	andmi	r0, r0, r0
20001460:	00980000 	addseq	r0, r8, r0
20001464:	00c00200 	sbceq	r0, r0, r0, lsl #4
20001468:	00000001 	andeq	r0, r0, r1
2000146c:	40000000 	andmi	r0, r0, r0
20001470:	01080000 	mrseq	r0, (UNDEF: 8)
20001474:	00c00600 	sbceq	r0, r0, r0, lsl #12
20001478:	00000001 	andeq	r0, r0, r1
2000147c:	40000000 	andmi	r0, r0, r0
20001480:	01080000 	mrseq	r0, (UNDEF: 8)
20001484:	00a01c00 	adceq	r1, r0, r0, lsl #24
20001488:	00000001 	andeq	r0, r0, r1
2000148c:	40000000 	andmi	r0, r0, r0
20001490:	020c0000 	andeq	r0, ip, #0
20001494:	00b02400 	adcseq	r2, r0, r0, lsl #8
20001498:	00000001 	andeq	r0, r0, r1
2000149c:	40000000 	andmi	r0, r0, r0
200014a0:	06040000 	streq	r0, [r4], -r0
200014a4:	00904400 	addseq	r4, r0, r0, lsl #8
200014a8:	00000001 	andeq	r0, r0, r1
200014ac:	40000000 	andmi	r0, r0, r0
200014b0:	080401c0 	stmdaeq	r4, {r6, r7, r8}
200014b4:	00898400 	addeq	r8, r9, r0, lsl #8
200014b8:	00000003 	andeq	r0, r0, r3
200014bc:	40000000 	andmi	r0, r0, r0
200014c0:	08020030 	stmdaeq	r2, {r4, r5}
200014c4:	008a0400 	addeq	r0, sl, r0, lsl #8
200014c8:	000007f6 	strdeq	r0, [r0], -r6
200014cc:	80000000 	andhi	r0, r0, r0
200014d0:	1ffe00e0 	svcne	0x00fe00e0
200014d4:	008c0400 	addeq	r0, ip, r0, lsl #8
200014d8:	00000004 	andeq	r0, r0, r4
200014dc:	80000000 	andhi	r0, r0, r0
200014e0:	28020040 	stmdacs	r2, {r6}
200014e4:	00800400 	addeq	r0, r0, r0, lsl #8
200014e8:	00000004 	andeq	r0, r0, r4
200014ec:	80000000 	andhi	r0, r0, r0
200014f0:	40010040 	andmi	r0, r1, r0, asr #32
200014f4:	00800400 	addeq	r0, r0, r0, lsl #8
200014f8:	00000004 	andeq	r0, r0, r4
200014fc:	00000000 	andeq	r0, r0, r0
20001500:	80010041 	andhi	r0, r1, r1, asr #32
20001504:	00800400 	addeq	r0, r0, r0, lsl #8
20001508:	00000004 	andeq	r0, r0, r4
2000150c:	00000000 	andeq	r0, r0, r0
20001510:	80018041 	andhi	r8, r1, r1, asr #32
20001514:	00800400 	addeq	r0, r0, r0, lsl #8
20001518:	000003c4 	andeq	r0, r0, r4, asr #7
2000151c:	00000000 	andeq	r0, r0, r0
20001520:	00008042 	andeq	r8, r0, r2, asr #32
20001524:	00000001 	andeq	r0, r0, r1
20001528:	00000074 	andeq	r0, r0, r4, ror r0
2000152c:	00000000 	andeq	r0, r0, r0
20001530:	00008044 	andeq	r8, r0, r4, asr #32
20001534:	00000006 	andeq	r0, r0, r6
20001538:	0000000c 	andeq	r0, r0, ip
2000153c:	00000000 	andeq	r0, r0, r0
20001540:	0000c024 	andeq	ip, r0, r4, lsr #32
20001544:	00000004 	andeq	r0, r0, r4
	...
20001550:	00004038 	andeq	r4, r0, r8, lsr r0
20001554:	00000018 	andeq	r0, r0, r8, lsl r0
	...
20001560:	00004000 	andeq	r4, r0, r0
20001564:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20001570:	00004000 	andeq	r4, r0, r0
	...
20001580:	00004000 	andeq	r4, r0, r0
	...

2000172c <ball_geometry>:
2000172c:	0000000c 	andeq	r0, r0, ip
20001730:	00000004 	andeq	r0, r0, r4
20001734:	00000004 	andeq	r0, r0, r4
20001738:	02000100 	andeq	r0, r0, #0, 2
2000173c:	01010001 	tsteq	r1, r1
20001740:	03010201 	movweq	r0, #4609	; 0x1201
20001744:	01020002 	tsteq	r2, r2
20001748:	03020202 	movweq	r0, #8706	; 0x2202
2000174c:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20001760 <ball>:
20001760:	2000172c 	andcs	r1, r0, ip, lsr #14
20001764:	fffffffd 			; <UNDEFINED> instruction: 0xfffffffd
20001768:	00000003 	andeq	r0, r0, r3
2000176c:	00000001 	andeq	r0, r0, r1
20001770:	00000001 	andeq	r0, r0, r1
20001774:	20000225 	andcs	r0, r0, r5, lsr #4
20001778:	20000281 	andcs	r0, r0, r1, lsl #5
2000177c:	200002dd 	ldrdcs	r0, [r0], -sp
20001780:	20000205 	andcs	r0, r0, r5, lsl #4

20001784 <plant>:
20001784:	00000a07 	andeq	r0, r0, r7, lsl #20
20001788:	20001320 	andcs	r1, r0, r0, lsr #6

2000178c <backGround>:
2000178c:	00004080 	andeq	r4, r0, r0, lsl #1
20001790:	2000132c 	andcs	r1, r0, ip, lsr #6
20001794:	636c6557 	cmnvs	ip, #364904448	; 0x15c00000
20001798:	20656d6f 	rsbcs	r6, r5, pc, ror #26
2000179c:	00000000 	andeq	r0, r0, r0
200017a0:	74206f74 	strtvc	r6, [r0], #-3956	; 0xfffff08c
200017a4:	67206568 	strvs	r6, [r0, -r8, ror #10]!
200017a8:	21656d61 	cmncs	r5, r1, ror #26
200017ac:	00000000 	andeq	r0, r0, r0
200017b0:	200008fa 	strdcs	r0, [r0], -sl
200017b4:	20000902 	andcs	r0, r0, r2, lsl #18
200017b8:	2000090a 	andcs	r0, r0, sl, lsl #18
200017bc:	20000912 	andcs	r0, r0, r2, lsl r9
200017c0:	2000091a 	andcs	r0, r0, sl, lsl r9
200017c4:	20000922 	andcs	r0, r0, r2, lsr #18
200017c8:	2000092a 	andcs	r0, r0, sl, lsr #18
200017cc:	20000932 	andcs	r0, r0, r2, lsr r9
200017d0:	2000093a 	andcs	r0, r0, sl, lsr r9
200017d4:	20000942 	andcs	r0, r0, r2, asr #18
200017d8:	2000094a 	andcs	r0, r0, sl, asr #18
200017dc:	20000952 	andcs	r0, r0, r2, asr r9
200017e0:	2000095a 	andcs	r0, r0, sl, asr r9
200017e4:	20000962 	andcs	r0, r0, r2, ror #18
200017e8:	2000096a 	andcs	r0, r0, sl, ror #18
200017ec:	20000972 	andcs	r0, r0, r2, ror r9
200017f0:	200009ce 	andcs	r0, r0, lr, asr #19
200017f4:	200009ae 	andcs	r0, r0, lr, lsr #19
200017f8:	200009b6 			; <UNDEFINED> instruction: 0x200009b6
200017fc:	200009be 			; <UNDEFINED> instruction: 0x200009be
20001800:	200009c6 	andcs	r0, r0, r6, asr #19
20001804:	0a030201 	beq	200c2010 <backGround+0xc0884>
20001808:	0b060504 	bleq	20182c20 <backGround+0x181494>
2000180c:	0c090807 	stceq	8, cr0, [r9], {7}
20001810:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 200017e0 <backGround+0x54>

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000411 	andeq	r0, r0, r1, lsl r4
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000063 	andeq	r0, r0, r3, rrx
  10:	00000a0c 	andeq	r0, r0, ip, lsl #20
  14:	00017e00 	andeq	r7, r1, r0, lsl #28
	...
  24:	08010200 	stmdaeq	r1, {r9}
  28:	00000113 	andeq	r0, r0, r3, lsl r1
  2c:	45070202 	strmi	r0, [r7, #-514]	; 0xfffffdfe
  30:	03000001 	movweq	r0, #1
  34:	000000fb 	strdeq	r0, [r0], -fp
  38:	54b60202 	ldrtpl	r0, [r6], #514	; 0x202
  3c:	04000000 	streq	r0, [r0], #-0
  40:	b7020078 	smlsdxlt	r2, r8, r0, r0
  44:	00000025 	andeq	r0, r0, r5, lsr #32
  48:	00790400 	rsbseq	r0, r9, r0, lsl #8
  4c:	0025b802 	eoreq	fp, r5, r2, lsl #16
  50:	00010000 	andeq	r0, r1, r0
  54:	00010d05 	andeq	r0, r1, r5, lsl #26
  58:	33b90200 			; <UNDEFINED> instruction: 0x33b90200
  5c:	03000000 	movweq	r0, #0
  60:	00000174 	andeq	r0, r0, r4, ror r1
  64:	9bbd0234 	blls	fef4093c <backGround+0xdef3f1b0>
  68:	06000000 	streq	r0, [r0], -r0
  6c:	0000020b 	andeq	r0, r0, fp, lsl #4
  70:	009bbe02 	addseq	fp, fp, r2, lsl #28
  74:	06000000 	streq	r0, [r0], -r0
  78:	000001b7 			; <UNDEFINED> instruction: 0x000001b7
  7c:	009bbf02 	addseq	fp, fp, r2, lsl #30
  80:	06040000 	streq	r0, [r4], -r0
  84:	000001bd 			; <UNDEFINED> instruction: 0x000001bd
  88:	009bc002 	addseq	ip, fp, r2
  8c:	04080000 	streq	r0, [r8], #-0
  90:	02007870 	andeq	r7, r0, #112, 16	; 0x700000
  94:	0000a2c1 	andeq	sl, r0, r1, asr #5
  98:	07000c00 	streq	r0, [r0, -r0, lsl #24]
  9c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
  a0:	54080074 	strpl	r0, [r8], #-116	; 0xffffff8c
  a4:	b2000000 	andlt	r0, r0, #0
  a8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
  ac:	000000b2 	strheq	r0, [r0], -r2
  b0:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
  b4:	00014b07 	andeq	r4, r1, r7, lsl #22
  b8:	00010500 	andeq	r0, r1, r0, lsl #10
  bc:	c2020000 	andgt	r0, r2, #0
  c0:	0000005f 	andeq	r0, r0, pc, asr r0
  c4:	00000005 	andeq	r0, r0, r5
  c8:	cfc20200 	svcgt	0x00c20200
  cc:	0a000000 	beq	d4 <startup-0x1fffff2c>
  d0:	00005f04 	andeq	r5, r0, r4, lsl #30
  d4:	02060300 	andeq	r0, r6, #0, 6
  d8:	02240000 	eoreq	r0, r4, #0
  dc:	00014ec5 	andeq	r4, r1, r5, asr #29
  e0:	65670400 	strbvs	r0, [r7, #-1024]!	; 0xfffffc00
  e4:	c602006f 	strgt	r0, [r2], -pc, rrx
  e8:	000000c4 	andeq	r0, r0, r4, asr #1
  ec:	00460600 	subeq	r0, r6, r0, lsl #12
  f0:	c7020000 	strgt	r0, [r2, -r0]
  f4:	0000009b 	muleq	r0, fp, r0
  f8:	004b0604 	subeq	r0, fp, r4, lsl #12
  fc:	c7020000 	strgt	r0, [r2, -r0]
 100:	0000009b 	muleq	r0, fp, r0
 104:	012b0608 			; <UNDEFINED> instruction: 0x012b0608
 108:	c8020000 	stmdagt	r2, {}	; <UNPREDICTABLE>
 10c:	0000009b 	muleq	r0, fp, r0
 110:	0130060c 	teqeq	r0, ip, lsl #12
 114:	c8020000 	stmdagt	r2, {}	; <UNPREDICTABLE>
 118:	0000009b 	muleq	r0, fp, r0
 11c:	01d50610 	bicseq	r0, r5, r0, lsl r6
 120:	c9020000 	stmdbgt	r2, {}	; <UNPREDICTABLE>
 124:	0000015f 	andeq	r0, r0, pc, asr r1
 128:	03610614 	cmneq	r1, #20, 12	; 0x1400000
 12c:	ca020000 	bgt	80134 <startup-0x1ff7fecc>
 130:	0000015f 	andeq	r0, r0, pc, asr r1
 134:	003c0618 	eorseq	r0, ip, r8, lsl r6
 138:	cb020000 	blgt	80140 <startup-0x1ff7fec0>
 13c:	0000015f 	andeq	r0, r0, pc, asr r1
 140:	0121061c 			; <UNDEFINED> instruction: 0x0121061c
 144:	cc020000 	stcgt	0, cr0, [r2], {-0}
 148:	0000017a 	andeq	r0, r0, sl, ror r1
 14c:	590b0020 	stmdbpl	fp, {r5}
 150:	0c000001 	stceq	0, cr0, [r0], {1}
 154:	00000159 	andeq	r0, r0, r9, asr r1
 158:	d5040a00 	strle	r0, [r4, #-2560]	; 0xfffff600
 15c:	0a000000 	beq	164 <startup-0x1ffffe9c>
 160:	00014e04 	andeq	r4, r1, r4, lsl #28
 164:	017a0b00 	cmneq	sl, r0, lsl #22
 168:	590c0000 	stmdbpl	ip, {}	; <UNPREDICTABLE>
 16c:	0c000001 	stceq	0, cr0, [r0], {1}
 170:	0000009b 	muleq	r0, fp, r0
 174:	00009b0c 	andeq	r9, r0, ip, lsl #22
 178:	040a0000 	streq	r0, [sl], #-0
 17c:	00000165 	andeq	r0, r0, r5, ror #2
 180:	00022e05 	andeq	r2, r2, r5, lsl #28
 184:	d5cd0200 	strble	r0, [sp, #512]	; 0x200
 188:	05000000 	streq	r0, [r0, #-0]
 18c:	0000022d 	andeq	r0, r0, sp, lsr #4
 190:	0159cd02 	cmpeq	r9, r2, lsl #26
 194:	25080000 	strcs	r0, [r8, #-0]
 198:	a6000000 	strge	r0, [r0], -r0
 19c:	09000001 	stmdbeq	r0, {r0}
 1a0:	000000b2 	strheq	r0, [r0], -r2
 1a4:	020d0009 	andeq	r0, sp, #9
 1a8:	03000001 	movweq	r0, #1
 1ac:	00019603 	andeq	r9, r1, r3, lsl #12
 1b0:	20030500 	andcs	r0, r3, r0, lsl #10
 1b4:	08200013 	stmdaeq	r0!, {r0, r1, r4}
 1b8:	00000025 	andeq	r0, r0, r5, lsr #32
 1bc:	000001c8 	andeq	r0, r0, r8, asr #3
 1c0:	0000b20e 	andeq	fp, r0, lr, lsl #4
 1c4:	0003ff00 	andeq	pc, r3, r0, lsl #30
 1c8:	0001350d 	andeq	r3, r1, sp, lsl #10
 1cc:	b7030400 	strlt	r0, [r3, -r0, lsl #8]
 1d0:	05000001 	streq	r0, [r0, #-1]
 1d4:	00132c03 	andseq	r2, r3, r3, lsl #24
 1d8:	01080f20 	tsteq	r8, r0, lsr #30
 1dc:	00020615 	andeq	r0, r2, r5, lsl r6
 1e0:	01da0600 	bicseq	r0, sl, r0, lsl #12
 1e4:	17010000 	strne	r0, [r1, -r0]
 1e8:	00000025 	andeq	r0, r0, r5, lsr #32
 1ec:	01580600 	cmpeq	r8, r0, lsl #12
 1f0:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
 1f4:	00000025 	andeq	r0, r0, r5, lsr #32
 1f8:	031e0601 	tsteq	lr, #1048576	; 0x100000
 1fc:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
 200:	00000206 	andeq	r0, r0, r6, lsl #4
 204:	040a0004 	streq	r0, [sl], #-4
 208:	00000025 	andeq	r0, r0, r5, lsr #32
 20c:	0001f405 	andeq	pc, r1, r5, lsl #8
 210:	d91a0100 	ldmdble	sl, {r8}
 214:	10000001 	andne	r0, r0, r1
 218:	00000050 	andeq	r0, r0, r0, asr r0
 21c:	00b93301 	adcseq	r3, r9, r1, lsl #6
 220:	03050000 	movweq	r0, #20480	; 0x5000
 224:	2000172c 	andcs	r1, r0, ip, lsr #14
 228:	0001d00d 	andeq	sp, r1, sp
 22c:	80400100 	subhi	r0, r0, r0, lsl #2
 230:	05000001 	streq	r0, [r0, #-1]
 234:	00176003 	andseq	r6, r7, r3
 238:	015f0d20 	cmpeq	pc, r0, lsr #26
 23c:	4b010000 	blmi	40244 <startup-0x1ffbfdbc>
 240:	0000020c 	andeq	r0, r0, ip, lsl #4
 244:	17840305 	strne	r0, [r4, r5, lsl #6]
 248:	fb0d2000 	blx	348252 <startup-0x1fcb7dae>
 24c:	01000001 	tsteq	r0, r1
 250:	00020c52 	andeq	r0, r2, r2, asr ip
 254:	8c030500 	cfstr32hi	mvfx0, [r3], {-0}
 258:	11200017 			; <UNDEFINED> instruction: 0x11200017
 25c:	0000016f 	andeq	r0, r0, pc, ror #2
 260:	009b7001 	addseq	r7, fp, r1
 264:	01940000 	orrseq	r0, r4, r0
 268:	00702000 	rsbseq	r2, r0, r0
 26c:	9c010000 	stcls	0, cr0, [r1], {-0}
 270:	0000029d 	muleq	r0, sp, r2
 274:	0001c312 	andeq	ip, r1, r2, lsl r3
 278:	9b700100 	blls	1c00680 <startup-0x1e3ff980>
 27c:	02000000 	andeq	r0, r0, #0
 280:	41126c91 			; <UNDEFINED> instruction: 0x41126c91
 284:	01000000 	mrseq	r0, (UNDEF: 0)
 288:	00029d70 	andeq	r9, r2, r0, ror sp
 28c:	68910200 	ldmvs	r1, {r9}
 290:	01007013 	tsteq	r0, r3, lsl r0
 294:	00018b73 	andeq	r8, r1, r3, ror fp
 298:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 29c:	a3040a00 	movwge	r0, #18944	; 0x4a00
 2a0:	0a000002 	beq	2b0 <startup-0x1ffffd50>
 2a4:	0002a904 	andeq	sl, r2, r4, lsl #18
 2a8:	08010200 	stmdaeq	r1, {r9}
 2ac:	0000011c 	andeq	r0, r0, ip, lsl r1
 2b0:	00016514 	andeq	r6, r1, r4, lsl r5
 2b4:	78690100 	stmdavc	r9!, {r8}^
 2b8:	1c200001 	stcne	0, cr0, [r0], #-4
 2bc:	01000000 	mrseq	r0, (UNDEF: 0)
 2c0:	01a9159c 			; <UNDEFINED> instruction: 0x01a9159c
 2c4:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
 2c8:	200000fe 	strdcs	r0, [r0], -lr
 2cc:	0000007a 	andeq	r0, r0, sl, ror r0
 2d0:	02ff9c01 	rscseq	r9, pc, #256	; 0x100
 2d4:	73130000 	tstvc	r3, #0
 2d8:	a35a0100 	cmpge	sl, #0, 2
 2dc:	02000002 	andeq	r0, r0, #2
 2e0:	210d6c91 			; <UNDEFINED> instruction: 0x210d6c91
 2e4:	01000002 	tsteq	r0, r2
 2e8:	0002ff5b 	andeq	pc, r2, fp, asr pc	; <UNPREDICTABLE>
 2ec:	60910200 	addsvs	r0, r1, r0, lsl #4
 2f0:	0002270d 	andeq	r2, r2, sp, lsl #14
 2f4:	0f5c0100 	svceq	0x005c0100
 2f8:	02000003 	andeq	r0, r0, #3
 2fc:	08005091 	stmdaeq	r0, {r0, r4, r7, ip, lr}
 300:	000002a9 	andeq	r0, r0, r9, lsr #5
 304:	0000030f 	andeq	r0, r0, pc, lsl #6
 308:	0000b209 	andeq	fp, r0, r9, lsl #4
 30c:	08000800 	stmdaeq	r0, {fp}
 310:	000002a9 	andeq	r0, r0, r9, lsr #5
 314:	0000031f 	andeq	r0, r0, pc, lsl r3
 318:	0000b209 	andeq	fp, r0, r9, lsl #4
 31c:	16000c00 	strne	r0, [r0], -r0, lsl #24
 320:	00000215 	andeq	r0, r0, r5, lsl r2
 324:	003c2301 	eorseq	r2, ip, r1, lsl #6
 328:	00c22000 	sbceq	r2, r2, r0
 32c:	9c010000 	stcls	0, cr0, [r1], {-0}
 330:	000003b1 			; <UNDEFINED> instruction: 0x000003b1
 334:	01007317 	tsteq	r0, r7, lsl r3
 338:	0003b123 	andeq	fp, r3, r3, lsr #2
 33c:	5c910200 	lfmpl	f0, 4, [r1], {0}
 340:	01007817 	tsteq	r0, r7, lsl r8
 344:	00009b23 	andeq	r9, r0, r3, lsr #22
 348:	58910200 	ldmpl	r1, {r9}
 34c:	01007917 	tsteq	r0, r7, lsl r9
 350:	00009b23 	andeq	r9, r0, r3, lsr #22
 354:	54910200 	ldrpl	r0, [r1], #512	; 0x200
 358:	74657317 	strbtvc	r7, [r5], #-791	; 0xfffffce9
 35c:	9b230100 	blls	8c0764 <startup-0x1f73f89c>
 360:	02000000 	andeq	r0, r0, #0
 364:	69135091 	ldmdbvs	r3, {r0, r4, r7, ip, lr}
 368:	9b240100 	blls	900770 <startup-0x1f6ff890>
 36c:	02000000 	andeq	r0, r0, #0
 370:	6a137491 	bvs	4dd5bc <startup-0x1fb22a44>
 374:	9b240100 	blls	90077c <startup-0x1f6ff884>
 378:	02000000 	andeq	r0, r0, #0
 37c:	6b137091 	blvs	4dc5c8 <startup-0x1fb23a38>
 380:	9b240100 	blls	900788 <startup-0x1f6ff878>
 384:	02000000 	andeq	r0, r0, #0
 388:	e00d6c91 	mul	sp, r1, ip
 38c:	01000001 	tsteq	r0, r1
 390:	00009b24 	andeq	r9, r0, r4, lsr #22
 394:	68910200 	ldmvs	r1, {r9}
 398:	00007c18 	andeq	r7, r0, r8, lsl ip
 39c:	00005a20 	andeq	r5, r0, r0, lsr #20
 3a0:	005e0d00 	subseq	r0, lr, r0, lsl #26
 3a4:	2b010000 	blcs	403ac <startup-0x1ffbfc54>
 3a8:	00000025 	andeq	r0, r0, r5, lsr #32
 3ac:	00679102 	rsbeq	r9, r7, r2, lsl #2
 3b0:	0c040a00 			; <UNDEFINED> instruction: 0x0c040a00
 3b4:	19000002 	stmdbne	r0, {r1}
 3b8:	000001ef 	andeq	r0, r0, pc, ror #3
 3bc:	00101c01 	andseq	r1, r0, r1, lsl #24
 3c0:	002c2000 	eoreq	r2, ip, r0
 3c4:	9c010000 	stcls	0, cr0, [r1], {-0}
 3c8:	00000403 	andeq	r0, r0, r3, lsl #8
 3cc:	01007317 	tsteq	r0, r7, lsl r3
 3d0:	0003b11c 	andeq	fp, r3, ip, lsl r1
 3d4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 3d8:	00031e12 	andeq	r1, r3, r2, lsl lr
 3dc:	061c0100 	ldreq	r0, [ip], -r0, lsl #2
 3e0:	02000002 	andeq	r0, r0, #2
 3e4:	da127091 	ble	49c630 <startup-0x1fb639d0>
 3e8:	01000001 	tsteq	r0, r1
 3ec:	00009b1c 	andeq	r9, r0, ip, lsl fp
 3f0:	6c910200 	lfmvs	f0, 4, [r1], {0}
 3f4:	00015812 	andeq	r5, r1, r2, lsl r8
 3f8:	9b1c0100 	blls	700800 <startup-0x1f8ff800>
 3fc:	02000000 	andeq	r0, r0, #0
 400:	1a006891 	bne	1a64c <startup-0x1ffe59b4>
 404:	000001c8 	andeq	r0, r0, r8, asr #3
 408:	00000b01 	andeq	r0, r0, r1, lsl #22
 40c:	000c2000 	andeq	r2, ip, r0
 410:	9c010000 	stcls	0, cr0, [r1], {-0}
 414:	00024900 	andeq	r4, r2, r0, lsl #18
 418:	8f000400 	svchi	0x00000400
 41c:	04000001 	streq	r0, [r0], #-1
 420:	00006301 	andeq	r6, r0, r1, lsl #6
 424:	02350c00 	eorseq	r0, r5, #0, 24
 428:	017e0000 	cmneq	lr, r0
 42c:	02040000 	andeq	r0, r4, #0
 430:	017e2000 	cmneq	lr, r0
 434:	01150000 	tsteq	r5, r0
 438:	01020000 	mrseq	r0, (UNDEF: 2)
 43c:	00011308 	andeq	r1, r1, r8, lsl #6
 440:	07020200 	streq	r0, [r2, -r0, lsl #4]
 444:	00000145 	andeq	r0, r0, r5, asr #2
 448:	0000fb03 	andeq	pc, r0, r3, lsl #22
 44c:	b6020200 	strlt	r0, [r2], -r0, lsl #4
 450:	00000054 	andeq	r0, r0, r4, asr r0
 454:	02007804 	andeq	r7, r0, #4, 16	; 0x40000
 458:	000025b7 			; <UNDEFINED> instruction: 0x000025b7
 45c:	79040000 	stmdbvc	r4, {}	; <UNPREDICTABLE>
 460:	25b80200 	ldrcs	r0, [r8, #512]!	; 0x200
 464:	01000000 	mrseq	r0, (UNDEF: 0)
 468:	010d0500 	tsteq	sp, r0, lsl #10
 46c:	b9020000 	stmdblt	r2, {}	; <UNPREDICTABLE>
 470:	00000033 	andeq	r0, r0, r3, lsr r0
 474:	00017403 	andeq	r7, r1, r3, lsl #8
 478:	bd023400 	cfstrslt	mvf3, [r2, #-0]
 47c:	0000009b 	muleq	r0, fp, r0
 480:	00020b06 	andeq	r0, r2, r6, lsl #22
 484:	9bbe0200 	blls	fef80c8c <backGround+0xdef7f500>
 488:	00000000 	andeq	r0, r0, r0
 48c:	0001b706 	andeq	fp, r1, r6, lsl #14
 490:	9bbf0200 	blls	fefc0c98 <backGround+0xdefbf50c>
 494:	04000000 	streq	r0, [r0], #-0
 498:	0001bd06 	andeq	fp, r1, r6, lsl #26
 49c:	9bc00200 	blls	ff000ca4 <backGround+0xdefff518>
 4a0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 4a4:	00787004 	rsbseq	r7, r8, r4
 4a8:	00a2c102 	adceq	ip, r2, r2, lsl #2
 4ac:	000c0000 	andeq	r0, ip, r0
 4b0:	69050407 	stmdbvs	r5, {r0, r1, r2, sl}
 4b4:	0800746e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 4b8:	00000054 	andeq	r0, r0, r4, asr r0
 4bc:	000000b2 	strheq	r0, [r0], -r2
 4c0:	0000b209 	andeq	fp, r0, r9, lsl #4
 4c4:	02001300 	andeq	r1, r0, #0, 6
 4c8:	014b0704 	cmpeq	fp, r4, lsl #14
 4cc:	00050000 	andeq	r0, r5, r0
 4d0:	02000000 	andeq	r0, r0, #0
 4d4:	0000c4c2 	andeq	ip, r0, r2, asr #9
 4d8:	5f040a00 	svcpl	0x00040a00
 4dc:	03000000 	movweq	r0, #0
 4e0:	00000206 	andeq	r0, r0, r6, lsl #4
 4e4:	43c50224 	bicmi	r0, r5, #36, 4	; 0x40000002
 4e8:	04000001 	streq	r0, [r0], #-1
 4ec:	006f6567 	rsbeq	r6, pc, r7, ror #10
 4f0:	00b9c602 	adcseq	ip, r9, r2, lsl #12
 4f4:	06000000 	streq	r0, [r0], -r0
 4f8:	00000046 	andeq	r0, r0, r6, asr #32
 4fc:	009bc702 	addseq	ip, fp, r2, lsl #14
 500:	06040000 	streq	r0, [r4], -r0
 504:	0000004b 	andeq	r0, r0, fp, asr #32
 508:	009bc702 	addseq	ip, fp, r2, lsl #14
 50c:	06080000 	streq	r0, [r8], -r0
 510:	0000012b 	andeq	r0, r0, fp, lsr #2
 514:	009bc802 	addseq	ip, fp, r2, lsl #16
 518:	060c0000 	streq	r0, [ip], -r0
 51c:	00000130 	andeq	r0, r0, r0, lsr r1
 520:	009bc802 	addseq	ip, fp, r2, lsl #16
 524:	06100000 	ldreq	r0, [r0], -r0
 528:	000001d5 	ldrdeq	r0, [r0], -r5
 52c:	0154c902 	cmpeq	r4, r2, lsl #18
 530:	06140000 	ldreq	r0, [r4], -r0
 534:	00000361 	andeq	r0, r0, r1, ror #6
 538:	0154ca02 	cmpeq	r4, r2, lsl #20
 53c:	06180000 	ldreq	r0, [r8], -r0
 540:	0000003c 	andeq	r0, r0, ip, lsr r0
 544:	0154cb02 	cmpeq	r4, r2, lsl #22
 548:	061c0000 	ldreq	r0, [ip], -r0
 54c:	00000121 	andeq	r0, r0, r1, lsr #2
 550:	016fcc02 	cmneq	pc, r2, lsl #24
 554:	00200000 	eoreq	r0, r0, r0
 558:	00014e0b 	andeq	r4, r1, fp, lsl #28
 55c:	014e0c00 	cmpeq	lr, r0, lsl #24
 560:	0a000000 	beq	568 <startup-0x1ffffa98>
 564:	0000ca04 	andeq	ip, r0, r4, lsl #20
 568:	43040a00 	movwmi	r0, #18944	; 0x4a00
 56c:	0b000001 	bleq	578 <startup-0x1ffffa88>
 570:	0000016f 	andeq	r0, r0, pc, ror #2
 574:	00014e0c 	andeq	r4, r1, ip, lsl #28
 578:	009b0c00 	addseq	r0, fp, r0, lsl #24
 57c:	9b0c0000 	blls	300584 <startup-0x1fcffa7c>
 580:	00000000 	andeq	r0, r0, r0
 584:	015a040a 	cmpeq	sl, sl, lsl #8
 588:	2d050000 	stccs	0, cr0, [r5, #-0]
 58c:	02000002 	andeq	r0, r0, #2
 590:	00014ecd 	andeq	r4, r1, sp, asr #29
 594:	02990d00 	addseq	r0, r9, #0, 26
 598:	15010000 	strne	r0, [r1, #-0]
 59c:	200002dc 	ldrdcs	r0, [r0], -ip
 5a0:	000000a6 	andeq	r0, r0, r6, lsr #1
 5a4:	01a29c01 			; <UNDEFINED> instruction: 0x01a29c01
 5a8:	6f0e0000 	svcvs	0x000e0000
 5ac:	75150100 	ldrvc	r0, [r5, #-256]	; 0xffffff00
 5b0:	02000001 	andeq	r0, r0, #1
 5b4:	0d006c91 	stceq	12, cr6, [r0, #-580]	; 0xfffffdbc
 5b8:	00000280 	andeq	r0, r0, r0, lsl #5
 5bc:	02800f01 	addeq	r0, r0, #1, 30
 5c0:	005c2000 	subseq	r2, ip, r0
 5c4:	9c010000 	stcls	0, cr0, [r1], {-0}
 5c8:	000001da 	ldrdeq	r0, [r0], -sl
 5cc:	01006f0e 	tsteq	r0, lr, lsl #30
 5d0:	0001750f 	andeq	r7, r1, pc, lsl #10
 5d4:	6c910200 	lfmvs	f0, 4, [r1], {0}
 5d8:	0002880f 	andeq	r8, r2, pc, lsl #16
 5dc:	00004c20 	andeq	r4, r0, r0, lsr #24
 5e0:	00691000 	rsbeq	r1, r9, r0
 5e4:	009b1001 	addseq	r1, fp, r1
 5e8:	91020000 	mrsls	r0, (UNDEF: 2)
 5ec:	0d000074 	stceq	0, cr0, [r0, #-464]	; 0xfffffe30
 5f0:	0000028d 	andeq	r0, r0, sp, lsl #5
 5f4:	02240801 	eoreq	r0, r4, #65536	; 0x10000
 5f8:	005c2000 	subseq	r2, ip, r0
 5fc:	9c010000 	stcls	0, cr0, [r1], {-0}
 600:	00000212 	andeq	r0, r0, r2, lsl r2
 604:	01006f0e 	tsteq	r0, lr, lsl #30
 608:	00017508 	andeq	r7, r1, r8, lsl #10
 60c:	6c910200 	lfmvs	f0, 4, [r1], {0}
 610:	00022c0f 	andeq	r2, r2, pc, lsl #24
 614:	00004c20 	andeq	r4, r0, r0, lsr #24
 618:	00691000 	rsbeq	r1, r9, r0
 61c:	009b0901 	addseq	r0, fp, r1, lsl #18
 620:	91020000 	mrsls	r0, (UNDEF: 2)
 624:	11000074 	tstne	r0, r4, ror r0
 628:	0000026f 	andeq	r0, r0, pc, ror #4
 62c:	02040301 	andeq	r0, r4, #67108864	; 0x4000000
 630:	00202000 	eoreq	r2, r0, r0
 634:	9c010000 	stcls	0, cr0, [r1], {-0}
 638:	01006f0e 	tsteq	r0, lr, lsl #30
 63c:	00017503 	andeq	r7, r1, r3, lsl #10
 640:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 644:	0002a512 	andeq	sl, r2, r2, lsl r5
 648:	9b030100 	blls	c0a50 <startup-0x1ff3f5b0>
 64c:	02000000 	andeq	r0, r0, #0
 650:	ac127091 	ldcge	0, cr7, [r2], {145}	; 0x91
 654:	01000002 	tsteq	r0, r2
 658:	00009b03 	andeq	r9, r0, r3, lsl #22
 65c:	6c910200 	lfmvs	f0, 4, [r1], {0}
 660:	02eb0000 	rsceq	r0, fp, #0
 664:	00040000 	andeq	r0, r4, r0
 668:	00000286 	andeq	r0, r0, r6, lsl #5
 66c:	00630104 	rsbeq	r0, r3, r4, lsl #2
 670:	d00c0000 	andle	r0, ip, r0
 674:	7e000002 	cdpvc	0, 0, cr0, cr0, cr2, {0}
 678:	84000001 	strhi	r0, [r0], #-1
 67c:	10200003 	eorne	r0, r0, r3
 680:	c8000005 	stmdagt	r0, {r0, r2}
 684:	02000001 	andeq	r0, r0, #1
 688:	0000037c 	andeq	r0, r0, ip, ror r3
 68c:	00306802 	eorseq	r6, r0, r2, lsl #16
 690:	01030000 	mrseq	r0, (UNDEF: 3)
 694:	00011308 	andeq	r1, r1, r8, lsl #6
 698:	07020300 	streq	r0, [r2, -r0, lsl #6]
 69c:	00000145 	andeq	r0, r0, r5, asr #2
 6a0:	69050404 	stmdbvs	r5, {r2, sl}
 6a4:	0300746e 	movweq	r7, #1134	; 0x46e
 6a8:	014b0704 	cmpeq	fp, r4, lsl #14
 6ac:	25050000 	strcs	r0, [r5, #-0]
 6b0:	5d000000 	stcpl	0, cr0, [r0, #-0]
 6b4:	06000000 	streq	r0, [r0], -r0
 6b8:	00000045 	andeq	r0, r0, r5, asr #32
 6bc:	070003ff 			; <UNDEFINED> instruction: 0x070003ff
 6c0:	000002c5 	andeq	r0, r0, r5, asr #5
 6c4:	004c8101 	subeq	r8, ip, r1, lsl #2
 6c8:	03050000 	movweq	r0, #20480	; 0x5000
 6cc:	20000f20 	andcs	r0, r0, r0, lsr #30
 6d0:	0002bf08 	andeq	fp, r2, r8, lsl #30
 6d4:	60a20100 	adcvs	r0, r2, r0, lsl #2
 6d8:	34200008 	strtcc	r0, [r0], #-8
 6dc:	01000000 	mrseq	r0, (UNDEF: 0)
 6e0:	0000909c 	muleq	r0, ip, r0
 6e4:	00690900 	rsbeq	r0, r9, r0, lsl #18
 6e8:	003ea301 	eorseq	sl, lr, r1, lsl #6
 6ec:	91020000 	mrsls	r0, (UNDEF: 2)
 6f0:	a80a0074 	stmdage	sl, {r2, r4, r5, r6}
 6f4:	01000003 	tsteq	r0, r3
 6f8:	00079495 	muleq	r7, r5, r4
 6fc:	0000cc20 	andeq	ip, r0, r0, lsr #24
 700:	e49c0100 	ldr	r0, [ip], #256	; 0x100
 704:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 708:	96010069 	strls	r0, [r1], -r9, rrx
 70c:	00000025 	andeq	r0, r0, r5, lsr #32
 710:	09779102 	ldmdbeq	r7!, {r1, r8, ip, pc}^
 714:	9601006a 	strls	r0, [r1], -sl, rrx
 718:	00000025 	andeq	r0, r0, r5, lsr #32
 71c:	0b769102 	bleq	1da4b2c <startup-0x1e25b4d4>
 720:	00000558 	andeq	r0, r0, r8, asr r5
 724:	00259601 	eoreq	r9, r5, r1, lsl #12
 728:	91020000 	mrsls	r0, (UNDEF: 2)
 72c:	0063096f 	rsbeq	r0, r3, pc, ror #18
 730:	00259601 	eoreq	r9, r5, r1, lsl #12
 734:	91020000 	mrsls	r0, (UNDEF: 2)
 738:	006b0975 	rsbeq	r0, fp, r5, ror r9
 73c:	00459701 	subeq	r9, r5, r1, lsl #14
 740:	91020000 	mrsls	r0, (UNDEF: 2)
 744:	840c0070 	strhi	r0, [ip], #-112	; 0xffffff90
 748:	01000003 	tsteq	r0, r3
 74c:	00070c83 	andeq	r0, r7, r3, lsl #25
 750:	00008820 	andeq	r8, r0, r0, lsr #16
 754:	2e9c0100 	fmlcse	f0, f4, f0
 758:	0d000001 	stceq	0, cr0, [r0, #-4]
 75c:	83010078 	movwhi	r0, #4216	; 0x1078
 760:	00000045 	andeq	r0, r0, r5, asr #32
 764:	0d6c9102 	stfeqp	f1, [ip, #-8]!
 768:	83010079 	movwhi	r0, #4217	; 0x1079
 76c:	00000045 	andeq	r0, r0, r5, asr #32
 770:	0b689102 	bleq	1a24b80 <startup-0x1e5db480>
 774:	0000038a 	andeq	r0, r0, sl, lsl #7
 778:	00258401 	eoreq	r8, r5, r1, lsl #8
 77c:	91020000 	mrsls	r0, (UNDEF: 2)
 780:	038f0b73 	orreq	r0, pc, #117760	; 0x1cc00
 784:	85010000 	strhi	r0, [r1, #-0]
 788:	0000003e 	andeq	r0, r0, lr, lsr r0
 78c:	00749102 	rsbseq	r9, r4, r2, lsl #2
 790:	0003cf0a 	andeq	ip, r3, sl, lsl #30
 794:	b4780100 	ldrbtlt	r0, [r8], #-256	; 0xffffff00
 798:	58200006 	stmdapl	r0!, {r1, r2}
 79c:	01000000 	mrseq	r0, (UNDEF: 0)
 7a0:	0001749c 	muleq	r1, ip, r4
 7a4:	06ba0e00 	ldrteq	r0, [sl], r0, lsl #28
 7a8:	004a2000 	subeq	r2, sl, r0
 7ac:	b30b0000 	movwlt	r0, #45056	; 0xb000
 7b0:	01000002 	tsteq	r0, r2
 7b4:	00003e79 	andeq	r3, r0, r9, ror lr
 7b8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 7bc:	0006de0e 	andeq	sp, r6, lr, lsl #28
 7c0:	00001a20 	andeq	r1, r0, r0, lsr #20
 7c4:	02b80b00 	adcseq	r0, r8, #0, 22
 7c8:	7c010000 	stcvc	0, cr0, [r1], {-0}
 7cc:	0000003e 	andeq	r0, r0, lr, lsr r0
 7d0:	00709102 	rsbseq	r9, r0, r2, lsl #2
 7d4:	430f0000 	movwmi	r0, #61440	; 0xf000
 7d8:	01000003 	tsteq	r0, r3
 7dc:	00065c68 	andeq	r5, r6, r8, ror #24
 7e0:	00005820 	andeq	r5, r0, r0, lsr #16
 7e4:	109c0100 	addsne	r0, ip, r0, lsl #2
 7e8:	00000311 	andeq	r0, r0, r1, lsl r3
 7ec:	00306201 	eorseq	r6, r0, r1, lsl #4
 7f0:	06320000 	ldrteq	r0, [r2], -r0
 7f4:	002a2000 	eoreq	r2, sl, r0
 7f8:	9c010000 	stcls	0, cr0, [r1], {-0}
 7fc:	000001ad 	andeq	r0, r0, sp, lsr #3
 800:	00055811 	andeq	r5, r5, r1, lsl r8
 804:	30620100 	rsbcc	r0, r2, r0, lsl #2
 808:	02000000 	andeq	r0, r0, #0
 80c:	0a007791 	beq	1e658 <startup-0x1ffe19a8>
 810:	00000395 	muleq	r0, r5, r3
 814:	05ec5a01 	strbeq	r5, [ip, #2561]!	; 0xa01
 818:	00462000 	subeq	r2, r6, r0
 81c:	9c010000 	stcls	0, cr0, [r1], {-0}
 820:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 824:	00031e11 	andeq	r1, r3, r1, lsl lr
 828:	255a0100 	ldrbcs	r0, [sl, #-256]	; 0xffffff00
 82c:	02000000 	andeq	r0, r0, #0
 830:	58117791 	ldmdapl	r1, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
 834:	01000005 	tsteq	r0, r5
 838:	0000255a 	andeq	r2, r0, sl, asr r5
 83c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 840:	03f10a00 	mvnseq	r0, #0, 20
 844:	53010000 	movwpl	r0, #4096	; 0x1000
 848:	200005ac 	andcs	r0, r0, ip, lsr #11
 84c:	00000040 	andeq	r0, r0, r0, asr #32
 850:	02119c01 	andseq	r9, r1, #256	; 0x100
 854:	ff110000 			; <UNDEFINED> instruction: 0xff110000
 858:	01000003 	tsteq	r0, r3
 85c:	00002553 	andeq	r2, r0, r3, asr r5
 860:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 864:	00055811 	andeq	r5, r5, r1, lsl r8
 868:	25530100 	ldrbcs	r0, [r3, #-256]	; 0xffffff00
 86c:	02000000 	andeq	r0, r0, #0
 870:	0a007691 	beq	1e2bc <startup-0x1ffe1d44>
 874:	00000323 	andeq	r0, r0, r3, lsr #6
 878:	05343f01 	ldreq	r3, [r4, #-3841]!	; 0xfffff0ff
 87c:	00782000 	rsbseq	r2, r8, r0
 880:	9c010000 	stcls	0, cr0, [r1], {-0}
 884:	00000243 	andeq	r0, r0, r3, asr #4
 888:	00030b11 	andeq	r0, r3, r1, lsl fp
 88c:	303f0100 	eorscc	r0, pc, r0, lsl #2
 890:	02000000 	andeq	r0, r0, #0
 894:	58117791 	ldmdapl	r1, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
 898:	01000005 	tsteq	r0, r5
 89c:	0000303f 	andeq	r3, r0, pc, lsr r0
 8a0:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 8a4:	03e41000 	mvneq	r1, #0
 8a8:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
 8ac:	00000030 	andeq	r0, r0, r0, lsr r0
 8b0:	200004ac 	andcs	r0, r0, ip, lsr #9
 8b4:	00000088 	andeq	r0, r0, r8, lsl #1
 8b8:	02799c01 	rsbseq	r9, r9, #256	; 0x100
 8bc:	58110000 	ldmdapl	r1, {}	; <UNPREDICTABLE>
 8c0:	01000005 	tsteq	r0, r5
 8c4:	00003029 	andeq	r3, r0, r9, lsr #32
 8c8:	6f910200 	svcvs	0x00910200
 8cc:	0003190b 	andeq	r1, r3, fp, lsl #18
 8d0:	302a0100 	eorcc	r0, sl, r0, lsl #2
 8d4:	02000000 	andeq	r0, r0, #0
 8d8:	12007791 	andne	r7, r0, #38010880	; 0x2440000
 8dc:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
 8e0:	04521901 	ldrbeq	r1, [r2], #-2305	; 0xfffff6ff
 8e4:	005a2000 	subseq	r2, sl, r0
 8e8:	9c010000 	stcls	0, cr0, [r1], {-0}
 8ec:	00033113 	andeq	r3, r3, r3, lsl r1
 8f0:	f8100100 			; <UNDEFINED> instruction: 0xf8100100
 8f4:	5a200003 	bpl	800908 <startup-0x1f7ff6f8>
 8f8:	01000000 	mrseq	r0, (UNDEF: 0)
 8fc:	0002ae9c 	muleq	r2, ip, lr
 900:	05581100 	ldrbeq	r1, [r8, #-256]	; 0xffffff00
 904:	10010000 	andne	r0, r1, r0
 908:	00000025 	andeq	r0, r0, r5, lsr #32
 90c:	00779102 	rsbseq	r9, r7, r2, lsl #2
 910:	0003500c 	andeq	r5, r3, ip
 914:	bc0c0100 	stflts	f0, [ip], {-0}
 918:	3c200003 	stccc	0, cr0, [r0], #-12
 91c:	01000000 	mrseq	r0, (UNDEF: 0)
 920:	0002d09c 	muleq	r2, ip, r0
 924:	00780d00 	rsbseq	r0, r8, r0, lsl #26
 928:	00250c01 	eoreq	r0, r5, r1, lsl #24
 92c:	91020000 	mrsls	r0, (UNDEF: 2)
 930:	67140077 			; <UNDEFINED> instruction: 0x67140077
 934:	01000003 	tsteq	r0, r3
 938:	00038408 	andeq	r8, r3, r8, lsl #8
 93c:	00003820 	andeq	r3, r0, r0, lsr #16
 940:	0d9c0100 	ldfeqs	f0, [ip]
 944:	08010078 	stmdaeq	r1, {r3, r4, r5, r6}
 948:	00000025 	andeq	r0, r0, r5, lsr #32
 94c:	00779102 	rsbseq	r9, r7, r2, lsl #2
 950:	00010f00 	andeq	r0, r1, r0, lsl #30
 954:	eb000400 	bl	195c <startup-0x1fffe6a4>
 958:	04000003 	streq	r0, [r0], #-3
 95c:	00006301 	andeq	r6, r0, r1, lsl #6
 960:	04070c00 	streq	r0, [r7], #-3072	; 0xfffff400
 964:	017e0000 	cmneq	lr, r0
 968:	08940000 	ldmeq	r4, {}	; <UNPREDICTABLE>
 96c:	02102000 	andseq	r2, r0, #0
 970:	033b0000 	teqeq	fp, #0
 974:	01020000 	mrseq	r0, (UNDEF: 2)
 978:	00011308 	andeq	r1, r1, r8, lsl #6
 97c:	07020200 	streq	r0, [r2, -r0, lsl #4]
 980:	00000145 	andeq	r0, r0, r5, asr #2
 984:	69050403 	stmdbvs	r5, {r0, r1, sl}
 988:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
 98c:	014b0704 	cmpeq	fp, r4, lsl #14
 990:	53040000 	movwpl	r0, #16384	; 0x4000
 994:	01000004 	tsteq	r0, r4
 998:	00002541 	andeq	r2, r0, r1, asr #10
 99c:	000a3c00 	andeq	r3, sl, r0, lsl #24
 9a0:	00006820 	andeq	r6, r0, r0, lsr #16
 9a4:	859c0100 	ldrhi	r0, [ip, #256]	; 0x100
 9a8:	05000000 	streq	r0, [r0, #-0]
 9ac:	00776f72 	rsbseq	r6, r7, r2, ror pc
 9b0:	00334201 	eorseq	r4, r3, r1, lsl #4
 9b4:	91020000 	mrsls	r0, (UNDEF: 2)
 9b8:	0442066c 	strbeq	r0, [r2], #-1644	; 0xfffff994
 9bc:	42010000 	andmi	r0, r1, #0
 9c0:	00000033 	andeq	r0, r0, r3, lsr r0
 9c4:	05689102 	strbeq	r9, [r8, #-258]!	; 0xfffffefe
 9c8:	0079656b 	rsbseq	r6, r9, fp, ror #10
 9cc:	00854301 	addeq	r4, r5, r1, lsl #6
 9d0:	91020000 	mrsls	r0, (UNDEF: 2)
 9d4:	25070058 	strcs	r0, [r7, #-88]	; 0xffffffa8
 9d8:	95000000 	strls	r0, [r0, #-0]
 9dc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 9e0:	0000003a 	andeq	r0, r0, sl, lsr r0
 9e4:	6009000f 	andvs	r0, r9, pc
 9e8:	01000004 	tsteq	r0, r4
 9ec:	00003338 	andeq	r3, r0, r8, lsr r3
 9f0:	0009e800 	andeq	lr, r9, r0, lsl #16
 9f4:	00005420 	andeq	r5, r0, r0, lsr #8
 9f8:	bb9c0100 	bllt	fe700e00 <backGround+0xde6ff674>
 9fc:	05000000 	streq	r0, [r0, #-0]
 a00:	39010063 	stmdbcc	r1, {r0, r1, r5, r6}
 a04:	00000025 	andeq	r0, r0, r5, lsr #32
 a08:	00779102 	rsbseq	r9, r7, r2, lsl #2
 a0c:	00046b0a 	andeq	r6, r4, sl, lsl #22
 a10:	942e0100 	strtls	r0, [lr], #-256	; 0xffffff00
 a14:	54200009 	strtpl	r0, [r0], #-9
 a18:	01000000 	mrseq	r0, (UNDEF: 0)
 a1c:	0000df9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
 a20:	6f720b00 	svcvs	0x00720b00
 a24:	2e010077 	mcrcs	0, 0, r0, cr1, cr7, {3}
 a28:	0000003a 	andeq	r0, r0, sl, lsr r0
 a2c:	00749102 	rsbseq	r9, r4, r2, lsl #2
 a30:	0004580a 	andeq	r5, r4, sl, lsl #16
 a34:	dc170100 	ldfles	f0, [r7], {-0}
 a38:	b8200008 	stmdalt	r0!, {r3}
 a3c:	01000000 	mrseq	r0, (UNDEF: 0)
 a40:	0001019c 	muleq	r1, ip, r1
 a44:	00630b00 	rsbeq	r0, r3, r0, lsl #22
 a48:	00251701 	eoreq	r1, r5, r1, lsl #14
 a4c:	91020000 	mrsls	r0, (UNDEF: 2)
 a50:	490c0077 	stmdbmi	ip, {r0, r1, r2, r4, r5, r6}
 a54:	01000004 	tsteq	r0, r4
 a58:	00089408 	andeq	r9, r8, r8, lsl #8
 a5c:	00004820 	andeq	r4, r0, r0, lsr #16
 a60:	009c0100 	addseq	r0, ip, r0, lsl #2
 a64:	000000a6 	andeq	r0, r0, r6, lsr #1
 a68:	04be0004 	ldrteq	r0, [lr], #4
 a6c:	01040000 	mrseq	r0, (UNDEF: 4)
 a70:	00000063 	andeq	r0, r0, r3, rrx
 a74:	0004900c 	andeq	r9, r4, ip
 a78:	00017e00 	andeq	r7, r1, r0, lsl #28
 a7c:	000aa400 	andeq	sl, sl, r0, lsl #8
 a80:	0000bc20 	andeq	fp, r0, r0, lsr #24
 a84:	00040200 	andeq	r0, r4, r0, lsl #4
 a88:	08010200 	stmdaeq	r1, {r9}
 a8c:	00000113 	andeq	r0, r0, r3, lsl r1
 a90:	45070202 	strmi	r0, [r7, #-514]	; 0xfffffdfe
 a94:	03000001 	movweq	r0, #1
 a98:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 a9c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
 aa0:	00014b07 	andeq	r4, r1, r7, lsl #22
 aa4:	04840400 	streq	r0, [r4], #1024	; 0x400
 aa8:	26010000 	strcs	r0, [r1], -r0
 aac:	20000b4e 	andcs	r0, r0, lr, asr #22
 ab0:	00000012 	andeq	r0, r0, r2, lsl r0
 ab4:	c9059c01 	stmdbgt	r5, {r0, sl, fp, ip, pc}
 ab8:	01000004 	tsteq	r0, r4
 abc:	000b141b 	andeq	r1, fp, fp, lsl r4
 ac0:	00003a20 	andeq	r3, r0, r0, lsr #20
 ac4:	759c0100 	ldrvc	r0, [ip, #256]	; 0x100
 ac8:	06000000 	streq	r0, [r0], -r0
 acc:	0100736d 	tsteq	r0, sp, ror #6
 ad0:	00003a1b 	andeq	r3, r0, fp, lsl sl
 ad4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 ad8:	04780500 	ldrbteq	r0, [r8], #-1280	; 0xfffffb00
 adc:	12010000 	andne	r0, r1, #0
 ae0:	20000ae8 	andcs	r0, r0, r8, ror #21
 ae4:	0000002c 	andeq	r0, r0, ip, lsr #32
 ae8:	00989c01 	addseq	r9, r8, r1, lsl #24
 aec:	75060000 	strvc	r0, [r6, #-0]
 af0:	12010073 	andne	r0, r1, #115	; 0x73
 af4:	0000003a 	andeq	r0, r0, sl, lsr r0
 af8:	00749102 	rsbseq	r9, r4, r2, lsl #2
 afc:	0004d507 	andeq	sp, r4, r7, lsl #10
 b00:	a4080100 	strge	r0, [r8], #-256	; 0xffffff00
 b04:	4420000a 	strtmi	r0, [r0], #-10
 b08:	01000000 	mrseq	r0, (UNDEF: 0)
 b0c:	01f7009c 			; <UNDEFINED> instruction: 0x01f7009c
 b10:	00040000 	andeq	r0, r4, r0
 b14:	00000541 	andeq	r0, r0, r1, asr #10
 b18:	00630104 	rsbeq	r0, r3, r4, lsl #2
 b1c:	150c0000 	strne	r0, [ip, #-0]
 b20:	7e000005 	cdpvc	0, 0, cr0, cr0, cr5, {0}
 b24:	60000001 	andvs	r0, r0, r1
 b28:	a620000b 	strtge	r0, [r0], -fp
 b2c:	89000002 	stmdbhi	r0, {r1}
 b30:	02000004 	andeq	r0, r0, #4
 b34:	01130801 	tsteq	r3, r1, lsl #16
 b38:	02020000 	andeq	r0, r2, #0
 b3c:	00014507 	andeq	r4, r1, r7, lsl #10
 b40:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
 b44:	00746e69 	rsbseq	r6, r4, r9, ror #28
 b48:	4b070402 	blmi	1c1b58 <startup-0x1fe3e4a8>
 b4c:	04000001 	streq	r0, [r0], #-1
 b50:	000004f6 	strdeq	r0, [r0], -r6
 b54:	0dbc6101 	ldfeqs	f6, [ip, #4]!
 b58:	004a2000 	subeq	r2, sl, r0
 b5c:	9c010000 	stcls	0, cr0, [r1], {-0}
 b60:	0000007d 	andeq	r0, r0, sp, ror r0
 b64:	01007805 	tsteq	r0, r5, lsl #16
 b68:	00003361 	andeq	r3, r0, r1, ror #6
 b6c:	6c910200 	lfmvs	f0, 4, [r1], {0}
 b70:	01007905 	tsteq	r0, r5, lsl #18
 b74:	00003361 	andeq	r3, r0, r1, ror #6
 b78:	68910200 	ldmvs	r1, {r9}
 b7c:	0002b806 	andeq	fp, r2, r6, lsl #16
 b80:	25620100 	strbcs	r0, [r2, #-256]!	; 0xffffff00
 b84:	02000000 	andeq	r0, r0, #0
 b88:	04007791 	streq	r7, [r0], #-1937	; 0xfffff86f
 b8c:	000005d1 	ldrdeq	r0, [r0], -r1
 b90:	0d805801 	stceq	8, cr5, [r0, #4]
 b94:	003c2000 	eorseq	r2, ip, r0
 b98:	9c010000 	stcls	0, cr0, [r1], {-0}
 b9c:	000000a1 	andeq	r0, r0, r1, lsr #1
 ba0:	0004e107 	andeq	lr, r4, r7, lsl #2
 ba4:	25580100 	ldrbcs	r0, [r8, #-256]	; 0xffffff00
 ba8:	02000000 	andeq	r0, r0, #0
 bac:	08007791 	stmdaeq	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
 bb0:	000004eb 	andeq	r0, r0, fp, ror #9
 bb4:	0d464a01 	vstreq	s9, [r6, #-4]
 bb8:	003a2000 	eorseq	r2, sl, r0
 bbc:	9c010000 	stcls	0, cr0, [r1], {-0}
 bc0:	0005ac04 	andeq	sl, r5, r4, lsl #24
 bc4:	14440100 	strbne	r0, [r4], #-256	; 0xffffff00
 bc8:	3220000d 	eorcc	r0, r0, #13
 bcc:	01000000 	mrseq	r0, (UNDEF: 0)
 bd0:	0000d69c 	muleq	r0, ip, r6
 bd4:	03ff0700 	mvnseq	r0, #0, 14
 bd8:	44010000 	strmi	r0, [r1], #-0
 bdc:	00000025 	andeq	r0, r0, r5, lsr #32
 be0:	00779102 	rsbseq	r9, r7, r2, lsl #2
 be4:	00059c09 	andeq	r9, r5, r9, lsl #24
 be8:	25390100 	ldrcs	r0, [r9, #-256]!	; 0xffffff00
 bec:	cc000000 	stcgt	0, cr0, [r0], {-0}
 bf0:	4820000c 	stmdami	r0!, {r2, r3}
 bf4:	01000000 	mrseq	r0, (UNDEF: 0)
 bf8:	0000fe9c 	muleq	r0, ip, lr
 bfc:	03190600 	tsteq	r9, #0, 12
 c00:	3b010000 	blcc	40c08 <startup-0x1ffbf3f8>
 c04:	00000025 	andeq	r0, r0, r5, lsr #32
 c08:	006f9102 	rsbeq	r9, pc, r2, lsl #2
 c0c:	00050309 	andeq	r0, r5, r9, lsl #6
 c10:	252f0100 	strcs	r0, [pc, #-256]!	; b18 <startup-0x1ffff4e8>
 c14:	84000000 	strhi	r0, [r0], #-0
 c18:	4820000c 	stmdami	r0!, {r2, r3}
 c1c:	01000000 	mrseq	r0, (UNDEF: 0)
 c20:	0001269c 	muleq	r1, ip, r6
 c24:	05090600 	streq	r0, [r9, #-1536]	; 0xfffffa00
 c28:	31010000 	mrscc	r0, (UNDEF: 1)
 c2c:	00000025 	andeq	r0, r0, r5, lsr #32
 c30:	006f9102 	rsbeq	r9, pc, r2, lsl #2
 c34:	00057604 	andeq	r7, r5, r4, lsl #12
 c38:	5a290100 	bpl	a41040 <startup-0x1f5befc0>
 c3c:	2a20000c 	bcs	800c74 <startup-0x1f7ff38c>
 c40:	01000000 	mrseq	r0, (UNDEF: 0)
 c44:	00014a9c 	muleq	r1, ip, sl
 c48:	031e0700 	tsteq	lr, #0, 14
 c4c:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
 c50:	00000025 	andeq	r0, r0, r5, lsr #32
 c54:	00779102 	rsbseq	r9, r7, r2, lsl #2
 c58:	0005e204 	andeq	lr, r5, r4, lsl #4
 c5c:	30230100 	eorcc	r0, r3, r0, lsl #2
 c60:	2a20000c 	bcs	800c98 <startup-0x1f7ff368>
 c64:	01000000 	mrseq	r0, (UNDEF: 0)
 c68:	00016e9c 	muleq	r1, ip, lr
 c6c:	03ff0700 	mvnseq	r0, #0, 14
 c70:	23010000 	movwcs	r0, #4096	; 0x1000
 c74:	00000025 	andeq	r0, r0, r5, lsr #32
 c78:	00779102 	rsbseq	r9, r7, r2, lsl #2
 c7c:	0005870a 	andeq	r8, r5, sl, lsl #14
 c80:	f41f0100 			; <UNDEFINED> instruction: 0xf41f0100
 c84:	3c20000b 	stccc	0, cr0, [r0], #-44	; 0xffffffd4
 c88:	01000000 	mrseq	r0, (UNDEF: 0)
 c8c:	0001909c 	muleq	r1, ip, r0
 c90:	00780500 	rsbseq	r0, r8, r0, lsl #10
 c94:	00251f01 	eoreq	r1, r5, r1, lsl #30
 c98:	91020000 	mrsls	r0, (UNDEF: 2)
 c9c:	630a0077 	movwvs	r0, #41079	; 0xa077
 ca0:	01000005 	tsteq	r0, r5
 ca4:	000bc41a 	andeq	ip, fp, sl, lsl r4
 ca8:	00003020 	andeq	r3, r0, r0, lsr #32
 cac:	b29c0100 	addslt	r0, ip, #0, 2
 cb0:	05000001 	streq	r0, [r0, #-1]
 cb4:	1a010078 	bne	40e9c <startup-0x1ffbf164>
 cb8:	00000025 	andeq	r0, r0, r5, lsr #32
 cbc:	00779102 	rsbseq	r9, r7, r2, lsl #2
 cc0:	00054d09 	andeq	r4, r5, r9, lsl #26
 cc4:	25100100 	ldrcs	r0, [r0, #-256]	; 0xffffff00
 cc8:	90000000 	andls	r0, r0, r0
 ccc:	3420000b 	strtcc	r0, [r0], #-11
 cd0:	01000000 	mrseq	r0, (UNDEF: 0)
 cd4:	0001da9c 	muleq	r1, ip, sl
 cd8:	005e0600 	subseq	r0, lr, r0, lsl #12
 cdc:	14010000 	strne	r0, [r1], #-0
 ce0:	00000025 	andeq	r0, r0, r5, lsr #32
 ce4:	00779102 	rsbseq	r9, r7, r2, lsl #2
 ce8:	0005ba0b 	andeq	fp, r5, fp, lsl #20
 cec:	60090100 	andvs	r0, r9, r0, lsl #2
 cf0:	3020000b 	eorcc	r0, r0, fp
 cf4:	01000000 	mrseq	r0, (UNDEF: 0)
 cf8:	005e079c 			; <UNDEFINED> instruction: 0x005e079c
 cfc:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
 d00:	00000025 	andeq	r0, r0, r5, lsr #32
 d04:	00779102 	rsbseq	r9, r7, r2, lsl #2
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	13030000 	movwne	r0, #12288	; 0x3000
  20:	0b0e0301 	bleq	380c2c <startup-0x1fc7f3d4>
  24:	3b0b3a0b 	blcc	2ce858 <startup-0x1fd317a8>
  28:	0013010b 	andseq	r0, r3, fp, lsl #2
  2c:	000d0400 	andeq	r0, sp, r0, lsl #8
  30:	0b3a0803 	bleq	e82044 <startup-0x1f17dfbc>
  34:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  38:	00000b38 	andeq	r0, r0, r8, lsr fp
  3c:	03001605 	movweq	r1, #1541	; 0x605
  40:	3b0b3a0e 	blcc	2ce880 <startup-0x1fd31780>
  44:	0013490b 	andseq	r4, r3, fp, lsl #18
  48:	000d0600 	andeq	r0, sp, r0, lsl #12
  4c:	0b3a0e03 	bleq	e83860 <startup-0x1f17c7a0>
  50:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  54:	00000b38 	andeq	r0, r0, r8, lsr fp
  58:	0b002407 	bleq	907c <startup-0x1fff6f84>
  5c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  60:	08000008 	stmdaeq	r0, {r3}
  64:	13490101 	movtne	r0, #37121	; 0x9101
  68:	00001301 	andeq	r1, r0, r1, lsl #6
  6c:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
  70:	000b2f13 	andeq	r2, fp, r3, lsl pc
  74:	000f0a00 	andeq	r0, pc, r0, lsl #20
  78:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  7c:	150b0000 	strne	r0, [fp, #-0]
  80:	01192701 	tsteq	r9, r1, lsl #14
  84:	0c000013 	stceq	0, cr0, [r0], {19}
  88:	13490005 	movtne	r0, #36869	; 0x9005
  8c:	340d0000 	strcc	r0, [sp], #-0
  90:	3a0e0300 	bcc	380c98 <startup-0x1fc7f368>
  94:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  98:	00180213 	andseq	r0, r8, r3, lsl r2
  9c:	00210e00 	eoreq	r0, r1, r0, lsl #28
  a0:	052f1349 	streq	r1, [pc, #-841]!	; fffffd5f <backGround+0xdfffe5d3>
  a4:	130f0000 	movwne	r0, #61440	; 0xf000
  a8:	3a0b0b01 	bcc	2c2cb4 <startup-0x1fd3d34c>
  ac:	010b3b0b 	tsteq	fp, fp, lsl #22
  b0:	10000013 	andne	r0, r0, r3, lsl r0
  b4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  b8:	0b3b0b3a 	bleq	ec2da8 <startup-0x1f13d258>
  bc:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  c0:	00001802 	andeq	r1, r0, r2, lsl #16
  c4:	3f012e11 	svccc	0x00012e11
  c8:	3a0e0319 	bcc	380d34 <startup-0x1fc7f2cc>
  cc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  d0:	11134919 	tstne	r3, r9, lsl r9
  d4:	40061201 	andmi	r1, r6, r1, lsl #4
  d8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  dc:	00001301 	andeq	r1, r0, r1, lsl #6
  e0:	03000512 	movweq	r0, #1298	; 0x512
  e4:	3b0b3a0e 	blcc	2ce924 <startup-0x1fd316dc>
  e8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  ec:	13000018 	movwne	r0, #24
  f0:	08030034 	stmdaeq	r3, {r2, r4, r5}
  f4:	0b3b0b3a 	bleq	ec2de4 <startup-0x1f13d21c>
  f8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  fc:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
 100:	03193f00 	tsteq	r9, #0, 30
 104:	3b0b3a0e 	blcc	2ce944 <startup-0x1fd316bc>
 108:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 10c:	96184006 	ldrls	r4, [r8], -r6
 110:	00001942 	andeq	r1, r0, r2, asr #18
 114:	3f012e15 	svccc	0x00012e15
 118:	3a0e0319 	bcc	380d84 <startup-0x1fc7f27c>
 11c:	110b3b0b 	tstne	fp, fp, lsl #22
 120:	40061201 	andmi	r1, r6, r1, lsl #4
 124:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 128:	00001301 	andeq	r1, r0, r1, lsl #6
 12c:	3f012e16 	svccc	0x00012e16
 130:	3a0e0319 	bcc	380d9c <startup-0x1fc7f264>
 134:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 138:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 13c:	96184006 	ldrls	r4, [r8], -r6
 140:	13011942 	movwne	r1, #6466	; 0x1942
 144:	05170000 	ldreq	r0, [r7, #-0]
 148:	3a080300 	bcc	200d50 <startup-0x1fdff2b0>
 14c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 150:	00180213 	andseq	r0, r8, r3, lsl r2
 154:	010b1800 	tsteq	fp, r0, lsl #16
 158:	06120111 			; <UNDEFINED> instruction: 0x06120111
 15c:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 160:	3a0e0301 	bcc	380d6c <startup-0x1fc7f294>
 164:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 168:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 16c:	97184006 	ldrls	r4, [r8, -r6]
 170:	13011942 	movwne	r1, #6466	; 0x1942
 174:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
 178:	03193f00 	tsteq	r9, #0, 30
 17c:	3b0b3a0e 	blcc	2ce9bc <startup-0x1fd31644>
 180:	1119270b 	tstne	r9, fp, lsl #14
 184:	40061201 	andmi	r1, r6, r1, lsl #4
 188:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 18c:	01000000 	mrseq	r0, (UNDEF: 0)
 190:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 194:	0e030b13 	vmoveq.32	d3[0], r0
 198:	01110e1b 	tsteq	r1, fp, lsl lr
 19c:	17100612 			; <UNDEFINED> instruction: 0x17100612
 1a0:	24020000 	strcs	r0, [r2], #-0
 1a4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 1a8:	000e030b 	andeq	r0, lr, fp, lsl #6
 1ac:	01130300 	tsteq	r3, r0, lsl #6
 1b0:	0b0b0e03 	bleq	2c39c4 <startup-0x1fd3c63c>
 1b4:	0b3b0b3a 	bleq	ec2ea4 <startup-0x1f13d15c>
 1b8:	00001301 	andeq	r1, r0, r1, lsl #6
 1bc:	03000d04 	movweq	r0, #3332	; 0xd04
 1c0:	3b0b3a08 	blcc	2ce9e8 <startup-0x1fd31618>
 1c4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 1c8:	0500000b 	streq	r0, [r0, #-11]
 1cc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 1d0:	0b3b0b3a 	bleq	ec2ec0 <startup-0x1f13d140>
 1d4:	00001349 	andeq	r1, r0, r9, asr #6
 1d8:	03000d06 	movweq	r0, #3334	; 0xd06
 1dc:	3b0b3a0e 	blcc	2cea1c <startup-0x1fd315e4>
 1e0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 1e4:	0700000b 	streq	r0, [r0, -fp]
 1e8:	0b0b0024 	bleq	2c0280 <startup-0x1fd3fd80>
 1ec:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 1f0:	01080000 	mrseq	r0, (UNDEF: 8)
 1f4:	01134901 	tsteq	r3, r1, lsl #18
 1f8:	09000013 	stmdbeq	r0, {r0, r1, r4}
 1fc:	13490021 	movtne	r0, #36897	; 0x9021
 200:	00000b2f 	andeq	r0, r0, pc, lsr #22
 204:	0b000f0a 	bleq	3e34 <startup-0x1fffc1cc>
 208:	0013490b 	andseq	r4, r3, fp, lsl #18
 20c:	01150b00 	tsteq	r5, r0, lsl #22
 210:	13011927 	movwne	r1, #6439	; 0x1927
 214:	050c0000 	streq	r0, [ip, #-0]
 218:	00134900 	andseq	r4, r3, r0, lsl #18
 21c:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
 220:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 224:	0b3b0b3a 	bleq	ec2f14 <startup-0x1f13d0ec>
 228:	01111927 	tsteq	r1, r7, lsr #18
 22c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 230:	01194296 			; <UNDEFINED> instruction: 0x01194296
 234:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 238:	08030005 	stmdaeq	r3, {r0, r2}
 23c:	0b3b0b3a 	bleq	ec2f2c <startup-0x1f13d0d4>
 240:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 244:	0b0f0000 	bleq	3c024c <startup-0x1fc3fdb4>
 248:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 24c:	10000006 	andne	r0, r0, r6
 250:	08030034 	stmdaeq	r3, {r2, r4, r5}
 254:	0b3b0b3a 	bleq	ec2f44 <startup-0x1f13d0bc>
 258:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 25c:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 260:	03193f01 	tsteq	r9, #1, 30
 264:	3b0b3a0e 	blcc	2ceaa4 <startup-0x1fd3155c>
 268:	1119270b 	tstne	r9, fp, lsl #14
 26c:	40061201 	andmi	r1, r6, r1, lsl #4
 270:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 274:	05120000 	ldreq	r0, [r2, #-0]
 278:	3a0e0300 	bcc	380e80 <startup-0x1fc7f180>
 27c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 280:	00180213 	andseq	r0, r8, r3, lsl r2
 284:	11010000 	mrsne	r0, (UNDEF: 1)
 288:	130e2501 	movwne	r2, #58625	; 0xe501
 28c:	1b0e030b 	blne	380ec0 <startup-0x1fc7f140>
 290:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 294:	00171006 	andseq	r1, r7, r6
 298:	00160200 	andseq	r0, r6, r0, lsl #4
 29c:	0b3a0e03 	bleq	e83ab0 <startup-0x1f17c550>
 2a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2a4:	24030000 	strcs	r0, [r3], #-0
 2a8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 2ac:	000e030b 	andeq	r0, lr, fp, lsl #6
 2b0:	00240400 	eoreq	r0, r4, r0, lsl #8
 2b4:	0b3e0b0b 	bleq	f82ee8 <startup-0x1f07d118>
 2b8:	00000803 	andeq	r0, r0, r3, lsl #16
 2bc:	49010105 	stmdbmi	r1, {r0, r2, r8}
 2c0:	00130113 	andseq	r0, r3, r3, lsl r1
 2c4:	00210600 	eoreq	r0, r1, r0, lsl #12
 2c8:	052f1349 	streq	r1, [pc, #-841]!	; ffffff87 <backGround+0xdfffe7fb>
 2cc:	34070000 	strcc	r0, [r7], #-0
 2d0:	3a0e0300 	bcc	380ed8 <startup-0x1fc7f128>
 2d4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2d8:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 2dc:	08000018 	stmdaeq	r0, {r3, r4}
 2e0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2e4:	0b3a0e03 	bleq	e83af8 <startup-0x1f17c508>
 2e8:	01110b3b 	tsteq	r1, fp, lsr fp
 2ec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2f0:	01194297 			; <UNDEFINED> instruction: 0x01194297
 2f4:	09000013 	stmdbeq	r0, {r0, r1, r4}
 2f8:	08030034 	stmdaeq	r3, {r2, r4, r5}
 2fc:	0b3b0b3a 	bleq	ec2fec <startup-0x1f13d014>
 300:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 304:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
 308:	03193f01 	tsteq	r9, #1, 30
 30c:	3b0b3a0e 	blcc	2ceb4c <startup-0x1fd314b4>
 310:	1119270b 	tstne	r9, fp, lsl #14
 314:	40061201 	andmi	r1, r6, r1, lsl #4
 318:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 31c:	00001301 	andeq	r1, r0, r1, lsl #6
 320:	0300340b 	movweq	r3, #1035	; 0x40b
 324:	3b0b3a0e 	blcc	2ceb64 <startup-0x1fd3149c>
 328:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 32c:	0c000018 	stceq	0, cr0, [r0], {24}
 330:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 334:	0b3a0e03 	bleq	e83b48 <startup-0x1f17c4b8>
 338:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 33c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 340:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 344:	00130119 	andseq	r0, r3, r9, lsl r1
 348:	00050d00 	andeq	r0, r5, r0, lsl #26
 34c:	0b3a0803 	bleq	e82360 <startup-0x1f17dca0>
 350:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 354:	00001802 	andeq	r1, r0, r2, lsl #16
 358:	11010b0e 	tstne	r1, lr, lsl #22
 35c:	00061201 	andeq	r1, r6, r1, lsl #4
 360:	002e0f00 	eoreq	r0, lr, r0, lsl #30
 364:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 368:	0b3b0b3a 	bleq	ec3058 <startup-0x1f13cfa8>
 36c:	01111927 	tsteq	r1, r7, lsr #18
 370:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 374:	00194296 	mulseq	r9, r6, r2
 378:	012e1000 			; <UNDEFINED> instruction: 0x012e1000
 37c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 380:	0b3b0b3a 	bleq	ec3070 <startup-0x1f13cf90>
 384:	13491927 	movtne	r1, #39207	; 0x9927
 388:	06120111 			; <UNDEFINED> instruction: 0x06120111
 38c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 390:	00130119 	andseq	r0, r3, r9, lsl r1
 394:	00051100 	andeq	r1, r5, r0, lsl #2
 398:	0b3a0e03 	bleq	e83bac <startup-0x1f17c454>
 39c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3a0:	00001802 	andeq	r1, r0, r2, lsl #16
 3a4:	03002e12 	movweq	r2, #3602	; 0xe12
 3a8:	3b0b3a0e 	blcc	2cebe8 <startup-0x1fd31418>
 3ac:	1119270b 	tstne	r9, fp, lsl #14
 3b0:	40061201 	andmi	r1, r6, r1, lsl #4
 3b4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 3b8:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 3bc:	3a0e0301 	bcc	380fc8 <startup-0x1fc7f038>
 3c0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 3c4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 3c8:	96184006 	ldrls	r4, [r8], -r6
 3cc:	13011942 	movwne	r1, #6466	; 0x1942
 3d0:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
 3d4:	03193f01 	tsteq	r9, #1, 30
 3d8:	3b0b3a0e 	blcc	2cec18 <startup-0x1fd313e8>
 3dc:	1119270b 	tstne	r9, fp, lsl #14
 3e0:	40061201 	andmi	r1, r6, r1, lsl #4
 3e4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 3e8:	01000000 	mrseq	r0, (UNDEF: 0)
 3ec:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 3f0:	0e030b13 	vmoveq.32	d3[0], r0
 3f4:	01110e1b 	tsteq	r1, fp, lsl lr
 3f8:	17100612 			; <UNDEFINED> instruction: 0x17100612
 3fc:	24020000 	strcs	r0, [r2], #-0
 400:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 404:	000e030b 	andeq	r0, lr, fp, lsl #6
 408:	00240300 	eoreq	r0, r4, r0, lsl #6
 40c:	0b3e0b0b 	bleq	f83040 <startup-0x1f07cfc0>
 410:	00000803 	andeq	r0, r0, r3, lsl #16
 414:	3f012e04 	svccc	0x00012e04
 418:	3a0e0319 	bcc	381084 <startup-0x1fc7ef7c>
 41c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 420:	11134919 	tstne	r3, r9, lsl r9
 424:	40061201 	andmi	r1, r6, r1, lsl #4
 428:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 42c:	00001301 	andeq	r1, r0, r1, lsl #6
 430:	03003405 	movweq	r3, #1029	; 0x405
 434:	3b0b3a08 	blcc	2cec5c <startup-0x1fd313a4>
 438:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 43c:	06000018 			; <UNDEFINED> instruction: 0x06000018
 440:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 444:	0b3b0b3a 	bleq	ec3134 <startup-0x1f13cecc>
 448:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 44c:	01070000 	mrseq	r0, (UNDEF: 7)
 450:	01134901 	tsteq	r3, r1, lsl #18
 454:	08000013 	stmdaeq	r0, {r0, r1, r4}
 458:	13490021 	movtne	r0, #36897	; 0x9021
 45c:	00000b2f 	andeq	r0, r0, pc, lsr #22
 460:	3f012e09 	svccc	0x00012e09
 464:	3a0e0319 	bcc	3810d0 <startup-0x1fc7ef30>
 468:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 46c:	11134919 	tstne	r3, r9, lsl r9
 470:	40061201 	andmi	r1, r6, r1, lsl #4
 474:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 478:	00001301 	andeq	r1, r0, r1, lsl #6
 47c:	3f012e0a 	svccc	0x00012e0a
 480:	3a0e0319 	bcc	3810ec <startup-0x1fc7ef14>
 484:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 488:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 48c:	97184006 	ldrls	r4, [r8, -r6]
 490:	13011942 	movwne	r1, #6466	; 0x1942
 494:	050b0000 	streq	r0, [fp, #-0]
 498:	3a080300 	bcc	2010a0 <startup-0x1fdfef60>
 49c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4a0:	00180213 	andseq	r0, r8, r3, lsl r2
 4a4:	002e0c00 	eoreq	r0, lr, r0, lsl #24
 4a8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 4ac:	0b3b0b3a 	bleq	ec319c <startup-0x1f13ce64>
 4b0:	01111927 	tsteq	r1, r7, lsr #18
 4b4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 4b8:	00194297 	mulseq	r9, r7, r2
 4bc:	11010000 	mrsne	r0, (UNDEF: 1)
 4c0:	130e2501 	movwne	r2, #58625	; 0xe501
 4c4:	1b0e030b 	blne	3810f8 <startup-0x1fc7ef08>
 4c8:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 4cc:	00171006 	andseq	r1, r7, r6
 4d0:	00240200 	eoreq	r0, r4, r0, lsl #4
 4d4:	0b3e0b0b 	bleq	f83108 <startup-0x1f07cef8>
 4d8:	00000e03 	andeq	r0, r0, r3, lsl #28
 4dc:	0b002403 	bleq	94f0 <startup-0x1fff6b10>
 4e0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 4e4:	04000008 	streq	r0, [r0], #-8
 4e8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 4ec:	0b3a0e03 	bleq	e83d00 <startup-0x1f17c300>
 4f0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 4f4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 4f8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 4fc:	05000019 	streq	r0, [r0, #-25]	; 0xffffffe7
 500:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 504:	0b3a0e03 	bleq	e83d18 <startup-0x1f17c2e8>
 508:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 50c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 510:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 514:	00130119 	andseq	r0, r3, r9, lsl r1
 518:	00050600 	andeq	r0, r5, r0, lsl #12
 51c:	0b3a0803 	bleq	e82530 <startup-0x1f17dad0>
 520:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 524:	00001802 	andeq	r1, r0, r2, lsl #16
 528:	3f002e07 	svccc	0x00002e07
 52c:	3a0e0319 	bcc	381198 <startup-0x1fc7ee68>
 530:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 534:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 538:	97184006 	ldrls	r4, [r8, -r6]
 53c:	00001942 	andeq	r1, r0, r2, asr #18
 540:	01110100 	tsteq	r1, r0, lsl #2
 544:	0b130e25 	bleq	4c3de0 <startup-0x1fb3c220>
 548:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 54c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 550:	00001710 	andeq	r1, r0, r0, lsl r7
 554:	0b002402 	bleq	9564 <startup-0x1fff6a9c>
 558:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 55c:	0300000e 	movweq	r0, #14
 560:	0b0b0024 	bleq	2c05f8 <startup-0x1fd3fa08>
 564:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 568:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
 56c:	03193f01 	tsteq	r9, #1, 30
 570:	3b0b3a0e 	blcc	2cedb0 <startup-0x1fd31250>
 574:	1119270b 	tstne	r9, fp, lsl #14
 578:	40061201 	andmi	r1, r6, r1, lsl #4
 57c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 580:	00001301 	andeq	r1, r0, r1, lsl #6
 584:	03000505 	movweq	r0, #1285	; 0x505
 588:	3b0b3a08 	blcc	2cedb0 <startup-0x1fd31250>
 58c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 590:	06000018 			; <UNDEFINED> instruction: 0x06000018
 594:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 598:	0b3b0b3a 	bleq	ec3288 <startup-0x1f13cd78>
 59c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 5a0:	05070000 	streq	r0, [r7, #-0]
 5a4:	3a0e0300 	bcc	3811ac <startup-0x1fc7ee54>
 5a8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 5ac:	00180213 	andseq	r0, r8, r3, lsl r2
 5b0:	002e0800 	eoreq	r0, lr, r0, lsl #16
 5b4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 5b8:	0b3b0b3a 	bleq	ec32a8 <startup-0x1f13cd58>
 5bc:	01111927 	tsteq	r1, r7, lsr #18
 5c0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 5c4:	00194296 	mulseq	r9, r6, r2
 5c8:	012e0900 			; <UNDEFINED> instruction: 0x012e0900
 5cc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 5d0:	0b3b0b3a 	bleq	ec32c0 <startup-0x1f13cd40>
 5d4:	13491927 	movtne	r1, #39207	; 0x9927
 5d8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5dc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 5e0:	00130119 	andseq	r0, r3, r9, lsl r1
 5e4:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
 5e8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 5ec:	0b3b0b3a 	bleq	ec32dc <startup-0x1f13cd24>
 5f0:	01111927 	tsteq	r1, r7, lsr #18
 5f4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 5f8:	01194297 			; <UNDEFINED> instruction: 0x01194297
 5fc:	0b000013 	bleq	650 <startup-0x1ffff9b0>
 600:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 604:	0b3a0e03 	bleq	e83e18 <startup-0x1f17c1e8>
 608:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 60c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 610:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 614:	00000019 	andeq	r0, r0, r9, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000001f4 	strdeq	r0, [r0], -r4
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	04150002 	ldreq	r0, [r5], #-2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000204 	andcs	r0, r0, r4, lsl #4
  3c:	0000017e 	andeq	r0, r0, lr, ror r1
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	06620002 	strbteq	r0, [r2], -r2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000384 	andcs	r0, r0, r4, lsl #7
  5c:	00000510 	andeq	r0, r0, r0, lsl r5
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	09510002 	ldmdbeq	r1, {r1}^
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000894 	mulcs	r0, r4, r8
  7c:	00000210 	andeq	r0, r0, r0, lsl r2
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	0a640002 	beq	190009c <startup-0x1e6fff64>
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000aa4 	andcs	r0, r0, r4, lsr #21
  9c:	000000bc 	strheq	r0, [r0], -ip
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	0b0e0002 	bleq	3800bc <startup-0x1fc7ff44>
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20000b60 	andcs	r0, r0, r0, ror #22
  bc:	000002a6 	andeq	r0, r0, r6, lsr #5
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000204 	andcs	r0, r0, r4, lsl #4
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000111 	andeq	r0, r0, r1, lsl r1
   4:	00790002 	rsbseq	r0, r9, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	72646e41 	rsbvc	r6, r4, #1040	; 0x410
  28:	65442f65 	strbvs	r2, [r4, #-3941]	; 0xfffff09b
  2c:	6f746b73 	svcvs	0x00746b73
  30:	41442f70 	hvcmi	17136	; 0x42f0
  34:	30393354 	eorscc	r3, r9, r4, asr r3
  38:	62616c5f 	rsbvs	r6, r1, #24320	; 0x5f00
  3c:	34765f62 	ldrbtcc	r5, [r6], #-3938	; 0xfffff09e
  40:	6570732f 	ldrbvs	r7, [r0, #-815]!	; 0xfffffcd1
  44:	6d00006c 	stcvs	0, cr0, [r0, #-432]	; 0xfffffe50
  48:	2e6e6961 	vnmulcs.f16	s13, s28, s3	; <UNPREDICTABLE>
  4c:	00010063 	andeq	r0, r1, r3, rrx
  50:	6d616700 	stclvs	7, cr6, [r1, #-0]
  54:	74735f65 	ldrbtvc	r5, [r3], #-3941	; 0xfffff09b
  58:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  5c:	00682e70 	rsbeq	r2, r8, r0, ror lr
  60:	70000001 	andvc	r0, r0, r1
  64:	746e616c 	strbtvc	r6, [lr], #-364	; 0xfffffe94
  68:	6d62782e 	stclvs	8, cr7, [r2, #-184]!	; 0xffffff48
  6c:	00000100 	andeq	r0, r0, r0, lsl #2
  70:	6b636162 	blvs	18d8600 <startup-0x1e727a00>
  74:	756f7247 	strbvc	r7, [pc, #-583]!	; fffffe35 <backGround+0xdfffe6a9>
  78:	782e646e 	stmdavc	lr!, {r1, r2, r3, r5, r6, sl, sp, lr}
  7c:	01006d62 	tsteq	r0, r2, ror #26
  80:	00000000 	andeq	r0, r0, r0
  84:	00000205 	andeq	r0, r0, r5, lsl #4
  88:	0b032000 	bleq	c8090 <startup-0x1ff37f70>
  8c:	025e1301 	subseq	r1, lr, #67108864	; 0x4000000
  90:	01010003 	tsteq	r1, r3
  94:	10020500 	andne	r0, r2, r0, lsl #10
  98:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  9c:	4b75011c 	blmi	1d40514 <startup-0x1e2bfaec>
  a0:	764c3d4b 	strbvc	r3, [ip], -fp, asr #26
  a4:	3d676875 	stclcc	8, cr6, [r7, #-468]!	; 0xfffffe2c
  a8:	913dbb3d 	teqls	sp, sp, lsr fp
  ac:	02040200 	andeq	r0, r4, #0, 4
  b0:	040200e2 	streq	r0, [r2], #-226	; 0xffffff1e
  b4:	003c0601 	eorseq	r0, ip, r1, lsl #12
  b8:	06020402 	streq	r0, [r2], -r2, lsl #8
  bc:	0402003a 	streq	r0, [r2], #-58	; 0xffffffc6
  c0:	003c0601 	eorseq	r0, ip, r1, lsl #12
  c4:	06020402 	streq	r0, [r2], -r2, lsl #8
  c8:	04020049 	streq	r0, [r2], #-73	; 0xffffffb7
  cc:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
  d0:	4a28036e 	bmi	a00e90 <startup-0x1f5ff170>
  d4:	4b67753e 	blmi	19dd5d4 <startup-0x1e622a2c>
  d8:	4d73212f 	ldfmie	f2, [r3, #-188]!	; 0xffffff44
  dc:	73212f4b 			; <UNDEFINED> instruction: 0x73212f4b
  e0:	3d2f924d 	sfmcc	f1, 1, [pc, #-308]!	; ffffffb4 <backGround+0xdfffe828>
  e4:	2f597830 	svccs	0x00597830
  e8:	0069342f 	rsbeq	r3, r9, pc, lsr #8
  ec:	68010402 	stmdavs	r1, {r1, sl}
  f0:	01040200 	mrseq	r0, R12_usr
  f4:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
  f8:	02005901 	andeq	r5, r0, #16384	; 0x4000
  fc:	00670104 	rsbeq	r0, r7, r4, lsl #2
 100:	67010402 	strvs	r0, [r1, -r2, lsl #8]
 104:	01040200 	mrseq	r0, R12_usr
 108:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
 10c:	2e7a0301 	cdpcs	3, 7, cr0, cr10, cr1, {0}
 110:	01000a02 	tsteq	r0, r2, lsl #20
 114:	0000af01 	andeq	sl, r0, r1, lsl #30
 118:	62000200 	andvs	r0, r0, #0, 4
 11c:	02000000 	andeq	r0, r0, #0
 120:	0d0efb01 	vstreq	d15, [lr, #-4]
 124:	01010100 	mrseq	r0, (UNDEF: 17)
 128:	00000001 	andeq	r0, r0, r1
 12c:	01000001 	tsteq	r0, r1
 130:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff6f5 <backGround+0xdfffdf69>
 134:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 138:	646e412f 	strbtvs	r4, [lr], #-303	; 0xfffffed1
 13c:	442f6572 	strtmi	r6, [pc], #-1394	; 144 <startup-0x1ffffebc>
 140:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 144:	442f706f 	strtmi	r7, [pc], #-111	; 14c <startup-0x1ffffeb4>
 148:	39335441 	ldmdbcc	r3!, {r0, r6, sl, ip, lr}
 14c:	616c5f30 	cmnvs	ip, r0, lsr pc
 150:	765f6262 	ldrbvc	r6, [pc], -r2, ror #4
 154:	70732f34 	rsbsvc	r2, r3, r4, lsr pc
 158:	00006c65 	andeq	r6, r0, r5, ror #24
 15c:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 160:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
 164:	73746375 	cmnvc	r4, #-738197503	; 0xd4000001
 168:	0100632e 	tsteq	r0, lr, lsr #6
 16c:	61670000 	cmnvs	r7, r0
 170:	735f656d 	cmpvc	pc, #457179136	; 0x1b400000
 174:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 178:	682e7075 	stmdavs	lr!, {r0, r2, r4, r5, r6, ip, sp, lr}
 17c:	00000100 	andeq	r0, r0, r0, lsl #2
 180:	02050000 	andeq	r0, r5, #0
 184:	20000204 	andcs	r0, r0, r4, lsl #4
 188:	3d3d6714 	ldccc	7, cr6, [sp, #-80]!	; 0xffffffb0
 18c:	02004b4c 	andeq	r4, r0, #76, 22	; 0x13000
 190:	003d0304 	eorseq	r0, sp, r4, lsl #6
 194:	08030402 	stmdaeq	r3, {r1, sl}
 198:	0402008f 	streq	r0, [r2], #-143	; 0xffffff71
 19c:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 1a0:	004b4d69 	subeq	r4, fp, r9, ror #26
 1a4:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 1a8:	03040200 	movweq	r0, #16896	; 0x4200
 1ac:	02008f08 	andeq	r8, r0, #8, 30
 1b0:	3c060104 	stfccs	f0, [r6], {4}
 1b4:	4d4c6906 	vstrmi.16	s13, [ip, #-12]	; <UNPREDICTABLE>
 1b8:	a04ba04b 	subge	sl, fp, fp, asr #32
 1bc:	a04ba04b 	subge	sl, fp, fp, asr #32
 1c0:	02597575 	subseq	r7, r9, #490733568	; 0x1d400000
 1c4:	01010004 	tsteq	r1, r4
 1c8:	0000016f 	andeq	r0, r0, pc, ror #2
 1cc:	00630002 	rsbeq	r0, r3, r2
 1d0:	01020000 	mrseq	r0, (UNDEF: 2)
 1d4:	000d0efb 	strdeq	r0, [sp], -fp
 1d8:	01010101 	tsteq	r1, r1, lsl #2
 1dc:	01000000 	mrseq	r0, (UNDEF: 0)
 1e0:	43010000 	movwmi	r0, #4096	; 0x1000
 1e4:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 1e8:	2f737265 	svccs	0x00737265
 1ec:	72646e41 	rsbvc	r6, r4, #1040	; 0x410
 1f0:	65442f65 	strbvs	r2, [r4, #-3941]	; 0xfffff09b
 1f4:	6f746b73 	svcvs	0x00746b73
 1f8:	41442f70 	hvcmi	17136	; 0x42f0
 1fc:	30393354 	eorscc	r3, r9, r4, asr r3
 200:	62616c5f 	rsbvs	r6, r1, #24320	; 0x5f00
 204:	34765f62 	ldrbtcc	r5, [r6], #-3938	; 0xfffff09e
 208:	6570732f 	ldrbvs	r7, [r0, #-815]!	; 0xfffffcd1
 20c:	6700006c 	strvs	r0, [r0, -ip, rrx]
 210:	5f656d61 	svcpl	0x00656d61
 214:	70617267 	rsbvc	r7, r1, r7, ror #4
 218:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
 21c:	0100632e 	tsteq	r0, lr, lsr #6
 220:	61670000 	cmnvs	r7, r0
 224:	735f656d 	cmpvc	pc, #457179136	; 0x1b400000
 228:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 22c:	682e7075 	stmdavs	lr!, {r0, r2, r4, r5, r6, ip, sp, lr}
 230:	00000100 	andeq	r0, r0, r0, lsl #2
 234:	02050000 	andeq	r0, r5, #0
 238:	20000384 	andcs	r0, r0, r4, lsl #7
 23c:	76e56719 	usatvc	r6, #5, r9, lsl #14
 240:	76130867 	ldrvc	r0, [r3], -r7, ror #16
 244:	7a037a67 	bvc	debe8 <startup-0x1ff21418>
 248:	4b1b5020 	blmi	6d42d0 <startup-0x1f92bd30>
 24c:	4c4c7575 	cfstr64mi	mvdx7, [ip], {117}	; 0x75
 250:	3d3d3d2f 	ldccc	13, cr3, [sp, #-188]!	; 0xffffff44
 254:	393e213e 	ldmdbcc	lr!, {r1, r2, r3, r4, r5, r8, sp}
 258:	bc3d3d6c 	ldclt	13, cr3, [sp], #-432	; 0xfffffe50
 25c:	3d3d3d68 	ldccc	13, cr3, [sp, #-416]!	; 0xfffffe60
 260:	3d593d5a 	ldclcc	13, cr3, [r9, #-360]	; 0xfffffe98
 264:	303d4b3d 	eorscc	r4, sp, sp, lsr fp
 268:	3d303d4b 	ldccc	13, cr3, [r0, #-300]!	; 0xfffffed4
 26c:	5a4b91ca 	bpl	12e499c <startup-0x1ed1b664>
 270:	3d593d3e 	ldclcc	13, cr3, [r9, #-248]	; 0xffffff08
 274:	303d5930 	eorscc	r5, sp, r0, lsr r9
 278:	763d3d3d 			; <UNDEFINED> instruction: 0x763d3d3d
 27c:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 280:	3d914c83 	ldccc	12, cr4, [r1, #524]	; 0x20c
 284:	833d3d59 	teqhi	sp, #5696	; 0x1640
 288:	675a674c 	ldrbvs	r6, [sl, -ip, asr #14]
 28c:	3e3e2f4c 	cdpcc	15, 3, cr2, cr14, cr12, {2}
 290:	4b4b3d3e 	blmi	12cf790 <startup-0x1ed30870>
 294:	3d4b4b4b 	vstrcc	d20, [fp, #-300]	; 0xfffffed4
 298:	ad3d3d76 	ldcge	13, cr3, [sp, #-472]!	; 0xfffffe28
 29c:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 2a0:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 2a4:	00490304 	subeq	r0, r9, r4, lsl #6
 2a8:	06010402 	streq	r0, [r1], -r2, lsl #8
 2ac:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 2b0:	00390602 	eorseq	r0, r9, r2, lsl #12
 2b4:	06010402 	streq	r0, [r1], -r2, lsl #8
 2b8:	4e42063c 	mcrmi	6, 2, r0, cr2, cr12, {1}
 2bc:	02002f5a 	andeq	r2, r0, #360	; 0x168
 2c0:	3c060104 	stfccs	f0, [r6], {4}
 2c4:	02040200 	andeq	r0, r4, #0, 4
 2c8:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 2cc:	3f063c03 	svccc	0x00063c03
 2d0:	3f3d3d92 	svccc	0x003d3d92
 2d4:	e4750392 	ldrbt	r0, [r5], #-914	; 0xfffffc6e
 2d8:	68200c03 	stmdavs	r0!, {r0, r1, sl, fp}
 2dc:	00592f3e 	subseq	r2, r9, lr, lsr pc
 2e0:	06010402 	streq	r0, [r1], -r2, lsl #8
 2e4:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
 2e8:	02002e02 	andeq	r2, r0, #2, 28
 2ec:	00200404 	eoreq	r0, r0, r4, lsl #8
 2f0:	06040402 	streq	r0, [r4], -r2, lsl #8
 2f4:	67c9592f 	strbvs	r5, [r9, pc, lsr #18]
 2f8:	03040200 	movweq	r0, #16896	; 0x4200
 2fc:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
 300:	02009d03 	andeq	r9, r0, #3, 26	; 0xc0
 304:	90060104 	andls	r0, r6, r4, lsl #2
 308:	02040200 	andeq	r0, r4, #0, 4
 30c:	02005506 	andeq	r5, r0, #25165824	; 0x1800000
 310:	66060104 	strvs	r0, [r6], -r4, lsl #2
 314:	02040200 	andeq	r0, r4, #0, 4
 318:	02005606 	andeq	r5, r0, #6291456	; 0x600000
 31c:	66060104 	strvs	r0, [r6], -r4, lsl #2
 320:	3e766006 	cdpcc	0, 7, cr6, cr6, cr6, {0}
 324:	03040200 	movweq	r0, #16896	; 0x4200
 328:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 32c:	02005703 	andeq	r5, r0, #786432	; 0xc0000
 330:	3c060104 	stfccs	f0, [r6], {4}
 334:	08024c06 	stmdaeq	r2, {r1, r2, sl, fp, lr}
 338:	c3010100 	movwgt	r0, #4352	; 0x1100
 33c:	02000000 	andeq	r0, r0, #0
 340:	00005100 	andeq	r5, r0, r0, lsl #2
 344:	fb010200 	blx	40b4e <startup-0x1ffbf4b2>
 348:	01000d0e 	tsteq	r0, lr, lsl #26
 34c:	00010101 	andeq	r0, r1, r1, lsl #2
 350:	00010000 	andeq	r0, r1, r0
 354:	3a430100 	bcc	10c075c <startup-0x1ef3f8a4>
 358:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 35c:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
 360:	6572646e 	ldrbvs	r6, [r2, #-1134]!	; 0xfffffb92
 364:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 368:	706f746b 	rsbvc	r7, pc, fp, ror #8
 36c:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 370:	5f303933 	svcpl	0x00303933
 374:	6262616c 	rsbvs	r6, r2, #108, 2
 378:	2f34765f 	svccs	0x0034765f
 37c:	6c657073 	stclvs	0, cr7, [r5], #-460	; 0xfffffe34
 380:	61670000 	cmnvs	r7, r0
 384:	6b5f656d 	blvs	17d9940 <startup-0x1e8266c0>
 388:	6f627965 	svcvs	0x00627965
 38c:	2e647261 	cdpcs	2, 6, cr7, cr4, cr1, {3}
 390:	00010063 	andeq	r0, r1, r3, rrx
 394:	05000000 	streq	r0, [r0, #-0]
 398:	00089402 	andeq	r9, r8, r2, lsl #8
 39c:	59351920 	ldmdbpl	r5!, {r5, r8, fp, ip}
 3a0:	ae755a68 	vsubge.f32	s11, s10, s17
 3a4:	4b4b9167 	blmi	12e4948 <startup-0x1ed1b6b8>
 3a8:	4b4b4b4b 	blmi	12d30dc <startup-0x1ed2cf24>
 3ac:	4b4b4b4b 	blmi	12d30e0 <startup-0x1ed2cf20>
 3b0:	4b4b4b4b 	blmi	12d30e4 <startup-0x1ed2cf1c>
 3b4:	924c4c4b 	subls	r4, ip, #19200	; 0x4b00
 3b8:	4b4b914b 	blmi	12e48ec <startup-0x1ed1b714>
 3bc:	924c4b4b 	subls	r4, ip, #76800	; 0x12c00
 3c0:	02004b3d 	andeq	r4, r0, #62464	; 0xf400
 3c4:	58060104 	stmdapl	r6, {r2, r8}
 3c8:	02002f06 	andeq	r2, r0, #6, 30
 3cc:	58060104 	stmdapl	r6, {r2, r8}
 3d0:	02002f06 	andeq	r2, r0, #6, 30
 3d4:	58060104 	stmdapl	r6, {r2, r8}
 3d8:	02002f06 	andeq	r2, r0, #6, 30
 3dc:	58060104 	stmdapl	r6, {r2, r8}
 3e0:	68212f06 	stmdavs	r1!, {r1, r2, r8, r9, sl, fp, sp}
 3e4:	4b3d673e 	blmi	f5a0e4 <startup-0x1f0a5f1c>
 3e8:	02003d76 	andeq	r3, r0, #7552	; 0x1d80
 3ec:	008b0204 	addeq	r0, fp, r4, lsl #4
 3f0:	06010402 	streq	r0, [r1], -r2, lsl #8
 3f4:	3d44063c 	stclcc	6, cr0, [r4, #-240]	; 0xffffff10
 3f8:	01040200 	mrseq	r0, R12_usr
 3fc:	00070221 	andeq	r0, r7, r1, lsr #4
 400:	00830101 	addeq	r0, r3, r1, lsl #2
 404:	00020000 	andeq	r0, r2, r0
 408:	0000004f 	andeq	r0, r0, pc, asr #32
 40c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 410:	0101000d 	tsteq	r1, sp
 414:	00000101 	andeq	r0, r0, r1, lsl #2
 418:	00000100 	andeq	r0, r0, r0, lsl #2
 41c:	2f3a4301 	svccs	0x003a4301
 420:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 424:	6e412f73 	mcrvs	15, 2, r2, cr1, cr3, {3}
 428:	2f657264 	svccs	0x00657264
 42c:	6b736544 	blvs	1cd9944 <startup-0x1e3266bc>
 430:	2f706f74 	svccs	0x00706f74
 434:	33544144 	cmpcc	r4, #68, 2
 438:	6c5f3039 	mrrcvs	0, 3, r3, pc, cr9	; <UNPREDICTABLE>
 43c:	5f626261 	svcpl	0x00626261
 440:	732f3476 			; <UNDEFINED> instruction: 0x732f3476
 444:	006c6570 	rsbeq	r6, ip, r0, ror r5
 448:	6d616700 	stclvs	7, cr6, [r1, #-0]
 44c:	65645f65 	strbvs	r5, [r4, #-3941]!	; 0xfffff09b
 450:	7379616c 	cmnvc	r9, #108, 2
 454:	0100632e 	tsteq	r0, lr, lsr #6
 458:	00000000 	andeq	r0, r0, r0
 45c:	0aa40205 	beq	fe900c78 <backGround+0xde8ff4ec>
 460:	2f192000 	svccs	0x00192000
 464:	3e3d3d3d 	mrccc	13, 1, r3, cr13, cr13, {1}
 468:	01040200 	mrseq	r0, R12_usr
 46c:	67062006 	strvs	r2, [r6, -r6]
 470:	214ba03d 	cmpcs	fp, sp, lsr r0
 474:	2a2f2f2f 	bcs	bcc138 <startup-0x1f433ec8>
 478:	754d4c5e 	strbvc	r4, [sp, #-3166]	; 0xfffff3a2
 47c:	5a57213f 	bpl	15c8980 <startup-0x1ea37680>
 480:	2f2f2f4c 	svccs	0x002f2f4c
 484:	01000302 	tsteq	r0, r2, lsl #6
 488:	0000b901 	andeq	fp, r0, r1, lsl #18
 48c:	4e000200 	cdpmi	2, 0, cr0, cr0, cr0, {0}
 490:	02000000 	andeq	r0, r0, #0
 494:	0d0efb01 	vstreq	d15, [lr, #-4]
 498:	01010100 	mrseq	r0, (UNDEF: 17)
 49c:	00000001 	andeq	r0, r0, r1
 4a0:	01000001 	tsteq	r0, r1
 4a4:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffa69 <backGround+0xdfffe2dd>
 4a8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 4ac:	646e412f 	strbtvs	r4, [lr], #-303	; 0xfffffed1
 4b0:	442f6572 	strtmi	r6, [pc], #-1394	; 4b8 <startup-0x1ffffb48>
 4b4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 4b8:	442f706f 	strtmi	r7, [pc], #-111	; 4c0 <startup-0x1ffffb40>
 4bc:	39335441 	ldmdbcc	r3!, {r0, r6, sl, ip, lr}
 4c0:	616c5f30 	cmnvs	ip, r0, lsr pc
 4c4:	765f6262 	ldrbvc	r6, [pc], -r2, ror #4
 4c8:	70732f34 	rsbsvc	r2, r3, r4, lsr pc
 4cc:	00006c65 	andeq	r6, r0, r5, ror #24
 4d0:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 4d4:	6373615f 	cmnvs	r3, #-1073741801	; 0xc0000017
 4d8:	632e6969 			; <UNDEFINED> instruction: 0x632e6969
 4dc:	00000100 	andeq	r0, r0, r0, lsl #2
 4e0:	02050000 	andeq	r0, r5, #0
 4e4:	20000b60 	andcs	r0, r0, r0, ror #22
 4e8:	4b3d671a 	blmi	f5a158 <startup-0x1f0a5ea8>
 4ec:	3d683d2f 	stclcc	13, cr3, [r8, #-188]!	; 0xffffff44
 4f0:	4b2f2f3d 	blmi	bcc1ec <startup-0x1f433e14>
 4f4:	67772f3d 			; <UNDEFINED> instruction: 0x67772f3d
 4f8:	086769bb 	stmdaeq	r7!, {r0, r1, r3, r4, r5, r7, r8, fp, sp, lr}^
 4fc:	3d677613 	stclcc	6, cr7, [r7, #-76]!	; 0xffffffb4
 500:	674c593d 	smlaldxvs	r5, ip, sp, r9
 504:	4c593d3d 	mrrcmi	13, 3, r3, r9, cr13
 508:	3d3d683d 	ldccc	8, cr6, [sp, #-244]!	; 0xffffff0c
 50c:	842f6759 	strthi	r6, [pc], #-1881	; 514 <startup-0x1ffffaec>
 510:	3d3d683d 	ldccc	8, cr6, [sp, #-244]!	; 0xffffff0c
 514:	852f6759 	strhi	r6, [pc, #-1881]!	; fffffdc3 <backGround+0xdfffe637>
 518:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 51c:	06200601 	strteq	r0, [r0], -r1, lsl #12
 520:	4c593d67 	mrrcmi	13, 6, r3, r9, cr7
 524:	3d3e3d2f 	ldccc	13, cr3, [lr, #-188]!	; 0xffffff44
 528:	3d3e3d3e 	ldccc	13, cr3, [lr, #-248]!	; 0xffffff08
 52c:	00693e3d 	rsbeq	r3, r9, sp, lsr lr
 530:	06010402 	streq	r0, [r1], -r2, lsl #8
 534:	3d830620 	stccc	6, cr0, [r3, #128]	; 0x80
 538:	594c3d59 	stmdbpl	ip, {r0, r3, r4, r6, r8, sl, fp, ip, sp}^
 53c:	683d5a4b 	ldmdavs	sp!, {r0, r1, r3, r6, r9, fp, ip, lr}
 540:	0004029f 	muleq	r4, pc, r2	; <UNPREDICTABLE>
 544:	Address 0x00000544 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	4f454750 	svcmi	0x00454750
   4:	5254454d 	subspl	r4, r4, #322961408	; 0x13400000
   8:	3a430059 	bcc	10c0174 <startup-0x1ef3fe8c>
   c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
  10:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
  14:	6572646e 	ldrbvs	r6, [r2, #-1134]!	; 0xfffffb92
  18:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
  1c:	706f746b 	rsbvc	r7, pc, fp, ror #8
  20:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
  24:	5f303933 	svcpl	0x00303933
  28:	6262616c 	rsbvs	r6, r2, #108, 2
  2c:	2f34765f 	svccs	0x0034765f
  30:	6c657073 	stclvs	0, cr7, [r5], #-460	; 0xfffffe34
  34:	69616d2f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r8, sl, fp, sp, lr}^
  38:	00632e6e 	rsbeq	r2, r3, lr, ror #28
  3c:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
  40:	67726100 	ldrbvs	r6, [r2, -r0, lsl #2]!
  44:	69640076 	stmdbvs	r4!, {r1, r2, r4, r5, r6}^
  48:	64007872 	strvs	r7, [r0], #-2162	; 0xfffff78e
  4c:	00797269 	rsbseq	r7, r9, r9, ror #4
  50:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
  54:	6f65675f 	svcvs	0x0065675f
  58:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
  5c:	79620079 	stmdbvc	r2!, {r0, r3, r4, r5, r6}^
  60:	47006574 	smlsdxmi	r0, r4, r5, r6
  64:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
  68:	37203939 			; <UNDEFINED> instruction: 0x37203939
  6c:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
  70:	31303220 	teqcc	r0, r0, lsr #4
  74:	30393037 	eorscc	r3, r9, r7, lsr r0
  78:	72282034 	eorvc	r2, r8, #52	; 0x34
  7c:	61656c65 	cmnvs	r5, r5, ror #24
  80:	20296573 	eorcs	r6, r9, r3, ror r5
  84:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
  88:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
  8c:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  90:	2d372d64 	ldccs	13, cr2, [r7, #-400]!	; 0xfffffe70
  94:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  98:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  9c:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  a0:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  a4:	32353532 	eorscc	r3, r5, #209715200	; 0xc800000
  a8:	205d3430 	subscs	r3, sp, r0, lsr r4
  ac:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  b0:	20626d75 	rsbcs	r6, r2, r5, ror sp
  b4:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  b8:	613d6863 	teqvs	sp, r3, ror #16
  bc:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
  c0:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
  c4:	6f6c666d 	svcvs	0x006c666d
  c8:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
  cc:	733d6962 	teqvc	sp, #1605632	; 0x188000
  d0:	2074666f 	rsbscs	r6, r4, pc, ror #12
  d4:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  d8:	20626d75 	rsbcs	r6, r2, r5, ror sp
  dc:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  e0:	613d6863 	teqvs	sp, r3, ror #16
  e4:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
  e8:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
  ec:	4f2d2067 	svcmi	0x002d2067
  f0:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
  f4:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
  f8:	74003939 	strvc	r3, [r0], #-2361	; 0xfffff6c7
  fc:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
 100:	6c700074 	ldclvs	0, cr0, [r0], #-464	; 0xfffffe30
 104:	5f746e61 	svcpl	0x00746e61
 108:	73746962 	cmnvc	r4, #1605632	; 0x188000
 10c:	494f5000 	stmdbmi	pc, {ip, lr}^	; <UNPREDICTABLE>
 110:	7500544e 	strvc	r5, [r0, #-1102]	; 0xfffffbb2
 114:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 118:	2064656e 	rsbcs	r6, r4, lr, ror #10
 11c:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 120:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 124:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 128:	70006465 	andvc	r6, r0, r5, ror #8
 12c:	0078736f 	rsbseq	r7, r8, pc, ror #6
 130:	79736f70 	ldmdbvc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 134:	63616200 	cmnvs	r1, #0, 4
 138:	6f72476b 	svcvs	0x0072476b
 13c:	5f646e75 	svcpl	0x00646e75
 140:	73746962 	cmnvc	r4, #1605632	; 0x188000
 144:	6f687300 	svcvs	0x00687300
 148:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
 14c:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 150:	2064656e 	rsbcs	r6, r4, lr, ror #10
 154:	00746e69 	rsbseq	r6, r4, r9, ror #28
 158:	67696568 	strbvs	r6, [r9, -r8, ror #10]!
 15c:	70007468 	andvc	r7, r0, r8, ror #8
 160:	746e616c 	strbtvc	r6, [lr], #-364	; 0xfffffe94
 164:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 168:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 16c:	6d006c65 	stcvs	12, cr6, [r0, #-404]	; 0xfffffe6c
 170:	006e6961 	rsbeq	r6, lr, r1, ror #18
 174:	6f654774 	svcvs	0x00654774
 178:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 17c:	3a430079 	bcc	10c0368 <startup-0x1ef3fc98>
 180:	6573555c 	ldrbvs	r5, [r3, #-1372]!	; 0xfffffaa4
 184:	415c7372 	cmpmi	ip, r2, ror r3
 188:	6572646e 	ldrbvs	r6, [r2, #-1134]!	; 0xfffffb92
 18c:	7365445c 	cmnvc	r5, #92, 8	; 0x5c000000
 190:	706f746b 	rsbvc	r7, pc, fp, ror #8
 194:	5441445c 	strbpl	r4, [r1], #-1116	; 0xfffffba4
 198:	5f303933 	svcpl	0x00303933
 19c:	6262616c 	rsbvs	r6, r2, #108, 2
 1a0:	5c34765f 	ldcpl	6, cr7, [r4], #-380	; 0xfffffe84
 1a4:	6c657073 	stclvs	0, cr7, [r5], #-460	; 0xfffffe34
 1a8:	63736100 	cmnvs	r3, #0, 2
 1ac:	6d5f6969 	vldrvs.16	s13, [pc, #-210]	; e2 <startup-0x1fffff1e>	; <UNPREDICTABLE>
 1b0:	61737365 	cmnvs	r3, r5, ror #6
 1b4:	73006567 	movwvc	r6, #1383	; 0x567
 1b8:	78657a69 	stmdavc	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 1bc:	7a697300 	bvc	1a5cdc4 <startup-0x1e5a323c>
 1c0:	61007965 	tstvs	r0, r5, ror #18
 1c4:	00636772 	rsbeq	r6, r3, r2, ror r7
 1c8:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 1cc:	00707574 	rsbseq	r7, r0, r4, ror r5
 1d0:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 1d4:	61726400 	cmnvs	r2, r0, lsl #8
 1d8:	69770077 	ldmdbvs	r7!, {r0, r1, r2, r4, r5, r6}^
 1dc:	00687464 	rsbeq	r7, r8, r4, ror #8
 1e0:	74646977 	strbtvc	r6, [r4], #-2423	; 0xfffff689
 1e4:	6e695f68 	cdpvs	15, 6, cr5, cr9, cr8, {3}
 1e8:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0xfffffda1
 1ec:	6c007365 	stcvs	3, cr7, [r0], {101}	; 0x65
 1f0:	5f64616f 	svcpl	0x0064616f
 1f4:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
 1f8:	62006574 	andvs	r6, r0, #116, 10	; 0x1d000000
 1fc:	476b6361 	strbmi	r6, [fp, -r1, ror #6]!
 200:	6e756f72 	mrcvs	15, 3, r6, cr5, cr2, {3}
 204:	4f740064 	svcmi	0x00740064
 208:	6e006a62 	vmlsvs.f32	s12, s0, s5
 20c:	6f706d75 	svcvs	0x00706d75
 210:	73746e69 	cmnvc	r4, #1680	; 0x690
 214:	61726400 	cmnvs	r2, r0, lsl #8
 218:	70735f77 	rsbsvc	r5, r3, r7, ror pc
 21c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 220:	73657400 	cmnvc	r5, #0, 8
 224:	74003174 	strvc	r3, [r0], #-372	; 0xfffffe8c
 228:	32747365 	rsbscc	r7, r4, #-1811939327	; 0x94000001
 22c:	424f5000 	submi	r5, pc, #0
 230:	5443454a 	strbpl	r4, [r3], #-1354	; 0xfffffab6
 234:	2f3a4300 	svccs	0x003a4300
 238:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 23c:	6e412f73 	mcrvs	15, 2, r2, cr1, cr3, {3}
 240:	2f657264 	svccs	0x00657264
 244:	6b736544 	blvs	1cd975c <startup-0x1e3268a4>
 248:	2f706f74 	svccs	0x00706f74
 24c:	33544144 	cmpcc	r4, #68, 2
 250:	6c5f3039 	mrrcvs	0, 3, r3, pc, cr9	; <UNPREDICTABLE>
 254:	5f626261 	svcpl	0x00626261
 258:	732f3476 			; <UNDEFINED> instruction: 0x732f3476
 25c:	2f6c6570 	svccs	0x006c6570
 260:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 264:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
 268:	73746375 	cmnvc	r4, #-738197503	; 0xd4000001
 26c:	7300632e 	movwvc	r6, #814	; 0x32e
 270:	6f5f7465 	svcvs	0x005f7465
 274:	63656a62 	cmnvs	r5, #401408	; 0x62000
 278:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 27c:	00646565 	rsbeq	r6, r4, r5, ror #10
 280:	61656c63 	cmnvs	r5, r3, ror #24
 284:	626f5f72 	rsbvs	r5, pc, #456	; 0x1c8
 288:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 28c:	61726400 	cmnvs	r2, r0, lsl #8
 290:	626f5f77 	rsbvs	r5, pc, #476	; 0x1dc
 294:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 298:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 29c:	626f5f65 	rsbvs	r5, pc, #404	; 0x194
 2a0:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 2a4:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 2a8:	00786465 	rsbseq	r6, r8, r5, ror #8
 2ac:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 2b0:	70007964 	andvc	r7, r0, r4, ror #18
 2b4:	00656761 	rsbeq	r6, r5, r1, ror #14
 2b8:	65726461 	ldrbvs	r6, [r2, #-1121]!	; 0xfffffb9f
 2bc:	63007373 	movwvs	r7, #883	; 0x373
 2c0:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 2c4:	6361625f 	cmnvs	r1, #-268435451	; 0xf0000005
 2c8:	6675426b 	ldrbtvs	r4, [r5], -fp, ror #4
 2cc:	00726566 	rsbseq	r6, r2, r6, ror #10
 2d0:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff895 <backGround+0xdfffe109>
 2d4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 2d8:	646e412f 	strbtvs	r4, [lr], #-303	; 0xfffffed1
 2dc:	442f6572 	strtmi	r6, [pc], #-1394	; 2e4 <startup-0x1ffffd1c>
 2e0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 2e4:	442f706f 	strtmi	r7, [pc], #-111	; 2ec <startup-0x1ffffd14>
 2e8:	39335441 	ldmdbcc	r3!, {r0, r6, sl, ip, lr}
 2ec:	616c5f30 	cmnvs	ip, r0, lsr pc
 2f0:	765f6262 	ldrbvc	r6, [pc], -r2, ror #4
 2f4:	70732f34 	rsbsvc	r2, r3, r4, lsr pc
 2f8:	672f6c65 	strvs	r6, [pc, -r5, ror #24]!
 2fc:	5f656d61 	svcpl	0x00656d61
 300:	70617267 	rsbvc	r7, r1, r7, ror #4
 304:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
 308:	7600632e 	strvc	r6, [r0], -lr, lsr #6
 30c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 310:	61726700 	cmnvs	r2, r0, lsl #14
 314:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 318:	6165725f 	cmnvs	r5, pc, asr r2
 31c:	61645f64 	cmnvs	r4, r4, ror #30
 320:	67006174 	smlsdxvs	r0, r4, r1, r6
 324:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 328:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 32c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 330:	6c657300 	stclvs	3, cr7, [r5], #-0
 334:	5f746365 	svcpl	0x00746365
 338:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 33c:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 340:	67007265 	strvs	r7, [r0, -r5, ror #4]
 344:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 348:	695f6369 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 34c:	0074696e 	rsbseq	r6, r4, lr, ror #18
 350:	70617267 	rsbvc	r7, r1, r7, ror #4
 354:	5f636968 	svcpl	0x00636968
 358:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 35c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 360:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 364:	67007261 	strvs	r7, [r0, -r1, ror #4]
 368:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 36c:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 370:	5f6c7274 	svcpl	0x006c7274
 374:	5f746962 	svcpl	0x00746962
 378:	00746573 	rsbseq	r6, r4, r3, ror r5
 37c:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 380:	00745f38 	rsbseq	r5, r4, r8, lsr pc
 384:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
 388:	616d006c 	cmnvs	sp, ip, rrx
 38c:	69006b73 	stmdbvs	r0, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
 390:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
 394:	61726700 	cmnvs	r2, r0, lsl #14
 398:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 39c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 3a0:	645f6574 	ldrbvs	r6, [pc], #-1396	; 3a8 <startup-0x1ffffc58>
 3a4:	00617461 	rsbeq	r7, r1, r1, ror #8
 3a8:	70617267 	rsbvc	r7, r1, r7, ror #4
 3ac:	5f636968 	svcpl	0x00636968
 3b0:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 3b4:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
 3b8:	006e6565 	rsbeq	r6, lr, r5, ror #10
 3bc:	70617267 	rsbvc	r7, r1, r7, ror #4
 3c0:	5f636968 	svcpl	0x00636968
 3c4:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 3c8:	6165725f 	cmnvs	r5, pc, asr r2
 3cc:	67007964 	strvs	r7, [r0, -r4, ror #18]
 3d0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 3d4:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 3d8:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 3dc:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
 3e0:	006e6565 	rsbeq	r6, lr, r5, ror #10
 3e4:	70617267 	rsbvc	r7, r1, r7, ror #4
 3e8:	5f636968 	svcpl	0x00636968
 3ec:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 3f0:	61726700 	cmnvs	r2, r0, lsl #14
 3f4:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 3f8:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 3fc:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 400:	616d6d6f 	cmnvs	sp, pc, ror #26
 404:	4300646e 	movwmi	r6, #1134	; 0x46e
 408:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 40c:	2f737265 	svccs	0x00737265
 410:	72646e41 	rsbvc	r6, r4, #1040	; 0x410
 414:	65442f65 	strbvs	r2, [r4, #-3941]	; 0xfffff09b
 418:	6f746b73 	svcvs	0x00746b73
 41c:	41442f70 	hvcmi	17136	; 0x42f0
 420:	30393354 	eorscc	r3, r9, r4, asr r3
 424:	62616c5f 	rsbvs	r6, r1, #24320	; 0x5f00
 428:	34765f62 	ldrbtcc	r5, [r6], #-3938	; 0xfffff09e
 42c:	6570732f 	ldrbvs	r7, [r0, #-815]!	; 0xfffffcd1
 430:	61672f6c 	cmnvs	r7, ip, ror #30
 434:	6b5f656d 	blvs	17d99f0 <startup-0x1e826610>
 438:	6f627965 	svcvs	0x00627965
 43c:	2e647261 	cdpcs	2, 6, cr7, cr4, cr1, {3}
 440:	6f630063 	svcvs	0x00630063
 444:	6e6d756c 	cdpvs	5, 6, cr7, cr13, cr12, {3}
 448:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 44c:	6e695f62 	cdpvs	15, 6, cr5, cr9, cr2, {3}
 450:	6b007469 	blvs	1d5fc <startup-0x1ffe2a04>
 454:	00627965 	rsbeq	r7, r2, r5, ror #18
 458:	3774756f 	ldrbcc	r7, [r4, -pc, ror #10]!
 45c:	00676573 	rsbeq	r6, r7, r3, ror r5
 460:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
 464:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
 468:	6b006c6f 	blvs	1b62c <startup-0x1ffe49d4>
 46c:	41627965 	cmnmi	r2, r5, ror #18
 470:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 474:	00657461 	rsbeq	r7, r5, r1, ror #8
 478:	616c6564 	cmnvs	ip, r4, ror #10
 47c:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 480:	006f7263 	rsbeq	r7, pc, r3, ror #4
 484:	616c6564 	cmnvs	ip, r4, ror #10
 488:	30355f79 	eorscc	r5, r5, r9, ror pc
 48c:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 490:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffa55 <backGround+0xdfffe2c9>
 494:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 498:	646e412f 	strbtvs	r4, [lr], #-303	; 0xfffffed1
 49c:	442f6572 	strtmi	r6, [pc], #-1394	; 4a4 <startup-0x1ffffb5c>
 4a0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 4a4:	442f706f 	strtmi	r7, [pc], #-111	; 4ac <startup-0x1ffffb54>
 4a8:	39335441 	ldmdbcc	r3!, {r0, r6, sl, ip, lr}
 4ac:	616c5f30 	cmnvs	ip, r0, lsr pc
 4b0:	765f6262 	ldrbvc	r6, [pc], -r2, ror #4
 4b4:	70732f34 	rsbsvc	r2, r3, r4, lsr pc
 4b8:	672f6c65 	strvs	r6, [pc, -r5, ror #24]!
 4bc:	5f656d61 	svcpl	0x00656d61
 4c0:	616c6564 	cmnvs	ip, r4, ror #10
 4c4:	632e7379 			; <UNDEFINED> instruction: 0x632e7379
 4c8:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 4cc:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 412 <startup-0x1ffffbee>	; <UNPREDICTABLE>
 4d0:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
 4d4:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 4d8:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 4dc:	736e3035 	cmnvc	lr, #53	; 0x35
 4e0:	61686300 	cmnvs	r8, r0, lsl #6
 4e4:	74636172 	strbtvc	r6, [r3], #-370	; 0xfffffe8e
 4e8:	61007265 	tstvs	r0, r5, ror #4
 4ec:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 4f0:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 4f4:	73610074 	cmnvc	r1, #116	; 0x74
 4f8:	5f696963 	svcpl	0x00696963
 4fc:	6f746f67 	svcvs	0x00746f67
 500:	61007978 	tstvs	r0, r8, ror r9
 504:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 508:	6165725f 	cmnvs	r5, pc, asr r2
 50c:	74735f64 	ldrbtvc	r5, [r3], #-3940	; 0xfffff09c
 510:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
 514:	2f3a4300 	svccs	0x003a4300
 518:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 51c:	6e412f73 	mcrvs	15, 2, r2, cr1, cr3, {3}
 520:	2f657264 	svccs	0x00657264
 524:	6b736544 	blvs	1cd9a3c <startup-0x1e3265c4>
 528:	2f706f74 	svccs	0x00706f74
 52c:	33544144 	cmpcc	r4, #68, 2
 530:	6c5f3039 	mrrcvs	0, 3, r3, pc, cr9	; <UNPREDICTABLE>
 534:	5f626261 	svcpl	0x00626261
 538:	732f3476 			; <UNDEFINED> instruction: 0x732f3476
 53c:	2f6c6570 	svccs	0x006c6570
 540:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 544:	6373615f 	cmnvs	r3, #-1073741801	; 0xc0000017
 548:	632e6969 			; <UNDEFINED> instruction: 0x632e6969
 54c:	63736100 	cmnvs	r3, #0, 2
 550:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 554:	5f646165 	svcpl	0x00646165
 558:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 55c:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 560:	61007265 	tstvs	r0, r5, ror #4
 564:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 568:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 56c:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 570:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
 574:	73610074 	cmnvc	r1, #116	; 0x74
 578:	5f696963 	svcpl	0x00696963
 57c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 580:	61645f65 	cmnvs	r4, r5, ror #30
 584:	61006174 	tstvs	r0, r4, ror r1
 588:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 58c:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 590:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 594:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 598:	00726165 	rsbseq	r6, r2, r5, ror #2
 59c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 5a0:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 5a4:	645f6461 	ldrbvs	r6, [pc], #-1121	; 5ac <startup-0x1ffffa54>
 5a8:	00617461 	rsbeq	r7, r1, r1, ror #8
 5ac:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 5b0:	6f635f69 	svcvs	0x00635f69
 5b4:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
 5b8:	73610064 	cmnvc	r1, #100	; 0x64
 5bc:	5f696963 	svcpl	0x00696963
 5c0:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 5c4:	6f635f65 	svcvs	0x00635f65
 5c8:	6f72746e 	svcvs	0x0072746e
 5cc:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 5d0:	63736100 	cmnvs	r3, #0, 2
 5d4:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 5d8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 5dc:	6168635f 	cmnvs	r8, pc, asr r3
 5e0:	73610072 	cmnvc	r1, #114	; 0x72
 5e4:	5f696963 	svcpl	0x00696963
 5e8:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 5ec:	6f635f65 	svcvs	0x00635f65
 5f0:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
 5f4:	Address 0x000005f4 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <backGround+0xdfffdb82>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	0000002c 	andeq	r0, r0, ip, lsr #32
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	180e4101 	stmdane	lr, {r0, r8, lr}
  3c:	00070d41 	andeq	r0, r7, r1, asr #26
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	00000000 	andeq	r0, r0, r0
  48:	2000003c 	andcs	r0, r0, ip, lsr r0
  4c:	000000c2 	andeq	r0, r0, r2, asr #1
  50:	40080e41 	andmi	r0, r8, r1, asr #28
  54:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  58:	300e4101 	andcc	r4, lr, r1, lsl #2
  5c:	00070d41 	andeq	r0, r7, r1, asr #26
  60:	00000024 	andeq	r0, r0, r4, lsr #32
  64:	00000000 	andeq	r0, r0, r0
  68:	200000fe 	strdcs	r0, [r0], -lr
  6c:	0000007a 	andeq	r0, r0, sl, ror r0
  70:	40100e41 	andsmi	r0, r0, r1, asr #28
  74:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
  78:	02874003 	addeq	r4, r7, #3
  7c:	41018e40 	tstmi	r1, r0, asr #28
  80:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
  84:	00000007 	andeq	r0, r0, r7
  88:	00000018 	andeq	r0, r0, r8, lsl r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	20000178 	andcs	r0, r0, r8, ror r1
  94:	0000001c 	andeq	r0, r0, ip, lsl r0
  98:	40080e41 	andmi	r0, r8, r1, asr #28
  9c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  a4:	0000001c 	andeq	r0, r0, ip, lsl r0
  a8:	00000000 	andeq	r0, r0, r0
  ac:	20000194 	mulcs	r0, r4, r1
  b0:	00000070 	andeq	r0, r0, r0, ror r0
  b4:	40080e41 	andmi	r0, r8, r1, asr #28
  b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  bc:	180e4101 	stmdane	lr, {r0, r8, lr}
  c0:	00070d41 	andeq	r0, r7, r1, asr #26
  c4:	0000000c 	andeq	r0, r0, ip
  c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  cc:	7c020001 	stcvc	0, cr0, [r2], {1}
  d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  d4:	0000001c 	andeq	r0, r0, ip, lsl r0
  d8:	000000c4 	andeq	r0, r0, r4, asr #1
  dc:	20000204 	andcs	r0, r0, r4, lsl #4
  e0:	00000020 	andeq	r0, r0, r0, lsr #32
  e4:	40080e41 	andmi	r0, r8, r1, asr #28
  e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  ec:	180e4101 	stmdane	lr, {r0, r8, lr}
  f0:	00070d41 	andeq	r0, r7, r1, asr #26
  f4:	0000001c 	andeq	r0, r0, ip, lsl r0
  f8:	000000c4 	andeq	r0, r0, r4, asr #1
  fc:	20000224 	andcs	r0, r0, r4, lsr #4
 100:	0000005c 	andeq	r0, r0, ip, asr r0
 104:	40080e41 	andmi	r0, r8, r1, asr #28
 108:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 10c:	180e4101 	stmdane	lr, {r0, r8, lr}
 110:	00070d41 	andeq	r0, r7, r1, asr #26
 114:	0000001c 	andeq	r0, r0, ip, lsl r0
 118:	000000c4 	andeq	r0, r0, r4, asr #1
 11c:	20000280 	andcs	r0, r0, r0, lsl #5
 120:	0000005c 	andeq	r0, r0, ip, asr r0
 124:	40080e41 	andmi	r0, r8, r1, asr #28
 128:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 12c:	180e4101 	stmdane	lr, {r0, r8, lr}
 130:	00070d41 	andeq	r0, r7, r1, asr #26
 134:	00000020 	andeq	r0, r0, r0, lsr #32
 138:	000000c4 	andeq	r0, r0, r4, asr #1
 13c:	200002dc 	ldrdcs	r0, [r0], -ip
 140:	000000a6 	andeq	r0, r0, r6, lsr #1
 144:	400c0e41 	andmi	r0, ip, r1, asr #28
 148:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 14c:	018e4002 	orreq	r4, lr, r2
 150:	41180e41 	tstmi	r8, r1, asr #28
 154:	0000070d 	andeq	r0, r0, sp, lsl #14
 158:	0000000c 	andeq	r0, r0, ip
 15c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 160:	7c020001 	stcvc	0, cr0, [r2], {1}
 164:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 168:	0000001c 	andeq	r0, r0, ip, lsl r0
 16c:	00000158 	andeq	r0, r0, r8, asr r1
 170:	20000384 	andcs	r0, r0, r4, lsl #7
 174:	00000038 	andeq	r0, r0, r8, lsr r0
 178:	40080e41 	andmi	r0, r8, r1, asr #28
 17c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 180:	100e4101 	andne	r4, lr, r1, lsl #2
 184:	00070d41 	andeq	r0, r7, r1, asr #26
 188:	0000001c 	andeq	r0, r0, ip, lsl r0
 18c:	00000158 	andeq	r0, r0, r8, asr r1
 190:	200003bc 			; <UNDEFINED> instruction: 0x200003bc
 194:	0000003c 	andeq	r0, r0, ip, lsr r0
 198:	40080e41 	andmi	r0, r8, r1, asr #28
 19c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1a0:	100e4101 	andne	r4, lr, r1, lsl #2
 1a4:	00070d41 	andeq	r0, r7, r1, asr #26
 1a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ac:	00000158 	andeq	r0, r0, r8, asr r1
 1b0:	200003f8 	strdcs	r0, [r0], -r8
 1b4:	0000005a 	andeq	r0, r0, sl, asr r0
 1b8:	40080e41 	andmi	r0, r8, r1, asr #28
 1bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1c0:	100e4101 	andne	r4, lr, r1, lsl #2
 1c4:	00070d41 	andeq	r0, r7, r1, asr #26
 1c8:	00000018 	andeq	r0, r0, r8, lsl r0
 1cc:	00000158 	andeq	r0, r0, r8, asr r1
 1d0:	20000452 	andcs	r0, r0, r2, asr r4
 1d4:	0000005a 	andeq	r0, r0, sl, asr r0
 1d8:	40080e41 	andmi	r0, r8, r1, asr #28
 1dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1e0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e8:	00000158 	andeq	r0, r0, r8, asr r1
 1ec:	200004ac 	andcs	r0, r0, ip, lsr #9
 1f0:	00000088 	andeq	r0, r0, r8, lsl #1
 1f4:	40080e41 	andmi	r0, r8, r1, asr #28
 1f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1fc:	180e4101 	stmdane	lr, {r0, r8, lr}
 200:	00070d41 	andeq	r0, r7, r1, asr #26
 204:	0000001c 	andeq	r0, r0, ip, lsl r0
 208:	00000158 	andeq	r0, r0, r8, asr r1
 20c:	20000534 	andcs	r0, r0, r4, lsr r5
 210:	00000078 	andeq	r0, r0, r8, ror r0
 214:	40080e41 	andmi	r0, r8, r1, asr #28
 218:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 21c:	100e4101 	andne	r4, lr, r1, lsl #2
 220:	00070d41 	andeq	r0, r7, r1, asr #26
 224:	0000001c 	andeq	r0, r0, ip, lsl r0
 228:	00000158 	andeq	r0, r0, r8, asr r1
 22c:	200005ac 	andcs	r0, r0, ip, lsr #11
 230:	00000040 	andeq	r0, r0, r0, asr #32
 234:	40080e41 	andmi	r0, r8, r1, asr #28
 238:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 23c:	100e4101 	andne	r4, lr, r1, lsl #2
 240:	00070d41 	andeq	r0, r7, r1, asr #26
 244:	0000001c 	andeq	r0, r0, ip, lsl r0
 248:	00000158 	andeq	r0, r0, r8, asr r1
 24c:	200005ec 	andcs	r0, r0, ip, ror #11
 250:	00000046 	andeq	r0, r0, r6, asr #32
 254:	40080e41 	andmi	r0, r8, r1, asr #28
 258:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 25c:	100e4101 	andne	r4, lr, r1, lsl #2
 260:	00070d41 	andeq	r0, r7, r1, asr #26
 264:	0000001c 	andeq	r0, r0, ip, lsl r0
 268:	00000158 	andeq	r0, r0, r8, asr r1
 26c:	20000632 	andcs	r0, r0, r2, lsr r6
 270:	0000002a 	andeq	r0, r0, sl, lsr #32
 274:	40080e41 	andmi	r0, r8, r1, asr #28
 278:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 27c:	100e4101 	andne	r4, lr, r1, lsl #2
 280:	00070d41 	andeq	r0, r7, r1, asr #26
 284:	00000018 	andeq	r0, r0, r8, lsl r0
 288:	00000158 	andeq	r0, r0, r8, asr r1
 28c:	2000065c 	andcs	r0, r0, ip, asr r6
 290:	00000058 	andeq	r0, r0, r8, asr r0
 294:	40080e41 	andmi	r0, r8, r1, asr #28
 298:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 29c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a4:	00000158 	andeq	r0, r0, r8, asr r1
 2a8:	200006b4 			; <UNDEFINED> instruction: 0x200006b4
 2ac:	00000058 	andeq	r0, r0, r8, asr r0
 2b0:	40080e41 	andmi	r0, r8, r1, asr #28
 2b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b8:	100e4101 	andne	r4, lr, r1, lsl #2
 2bc:	00070d41 	andeq	r0, r7, r1, asr #26
 2c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c4:	00000158 	andeq	r0, r0, r8, asr r1
 2c8:	2000070c 	andcs	r0, r0, ip, lsl #14
 2cc:	00000088 	andeq	r0, r0, r8, lsl #1
 2d0:	40080e41 	andmi	r0, r8, r1, asr #28
 2d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d8:	180e4101 	stmdane	lr, {r0, r8, lr}
 2dc:	00070d41 	andeq	r0, r7, r1, asr #26
 2e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2e4:	00000158 	andeq	r0, r0, r8, asr r1
 2e8:	20000794 	mulcs	r0, r4, r7
 2ec:	000000cc 	andeq	r0, r0, ip, asr #1
 2f0:	40080e41 	andmi	r0, r8, r1, asr #28
 2f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2f8:	180e4101 	stmdane	lr, {r0, r8, lr}
 2fc:	00070d41 	andeq	r0, r7, r1, asr #26
 300:	0000001c 	andeq	r0, r0, ip, lsl r0
 304:	00000158 	andeq	r0, r0, r8, asr r1
 308:	20000860 	andcs	r0, r0, r0, ror #16
 30c:	00000034 	andeq	r0, r0, r4, lsr r0
 310:	40080e41 	andmi	r0, r8, r1, asr #28
 314:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 318:	100e4101 	andne	r4, lr, r1, lsl #2
 31c:	00070d41 	andeq	r0, r7, r1, asr #26
 320:	0000000c 	andeq	r0, r0, ip
 324:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 328:	7c020001 	stcvc	0, cr0, [r2], {1}
 32c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 330:	00000018 	andeq	r0, r0, r8, lsl r0
 334:	00000320 	andeq	r0, r0, r0, lsr #6
 338:	20000894 	mulcs	r0, r4, r8
 33c:	00000048 	andeq	r0, r0, r8, asr #32
 340:	40080e41 	andmi	r0, r8, r1, asr #28
 344:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 348:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 34c:	0000001c 	andeq	r0, r0, ip, lsl r0
 350:	00000320 	andeq	r0, r0, r0, lsr #6
 354:	200008dc 	ldrdcs	r0, [r0], -ip
 358:	000000b8 	strheq	r0, [r0], -r8
 35c:	40080e41 	andmi	r0, r8, r1, asr #28
 360:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 364:	100e4101 	andne	r4, lr, r1, lsl #2
 368:	00070d41 	andeq	r0, r7, r1, asr #26
 36c:	0000001c 	andeq	r0, r0, ip, lsl r0
 370:	00000320 	andeq	r0, r0, r0, lsr #6
 374:	20000994 	mulcs	r0, r4, r9
 378:	00000054 	andeq	r0, r0, r4, asr r0
 37c:	40080e41 	andmi	r0, r8, r1, asr #28
 380:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 384:	100e4101 	andne	r4, lr, r1, lsl #2
 388:	00070d41 	andeq	r0, r7, r1, asr #26
 38c:	0000001c 	andeq	r0, r0, ip, lsl r0
 390:	00000320 	andeq	r0, r0, r0, lsr #6
 394:	200009e8 	andcs	r0, r0, r8, ror #19
 398:	00000054 	andeq	r0, r0, r4, asr r0
 39c:	40080e41 	andmi	r0, r8, r1, asr #28
 3a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3a4:	100e4101 	andne	r4, lr, r1, lsl #2
 3a8:	00070d41 	andeq	r0, r7, r1, asr #26
 3ac:	00000020 	andeq	r0, r0, r0, lsr #32
 3b0:	00000320 	andeq	r0, r0, r0, lsr #6
 3b4:	20000a3c 	andcs	r0, r0, ip, lsr sl
 3b8:	00000068 	andeq	r0, r0, r8, rrx
 3bc:	400c0e41 	andmi	r0, ip, r1, asr #28
 3c0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 3c4:	018e4002 	orreq	r4, lr, r2
 3c8:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 3cc:	0000070d 	andeq	r0, r0, sp, lsl #14
 3d0:	0000000c 	andeq	r0, r0, ip
 3d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 3d8:	7c020001 	stcvc	0, cr0, [r2], {1}
 3dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 3e0:	00000018 	andeq	r0, r0, r8, lsl r0
 3e4:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 3e8:	20000aa4 	andcs	r0, r0, r4, lsr #21
 3ec:	00000044 	andeq	r0, r0, r4, asr #32
 3f0:	40080e41 	andmi	r0, r8, r1, asr #28
 3f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3f8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 3fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 400:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 404:	20000ae8 	andcs	r0, r0, r8, ror #21
 408:	0000002c 	andeq	r0, r0, ip, lsr #32
 40c:	40080e41 	andmi	r0, r8, r1, asr #28
 410:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 414:	100e4101 	andne	r4, lr, r1, lsl #2
 418:	00070d41 	andeq	r0, r7, r1, asr #26
 41c:	0000001c 	andeq	r0, r0, ip, lsl r0
 420:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 424:	20000b14 	andcs	r0, r0, r4, lsl fp
 428:	0000003a 	andeq	r0, r0, sl, lsr r0
 42c:	40080e41 	andmi	r0, r8, r1, asr #28
 430:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 434:	100e4101 	andne	r4, lr, r1, lsl #2
 438:	00070d41 	andeq	r0, r7, r1, asr #26
 43c:	00000018 	andeq	r0, r0, r8, lsl r0
 440:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 444:	20000b4e 	andcs	r0, r0, lr, asr #22
 448:	00000012 	andeq	r0, r0, r2, lsl r0
 44c:	40080e41 	andmi	r0, r8, r1, asr #28
 450:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 454:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 458:	0000000c 	andeq	r0, r0, ip
 45c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 460:	7c020001 	stcvc	0, cr0, [r2], {1}
 464:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 468:	0000001c 	andeq	r0, r0, ip, lsl r0
 46c:	00000458 	andeq	r0, r0, r8, asr r4
 470:	20000b60 	andcs	r0, r0, r0, ror #22
 474:	00000030 	andeq	r0, r0, r0, lsr r0
 478:	40080e41 	andmi	r0, r8, r1, asr #28
 47c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 480:	100e4101 	andne	r4, lr, r1, lsl #2
 484:	00070d41 	andeq	r0, r7, r1, asr #26
 488:	0000001c 	andeq	r0, r0, ip, lsl r0
 48c:	00000458 	andeq	r0, r0, r8, asr r4
 490:	20000b90 	mulcs	r0, r0, fp
 494:	00000034 	andeq	r0, r0, r4, lsr r0
 498:	40080e41 	andmi	r0, r8, r1, asr #28
 49c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4a0:	100e4101 	andne	r4, lr, r1, lsl #2
 4a4:	00070d41 	andeq	r0, r7, r1, asr #26
 4a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4ac:	00000458 	andeq	r0, r0, r8, asr r4
 4b0:	20000bc4 	andcs	r0, r0, r4, asr #23
 4b4:	00000030 	andeq	r0, r0, r0, lsr r0
 4b8:	40080e41 	andmi	r0, r8, r1, asr #28
 4bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4c0:	100e4101 	andne	r4, lr, r1, lsl #2
 4c4:	00070d41 	andeq	r0, r7, r1, asr #26
 4c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4cc:	00000458 	andeq	r0, r0, r8, asr r4
 4d0:	20000bf4 	strdcs	r0, [r0], -r4
 4d4:	0000003c 	andeq	r0, r0, ip, lsr r0
 4d8:	40080e41 	andmi	r0, r8, r1, asr #28
 4dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4e0:	100e4101 	andne	r4, lr, r1, lsl #2
 4e4:	00070d41 	andeq	r0, r7, r1, asr #26
 4e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4ec:	00000458 	andeq	r0, r0, r8, asr r4
 4f0:	20000c30 	andcs	r0, r0, r0, lsr ip
 4f4:	0000002a 	andeq	r0, r0, sl, lsr #32
 4f8:	40080e41 	andmi	r0, r8, r1, asr #28
 4fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 500:	100e4101 	andne	r4, lr, r1, lsl #2
 504:	00070d41 	andeq	r0, r7, r1, asr #26
 508:	0000001c 	andeq	r0, r0, ip, lsl r0
 50c:	00000458 	andeq	r0, r0, r8, asr r4
 510:	20000c5a 	andcs	r0, r0, sl, asr ip
 514:	0000002a 	andeq	r0, r0, sl, lsr #32
 518:	40080e41 	andmi	r0, r8, r1, asr #28
 51c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 520:	100e4101 	andne	r4, lr, r1, lsl #2
 524:	00070d41 	andeq	r0, r7, r1, asr #26
 528:	00000020 	andeq	r0, r0, r0, lsr #32
 52c:	00000458 	andeq	r0, r0, r8, asr r4
 530:	20000c84 	andcs	r0, r0, r4, lsl #25
 534:	00000048 	andeq	r0, r0, r8, asr #32
 538:	400c0e41 	andmi	r0, ip, r1, asr #28
 53c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 540:	018e4002 	orreq	r4, lr, r2
 544:	41180e41 	tstmi	r8, r1, asr #28
 548:	0000070d 	andeq	r0, r0, sp, lsl #14
 54c:	00000020 	andeq	r0, r0, r0, lsr #32
 550:	00000458 	andeq	r0, r0, r8, asr r4
 554:	20000ccc 	andcs	r0, r0, ip, asr #25
 558:	00000048 	andeq	r0, r0, r8, asr #32
 55c:	400c0e41 	andmi	r0, ip, r1, asr #28
 560:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 564:	018e4002 	orreq	r4, lr, r2
 568:	41180e41 	tstmi	r8, r1, asr #28
 56c:	0000070d 	andeq	r0, r0, sp, lsl #14
 570:	0000001c 	andeq	r0, r0, ip, lsl r0
 574:	00000458 	andeq	r0, r0, r8, asr r4
 578:	20000d14 	andcs	r0, r0, r4, lsl sp
 57c:	00000032 	andeq	r0, r0, r2, lsr r0
 580:	40080e41 	andmi	r0, r8, r1, asr #28
 584:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 588:	100e4101 	andne	r4, lr, r1, lsl #2
 58c:	00070d41 	andeq	r0, r7, r1, asr #26
 590:	00000018 	andeq	r0, r0, r8, lsl r0
 594:	00000458 	andeq	r0, r0, r8, asr r4
 598:	20000d46 	andcs	r0, r0, r6, asr #26
 59c:	0000003a 	andeq	r0, r0, sl, lsr r0
 5a0:	40080e41 	andmi	r0, r8, r1, asr #28
 5a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5a8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 5ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 5b0:	00000458 	andeq	r0, r0, r8, asr r4
 5b4:	20000d80 	andcs	r0, r0, r0, lsl #27
 5b8:	0000003c 	andeq	r0, r0, ip, lsr r0
 5bc:	40080e41 	andmi	r0, r8, r1, asr #28
 5c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5c4:	100e4101 	andne	r4, lr, r1, lsl #2
 5c8:	00070d41 	andeq	r0, r7, r1, asr #26
 5cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 5d0:	00000458 	andeq	r0, r0, r8, asr r4
 5d4:	20000dbc 			; <UNDEFINED> instruction: 0x20000dbc
 5d8:	0000004a 	andeq	r0, r0, sl, asr #32
 5dc:	40080e41 	andmi	r0, r8, r1, asr #28
 5e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5e4:	180e4101 	stmdane	lr, {r0, r8, lr}
 5e8:	00070d41 	andeq	r0, r7, r1, asr #26
 5ec:	0000000c 	andeq	r0, r0, ip
 5f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 5f4:	7c010001 	stcvc	0, cr0, [r1], {1}
 5f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 5fc:	0000000c 	andeq	r0, r0, ip
 600:	000005ec 	andeq	r0, r0, ip, ror #11
 604:	20000e09 	andcs	r0, r0, r9, lsl #28
 608:	0000010a 	andeq	r0, r0, sl, lsl #2
