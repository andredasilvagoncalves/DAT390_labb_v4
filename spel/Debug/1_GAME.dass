
./Debug/1_GAME.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:



void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 fc2a 	bl	2000085c <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <ascii_write_controller>:
 */
 
 #include "game_startup.h"


void ascii_write_controller (unsigned char byte){                   //#define B_E		0x40
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
20000016:	0002      	movs	r2, r0
20000018:	1dfb      	adds	r3, r7, #7
2000001a:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_E);
2000001c:	2040      	movs	r0, #64	; 0x40
2000001e:	f000 f829 	bl	20000074 <ascii_ctrl_bit_set>
	GPIO_ODR_E_HIGH = byte;															//#define B_SELECT 	4
20000022:	4a06      	ldr	r2, [pc, #24]	; (2000003c <ascii_write_controller+0x2c>)
20000024:	1dfb      	adds	r3, r7, #7
20000026:	781b      	ldrb	r3, [r3, #0]
20000028:	7013      	strb	r3, [r2, #0]
	delay_250ns();															//#define B_RW 		2
2000002a:	f000 ff19 	bl	20000e60 <delay_250ns>
	ascii_ctrl_bit_clear(B_E);																//#define B_RS 		1
2000002e:	2040      	movs	r0, #64	; 0x40
20000030:	f000 f838 	bl	200000a4 <ascii_ctrl_bit_clear>
}
20000034:	46c0      	nop			; (mov r8, r8)
20000036:	46bd      	mov	sp, r7
20000038:	b002      	add	sp, #8
2000003a:	bd80      	pop	{r7, pc}
2000003c:	40021015 	andmi	r1, r2, r5, lsl r0

20000040 <ascii_read_controller>:

unsigned char ascii_read_controller (void){
20000040:	b580      	push	{r7, lr}
20000042:	b082      	sub	sp, #8
20000044:	af00      	add	r7, sp, #0
	ascii_ctrl_bit_set(B_E);															//#define B_SELECT 	4
20000046:	2040      	movs	r0, #64	; 0x40
20000048:	f000 f814 	bl	20000074 <ascii_ctrl_bit_set>
	delay_250ns();
2000004c:	f000 ff08 	bl	20000e60 <delay_250ns>
	delay_250ns();
20000050:	f000 ff06 	bl	20000e60 <delay_250ns>
	unsigned char byte = GPIO_IDR_E_HIGH;													//#define B_RW 		2
20000054:	4a06      	ldr	r2, [pc, #24]	; (20000070 <ascii_read_controller+0x30>)
20000056:	1dfb      	adds	r3, r7, #7
20000058:	7812      	ldrb	r2, [r2, #0]
2000005a:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
2000005c:	2040      	movs	r0, #64	; 0x40
2000005e:	f000 f821 	bl	200000a4 <ascii_ctrl_bit_clear>
	return byte;
20000062:	1dfb      	adds	r3, r7, #7
20000064:	781b      	ldrb	r3, [r3, #0]
}
20000066:	0018      	movs	r0, r3
20000068:	46bd      	mov	sp, r7
2000006a:	b002      	add	sp, #8
2000006c:	bd80      	pop	{r7, pc}
2000006e:	46c0      	nop			; (mov r8, r8)
20000070:	40021011 	andmi	r1, r2, r1, lsl r0

20000074 <ascii_ctrl_bit_set>:

//Adresserar displayen och ettst채ller de bitar som 채r 1 i x
void ascii_ctrl_bit_set(unsigned char x){
20000074:	b580      	push	{r7, lr}
20000076:	b082      	sub	sp, #8
20000078:	af00      	add	r7, sp, #0
2000007a:	0002      	movs	r2, r0
2000007c:	1dfb      	adds	r3, r7, #7
2000007e:	701a      	strb	r2, [r3, #0]
	GPIO_ODR_E_LOW |= (B_SELECT | x); 		
20000080:	4b07      	ldr	r3, [pc, #28]	; (200000a0 <ascii_ctrl_bit_set+0x2c>)
20000082:	781b      	ldrb	r3, [r3, #0]
20000084:	b2da      	uxtb	r2, r3
20000086:	1dfb      	adds	r3, r7, #7
20000088:	781b      	ldrb	r3, [r3, #0]
2000008a:	4313      	orrs	r3, r2
2000008c:	b2db      	uxtb	r3, r3
2000008e:	4a04      	ldr	r2, [pc, #16]	; (200000a0 <ascii_ctrl_bit_set+0x2c>)
20000090:	2104      	movs	r1, #4
20000092:	430b      	orrs	r3, r1
20000094:	b2db      	uxtb	r3, r3
20000096:	7013      	strb	r3, [r2, #0]
}
20000098:	46c0      	nop			; (mov r8, r8)
2000009a:	46bd      	mov	sp, r7
2000009c:	b002      	add	sp, #8
2000009e:	bd80      	pop	{r7, pc}
200000a0:	40021014 	andmi	r1, r2, r4, lsl r0

200000a4 <ascii_ctrl_bit_clear>:

//Adresserar displayen och nollst채ller de bitar som 채r 1 i x
void ascii_ctrl_bit_clear(unsigned char x){
200000a4:	b580      	push	{r7, lr}
200000a6:	b082      	sub	sp, #8
200000a8:	af00      	add	r7, sp, #0
200000aa:	0002      	movs	r2, r0
200000ac:	1dfb      	adds	r3, r7, #7
200000ae:	701a      	strb	r2, [r3, #0]
	GPIO_ODR_E_LOW &= (B_SELECT | ~x);
200000b0:	4b0a      	ldr	r3, [pc, #40]	; (200000dc <ascii_ctrl_bit_clear+0x38>)
200000b2:	781b      	ldrb	r3, [r3, #0]
200000b4:	b2db      	uxtb	r3, r3
200000b6:	b25b      	sxtb	r3, r3
200000b8:	1dfa      	adds	r2, r7, #7
200000ba:	7812      	ldrb	r2, [r2, #0]
200000bc:	b252      	sxtb	r2, r2
200000be:	43d2      	mvns	r2, r2
200000c0:	b252      	sxtb	r2, r2
200000c2:	2104      	movs	r1, #4
200000c4:	430a      	orrs	r2, r1
200000c6:	b252      	sxtb	r2, r2
200000c8:	4013      	ands	r3, r2
200000ca:	b25a      	sxtb	r2, r3
200000cc:	4b03      	ldr	r3, [pc, #12]	; (200000dc <ascii_ctrl_bit_clear+0x38>)
200000ce:	b2d2      	uxtb	r2, r2
200000d0:	701a      	strb	r2, [r3, #0]
}
200000d2:	46c0      	nop			; (mov r8, r8)
200000d4:	46bd      	mov	sp, r7
200000d6:	b002      	add	sp, #8
200000d8:	bd80      	pop	{r7, pc}
200000da:	46c0      	nop			; (mov r8, r8)
200000dc:	40021014 	andmi	r1, r2, r4, lsl r0

200000e0 <ascii_write_command>:

void ascii_write_command(unsigned char command){
200000e0:	b580      	push	{r7, lr}
200000e2:	b082      	sub	sp, #8
200000e4:	af00      	add	r7, sp, #0
200000e6:	0002      	movs	r2, r0
200000e8:	1dfb      	adds	r3, r7, #7
200000ea:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
200000ec:	2001      	movs	r0, #1
200000ee:	f7ff ffd9 	bl	200000a4 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
200000f2:	2002      	movs	r0, #2
200000f4:	f7ff ffd6 	bl	200000a4 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
200000f8:	1dfb      	adds	r3, r7, #7
200000fa:	781b      	ldrb	r3, [r3, #0]
200000fc:	0018      	movs	r0, r3
200000fe:	f7ff ff87 	bl	20000010 <ascii_write_controller>
}
20000102:	46c0      	nop			; (mov r8, r8)
20000104:	46bd      	mov	sp, r7
20000106:	b002      	add	sp, #8
20000108:	bd80      	pop	{r7, pc}

2000010a <ascii_write_data>:

void ascii_write_data(unsigned char data){
2000010a:	b580      	push	{r7, lr}
2000010c:	b082      	sub	sp, #8
2000010e:	af00      	add	r7, sp, #0
20000110:	0002      	movs	r2, r0
20000112:	1dfb      	adds	r3, r7, #7
20000114:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000116:	2001      	movs	r0, #1
20000118:	f7ff ffac 	bl	20000074 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
2000011c:	2002      	movs	r0, #2
2000011e:	f7ff ffc1 	bl	200000a4 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20000122:	1dfb      	adds	r3, r7, #7
20000124:	781b      	ldrb	r3, [r3, #0]
20000126:	0018      	movs	r0, r3
20000128:	f7ff ff72 	bl	20000010 <ascii_write_controller>
}
2000012c:	46c0      	nop			; (mov r8, r8)
2000012e:	46bd      	mov	sp, r7
20000130:	b002      	add	sp, #8
20000132:	bd80      	pop	{r7, pc}

20000134 <ascii_read_status>:

unsigned char ascii_read_status(void){
20000134:	b590      	push	{r4, r7, lr}
20000136:	b083      	sub	sp, #12
20000138:	af00      	add	r7, sp, #0
	GPIO_MODER_E &= 0x0000FFFF;
2000013a:	4b0e      	ldr	r3, [pc, #56]	; (20000174 <ascii_read_status+0x40>)
2000013c:	681a      	ldr	r2, [r3, #0]
2000013e:	4b0d      	ldr	r3, [pc, #52]	; (20000174 <ascii_read_status+0x40>)
20000140:	0412      	lsls	r2, r2, #16
20000142:	0c12      	lsrs	r2, r2, #16
20000144:	601a      	str	r2, [r3, #0]
	unsigned char read_status;
	ascii_ctrl_bit_clear(B_RS);
20000146:	2001      	movs	r0, #1
20000148:	f7ff ffac 	bl	200000a4 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
2000014c:	2002      	movs	r0, #2
2000014e:	f7ff ff91 	bl	20000074 <ascii_ctrl_bit_set>
	read_status = ascii_read_controller();
20000152:	1dfc      	adds	r4, r7, #7
20000154:	f7ff ff74 	bl	20000040 <ascii_read_controller>
20000158:	0003      	movs	r3, r0
2000015a:	7023      	strb	r3, [r4, #0]
	GPIO_MODER_E |= 0x55550000;
2000015c:	4b05      	ldr	r3, [pc, #20]	; (20000174 <ascii_read_status+0x40>)
2000015e:	681a      	ldr	r2, [r3, #0]
20000160:	4b04      	ldr	r3, [pc, #16]	; (20000174 <ascii_read_status+0x40>)
20000162:	4905      	ldr	r1, [pc, #20]	; (20000178 <ascii_read_status+0x44>)
20000164:	430a      	orrs	r2, r1
20000166:	601a      	str	r2, [r3, #0]
    return read_status;
20000168:	1dfb      	adds	r3, r7, #7
2000016a:	781b      	ldrb	r3, [r3, #0]
}
2000016c:	0018      	movs	r0, r3
2000016e:	46bd      	mov	sp, r7
20000170:	b003      	add	sp, #12
20000172:	bd90      	pop	{r4, r7, pc}
20000174:	40021000 	andmi	r1, r2, r0
20000178:	55550000 	ldrbpl	r0, [r5, #-0]

2000017c <ascii_read_data>:

unsigned char ascii_read_data(void){
2000017c:	b590      	push	{r4, r7, lr}
2000017e:	b083      	sub	sp, #12
20000180:	af00      	add	r7, sp, #0
	GPIO_MODER_E &= 0x0000FFFF;
20000182:	4b0e      	ldr	r3, [pc, #56]	; (200001bc <ascii_read_data+0x40>)
20000184:	681a      	ldr	r2, [r3, #0]
20000186:	4b0d      	ldr	r3, [pc, #52]	; (200001bc <ascii_read_data+0x40>)
20000188:	0412      	lsls	r2, r2, #16
2000018a:	0c12      	lsrs	r2, r2, #16
2000018c:	601a      	str	r2, [r3, #0]
	unsigned char read_data;
	ascii_ctrl_bit_set(B_RS);
2000018e:	2001      	movs	r0, #1
20000190:	f7ff ff70 	bl	20000074 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
20000194:	2002      	movs	r0, #2
20000196:	f7ff ff6d 	bl	20000074 <ascii_ctrl_bit_set>
	read_data = ascii_read_controller();
2000019a:	1dfc      	adds	r4, r7, #7
2000019c:	f7ff ff50 	bl	20000040 <ascii_read_controller>
200001a0:	0003      	movs	r3, r0
200001a2:	7023      	strb	r3, [r4, #0]
	GPIO_MODER_E |= 0x55550000;
200001a4:	4b05      	ldr	r3, [pc, #20]	; (200001bc <ascii_read_data+0x40>)
200001a6:	681a      	ldr	r2, [r3, #0]
200001a8:	4b04      	ldr	r3, [pc, #16]	; (200001bc <ascii_read_data+0x40>)
200001aa:	4905      	ldr	r1, [pc, #20]	; (200001c0 <ascii_read_data+0x44>)
200001ac:	430a      	orrs	r2, r1
200001ae:	601a      	str	r2, [r3, #0]
    return read_data;
200001b0:	1dfb      	adds	r3, r7, #7
200001b2:	781b      	ldrb	r3, [r3, #0]
}
200001b4:	0018      	movs	r0, r3
200001b6:	46bd      	mov	sp, r7
200001b8:	b003      	add	sp, #12
200001ba:	bd90      	pop	{r4, r7, pc}
200001bc:	40021000 	andmi	r1, r2, r0
200001c0:	55550000 	ldrbpl	r0, [r5, #-0]

200001c4 <ascii_command>:


void ascii_command (unsigned char command){
200001c4:	b580      	push	{r7, lr}
200001c6:	b082      	sub	sp, #8
200001c8:	af00      	add	r7, sp, #0
200001ca:	0002      	movs	r2, r0
200001cc:	1dfb      	adds	r3, r7, #7
200001ce:	701a      	strb	r2, [r3, #0]
	while ((ascii_read_status() & (1<<7))){}
200001d0:	46c0      	nop			; (mov r8, r8)
200001d2:	f7ff ffaf 	bl	20000134 <ascii_read_status>
200001d6:	0003      	movs	r3, r0
200001d8:	b25b      	sxtb	r3, r3
200001da:	2b00      	cmp	r3, #0
200001dc:	dbf9      	blt.n	200001d2 <ascii_command+0xe>
	delay_micro(8);
200001de:	2008      	movs	r0, #8
200001e0:	f000 fe60 	bl	20000ea4 <delay_micro>
	ascii_write_command(command);
200001e4:	1dfb      	adds	r3, r7, #7
200001e6:	781b      	ldrb	r3, [r3, #0]
200001e8:	0018      	movs	r0, r3
200001ea:	f7ff ff79 	bl	200000e0 <ascii_write_command>
}
200001ee:	46c0      	nop			; (mov r8, r8)
200001f0:	46bd      	mov	sp, r7
200001f2:	b002      	add	sp, #8
200001f4:	bd80      	pop	{r7, pc}

200001f6 <ascii_init>:

void ascii_init(){
200001f6:	b580      	push	{r7, lr}
200001f8:	af00      	add	r7, sp, #0
	ascii_command(0x38); //Function set
200001fa:	2038      	movs	r0, #56	; 0x38
200001fc:	f7ff ffe2 	bl	200001c4 <ascii_command>
	delay_micro(40); 
20000200:	2028      	movs	r0, #40	; 0x28
20000202:	f000 fe4f 	bl	20000ea4 <delay_micro>
	
	ascii_command(0xC); //Display control
20000206:	200c      	movs	r0, #12
20000208:	f7ff ffdc 	bl	200001c4 <ascii_command>
	delay_micro(40); 
2000020c:	2028      	movs	r0, #40	; 0x28
2000020e:	f000 fe49 	bl	20000ea4 <delay_micro>
	
	ascii_command(1); // clear display
20000212:	2001      	movs	r0, #1
20000214:	f7ff ffd6 	bl	200001c4 <ascii_command>
	delay_milli(2);
20000218:	2002      	movs	r0, #2
2000021a:	f000 fe59 	bl	20000ed0 <delay_milli>
	
	ascii_command(0x6); //entry mode set
2000021e:	2006      	movs	r0, #6
20000220:	f7ff ffd0 	bl	200001c4 <ascii_command>
	delay_micro(40);
20000224:	2028      	movs	r0, #40	; 0x28
20000226:	f000 fe3d 	bl	20000ea4 <delay_micro>
}
2000022a:	46c0      	nop			; (mov r8, r8)
2000022c:	46bd      	mov	sp, r7
2000022e:	bd80      	pop	{r7, pc}

20000230 <ascii_write_char>:

void ascii_write_char (unsigned char character){
20000230:	b580      	push	{r7, lr}
20000232:	b082      	sub	sp, #8
20000234:	af00      	add	r7, sp, #0
20000236:	0002      	movs	r2, r0
20000238:	1dfb      	adds	r3, r7, #7
2000023a:	701a      	strb	r2, [r3, #0]
	//while ((ascii_read_status() & (1<<7))){};
	
	while ((ascii_read_status() & 0x80) == 0x80) {};
2000023c:	46c0      	nop			; (mov r8, r8)
2000023e:	f7ff ff79 	bl	20000134 <ascii_read_status>
20000242:	0003      	movs	r3, r0
20000244:	001a      	movs	r2, r3
20000246:	2380      	movs	r3, #128	; 0x80
20000248:	4013      	ands	r3, r2
2000024a:	2b80      	cmp	r3, #128	; 0x80
2000024c:	d0f7      	beq.n	2000023e <ascii_write_char+0xe>
		delay_micro(8);
2000024e:	2008      	movs	r0, #8
20000250:	f000 fe28 	bl	20000ea4 <delay_micro>
		ascii_write_data(character);
20000254:	1dfb      	adds	r3, r7, #7
20000256:	781b      	ldrb	r3, [r3, #0]
20000258:	0018      	movs	r0, r3
2000025a:	f7ff ff56 	bl	2000010a <ascii_write_data>
		delay_micro(40);
2000025e:	2028      	movs	r0, #40	; 0x28
20000260:	f000 fe20 	bl	20000ea4 <delay_micro>
}
20000264:	46c0      	nop			; (mov r8, r8)
20000266:	46bd      	mov	sp, r7
20000268:	b002      	add	sp, #8
2000026a:	bd80      	pop	{r7, pc}

2000026c <ascii_gotoxy>:

void ascii_gotoxy(int x,int y){ //x = rad, y = column
2000026c:	b580      	push	{r7, lr}
2000026e:	b084      	sub	sp, #16
20000270:	af00      	add	r7, sp, #0
20000272:	6078      	str	r0, [r7, #4]
20000274:	6039      	str	r1, [r7, #0]
	unsigned char adress = 0;
20000276:	210f      	movs	r1, #15
20000278:	187b      	adds	r3, r7, r1
2000027a:	2200      	movs	r2, #0
2000027c:	701a      	strb	r2, [r3, #0]
	adress = x-1;
2000027e:	687b      	ldr	r3, [r7, #4]
20000280:	b2da      	uxtb	r2, r3
20000282:	187b      	adds	r3, r7, r1
20000284:	3a01      	subs	r2, #1
20000286:	701a      	strb	r2, [r3, #0]
	
	if(y==2)
20000288:	683b      	ldr	r3, [r7, #0]
2000028a:	2b02      	cmp	r3, #2
2000028c:	d105      	bne.n	2000029a <ascii_gotoxy+0x2e>
		adress = adress + 0x40;
2000028e:	220f      	movs	r2, #15
20000290:	18bb      	adds	r3, r7, r2
20000292:	18ba      	adds	r2, r7, r2
20000294:	7812      	ldrb	r2, [r2, #0]
20000296:	3240      	adds	r2, #64	; 0x40
20000298:	701a      	strb	r2, [r3, #0]
		
	ascii_write_command(0x80 | adress);
2000029a:	230f      	movs	r3, #15
2000029c:	18fb      	adds	r3, r7, r3
2000029e:	781b      	ldrb	r3, [r3, #0]
200002a0:	2280      	movs	r2, #128	; 0x80
200002a2:	4252      	negs	r2, r2
200002a4:	4313      	orrs	r3, r2
200002a6:	b2db      	uxtb	r3, r3
200002a8:	0018      	movs	r0, r3
200002aa:	f7ff ff19 	bl	200000e0 <ascii_write_command>
200002ae:	46c0      	nop			; (mov r8, r8)
200002b0:	46bd      	mov	sp, r7
200002b2:	b004      	add	sp, #16
200002b4:	bd80      	pop	{r7, pc}
200002b6:	46c0      	nop			; (mov r8, r8)

200002b8 <graphic_ctrl_bit_set>:
 *
 */

#include "game_startup.h"

void graphic_ctrl_bit_set(uint8_t x){
200002b8:	b580      	push	{r7, lr}
200002ba:	b082      	sub	sp, #8
200002bc:	af00      	add	r7, sp, #0
200002be:	0002      	movs	r2, r0
200002c0:	1dfb      	adds	r3, r7, #7
200002c2:	701a      	strb	r2, [r3, #0]
	GPIO_ODR_E_LOW |= (~B_SELECT & x); 			//Dubbelkolla sedan
200002c4:	4b09      	ldr	r3, [pc, #36]	; (200002ec <graphic_ctrl_bit_set+0x34>)
200002c6:	781b      	ldrb	r3, [r3, #0]
200002c8:	b2db      	uxtb	r3, r3
200002ca:	b25a      	sxtb	r2, r3
200002cc:	1dfb      	adds	r3, r7, #7
200002ce:	781b      	ldrb	r3, [r3, #0]
200002d0:	b25b      	sxtb	r3, r3
200002d2:	2104      	movs	r1, #4
200002d4:	438b      	bics	r3, r1
200002d6:	b25b      	sxtb	r3, r3
200002d8:	4313      	orrs	r3, r2
200002da:	b25a      	sxtb	r2, r3
200002dc:	4b03      	ldr	r3, [pc, #12]	; (200002ec <graphic_ctrl_bit_set+0x34>)
200002de:	b2d2      	uxtb	r2, r2
200002e0:	701a      	strb	r2, [r3, #0]
}
200002e2:	46c0      	nop			; (mov r8, r8)
200002e4:	46bd      	mov	sp, r7
200002e6:	b002      	add	sp, #8
200002e8:	bd80      	pop	{r7, pc}
200002ea:	46c0      	nop			; (mov r8, r8)
200002ec:	40021014 	andmi	r1, r2, r4, lsl r0

200002f0 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x){
200002f0:	b580      	push	{r7, lr}
200002f2:	b082      	sub	sp, #8
200002f4:	af00      	add	r7, sp, #0
200002f6:	0002      	movs	r2, r0
200002f8:	1dfb      	adds	r3, r7, #7
200002fa:	701a      	strb	r2, [r3, #0]
	GPIO_ODR_E_LOW &= ~(B_SELECT | x);			//Dubbelkolla sedan
200002fc:	4b0a      	ldr	r3, [pc, #40]	; (20000328 <graphic_ctrl_bit_clear+0x38>)
200002fe:	781b      	ldrb	r3, [r3, #0]
20000300:	b2db      	uxtb	r3, r3
20000302:	b25b      	sxtb	r3, r3
20000304:	1dfa      	adds	r2, r7, #7
20000306:	7812      	ldrb	r2, [r2, #0]
20000308:	2104      	movs	r1, #4
2000030a:	430a      	orrs	r2, r1
2000030c:	b2d2      	uxtb	r2, r2
2000030e:	b252      	sxtb	r2, r2
20000310:	43d2      	mvns	r2, r2
20000312:	b252      	sxtb	r2, r2
20000314:	4013      	ands	r3, r2
20000316:	b25a      	sxtb	r2, r3
20000318:	4b03      	ldr	r3, [pc, #12]	; (20000328 <graphic_ctrl_bit_clear+0x38>)
2000031a:	b2d2      	uxtb	r2, r2
2000031c:	701a      	strb	r2, [r3, #0]
}
2000031e:	46c0      	nop			; (mov r8, r8)
20000320:	46bd      	mov	sp, r7
20000322:	b002      	add	sp, #8
20000324:	bd80      	pop	{r7, pc}
20000326:	46c0      	nop			; (mov r8, r8)
20000328:	40021014 	andmi	r1, r2, r4, lsl r0

2000032c <select_controller>:

static void select_controller(uint8_t controller){
2000032c:	b580      	push	{r7, lr}
2000032e:	b082      	sub	sp, #8
20000330:	af00      	add	r7, sp, #0
20000332:	0002      	movs	r2, r0
20000334:	1dfb      	adds	r3, r7, #7
20000336:	701a      	strb	r2, [r3, #0]
	switch(controller){
20000338:	1dfb      	adds	r3, r7, #7
2000033a:	781b      	ldrb	r3, [r3, #0]
2000033c:	2b08      	cmp	r3, #8
2000033e:	d00c      	beq.n	2000035a <select_controller+0x2e>
20000340:	dc02      	bgt.n	20000348 <select_controller+0x1c>
20000342:	2b00      	cmp	r3, #0
20000344:	d005      	beq.n	20000352 <select_controller+0x26>
		case 0: graphic_ctrl_bit_clear(B_CS1 | B_CS2); break;
		case 0x08: graphic_ctrl_bit_set(B_CS1); graphic_ctrl_bit_clear(B_CS2); break;
		case 0x10: graphic_ctrl_bit_set(B_CS2); graphic_ctrl_bit_clear(B_CS1); break;
		case 0x08 | 0x10: graphic_ctrl_bit_set(B_CS1 | B_CS2); break;
	}	
}
20000346:	e01a      	b.n	2000037e <select_controller+0x52>
	switch(controller){
20000348:	2b10      	cmp	r3, #16
2000034a:	d00d      	beq.n	20000368 <select_controller+0x3c>
2000034c:	2b18      	cmp	r3, #24
2000034e:	d012      	beq.n	20000376 <select_controller+0x4a>
}
20000350:	e015      	b.n	2000037e <select_controller+0x52>
		case 0: graphic_ctrl_bit_clear(B_CS1 | B_CS2); break;
20000352:	2018      	movs	r0, #24
20000354:	f7ff ffcc 	bl	200002f0 <graphic_ctrl_bit_clear>
20000358:	e011      	b.n	2000037e <select_controller+0x52>
		case 0x08: graphic_ctrl_bit_set(B_CS1); graphic_ctrl_bit_clear(B_CS2); break;
2000035a:	2008      	movs	r0, #8
2000035c:	f7ff ffac 	bl	200002b8 <graphic_ctrl_bit_set>
20000360:	2010      	movs	r0, #16
20000362:	f7ff ffc5 	bl	200002f0 <graphic_ctrl_bit_clear>
20000366:	e00a      	b.n	2000037e <select_controller+0x52>
		case 0x10: graphic_ctrl_bit_set(B_CS2); graphic_ctrl_bit_clear(B_CS1); break;
20000368:	2010      	movs	r0, #16
2000036a:	f7ff ffa5 	bl	200002b8 <graphic_ctrl_bit_set>
2000036e:	2008      	movs	r0, #8
20000370:	f7ff ffbe 	bl	200002f0 <graphic_ctrl_bit_clear>
20000374:	e003      	b.n	2000037e <select_controller+0x52>
		case 0x08 | 0x10: graphic_ctrl_bit_set(B_CS1 | B_CS2); break;
20000376:	2018      	movs	r0, #24
20000378:	f7ff ff9e 	bl	200002b8 <graphic_ctrl_bit_set>
2000037c:	46c0      	nop			; (mov r8, r8)
}
2000037e:	46c0      	nop			; (mov r8, r8)
20000380:	46bd      	mov	sp, r7
20000382:	b002      	add	sp, #8
20000384:	bd80      	pop	{r7, pc}

20000386 <graphic_wait_ready>:

static void graphic_wait_ready(void){
20000386:	b580      	push	{r7, lr}
20000388:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_clear(B_E);
2000038a:	2040      	movs	r0, #64	; 0x40
2000038c:	f7ff ffb0 	bl	200002f0 <graphic_ctrl_bit_clear>
	GPIO_MODER_E = 0x00005555;
20000390:	4b0f      	ldr	r3, [pc, #60]	; (200003d0 <graphic_wait_ready+0x4a>)
20000392:	4a10      	ldr	r2, [pc, #64]	; (200003d4 <graphic_wait_ready+0x4e>)
20000394:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
20000396:	2001      	movs	r0, #1
20000398:	f7ff ffaa 	bl	200002f0 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
2000039c:	2002      	movs	r0, #2
2000039e:	f7ff ff8b 	bl	200002b8 <graphic_ctrl_bit_set>
//	delay_500ns();
	while(GPIO_IDR_E_HIGH & LCD_BUSY){
200003a2:	e005      	b.n	200003b0 <graphic_wait_ready+0x2a>
		graphic_ctrl_bit_set(B_E);
200003a4:	2040      	movs	r0, #64	; 0x40
200003a6:	f7ff ff87 	bl	200002b8 <graphic_ctrl_bit_set>
//		delay_500ns();
		graphic_ctrl_bit_clear(B_E);
200003aa:	2040      	movs	r0, #64	; 0x40
200003ac:	f7ff ffa0 	bl	200002f0 <graphic_ctrl_bit_clear>
	while(GPIO_IDR_E_HIGH & LCD_BUSY){
200003b0:	4b09      	ldr	r3, [pc, #36]	; (200003d8 <graphic_wait_ready+0x52>)
200003b2:	781b      	ldrb	r3, [r3, #0]
200003b4:	b2db      	uxtb	r3, r3
200003b6:	b25b      	sxtb	r3, r3
200003b8:	2b00      	cmp	r3, #0
200003ba:	dbf3      	blt.n	200003a4 <graphic_wait_ready+0x1e>
//		delay_500ns();
	}
	graphic_ctrl_bit_set(B_E);
200003bc:	2040      	movs	r0, #64	; 0x40
200003be:	f7ff ff7b 	bl	200002b8 <graphic_ctrl_bit_set>
	GPIO_MODER_E = 0x55555555;
200003c2:	4b03      	ldr	r3, [pc, #12]	; (200003d0 <graphic_wait_ready+0x4a>)
200003c4:	4a05      	ldr	r2, [pc, #20]	; (200003dc <graphic_wait_ready+0x56>)
200003c6:	601a      	str	r2, [r3, #0]
}
200003c8:	46c0      	nop			; (mov r8, r8)
200003ca:	46bd      	mov	sp, r7
200003cc:	bd80      	pop	{r7, pc}
200003ce:	46c0      	nop			; (mov r8, r8)
200003d0:	40021000 	andmi	r1, r2, r0
200003d4:	00005555 	andeq	r5, r0, r5, asr r5
200003d8:	40021011 	andmi	r1, r2, r1, lsl r0
200003dc:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200003e0 <graphic_read>:

unsigned char graphic_read(unsigned char controller){
200003e0:	b580      	push	{r7, lr}
200003e2:	b084      	sub	sp, #16
200003e4:	af00      	add	r7, sp, #0
200003e6:	0002      	movs	r2, r0
200003e8:	1dfb      	adds	r3, r7, #7
200003ea:	701a      	strb	r2, [r3, #0]
	unsigned char read_data;
	graphic_ctrl_bit_clear(B_E);
200003ec:	2040      	movs	r0, #64	; 0x40
200003ee:	f7ff ff7f 	bl	200002f0 <graphic_ctrl_bit_clear>
	GPIO_MODER_E = 0x00005555;
200003f2:	4b19      	ldr	r3, [pc, #100]	; (20000458 <graphic_read+0x78>)
200003f4:	4a19      	ldr	r2, [pc, #100]	; (2000045c <graphic_read+0x7c>)
200003f6:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS | B_RW);
200003f8:	2003      	movs	r0, #3
200003fa:	f7ff ff5d 	bl	200002b8 <graphic_ctrl_bit_set>
	select_controller(controller);
200003fe:	1dfb      	adds	r3, r7, #7
20000400:	781b      	ldrb	r3, [r3, #0]
20000402:	0018      	movs	r0, r3
20000404:	f7ff ff92 	bl	2000032c <select_controller>
//	delay_500ns();
	graphic_ctrl_bit_set(B_E);
20000408:	2040      	movs	r0, #64	; 0x40
2000040a:	f7ff ff55 	bl	200002b8 <graphic_ctrl_bit_set>
	read_data = GPIO_IDR_E_HIGH;
2000040e:	4a14      	ldr	r2, [pc, #80]	; (20000460 <graphic_read+0x80>)
20000410:	230f      	movs	r3, #15
20000412:	18fb      	adds	r3, r7, r3
20000414:	7812      	ldrb	r2, [r2, #0]
20000416:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000418:	2040      	movs	r0, #64	; 0x40
2000041a:	f7ff ff69 	bl	200002f0 <graphic_ctrl_bit_clear>
	GPIO_MODER_E = 0x55555555;
2000041e:	4b0e      	ldr	r3, [pc, #56]	; (20000458 <graphic_read+0x78>)
20000420:	4a10      	ldr	r2, [pc, #64]	; (20000464 <graphic_read+0x84>)
20000422:	601a      	str	r2, [r3, #0]
	if(controller == B_CS1){
20000424:	1dfb      	adds	r3, r7, #7
20000426:	781b      	ldrb	r3, [r3, #0]
20000428:	2b08      	cmp	r3, #8
2000042a:	d104      	bne.n	20000436 <graphic_read+0x56>
		select_controller(B_CS1);
2000042c:	2008      	movs	r0, #8
2000042e:	f7ff ff7d 	bl	2000032c <select_controller>
		graphic_wait_ready();
20000432:	f7ff ffa8 	bl	20000386 <graphic_wait_ready>
	}
	if (controller == B_CS2){
20000436:	1dfb      	adds	r3, r7, #7
20000438:	781b      	ldrb	r3, [r3, #0]
2000043a:	2b10      	cmp	r3, #16
2000043c:	d104      	bne.n	20000448 <graphic_read+0x68>
		select_controller(B_CS2);
2000043e:	2010      	movs	r0, #16
20000440:	f7ff ff74 	bl	2000032c <select_controller>
		graphic_wait_ready();
20000444:	f7ff ff9f 	bl	20000386 <graphic_wait_ready>
	}
	return read_data;
20000448:	230f      	movs	r3, #15
2000044a:	18fb      	adds	r3, r7, r3
2000044c:	781b      	ldrb	r3, [r3, #0]
}
2000044e:	0018      	movs	r0, r3
20000450:	46bd      	mov	sp, r7
20000452:	b004      	add	sp, #16
20000454:	bd80      	pop	{r7, pc}
20000456:	46c0      	nop			; (mov r8, r8)
20000458:	40021000 	andmi	r1, r2, r0
2000045c:	00005555 	andeq	r5, r0, r5, asr r5
20000460:	40021011 	andmi	r1, r2, r1, lsl r0
20000464:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000468 <graphic_write>:

void graphic_write(unsigned char value, unsigned char controller){
20000468:	b580      	push	{r7, lr}
2000046a:	b082      	sub	sp, #8
2000046c:	af00      	add	r7, sp, #0
2000046e:	0002      	movs	r2, r0
20000470:	1dfb      	adds	r3, r7, #7
20000472:	701a      	strb	r2, [r3, #0]
20000474:	1dbb      	adds	r3, r7, #6
20000476:	1c0a      	adds	r2, r1, #0
20000478:	701a      	strb	r2, [r3, #0]
	GPIO_ODR_E_HIGH = value;
2000047a:	4a18      	ldr	r2, [pc, #96]	; (200004dc <graphic_write+0x74>)
2000047c:	1dfb      	adds	r3, r7, #7
2000047e:	781b      	ldrb	r3, [r3, #0]
20000480:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
20000482:	1dbb      	adds	r3, r7, #6
20000484:	781b      	ldrb	r3, [r3, #0]
20000486:	0018      	movs	r0, r3
20000488:	f7ff ff50 	bl	2000032c <select_controller>
//	delay_500ns();
	graphic_ctrl_bit_set(B_E);
2000048c:	2040      	movs	r0, #64	; 0x40
2000048e:	f7ff ff13 	bl	200002b8 <graphic_ctrl_bit_set>
//	delay_500ns();
	graphic_ctrl_bit_clear(B_E);
20000492:	2040      	movs	r0, #64	; 0x40
20000494:	f7ff ff2c 	bl	200002f0 <graphic_ctrl_bit_clear>
	if(controller & B_CS1){
20000498:	1dbb      	adds	r3, r7, #6
2000049a:	781b      	ldrb	r3, [r3, #0]
2000049c:	2208      	movs	r2, #8
2000049e:	4013      	ands	r3, r2
200004a0:	d004      	beq.n	200004ac <graphic_write+0x44>
		select_controller(B_CS1);
200004a2:	2008      	movs	r0, #8
200004a4:	f7ff ff42 	bl	2000032c <select_controller>
		graphic_wait_ready();
200004a8:	f7ff ff6d 	bl	20000386 <graphic_wait_ready>
	}
	if(controller & B_CS2){
200004ac:	1dbb      	adds	r3, r7, #6
200004ae:	781b      	ldrb	r3, [r3, #0]
200004b0:	2210      	movs	r2, #16
200004b2:	4013      	ands	r3, r2
200004b4:	d004      	beq.n	200004c0 <graphic_write+0x58>
		select_controller(B_CS2);
200004b6:	2010      	movs	r0, #16
200004b8:	f7ff ff38 	bl	2000032c <select_controller>
		graphic_wait_ready();
200004bc:	f7ff ff63 	bl	20000386 <graphic_wait_ready>
	}
	GPIO_ODR_E_HIGH = 0;
200004c0:	4b06      	ldr	r3, [pc, #24]	; (200004dc <graphic_write+0x74>)
200004c2:	2200      	movs	r2, #0
200004c4:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);  		//ettst채lls som f철rberedelse f철r n채sta arbetscykel
200004c6:	2040      	movs	r0, #64	; 0x40
200004c8:	f7ff fef6 	bl	200002b8 <graphic_ctrl_bit_set>
	select_controller(0);
200004cc:	2000      	movs	r0, #0
200004ce:	f7ff ff2d 	bl	2000032c <select_controller>
}
200004d2:	46c0      	nop			; (mov r8, r8)
200004d4:	46bd      	mov	sp, r7
200004d6:	b002      	add	sp, #8
200004d8:	bd80      	pop	{r7, pc}
200004da:	46c0      	nop			; (mov r8, r8)
200004dc:	40021015 	andmi	r1, r2, r5, lsl r0

200004e0 <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller){
200004e0:	b580      	push	{r7, lr}
200004e2:	b082      	sub	sp, #8
200004e4:	af00      	add	r7, sp, #0
200004e6:	0002      	movs	r2, r0
200004e8:	1dfb      	adds	r3, r7, #7
200004ea:	701a      	strb	r2, [r3, #0]
200004ec:	1dbb      	adds	r3, r7, #6
200004ee:	1c0a      	adds	r2, r1, #0
200004f0:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200004f2:	2040      	movs	r0, #64	; 0x40
200004f4:	f7ff fefc 	bl	200002f0 <graphic_ctrl_bit_clear>
	select_controller(controller);
200004f8:	1dbb      	adds	r3, r7, #6
200004fa:	781b      	ldrb	r3, [r3, #0]
200004fc:	0018      	movs	r0, r3
200004fe:	f7ff ff15 	bl	2000032c <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
20000502:	2003      	movs	r0, #3
20000504:	f7ff fef4 	bl	200002f0 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20000508:	1dbb      	adds	r3, r7, #6
2000050a:	781a      	ldrb	r2, [r3, #0]
2000050c:	1dfb      	adds	r3, r7, #7
2000050e:	781b      	ldrb	r3, [r3, #0]
20000510:	0011      	movs	r1, r2
20000512:	0018      	movs	r0, r3
20000514:	f7ff ffa8 	bl	20000468 <graphic_write>
}
20000518:	46c0      	nop			; (mov r8, r8)
2000051a:	46bd      	mov	sp, r7
2000051c:	b002      	add	sp, #8
2000051e:	bd80      	pop	{r7, pc}

20000520 <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
20000520:	b580      	push	{r7, lr}
20000522:	b082      	sub	sp, #8
20000524:	af00      	add	r7, sp, #0
20000526:	0002      	movs	r2, r0
20000528:	1dfb      	adds	r3, r7, #7
2000052a:	701a      	strb	r2, [r3, #0]
2000052c:	1dbb      	adds	r3, r7, #6
2000052e:	1c0a      	adds	r2, r1, #0
20000530:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000532:	2040      	movs	r0, #64	; 0x40
20000534:	f7ff fedc 	bl	200002f0 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000538:	1dbb      	adds	r3, r7, #6
2000053a:	781b      	ldrb	r3, [r3, #0]
2000053c:	0018      	movs	r0, r3
2000053e:	f7ff fef5 	bl	2000032c <select_controller>
	graphic_ctrl_bit_set(B_RS);
20000542:	2001      	movs	r0, #1
20000544:	f7ff feb8 	bl	200002b8 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
20000548:	2002      	movs	r0, #2
2000054a:	f7ff fed1 	bl	200002f0 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
2000054e:	1dbb      	adds	r3, r7, #6
20000550:	781a      	ldrb	r2, [r3, #0]
20000552:	1dfb      	adds	r3, r7, #7
20000554:	781b      	ldrb	r3, [r3, #0]
20000556:	0011      	movs	r1, r2
20000558:	0018      	movs	r0, r3
2000055a:	f7ff ff85 	bl	20000468 <graphic_write>
}
2000055e:	46c0      	nop			; (mov r8, r8)
20000560:	46bd      	mov	sp, r7
20000562:	b002      	add	sp, #8
20000564:	bd80      	pop	{r7, pc}

20000566 <graphic_read_data>:

unsigned char graphic_read_data(unsigned char controller){
20000566:	b580      	push	{r7, lr}
20000568:	b082      	sub	sp, #8
2000056a:	af00      	add	r7, sp, #0
2000056c:	0002      	movs	r2, r0
2000056e:	1dfb      	adds	r3, r7, #7
20000570:	701a      	strb	r2, [r3, #0]
	(void) graphic_read(controller);
20000572:	1dfb      	adds	r3, r7, #7
20000574:	781b      	ldrb	r3, [r3, #0]
20000576:	0018      	movs	r0, r3
20000578:	f7ff ff32 	bl	200003e0 <graphic_read>
	
	return graphic_read(controller);
2000057c:	1dfb      	adds	r3, r7, #7
2000057e:	781b      	ldrb	r3, [r3, #0]
20000580:	0018      	movs	r0, r3
20000582:	f7ff ff2d 	bl	200003e0 <graphic_read>
20000586:	0003      	movs	r3, r0
}
20000588:	0018      	movs	r0, r3
2000058a:	46bd      	mov	sp, r7
2000058c:	b002      	add	sp, #8
2000058e:	bd80      	pop	{r7, pc}

20000590 <graphic_init>:

void graphic_init(){
20000590:	b580      	push	{r7, lr}
20000592:	af00      	add	r7, sp, #0
	GPIO_MODER_E = 0x55555555;
20000594:	4b12      	ldr	r3, [pc, #72]	; (200005e0 <graphic_init+0x50>)
20000596:	4a13      	ldr	r2, [pc, #76]	; (200005e4 <graphic_init+0x54>)
20000598:	601a      	str	r2, [r3, #0]
	
	graphic_ctrl_bit_set(B_E);
2000059a:	2040      	movs	r0, #64	; 0x40
2000059c:	f7ff fe8c 	bl	200002b8 <graphic_ctrl_bit_set>
//	delay_micro(10);
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RESET | B_E);
200005a0:	2078      	movs	r0, #120	; 0x78
200005a2:	f7ff fea5 	bl	200002f0 <graphic_ctrl_bit_clear>
//	delay_milli(30);
	graphic_ctrl_bit_set(B_RESET);
200005a6:	2020      	movs	r0, #32
200005a8:	f7ff fe86 	bl	200002b8 <graphic_ctrl_bit_set>
	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
200005ac:	2118      	movs	r1, #24
200005ae:	203e      	movs	r0, #62	; 0x3e
200005b0:	f7ff ff96 	bl	200004e0 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);
200005b4:	2118      	movs	r1, #24
200005b6:	203f      	movs	r0, #63	; 0x3f
200005b8:	f7ff ff92 	bl	200004e0 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
200005bc:	2118      	movs	r1, #24
200005be:	20c0      	movs	r0, #192	; 0xc0
200005c0:	f7ff ff8e 	bl	200004e0 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
200005c4:	2118      	movs	r1, #24
200005c6:	2040      	movs	r0, #64	; 0x40
200005c8:	f7ff ff8a 	bl	200004e0 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
200005cc:	2118      	movs	r1, #24
200005ce:	20b8      	movs	r0, #184	; 0xb8
200005d0:	f7ff ff86 	bl	200004e0 <graphic_write_command>
	select_controller(0);
200005d4:	2000      	movs	r0, #0
200005d6:	f7ff fea9 	bl	2000032c <select_controller>
}
200005da:	46c0      	nop			; (mov r8, r8)
200005dc:	46bd      	mov	sp, r7
200005de:	bd80      	pop	{r7, pc}
200005e0:	40021000 	andmi	r1, r2, r0
200005e4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200005e8 <graphic_clear_screen>:

void graphic_clear_screen(){
200005e8:	b580      	push	{r7, lr}
200005ea:	b082      	sub	sp, #8
200005ec:	af00      	add	r7, sp, #0
	for(int page = 0; page <=7; page++){
200005ee:	2300      	movs	r3, #0
200005f0:	607b      	str	r3, [r7, #4]
200005f2:	e01e      	b.n	20000632 <graphic_clear_screen+0x4a>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
200005f4:	687b      	ldr	r3, [r7, #4]
200005f6:	b25b      	sxtb	r3, r3
200005f8:	2248      	movs	r2, #72	; 0x48
200005fa:	4252      	negs	r2, r2
200005fc:	4313      	orrs	r3, r2
200005fe:	b25b      	sxtb	r3, r3
20000600:	b2db      	uxtb	r3, r3
20000602:	2118      	movs	r1, #24
20000604:	0018      	movs	r0, r3
20000606:	f7ff ff6b 	bl	200004e0 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1 | B_CS2);
2000060a:	2118      	movs	r1, #24
2000060c:	2040      	movs	r0, #64	; 0x40
2000060e:	f7ff ff67 	bl	200004e0 <graphic_write_command>
		for (int adress = 0; adress <= 63; adress++)
20000612:	2300      	movs	r3, #0
20000614:	603b      	str	r3, [r7, #0]
20000616:	e006      	b.n	20000626 <graphic_clear_screen+0x3e>
			graphic_write_data(0, B_CS1 | B_CS2);
20000618:	2118      	movs	r1, #24
2000061a:	2000      	movs	r0, #0
2000061c:	f7ff ff80 	bl	20000520 <graphic_write_data>
		for (int adress = 0; adress <= 63; adress++)
20000620:	683b      	ldr	r3, [r7, #0]
20000622:	3301      	adds	r3, #1
20000624:	603b      	str	r3, [r7, #0]
20000626:	683b      	ldr	r3, [r7, #0]
20000628:	2b3f      	cmp	r3, #63	; 0x3f
2000062a:	ddf5      	ble.n	20000618 <graphic_clear_screen+0x30>
	for(int page = 0; page <=7; page++){
2000062c:	687b      	ldr	r3, [r7, #4]
2000062e:	3301      	adds	r3, #1
20000630:	607b      	str	r3, [r7, #4]
20000632:	687b      	ldr	r3, [r7, #4]
20000634:	2b07      	cmp	r3, #7
20000636:	dddd      	ble.n	200005f4 <graphic_clear_screen+0xc>
	}
}
20000638:	46c0      	nop			; (mov r8, r8)
2000063a:	46bd      	mov	sp, r7
2000063c:	b002      	add	sp, #8
2000063e:	bd80      	pop	{r7, pc}

20000640 <pixel>:

uint8_t backBuffer[1024]; // 128 * 64 / 8

void pixel (unsigned int x, unsigned int y){
20000640:	b580      	push	{r7, lr}
20000642:	b084      	sub	sp, #16
20000644:	af00      	add	r7, sp, #0
20000646:	6078      	str	r0, [r7, #4]
20000648:	6039      	str	r1, [r7, #0]
	uint8_t mask;
	int index = 0;
2000064a:	2300      	movs	r3, #0
2000064c:	60fb      	str	r3, [r7, #12]
	if (y < 1 || y > 64 || x < 1 || x > 128) 
2000064e:	683b      	ldr	r3, [r7, #0]
20000650:	2b00      	cmp	r3, #0
20000652:	d032      	beq.n	200006ba <pixel+0x7a>
20000654:	683b      	ldr	r3, [r7, #0]
20000656:	2b40      	cmp	r3, #64	; 0x40
20000658:	d82f      	bhi.n	200006ba <pixel+0x7a>
2000065a:	687b      	ldr	r3, [r7, #4]
2000065c:	2b00      	cmp	r3, #0
2000065e:	d02c      	beq.n	200006ba <pixel+0x7a>
20000660:	687b      	ldr	r3, [r7, #4]
20000662:	2b80      	cmp	r3, #128	; 0x80
20000664:	d829      	bhi.n	200006ba <pixel+0x7a>
		return;
	
	mask = 1 << ((y-1) % 8);
20000666:	683b      	ldr	r3, [r7, #0]
20000668:	3b01      	subs	r3, #1
2000066a:	2207      	movs	r2, #7
2000066c:	4013      	ands	r3, r2
2000066e:	2201      	movs	r2, #1
20000670:	409a      	lsls	r2, r3
20000672:	230b      	movs	r3, #11
20000674:	18fb      	adds	r3, r7, r3
20000676:	701a      	strb	r2, [r3, #0]
	
	if(x > 64){
20000678:	687b      	ldr	r3, [r7, #4]
2000067a:	2b40      	cmp	r3, #64	; 0x40
2000067c:	d905      	bls.n	2000068a <pixel+0x4a>
		index = 512;
2000067e:	2380      	movs	r3, #128	; 0x80
20000680:	009b      	lsls	r3, r3, #2
20000682:	60fb      	str	r3, [r7, #12]
		x -= 65;
20000684:	687b      	ldr	r3, [r7, #4]
20000686:	3b41      	subs	r3, #65	; 0x41
20000688:	607b      	str	r3, [r7, #4]
	}
	
	index += x + ((y-1) / 8) * 64; 
2000068a:	683b      	ldr	r3, [r7, #0]
2000068c:	3b01      	subs	r3, #1
2000068e:	08db      	lsrs	r3, r3, #3
20000690:	019a      	lsls	r2, r3, #6
20000692:	687b      	ldr	r3, [r7, #4]
20000694:	18d2      	adds	r2, r2, r3
20000696:	68fb      	ldr	r3, [r7, #12]
20000698:	18d3      	adds	r3, r2, r3
2000069a:	60fb      	str	r3, [r7, #12]
	
	backBuffer[index] |= mask;
2000069c:	4a09      	ldr	r2, [pc, #36]	; (200006c4 <pixel+0x84>)
2000069e:	68fb      	ldr	r3, [r7, #12]
200006a0:	18d3      	adds	r3, r2, r3
200006a2:	781a      	ldrb	r2, [r3, #0]
200006a4:	230b      	movs	r3, #11
200006a6:	18fb      	adds	r3, r7, r3
200006a8:	781b      	ldrb	r3, [r3, #0]
200006aa:	4313      	orrs	r3, r2
200006ac:	b2d9      	uxtb	r1, r3
200006ae:	4a05      	ldr	r2, [pc, #20]	; (200006c4 <pixel+0x84>)
200006b0:	68fb      	ldr	r3, [r7, #12]
200006b2:	18d3      	adds	r3, r2, r3
200006b4:	1c0a      	adds	r2, r1, #0
200006b6:	701a      	strb	r2, [r3, #0]
200006b8:	e000      	b.n	200006bc <pixel+0x7c>
		return;
200006ba:	46c0      	nop			; (mov r8, r8)
}
200006bc:	46bd      	mov	sp, r7
200006be:	b004      	add	sp, #16
200006c0:	bd80      	pop	{r7, pc}
200006c2:	46c0      	nop			; (mov r8, r8)
200006c4:	20001244 	andcs	r1, r0, r4, asr #4

200006c8 <graphic_draw_screen>:

void graphic_draw_screen(void) {
200006c8:	b580      	push	{r7, lr}
200006ca:	b084      	sub	sp, #16
200006cc:	af00      	add	r7, sp, #0
	uint8_t i, j, controller, c;
	unsigned int k = 0;
200006ce:	2300      	movs	r3, #0
200006d0:	60bb      	str	r3, [r7, #8]
	for(c = 0; c < 2; c++) {
200006d2:	230d      	movs	r3, #13
200006d4:	18fb      	adds	r3, r7, r3
200006d6:	2200      	movs	r2, #0
200006d8:	701a      	strb	r2, [r3, #0]
200006da:	e04f      	b.n	2000077c <graphic_draw_screen+0xb4>
		controller = (c == 0) ? B_CS1 : B_CS2;
200006dc:	230d      	movs	r3, #13
200006de:	18fb      	adds	r3, r7, r3
200006e0:	781b      	ldrb	r3, [r3, #0]
200006e2:	2b00      	cmp	r3, #0
200006e4:	d101      	bne.n	200006ea <graphic_draw_screen+0x22>
200006e6:	2208      	movs	r2, #8
200006e8:	e000      	b.n	200006ec <graphic_draw_screen+0x24>
200006ea:	2210      	movs	r2, #16
200006ec:	1dfb      	adds	r3, r7, #7
200006ee:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 8; j++) {
200006f0:	230e      	movs	r3, #14
200006f2:	18fb      	adds	r3, r7, r3
200006f4:	2200      	movs	r2, #0
200006f6:	701a      	strb	r2, [r3, #0]
200006f8:	e035      	b.n	20000766 <graphic_draw_screen+0x9e>
			graphic_write_command(LCD_SET_PAGE | j, controller);
200006fa:	230e      	movs	r3, #14
200006fc:	18fb      	adds	r3, r7, r3
200006fe:	781b      	ldrb	r3, [r3, #0]
20000700:	2248      	movs	r2, #72	; 0x48
20000702:	4252      	negs	r2, r2
20000704:	4313      	orrs	r3, r2
20000706:	b2da      	uxtb	r2, r3
20000708:	1dfb      	adds	r3, r7, #7
2000070a:	781b      	ldrb	r3, [r3, #0]
2000070c:	0019      	movs	r1, r3
2000070e:	0010      	movs	r0, r2
20000710:	f7ff fee6 	bl	200004e0 <graphic_write_command>
			graphic_write_command(LCD_SET_ADD | 0, controller);
20000714:	1dfb      	adds	r3, r7, #7
20000716:	781b      	ldrb	r3, [r3, #0]
20000718:	0019      	movs	r1, r3
2000071a:	2040      	movs	r0, #64	; 0x40
2000071c:	f7ff fee0 	bl	200004e0 <graphic_write_command>
			for(i = 0; i <= 63; i++, k++) {
20000720:	230f      	movs	r3, #15
20000722:	18fb      	adds	r3, r7, r3
20000724:	2200      	movs	r2, #0
20000726:	701a      	strb	r2, [r3, #0]
20000728:	e012      	b.n	20000750 <graphic_draw_screen+0x88>
				graphic_write_data(backBuffer[k], controller);
2000072a:	4a19      	ldr	r2, [pc, #100]	; (20000790 <graphic_draw_screen+0xc8>)
2000072c:	68bb      	ldr	r3, [r7, #8]
2000072e:	18d3      	adds	r3, r2, r3
20000730:	781a      	ldrb	r2, [r3, #0]
20000732:	1dfb      	adds	r3, r7, #7
20000734:	781b      	ldrb	r3, [r3, #0]
20000736:	0019      	movs	r1, r3
20000738:	0010      	movs	r0, r2
2000073a:	f7ff fef1 	bl	20000520 <graphic_write_data>
			for(i = 0; i <= 63; i++, k++) {
2000073e:	210f      	movs	r1, #15
20000740:	187b      	adds	r3, r7, r1
20000742:	781a      	ldrb	r2, [r3, #0]
20000744:	187b      	adds	r3, r7, r1
20000746:	3201      	adds	r2, #1
20000748:	701a      	strb	r2, [r3, #0]
2000074a:	68bb      	ldr	r3, [r7, #8]
2000074c:	3301      	adds	r3, #1
2000074e:	60bb      	str	r3, [r7, #8]
20000750:	230f      	movs	r3, #15
20000752:	18fb      	adds	r3, r7, r3
20000754:	781b      	ldrb	r3, [r3, #0]
20000756:	2b3f      	cmp	r3, #63	; 0x3f
20000758:	d9e7      	bls.n	2000072a <graphic_draw_screen+0x62>
		for(j = 0; j < 8; j++) {
2000075a:	210e      	movs	r1, #14
2000075c:	187b      	adds	r3, r7, r1
2000075e:	781a      	ldrb	r2, [r3, #0]
20000760:	187b      	adds	r3, r7, r1
20000762:	3201      	adds	r2, #1
20000764:	701a      	strb	r2, [r3, #0]
20000766:	230e      	movs	r3, #14
20000768:	18fb      	adds	r3, r7, r3
2000076a:	781b      	ldrb	r3, [r3, #0]
2000076c:	2b07      	cmp	r3, #7
2000076e:	d9c4      	bls.n	200006fa <graphic_draw_screen+0x32>
	for(c = 0; c < 2; c++) {
20000770:	210d      	movs	r1, #13
20000772:	187b      	adds	r3, r7, r1
20000774:	781a      	ldrb	r2, [r3, #0]
20000776:	187b      	adds	r3, r7, r1
20000778:	3201      	adds	r2, #1
2000077a:	701a      	strb	r2, [r3, #0]
2000077c:	230d      	movs	r3, #13
2000077e:	18fb      	adds	r3, r7, r3
20000780:	781b      	ldrb	r3, [r3, #0]
20000782:	2b01      	cmp	r3, #1
20000784:	d9aa      	bls.n	200006dc <graphic_draw_screen+0x14>
	}	}	}
}
20000786:	46c0      	nop			; (mov r8, r8)
20000788:	46bd      	mov	sp, r7
2000078a:	b004      	add	sp, #16
2000078c:	bd80      	pop	{r7, pc}
2000078e:	46c0      	nop			; (mov r8, r8)
20000790:	20001244 	andcs	r1, r0, r4, asr #4

20000794 <clear_backBuffer>:

void clear_backBuffer() {
20000794:	b580      	push	{r7, lr}
20000796:	b082      	sub	sp, #8
20000798:	af00      	add	r7, sp, #0
	int i;
	for (i = 0; i < 1024; i++)
2000079a:	2300      	movs	r3, #0
2000079c:	607b      	str	r3, [r7, #4]
2000079e:	e007      	b.n	200007b0 <clear_backBuffer+0x1c>
		backBuffer[i] = 0;
200007a0:	4a07      	ldr	r2, [pc, #28]	; (200007c0 <clear_backBuffer+0x2c>)
200007a2:	687b      	ldr	r3, [r7, #4]
200007a4:	18d3      	adds	r3, r2, r3
200007a6:	2200      	movs	r2, #0
200007a8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 1024; i++)
200007aa:	687b      	ldr	r3, [r7, #4]
200007ac:	3301      	adds	r3, #1
200007ae:	607b      	str	r3, [r7, #4]
200007b0:	687b      	ldr	r3, [r7, #4]
200007b2:	4a04      	ldr	r2, [pc, #16]	; (200007c4 <clear_backBuffer+0x30>)
200007b4:	4293      	cmp	r3, r2
200007b6:	ddf3      	ble.n	200007a0 <clear_backBuffer+0xc>
}
200007b8:	46c0      	nop			; (mov r8, r8)
200007ba:	46bd      	mov	sp, r7
200007bc:	b002      	add	sp, #8
200007be:	bd80      	pop	{r7, pc}
200007c0:	20001244 	andcs	r1, r0, r4, asr #4
200007c4:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

200007c8 <ascii_message>:
	clear_object,
	move_padd,
	set_object_speed
};

void ascii_message(){
200007c8:	b5b0      	push	{r4, r5, r7, lr}
200007ca:	b088      	sub	sp, #32
200007cc:	af00      	add	r7, sp, #0
	char *s;
	char test1[] = "Welcome ";
200007ce:	2410      	movs	r4, #16
200007d0:	193b      	adds	r3, r7, r4
200007d2:	4a19      	ldr	r2, [pc, #100]	; (20000838 <ascii_message+0x70>)
200007d4:	ca03      	ldmia	r2!, {r0, r1}
200007d6:	c303      	stmia	r3!, {r0, r1}
200007d8:	7812      	ldrb	r2, [r2, #0]
200007da:	701a      	strb	r2, [r3, #0]
	char test2[] = "to the game!";
200007dc:	003b      	movs	r3, r7
200007de:	4a17      	ldr	r2, [pc, #92]	; (2000083c <ascii_message+0x74>)
200007e0:	ca23      	ldmia	r2!, {r0, r1, r5}
200007e2:	c323      	stmia	r3!, {r0, r1, r5}
200007e4:	7812      	ldrb	r2, [r2, #0]
200007e6:	701a      	strb	r2, [r3, #0]
	ascii_gotoxy(1,1);
200007e8:	2101      	movs	r1, #1
200007ea:	2001      	movs	r0, #1
200007ec:	f7ff fd3e 	bl	2000026c <ascii_gotoxy>
	s = test1;
200007f0:	193b      	adds	r3, r7, r4
200007f2:	61fb      	str	r3, [r7, #28]
	while (*s){
200007f4:	e006      	b.n	20000804 <ascii_message+0x3c>
		ascii_write_char(*s++); // ascii_write_char
200007f6:	69fb      	ldr	r3, [r7, #28]
200007f8:	1c5a      	adds	r2, r3, #1
200007fa:	61fa      	str	r2, [r7, #28]
200007fc:	781b      	ldrb	r3, [r3, #0]
200007fe:	0018      	movs	r0, r3
20000800:	f7ff fd16 	bl	20000230 <ascii_write_char>
	while (*s){
20000804:	69fb      	ldr	r3, [r7, #28]
20000806:	781b      	ldrb	r3, [r3, #0]
20000808:	2b00      	cmp	r3, #0
2000080a:	d1f4      	bne.n	200007f6 <ascii_message+0x2e>
	}
	ascii_gotoxy(1,2);
2000080c:	2102      	movs	r1, #2
2000080e:	2001      	movs	r0, #1
20000810:	f7ff fd2c 	bl	2000026c <ascii_gotoxy>
	s = test2;
20000814:	003b      	movs	r3, r7
20000816:	61fb      	str	r3, [r7, #28]
	while (*s){
20000818:	e006      	b.n	20000828 <ascii_message+0x60>
		ascii_write_char(*s++); // ascii_write_char
2000081a:	69fb      	ldr	r3, [r7, #28]
2000081c:	1c5a      	adds	r2, r3, #1
2000081e:	61fa      	str	r2, [r7, #28]
20000820:	781b      	ldrb	r3, [r3, #0]
20000822:	0018      	movs	r0, r3
20000824:	f7ff fd04 	bl	20000230 <ascii_write_char>
	while (*s){
20000828:	69fb      	ldr	r3, [r7, #28]
2000082a:	781b      	ldrb	r3, [r3, #0]
2000082c:	2b00      	cmp	r3, #0
2000082e:	d1f4      	bne.n	2000081a <ascii_message+0x52>
	}
}
20000830:	46c0      	nop			; (mov r8, r8)
20000832:	46bd      	mov	sp, r7
20000834:	b008      	add	sp, #32
20000836:	bdb0      	pop	{r4, r5, r7, pc}
20000838:	200018a8 	andcs	r1, r0, r8, lsr #17
2000083c:	200018b4 			; <UNDEFINED> instruction: 0x200018b4

20000840 <init_spel>:

void init_spel(){
20000840:	b580      	push	{r7, lr}
20000842:	af00      	add	r7, sp, #0
	GPIO_MODER_E = 0x55555555;
20000844:	4b03      	ldr	r3, [pc, #12]	; (20000854 <init_spel+0x14>)
20000846:	4a04      	ldr	r2, [pc, #16]	; (20000858 <init_spel+0x18>)
20000848:	601a      	str	r2, [r3, #0]
	ascii_init();
2000084a:	f7ff fcd4 	bl	200001f6 <ascii_init>
	//ascii_message();
}
2000084e:	46c0      	nop			; (mov r8, r8)
20000850:	46bd      	mov	sp, r7
20000852:	bd80      	pop	{r7, pc}
20000854:	40021000 	andmi	r1, r2, r0
20000858:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000085c <main>:
	set_sprite_speed
};
*/

int main(int argc, char **argv)
{
2000085c:	b590      	push	{r4, r7, lr}
2000085e:	b09b      	sub	sp, #108	; 0x6c
20000860:	af00      	add	r7, sp, #0
20000862:	6078      	str	r0, [r7, #4]
20000864:	6039      	str	r1, [r7, #0]
	init_spel();
20000866:	f7ff ffeb 	bl	20000840 <init_spel>
	POBJECT ppadd=&padd;
2000086a:	4b4e      	ldr	r3, [pc, #312]	; (200009a4 <main+0x148>)
2000086c:	65bb      	str	r3, [r7, #88]	; 0x58
	POBJECT pball = &ball;
2000086e:	4b4e      	ldr	r3, [pc, #312]	; (200009a8 <main+0x14c>)
20000870:	657b      	str	r3, [r7, #84]	; 0x54
	POBJECT sq_1 = &square_1;
20000872:	4b4e      	ldr	r3, [pc, #312]	; (200009ac <main+0x150>)
20000874:	653b      	str	r3, [r7, #80]	; 0x50
	POBJECT sq_2 = &square_2;
20000876:	4b4e      	ldr	r3, [pc, #312]	; (200009b0 <main+0x154>)
20000878:	64fb      	str	r3, [r7, #76]	; 0x4c
	POBJECT sq_3 = &square_3;
2000087a:	4b4e      	ldr	r3, [pc, #312]	; (200009b4 <main+0x158>)
2000087c:	64bb      	str	r3, [r7, #72]	; 0x48
	POBJECT sq_4 = &square_4;
2000087e:	4b4e      	ldr	r3, [pc, #312]	; (200009b8 <main+0x15c>)
20000880:	647b      	str	r3, [r7, #68]	; 0x44
	POBJECT sq_5 = &square_5;
20000882:	4b4e      	ldr	r3, [pc, #312]	; (200009bc <main+0x160>)
20000884:	643b      	str	r3, [r7, #64]	; 0x40
	POBJECT sq_6 = &square_6;
20000886:	4b4e      	ldr	r3, [pc, #312]	; (200009c0 <main+0x164>)
20000888:	63fb      	str	r3, [r7, #60]	; 0x3c
	POBJECT sq_7 = &square_7;
2000088a:	4b4e      	ldr	r3, [pc, #312]	; (200009c4 <main+0x168>)
2000088c:	63bb      	str	r3, [r7, #56]	; 0x38
	POBJECT sq_8 = &square_8;
2000088e:	4b4e      	ldr	r3, [pc, #312]	; (200009c8 <main+0x16c>)
20000890:	637b      	str	r3, [r7, #52]	; 0x34
	POBJECT sq_9 = &square_9;
20000892:	4b4e      	ldr	r3, [pc, #312]	; (200009cc <main+0x170>)
20000894:	633b      	str	r3, [r7, #48]	; 0x30
	POBJECT arr[] = {sq_1, sq_2, sq_3, sq_4, sq_5, sq_6, sq_7, sq_8, sq_9};
20000896:	2108      	movs	r1, #8
20000898:	187b      	adds	r3, r7, r1
2000089a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
2000089c:	601a      	str	r2, [r3, #0]
2000089e:	187b      	adds	r3, r7, r1
200008a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
200008a2:	605a      	str	r2, [r3, #4]
200008a4:	187b      	adds	r3, r7, r1
200008a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
200008a8:	609a      	str	r2, [r3, #8]
200008aa:	187b      	adds	r3, r7, r1
200008ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
200008ae:	60da      	str	r2, [r3, #12]
200008b0:	187b      	adds	r3, r7, r1
200008b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
200008b4:	611a      	str	r2, [r3, #16]
200008b6:	187b      	adds	r3, r7, r1
200008b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
200008ba:	615a      	str	r2, [r3, #20]
200008bc:	187b      	adds	r3, r7, r1
200008be:	6bba      	ldr	r2, [r7, #56]	; 0x38
200008c0:	619a      	str	r2, [r3, #24]
200008c2:	187b      	adds	r3, r7, r1
200008c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
200008c6:	61da      	str	r2, [r3, #28]
200008c8:	187b      	adds	r3, r7, r1
200008ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
200008cc:	621a      	str	r2, [r3, #32]
	
	graphic_init();
200008ce:	f7ff fe5f 	bl	20000590 <graphic_init>
#ifndef	SIMULATOR
	graphic_clear_screen();
#endif
	int test = (sizeof(arr) / sizeof(arr[0]));
200008d2:	2309      	movs	r3, #9
200008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	int x = 0;
200008d6:	2300      	movs	r3, #0
200008d8:	667b      	str	r3, [r7, #100]	; 0x64
	int i = 0;
200008da:	2300      	movs	r3, #0
200008dc:	663b      	str	r3, [r7, #96]	; 0x60
	for (; i <= (test-1); i++, x += 10){
200008de:	e02d      	b.n	2000093c <main+0xe0>
//				if(x > 64)
					
				arr[i]->set_speed(arr[i], x, 0);
200008e0:	2108      	movs	r1, #8
200008e2:	187b      	adds	r3, r7, r1
200008e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
200008e6:	0092      	lsls	r2, r2, #2
200008e8:	58d3      	ldr	r3, [r2, r3]
200008ea:	6a1b      	ldr	r3, [r3, #32]
200008ec:	000c      	movs	r4, r1
200008ee:	187a      	adds	r2, r7, r1
200008f0:	6e39      	ldr	r1, [r7, #96]	; 0x60
200008f2:	0089      	lsls	r1, r1, #2
200008f4:	5888      	ldr	r0, [r1, r2]
200008f6:	6e79      	ldr	r1, [r7, #100]	; 0x64
200008f8:	2200      	movs	r2, #0
200008fa:	4798      	blx	r3
				arr[i]->move(arr[i]);
200008fc:	0021      	movs	r1, r4
200008fe:	187b      	adds	r3, r7, r1
20000900:	6e3a      	ldr	r2, [r7, #96]	; 0x60
20000902:	0092      	lsls	r2, r2, #2
20000904:	58d3      	ldr	r3, [r2, r3]
20000906:	69db      	ldr	r3, [r3, #28]
20000908:	000c      	movs	r4, r1
2000090a:	187a      	adds	r2, r7, r1
2000090c:	6e39      	ldr	r1, [r7, #96]	; 0x60
2000090e:	0089      	lsls	r1, r1, #2
20000910:	588a      	ldr	r2, [r1, r2]
20000912:	0010      	movs	r0, r2
20000914:	4798      	blx	r3
				arr[i]->set_speed(arr[i], 0, 0);
20000916:	0021      	movs	r1, r4
20000918:	187b      	adds	r3, r7, r1
2000091a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
2000091c:	0092      	lsls	r2, r2, #2
2000091e:	58d3      	ldr	r3, [r2, r3]
20000920:	6a1b      	ldr	r3, [r3, #32]
20000922:	187a      	adds	r2, r7, r1
20000924:	6e39      	ldr	r1, [r7, #96]	; 0x60
20000926:	0089      	lsls	r1, r1, #2
20000928:	5888      	ldr	r0, [r1, r2]
2000092a:	2200      	movs	r2, #0
2000092c:	2100      	movs	r1, #0
2000092e:	4798      	blx	r3
	for (; i <= (test-1); i++, x += 10){
20000930:	6e3b      	ldr	r3, [r7, #96]	; 0x60
20000932:	3301      	adds	r3, #1
20000934:	663b      	str	r3, [r7, #96]	; 0x60
20000936:	6e7b      	ldr	r3, [r7, #100]	; 0x64
20000938:	330a      	adds	r3, #10
2000093a:	667b      	str	r3, [r7, #100]	; 0x64
2000093c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2000093e:	3b01      	subs	r3, #1
20000940:	6e3a      	ldr	r2, [r7, #96]	; 0x60
20000942:	429a      	cmp	r2, r3
20000944:	ddcc      	ble.n	200008e0 <main+0x84>
//				arr[i]->draw(arr[i]);
	}
//	graphic_draw_screen();
	while(1){
		clear_backBuffer();
20000946:	f7ff ff25 	bl	20000794 <clear_backBuffer>
		pball->move(pball);
2000094a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
2000094c:	69db      	ldr	r3, [r3, #28]
2000094e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
20000950:	0010      	movs	r0, r2
20000952:	4798      	blx	r3
//		delay_milli(20);
		ppadd->move(ppadd);
20000954:	6dbb      	ldr	r3, [r7, #88]	; 0x58
20000956:	69db      	ldr	r3, [r3, #28]
20000958:	6dba      	ldr	r2, [r7, #88]	; 0x58
2000095a:	0010      	movs	r0, r2
2000095c:	4798      	blx	r3
		padd_studs(pball,ppadd);
2000095e:	6dba      	ldr	r2, [r7, #88]	; 0x58
20000960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
20000962:	0011      	movs	r1, r2
20000964:	0018      	movs	r0, r3
20000966:	f000 fa4a 	bl	20000dfe <padd_studs>
//		p->move(p);
		for (int f = 0; f <= (test-1); f++){
2000096a:	2300      	movs	r3, #0
2000096c:	65fb      	str	r3, [r7, #92]	; 0x5c
2000096e:	e00e      	b.n	2000098e <main+0x132>
				arr[f]->draw(arr[f]);
20000970:	2108      	movs	r1, #8
20000972:	187b      	adds	r3, r7, r1
20000974:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
20000976:	0092      	lsls	r2, r2, #2
20000978:	58d3      	ldr	r3, [r2, r3]
2000097a:	695b      	ldr	r3, [r3, #20]
2000097c:	187a      	adds	r2, r7, r1
2000097e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
20000980:	0089      	lsls	r1, r1, #2
20000982:	588a      	ldr	r2, [r1, r2]
20000984:	0010      	movs	r0, r2
20000986:	4798      	blx	r3
		for (int f = 0; f <= (test-1); f++){
20000988:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
2000098a:	3301      	adds	r3, #1
2000098c:	65fb      	str	r3, [r7, #92]	; 0x5c
2000098e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000990:	3b01      	subs	r3, #1
20000992:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
20000994:	429a      	cmp	r2, r3
20000996:	ddeb      	ble.n	20000970 <main+0x114>
		
//		sq_1->draw(sq_1);
//		sq_2->draw(sq_2);
//		sq_3->draw(sq_3);
//		Pship->move_sp(Pship);
		graphic_draw_screen();
20000998:	f7ff fe96 	bl	200006c8 <graphic_draw_screen>
		//delay_milli(40); //25 fps
		graphic_clear_screen();
2000099c:	f7ff fe24 	bl	200005e8 <graphic_clear_screen>
		clear_backBuffer();
200009a0:	e7d1      	b.n	20000946 <main+0xea>
200009a2:	46c0      	nop			; (mov r8, r8)
200009a4:	20001884 	andcs	r1, r0, r4, lsl #17
200009a8:	20001860 	andcs	r1, r0, r0, ror #16
200009ac:	2000171c 	andcs	r1, r0, ip, lsl r7
200009b0:	20001740 	andcs	r1, r0, r0, asr #14
200009b4:	20001764 	andcs	r1, r0, r4, ror #14
200009b8:	20001788 	andcs	r1, r0, r8, lsl #15
200009bc:	200017ac 	andcs	r1, r0, ip, lsr #15
200009c0:	200017d0 	ldrdcs	r1, [r0], -r0
200009c4:	200017f4 	strdcs	r1, [r0], -r4
200009c8:	20001818 	andcs	r1, r0, r8, lsl r8
200009cc:	2000183c 	andcs	r1, r0, ip, lsr r8

200009d0 <set_object_speed>:
#include "game_startup.h"
#include <math.h>
//#include "plant.xbm"

void set_object_speed(POBJECT o, int speedx, int speedy){
200009d0:	b580      	push	{r7, lr}
200009d2:	b084      	sub	sp, #16
200009d4:	af00      	add	r7, sp, #0
200009d6:	60f8      	str	r0, [r7, #12]
200009d8:	60b9      	str	r1, [r7, #8]
200009da:	607a      	str	r2, [r7, #4]
	o->dirx = speedx;
200009dc:	68fb      	ldr	r3, [r7, #12]
200009de:	68ba      	ldr	r2, [r7, #8]
200009e0:	605a      	str	r2, [r3, #4]
	o->diry = speedy;
200009e2:	68fb      	ldr	r3, [r7, #12]
200009e4:	687a      	ldr	r2, [r7, #4]
200009e6:	609a      	str	r2, [r3, #8]
}	
200009e8:	46c0      	nop			; (mov r8, r8)
200009ea:	46bd      	mov	sp, r7
200009ec:	b004      	add	sp, #16
200009ee:	bd80      	pop	{r7, pc}

200009f0 <set_sprite_speed>:

void set_sprite_speed (PSPRITE s, int sp_speedx, int sp_speedy){
200009f0:	b580      	push	{r7, lr}
200009f2:	b084      	sub	sp, #16
200009f4:	af00      	add	r7, sp, #0
200009f6:	60f8      	str	r0, [r7, #12]
200009f8:	60b9      	str	r1, [r7, #8]
200009fa:	607a      	str	r2, [r7, #4]
	s->dirx_sp = sp_speedx;
200009fc:	68fb      	ldr	r3, [r7, #12]
200009fe:	68ba      	ldr	r2, [r7, #8]
20000a00:	605a      	str	r2, [r3, #4]
	s->diry_sp = sp_speedy;
20000a02:	68fb      	ldr	r3, [r7, #12]
20000a04:	687a      	ldr	r2, [r7, #4]
20000a06:	609a      	str	r2, [r3, #8]
}
20000a08:	46c0      	nop			; (mov r8, r8)
20000a0a:	46bd      	mov	sp, r7
20000a0c:	b004      	add	sp, #16
20000a0e:	bd80      	pop	{r7, pc}

20000a10 <draw_object>:
 
void draw_object(POBJECT o){
20000a10:	b580      	push	{r7, lr}
20000a12:	b084      	sub	sp, #16
20000a14:	af00      	add	r7, sp, #0
20000a16:	6078      	str	r0, [r7, #4]
	for(int i= 0; i<= o->geo->numpoints; i++){
20000a18:	2300      	movs	r3, #0
20000a1a:	60fb      	str	r3, [r7, #12]
20000a1c:	e01c      	b.n	20000a58 <draw_object+0x48>
		pixel(o->posx + o->geo->px[i].x, o->posy + o->geo->px[i].y);
20000a1e:	687b      	ldr	r3, [r7, #4]
20000a20:	68da      	ldr	r2, [r3, #12]
20000a22:	687b      	ldr	r3, [r7, #4]
20000a24:	6819      	ldr	r1, [r3, #0]
20000a26:	68fb      	ldr	r3, [r7, #12]
20000a28:	3304      	adds	r3, #4
20000a2a:	005b      	lsls	r3, r3, #1
20000a2c:	18cb      	adds	r3, r1, r3
20000a2e:	3304      	adds	r3, #4
20000a30:	781b      	ldrb	r3, [r3, #0]
20000a32:	18d3      	adds	r3, r2, r3
20000a34:	0018      	movs	r0, r3
20000a36:	687b      	ldr	r3, [r7, #4]
20000a38:	691a      	ldr	r2, [r3, #16]
20000a3a:	687b      	ldr	r3, [r7, #4]
20000a3c:	6819      	ldr	r1, [r3, #0]
20000a3e:	68fb      	ldr	r3, [r7, #12]
20000a40:	3304      	adds	r3, #4
20000a42:	005b      	lsls	r3, r3, #1
20000a44:	18cb      	adds	r3, r1, r3
20000a46:	3305      	adds	r3, #5
20000a48:	781b      	ldrb	r3, [r3, #0]
20000a4a:	18d3      	adds	r3, r2, r3
20000a4c:	0019      	movs	r1, r3
20000a4e:	f7ff fdf7 	bl	20000640 <pixel>
	for(int i= 0; i<= o->geo->numpoints; i++){
20000a52:	68fb      	ldr	r3, [r7, #12]
20000a54:	3301      	adds	r3, #1
20000a56:	60fb      	str	r3, [r7, #12]
20000a58:	687b      	ldr	r3, [r7, #4]
20000a5a:	681b      	ldr	r3, [r3, #0]
20000a5c:	681b      	ldr	r3, [r3, #0]
20000a5e:	68fa      	ldr	r2, [r7, #12]
20000a60:	429a      	cmp	r2, r3
20000a62:	dddc      	ble.n	20000a1e <draw_object+0xe>
	}
}
20000a64:	46c0      	nop			; (mov r8, r8)
20000a66:	46bd      	mov	sp, r7
20000a68:	b004      	add	sp, #16
20000a6a:	bd80      	pop	{r7, pc}

20000a6c <draw_sprite>:

void draw_sprite(sprite *s, int x, int y) {
20000a6c:	b580      	push	{r7, lr}
20000a6e:	b08a      	sub	sp, #40	; 0x28
20000a70:	af00      	add	r7, sp, #0
20000a72:	60f8      	str	r0, [r7, #12]
20000a74:	60b9      	str	r1, [r7, #8]
20000a76:	607a      	str	r2, [r7, #4]
	int i,j,k, width_in_bytes;
	if (s->width % 8 == 0)
20000a78:	68fb      	ldr	r3, [r7, #12]
20000a7a:	7d1b      	ldrb	r3, [r3, #20]
20000a7c:	2207      	movs	r2, #7
20000a7e:	4013      	ands	r3, r2
20000a80:	b2db      	uxtb	r3, r3
20000a82:	2b00      	cmp	r3, #0
20000a84:	d105      	bne.n	20000a92 <draw_sprite+0x26>
		width_in_bytes = s->width / 8;
20000a86:	68fb      	ldr	r3, [r7, #12]
20000a88:	7d1b      	ldrb	r3, [r3, #20]
20000a8a:	08db      	lsrs	r3, r3, #3
20000a8c:	b2db      	uxtb	r3, r3
20000a8e:	61bb      	str	r3, [r7, #24]
20000a90:	e005      	b.n	20000a9e <draw_sprite+0x32>
	else
		width_in_bytes = s->width / 8 + 1;
20000a92:	68fb      	ldr	r3, [r7, #12]
20000a94:	7d1b      	ldrb	r3, [r3, #20]
20000a96:	08db      	lsrs	r3, r3, #3
20000a98:	b2db      	uxtb	r3, r3
20000a9a:	3301      	adds	r3, #1
20000a9c:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < s->height; i++){
20000a9e:	2300      	movs	r3, #0
20000aa0:	627b      	str	r3, [r7, #36]	; 0x24
20000aa2:	e054      	b.n	20000b4e <draw_sprite+0xe2>
		for (j = 0; j < width_in_bytes; j++) {
20000aa4:	2300      	movs	r3, #0
20000aa6:	623b      	str	r3, [r7, #32]
20000aa8:	e04a      	b.n	20000b40 <draw_sprite+0xd4>
			unsigned char byte = s->data[i * width_in_bytes + j];
20000aaa:	68fb      	ldr	r3, [r7, #12]
20000aac:	699b      	ldr	r3, [r3, #24]
20000aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000ab0:	69b9      	ldr	r1, [r7, #24]
20000ab2:	4351      	muls	r1, r2
20000ab4:	6a3a      	ldr	r2, [r7, #32]
20000ab6:	188a      	adds	r2, r1, r2
20000ab8:	189a      	adds	r2, r3, r2
20000aba:	2313      	movs	r3, #19
20000abc:	18fb      	adds	r3, r7, r3
20000abe:	7812      	ldrb	r2, [r2, #0]
20000ac0:	701a      	strb	r2, [r3, #0]
			for (k =0; k < 8; k++) {
20000ac2:	2300      	movs	r3, #0
20000ac4:	61fb      	str	r3, [r7, #28]
20000ac6:	e035      	b.n	20000b34 <draw_sprite+0xc8>
				for(int h = 0; h <= s->geo->numpoints; h++){
20000ac8:	2300      	movs	r3, #0
20000aca:	617b      	str	r3, [r7, #20]
20000acc:	e029      	b.n	20000b22 <draw_sprite+0xb6>
					if (byte & (1 << k))
20000ace:	2313      	movs	r3, #19
20000ad0:	18fb      	adds	r3, r7, r3
20000ad2:	781a      	ldrb	r2, [r3, #0]
20000ad4:	69fb      	ldr	r3, [r7, #28]
20000ad6:	411a      	asrs	r2, r3
20000ad8:	0013      	movs	r3, r2
20000ada:	2201      	movs	r2, #1
20000adc:	4013      	ands	r3, r2
20000ade:	d01d      	beq.n	20000b1c <draw_sprite+0xb0>
						pixel(8 * j + k + s->geo->px[i].x + 1, i + s->geo->px[i].y + 1);
20000ae0:	6a3b      	ldr	r3, [r7, #32]
20000ae2:	00da      	lsls	r2, r3, #3
20000ae4:	69fb      	ldr	r3, [r7, #28]
20000ae6:	18d2      	adds	r2, r2, r3
20000ae8:	68fb      	ldr	r3, [r7, #12]
20000aea:	6819      	ldr	r1, [r3, #0]
20000aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000aee:	3304      	adds	r3, #4
20000af0:	005b      	lsls	r3, r3, #1
20000af2:	18cb      	adds	r3, r1, r3
20000af4:	3304      	adds	r3, #4
20000af6:	781b      	ldrb	r3, [r3, #0]
20000af8:	18d3      	adds	r3, r2, r3
20000afa:	3301      	adds	r3, #1
20000afc:	0018      	movs	r0, r3
20000afe:	68fb      	ldr	r3, [r7, #12]
20000b00:	681a      	ldr	r2, [r3, #0]
20000b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000b04:	3304      	adds	r3, #4
20000b06:	005b      	lsls	r3, r3, #1
20000b08:	18d3      	adds	r3, r2, r3
20000b0a:	3305      	adds	r3, #5
20000b0c:	781b      	ldrb	r3, [r3, #0]
20000b0e:	001a      	movs	r2, r3
20000b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000b12:	18d3      	adds	r3, r2, r3
20000b14:	3301      	adds	r3, #1
20000b16:	0019      	movs	r1, r3
20000b18:	f7ff fd92 	bl	20000640 <pixel>
				for(int h = 0; h <= s->geo->numpoints; h++){
20000b1c:	697b      	ldr	r3, [r7, #20]
20000b1e:	3301      	adds	r3, #1
20000b20:	617b      	str	r3, [r7, #20]
20000b22:	68fb      	ldr	r3, [r7, #12]
20000b24:	681b      	ldr	r3, [r3, #0]
20000b26:	681b      	ldr	r3, [r3, #0]
20000b28:	697a      	ldr	r2, [r7, #20]
20000b2a:	429a      	cmp	r2, r3
20000b2c:	ddcf      	ble.n	20000ace <draw_sprite+0x62>
			for (k =0; k < 8; k++) {
20000b2e:	69fb      	ldr	r3, [r7, #28]
20000b30:	3301      	adds	r3, #1
20000b32:	61fb      	str	r3, [r7, #28]
20000b34:	69fb      	ldr	r3, [r7, #28]
20000b36:	2b07      	cmp	r3, #7
20000b38:	ddc6      	ble.n	20000ac8 <draw_sprite+0x5c>
		for (j = 0; j < width_in_bytes; j++) {
20000b3a:	6a3b      	ldr	r3, [r7, #32]
20000b3c:	3301      	adds	r3, #1
20000b3e:	623b      	str	r3, [r7, #32]
20000b40:	6a3a      	ldr	r2, [r7, #32]
20000b42:	69bb      	ldr	r3, [r7, #24]
20000b44:	429a      	cmp	r2, r3
20000b46:	dbb0      	blt.n	20000aaa <draw_sprite+0x3e>
	for (i = 0; i < s->height; i++){
20000b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000b4a:	3301      	adds	r3, #1
20000b4c:	627b      	str	r3, [r7, #36]	; 0x24
20000b4e:	68fb      	ldr	r3, [r7, #12]
20000b50:	7d5b      	ldrb	r3, [r3, #21]
20000b52:	001a      	movs	r2, r3
20000b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000b56:	4293      	cmp	r3, r2
20000b58:	dba4      	blt.n	20000aa4 <draw_sprite+0x38>
				}
			}
		}
	}
}
20000b5a:	46c0      	nop			; (mov r8, r8)
20000b5c:	46bd      	mov	sp, r7
20000b5e:	b00a      	add	sp, #40	; 0x28
20000b60:	bd80      	pop	{r7, pc}

20000b62 <clear_object>:


void clear_object(POBJECT o){
20000b62:	b580      	push	{r7, lr}
20000b64:	b084      	sub	sp, #16
20000b66:	af00      	add	r7, sp, #0
20000b68:	6078      	str	r0, [r7, #4]
	for(int i= 0; i<= o->geo->numpoints; i++){
20000b6a:	2300      	movs	r3, #0
20000b6c:	60fb      	str	r3, [r7, #12]
20000b6e:	e01c      	b.n	20000baa <clear_object+0x48>
		 pixel(o->posx + o->geo->px[i].x, o->posy + o->geo->px[i].y);
20000b70:	687b      	ldr	r3, [r7, #4]
20000b72:	68da      	ldr	r2, [r3, #12]
20000b74:	687b      	ldr	r3, [r7, #4]
20000b76:	6819      	ldr	r1, [r3, #0]
20000b78:	68fb      	ldr	r3, [r7, #12]
20000b7a:	3304      	adds	r3, #4
20000b7c:	005b      	lsls	r3, r3, #1
20000b7e:	18cb      	adds	r3, r1, r3
20000b80:	3304      	adds	r3, #4
20000b82:	781b      	ldrb	r3, [r3, #0]
20000b84:	18d3      	adds	r3, r2, r3
20000b86:	0018      	movs	r0, r3
20000b88:	687b      	ldr	r3, [r7, #4]
20000b8a:	691a      	ldr	r2, [r3, #16]
20000b8c:	687b      	ldr	r3, [r7, #4]
20000b8e:	6819      	ldr	r1, [r3, #0]
20000b90:	68fb      	ldr	r3, [r7, #12]
20000b92:	3304      	adds	r3, #4
20000b94:	005b      	lsls	r3, r3, #1
20000b96:	18cb      	adds	r3, r1, r3
20000b98:	3305      	adds	r3, #5
20000b9a:	781b      	ldrb	r3, [r3, #0]
20000b9c:	18d3      	adds	r3, r2, r3
20000b9e:	0019      	movs	r1, r3
20000ba0:	f7ff fd4e 	bl	20000640 <pixel>
	for(int i= 0; i<= o->geo->numpoints; i++){
20000ba4:	68fb      	ldr	r3, [r7, #12]
20000ba6:	3301      	adds	r3, #1
20000ba8:	60fb      	str	r3, [r7, #12]
20000baa:	687b      	ldr	r3, [r7, #4]
20000bac:	681b      	ldr	r3, [r3, #0]
20000bae:	681b      	ldr	r3, [r3, #0]
20000bb0:	68fa      	ldr	r2, [r7, #12]
20000bb2:	429a      	cmp	r2, r3
20000bb4:	dddc      	ble.n	20000b70 <clear_object+0xe>
	}
}
20000bb6:	46c0      	nop			; (mov r8, r8)
20000bb8:	46bd      	mov	sp, r7
20000bba:	b004      	add	sp, #16
20000bbc:	bd80      	pop	{r7, pc}

20000bbe <clear_sprite>:

void clear_sprite(PSPRITE s){
20000bbe:	b580      	push	{r7, lr}
20000bc0:	b082      	sub	sp, #8
20000bc2:	af00      	add	r7, sp, #0
20000bc4:	6078      	str	r0, [r7, #4]
	
}
20000bc6:	46c0      	nop			; (mov r8, r8)
20000bc8:	46bd      	mov	sp, r7
20000bca:	b002      	add	sp, #8
20000bcc:	bd80      	pop	{r7, pc}

20000bce <move_object>:

void move_object(POBJECT o){
20000bce:	b590      	push	{r4, r7, lr}
20000bd0:	b083      	sub	sp, #12
20000bd2:	af00      	add	r7, sp, #0
20000bd4:	6078      	str	r0, [r7, #4]
//	o->clear(o);
	
	if(o->posx < 1)
20000bd6:	687b      	ldr	r3, [r7, #4]
20000bd8:	68db      	ldr	r3, [r3, #12]
20000bda:	2b00      	cmp	r3, #0
20000bdc:	dc09      	bgt.n	20000bf2 <move_object+0x24>
		o->set_speed(o, o->dirx*(-1), o->diry);
20000bde:	687b      	ldr	r3, [r7, #4]
20000be0:	6a1c      	ldr	r4, [r3, #32]
20000be2:	687b      	ldr	r3, [r7, #4]
20000be4:	685b      	ldr	r3, [r3, #4]
20000be6:	4259      	negs	r1, r3
20000be8:	687b      	ldr	r3, [r7, #4]
20000bea:	689a      	ldr	r2, [r3, #8]
20000bec:	687b      	ldr	r3, [r7, #4]
20000bee:	0018      	movs	r0, r3
20000bf0:	47a0      	blx	r4
	
	if(o->posx > 128)
20000bf2:	687b      	ldr	r3, [r7, #4]
20000bf4:	68db      	ldr	r3, [r3, #12]
20000bf6:	2b80      	cmp	r3, #128	; 0x80
20000bf8:	dd09      	ble.n	20000c0e <move_object+0x40>
		o->set_speed(o, -o->dirx, o->diry);
20000bfa:	687b      	ldr	r3, [r7, #4]
20000bfc:	6a1c      	ldr	r4, [r3, #32]
20000bfe:	687b      	ldr	r3, [r7, #4]
20000c00:	685b      	ldr	r3, [r3, #4]
20000c02:	4259      	negs	r1, r3
20000c04:	687b      	ldr	r3, [r7, #4]
20000c06:	689a      	ldr	r2, [r3, #8]
20000c08:	687b      	ldr	r3, [r7, #4]
20000c0a:	0018      	movs	r0, r3
20000c0c:	47a0      	blx	r4
		
	if(o->posy < 1)
20000c0e:	687b      	ldr	r3, [r7, #4]
20000c10:	691b      	ldr	r3, [r3, #16]
20000c12:	2b00      	cmp	r3, #0
20000c14:	dc09      	bgt.n	20000c2a <move_object+0x5c>
		o->set_speed(o, o->dirx, -o->diry);
20000c16:	687b      	ldr	r3, [r7, #4]
20000c18:	6a1c      	ldr	r4, [r3, #32]
20000c1a:	687b      	ldr	r3, [r7, #4]
20000c1c:	6859      	ldr	r1, [r3, #4]
20000c1e:	687b      	ldr	r3, [r7, #4]
20000c20:	689b      	ldr	r3, [r3, #8]
20000c22:	425a      	negs	r2, r3
20000c24:	687b      	ldr	r3, [r7, #4]
20000c26:	0018      	movs	r0, r3
20000c28:	47a0      	blx	r4
		
	if(o->posy > 64)
20000c2a:	687b      	ldr	r3, [r7, #4]
20000c2c:	691b      	ldr	r3, [r3, #16]
20000c2e:	2b40      	cmp	r3, #64	; 0x40
20000c30:	dd09      	ble.n	20000c46 <move_object+0x78>
		o->set_speed(o, o->dirx, -o->diry);
20000c32:	687b      	ldr	r3, [r7, #4]
20000c34:	6a1c      	ldr	r4, [r3, #32]
20000c36:	687b      	ldr	r3, [r7, #4]
20000c38:	6859      	ldr	r1, [r3, #4]
20000c3a:	687b      	ldr	r3, [r7, #4]
20000c3c:	689b      	ldr	r3, [r3, #8]
20000c3e:	425a      	negs	r2, r3
20000c40:	687b      	ldr	r3, [r7, #4]
20000c42:	0018      	movs	r0, r3
20000c44:	47a0      	blx	r4
	
	o->posx = o->posx + o->dirx;
20000c46:	687b      	ldr	r3, [r7, #4]
20000c48:	68da      	ldr	r2, [r3, #12]
20000c4a:	687b      	ldr	r3, [r7, #4]
20000c4c:	685b      	ldr	r3, [r3, #4]
20000c4e:	18d2      	adds	r2, r2, r3
20000c50:	687b      	ldr	r3, [r7, #4]
20000c52:	60da      	str	r2, [r3, #12]
	o->posy = o->posy + o->diry;
20000c54:	687b      	ldr	r3, [r7, #4]
20000c56:	691a      	ldr	r2, [r3, #16]
20000c58:	687b      	ldr	r3, [r7, #4]
20000c5a:	689b      	ldr	r3, [r3, #8]
20000c5c:	18d2      	adds	r2, r2, r3
20000c5e:	687b      	ldr	r3, [r7, #4]
20000c60:	611a      	str	r2, [r3, #16]
	o->draw(o);
20000c62:	687b      	ldr	r3, [r7, #4]
20000c64:	695b      	ldr	r3, [r3, #20]
20000c66:	687a      	ldr	r2, [r7, #4]
20000c68:	0010      	movs	r0, r2
20000c6a:	4798      	blx	r3
}
20000c6c:	46c0      	nop			; (mov r8, r8)
20000c6e:	46bd      	mov	sp, r7
20000c70:	b003      	add	sp, #12
20000c72:	bd90      	pop	{r4, r7, pc}

20000c74 <move_sprite>:

void move_sprite(PSPRITE s){
20000c74:	b590      	push	{r4, r7, lr}
20000c76:	b083      	sub	sp, #12
20000c78:	af00      	add	r7, sp, #0
20000c7a:	6078      	str	r0, [r7, #4]
	if(s->posx_sp < 1)
20000c7c:	687b      	ldr	r3, [r7, #4]
20000c7e:	68db      	ldr	r3, [r3, #12]
20000c80:	2b00      	cmp	r3, #0
20000c82:	dc09      	bgt.n	20000c98 <move_sprite+0x24>
		s->set_speed_sp(s, s->dirx_sp*(-1), s->diry_sp);
20000c84:	687b      	ldr	r3, [r7, #4]
20000c86:	6a9c      	ldr	r4, [r3, #40]	; 0x28
20000c88:	687b      	ldr	r3, [r7, #4]
20000c8a:	685b      	ldr	r3, [r3, #4]
20000c8c:	4259      	negs	r1, r3
20000c8e:	687b      	ldr	r3, [r7, #4]
20000c90:	689a      	ldr	r2, [r3, #8]
20000c92:	687b      	ldr	r3, [r7, #4]
20000c94:	0018      	movs	r0, r3
20000c96:	47a0      	blx	r4
	
	if(s->posx_sp > 128)
20000c98:	687b      	ldr	r3, [r7, #4]
20000c9a:	68db      	ldr	r3, [r3, #12]
20000c9c:	2b80      	cmp	r3, #128	; 0x80
20000c9e:	dd09      	ble.n	20000cb4 <move_sprite+0x40>
		s->set_speed_sp(s, -s->dirx_sp, s->diry_sp);
20000ca0:	687b      	ldr	r3, [r7, #4]
20000ca2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
20000ca4:	687b      	ldr	r3, [r7, #4]
20000ca6:	685b      	ldr	r3, [r3, #4]
20000ca8:	4259      	negs	r1, r3
20000caa:	687b      	ldr	r3, [r7, #4]
20000cac:	689a      	ldr	r2, [r3, #8]
20000cae:	687b      	ldr	r3, [r7, #4]
20000cb0:	0018      	movs	r0, r3
20000cb2:	47a0      	blx	r4
		
	if(s->posy_sp < 1)
20000cb4:	687b      	ldr	r3, [r7, #4]
20000cb6:	691b      	ldr	r3, [r3, #16]
20000cb8:	2b00      	cmp	r3, #0
20000cba:	dc09      	bgt.n	20000cd0 <move_sprite+0x5c>
		s->set_speed_sp(s, s->dirx_sp, -s->diry_sp);
20000cbc:	687b      	ldr	r3, [r7, #4]
20000cbe:	6a9c      	ldr	r4, [r3, #40]	; 0x28
20000cc0:	687b      	ldr	r3, [r7, #4]
20000cc2:	6859      	ldr	r1, [r3, #4]
20000cc4:	687b      	ldr	r3, [r7, #4]
20000cc6:	689b      	ldr	r3, [r3, #8]
20000cc8:	425a      	negs	r2, r3
20000cca:	687b      	ldr	r3, [r7, #4]
20000ccc:	0018      	movs	r0, r3
20000cce:	47a0      	blx	r4
		
	if(s->posy_sp > 64)
20000cd0:	687b      	ldr	r3, [r7, #4]
20000cd2:	691b      	ldr	r3, [r3, #16]
20000cd4:	2b40      	cmp	r3, #64	; 0x40
20000cd6:	dd09      	ble.n	20000cec <move_sprite+0x78>
		s->set_speed_sp(s, s->dirx_sp, -s->diry_sp);
20000cd8:	687b      	ldr	r3, [r7, #4]
20000cda:	6a9c      	ldr	r4, [r3, #40]	; 0x28
20000cdc:	687b      	ldr	r3, [r7, #4]
20000cde:	6859      	ldr	r1, [r3, #4]
20000ce0:	687b      	ldr	r3, [r7, #4]
20000ce2:	689b      	ldr	r3, [r3, #8]
20000ce4:	425a      	negs	r2, r3
20000ce6:	687b      	ldr	r3, [r7, #4]
20000ce8:	0018      	movs	r0, r3
20000cea:	47a0      	blx	r4
	
//	s->data = plant_bits; explosion?

	s->posx_sp += s->dirx_sp;
20000cec:	687b      	ldr	r3, [r7, #4]
20000cee:	68da      	ldr	r2, [r3, #12]
20000cf0:	687b      	ldr	r3, [r7, #4]
20000cf2:	685b      	ldr	r3, [r3, #4]
20000cf4:	18d2      	adds	r2, r2, r3
20000cf6:	687b      	ldr	r3, [r7, #4]
20000cf8:	60da      	str	r2, [r3, #12]
	s->posy_sp += s->diry_sp;
20000cfa:	687b      	ldr	r3, [r7, #4]
20000cfc:	691a      	ldr	r2, [r3, #16]
20000cfe:	687b      	ldr	r3, [r7, #4]
20000d00:	689b      	ldr	r3, [r3, #8]
20000d02:	18d2      	adds	r2, r2, r3
20000d04:	687b      	ldr	r3, [r7, #4]
20000d06:	611a      	str	r2, [r3, #16]
	s->draw_sp(s, s->posx_sp, s->posy_sp);
20000d08:	687b      	ldr	r3, [r7, #4]
20000d0a:	69dc      	ldr	r4, [r3, #28]
20000d0c:	687b      	ldr	r3, [r7, #4]
20000d0e:	68d9      	ldr	r1, [r3, #12]
20000d10:	687b      	ldr	r3, [r7, #4]
20000d12:	691a      	ldr	r2, [r3, #16]
20000d14:	687b      	ldr	r3, [r7, #4]
20000d16:	0018      	movs	r0, r3
20000d18:	47a0      	blx	r4
}
20000d1a:	46c0      	nop			; (mov r8, r8)
20000d1c:	46bd      	mov	sp, r7
20000d1e:	b003      	add	sp, #12
20000d20:	bd90      	pop	{r4, r7, pc}

20000d22 <move_padd>:

void move_padd(POBJECT this)
{
20000d22:	b590      	push	{r4, r7, lr}
20000d24:	b083      	sub	sp, #12
20000d26:	af00      	add	r7, sp, #0
20000d28:	6078      	str	r0, [r7, #4]
//	this->clear(this);
	/*undivika padden g책r 철ver v채nster kanten*/
	if(this->posx<1)
20000d2a:	687b      	ldr	r3, [r7, #4]
20000d2c:	68db      	ldr	r3, [r3, #12]
20000d2e:	2b00      	cmp	r3, #0
20000d30:	dc13      	bgt.n	20000d5a <move_padd+0x38>
	{
		
		if(this->dirx < 0)
20000d32:	687b      	ldr	r3, [r7, #4]
20000d34:	685b      	ldr	r3, [r3, #4]
20000d36:	2b00      	cmp	r3, #0
20000d38:	da06      	bge.n	20000d48 <move_padd+0x26>
			this->set_speed(this, 0, 0);
20000d3a:	687b      	ldr	r3, [r7, #4]
20000d3c:	6a1b      	ldr	r3, [r3, #32]
20000d3e:	6878      	ldr	r0, [r7, #4]
20000d40:	2200      	movs	r2, #0
20000d42:	2100      	movs	r1, #0
20000d44:	4798      	blx	r3
20000d46:	e008      	b.n	20000d5a <move_padd+0x38>
		else
			this->set_speed(this, this->dirx, this->diry);
20000d48:	687b      	ldr	r3, [r7, #4]
20000d4a:	6a1c      	ldr	r4, [r3, #32]
20000d4c:	687b      	ldr	r3, [r7, #4]
20000d4e:	6859      	ldr	r1, [r3, #4]
20000d50:	687b      	ldr	r3, [r7, #4]
20000d52:	689a      	ldr	r2, [r3, #8]
20000d54:	687b      	ldr	r3, [r7, #4]
20000d56:	0018      	movs	r0, r3
20000d58:	47a0      	blx	r4
	}
	/*undivika padden g책r 철ver h철ger kanten*/
	if((this->posx + this->geo->sizex) > 128)
20000d5a:	687b      	ldr	r3, [r7, #4]
20000d5c:	68da      	ldr	r2, [r3, #12]
20000d5e:	687b      	ldr	r3, [r7, #4]
20000d60:	681b      	ldr	r3, [r3, #0]
20000d62:	685b      	ldr	r3, [r3, #4]
20000d64:	18d3      	adds	r3, r2, r3
20000d66:	2b80      	cmp	r3, #128	; 0x80
20000d68:	dd13      	ble.n	20000d92 <move_padd+0x70>
	{
		if(this->dirx > -1)
20000d6a:	687b      	ldr	r3, [r7, #4]
20000d6c:	685b      	ldr	r3, [r3, #4]
20000d6e:	2b00      	cmp	r3, #0
20000d70:	db06      	blt.n	20000d80 <move_padd+0x5e>
			this->set_speed(this, 0, 0);
20000d72:	687b      	ldr	r3, [r7, #4]
20000d74:	6a1b      	ldr	r3, [r3, #32]
20000d76:	6878      	ldr	r0, [r7, #4]
20000d78:	2200      	movs	r2, #0
20000d7a:	2100      	movs	r1, #0
20000d7c:	4798      	blx	r3
20000d7e:	e008      	b.n	20000d92 <move_padd+0x70>
		else
			this->set_speed(this,this->dirx, this->diry);
20000d80:	687b      	ldr	r3, [r7, #4]
20000d82:	6a1c      	ldr	r4, [r3, #32]
20000d84:	687b      	ldr	r3, [r7, #4]
20000d86:	6859      	ldr	r1, [r3, #4]
20000d88:	687b      	ldr	r3, [r7, #4]
20000d8a:	689a      	ldr	r2, [r3, #8]
20000d8c:	687b      	ldr	r3, [r7, #4]
20000d8e:	0018      	movs	r0, r3
20000d90:	47a0      	blx	r4
	}
	if(this->posy<1)
20000d92:	687b      	ldr	r3, [r7, #4]
20000d94:	691b      	ldr	r3, [r3, #16]
20000d96:	2b00      	cmp	r3, #0
20000d98:	dc09      	bgt.n	20000dae <move_padd+0x8c>
		this->set_speed(this, this->dirx,-this->diry);
20000d9a:	687b      	ldr	r3, [r7, #4]
20000d9c:	6a1c      	ldr	r4, [r3, #32]
20000d9e:	687b      	ldr	r3, [r7, #4]
20000da0:	6859      	ldr	r1, [r3, #4]
20000da2:	687b      	ldr	r3, [r7, #4]
20000da4:	689b      	ldr	r3, [r3, #8]
20000da6:	425a      	negs	r2, r3
20000da8:	687b      	ldr	r3, [r7, #4]
20000daa:	0018      	movs	r0, r3
20000dac:	47a0      	blx	r4
		
	if((this->posy + this->geo->sizey)>64)
20000dae:	687b      	ldr	r3, [r7, #4]
20000db0:	691a      	ldr	r2, [r3, #16]
20000db2:	687b      	ldr	r3, [r7, #4]
20000db4:	681b      	ldr	r3, [r3, #0]
20000db6:	689b      	ldr	r3, [r3, #8]
20000db8:	18d3      	adds	r3, r2, r3
20000dba:	2b40      	cmp	r3, #64	; 0x40
20000dbc:	dd08      	ble.n	20000dd0 <move_padd+0xae>
		this->set_speed(this, this->dirx, this->diry);
20000dbe:	687b      	ldr	r3, [r7, #4]
20000dc0:	6a1c      	ldr	r4, [r3, #32]
20000dc2:	687b      	ldr	r3, [r7, #4]
20000dc4:	6859      	ldr	r1, [r3, #4]
20000dc6:	687b      	ldr	r3, [r7, #4]
20000dc8:	689a      	ldr	r2, [r3, #8]
20000dca:	687b      	ldr	r3, [r7, #4]
20000dcc:	0018      	movs	r0, r3
20000dce:	47a0      	blx	r4
		
	this->posx=this->posx + this->dirx;
20000dd0:	687b      	ldr	r3, [r7, #4]
20000dd2:	68da      	ldr	r2, [r3, #12]
20000dd4:	687b      	ldr	r3, [r7, #4]
20000dd6:	685b      	ldr	r3, [r3, #4]
20000dd8:	18d2      	adds	r2, r2, r3
20000dda:	687b      	ldr	r3, [r7, #4]
20000ddc:	60da      	str	r2, [r3, #12]
	this->posy =this->posy + this->diry;
20000dde:	687b      	ldr	r3, [r7, #4]
20000de0:	691a      	ldr	r2, [r3, #16]
20000de2:	687b      	ldr	r3, [r7, #4]
20000de4:	689b      	ldr	r3, [r3, #8]
20000de6:	18d2      	adds	r2, r2, r3
20000de8:	687b      	ldr	r3, [r7, #4]
20000dea:	611a      	str	r2, [r3, #16]
	this->draw(this);
20000dec:	687b      	ldr	r3, [r7, #4]
20000dee:	695b      	ldr	r3, [r3, #20]
20000df0:	687a      	ldr	r2, [r7, #4]
20000df2:	0010      	movs	r0, r2
20000df4:	4798      	blx	r3
}
20000df6:	46c0      	nop			; (mov r8, r8)
20000df8:	46bd      	mov	sp, r7
20000dfa:	b003      	add	sp, #12
20000dfc:	bd90      	pop	{r4, r7, pc}

20000dfe <padd_studs>:

void padd_studs(POBJECT this, POBJECT ppadd)
{
20000dfe:	b590      	push	{r4, r7, lr}
20000e00:	b083      	sub	sp, #12
20000e02:	af00      	add	r7, sp, #0
20000e04:	6078      	str	r0, [r7, #4]
20000e06:	6039      	str	r1, [r7, #0]
	if(((this->posy + this->geo->sizey)>=ppadd->posy))
20000e08:	687b      	ldr	r3, [r7, #4]
20000e0a:	691a      	ldr	r2, [r3, #16]
20000e0c:	687b      	ldr	r3, [r7, #4]
20000e0e:	681b      	ldr	r3, [r3, #0]
20000e10:	689b      	ldr	r3, [r3, #8]
20000e12:	18d2      	adds	r2, r2, r3
20000e14:	683b      	ldr	r3, [r7, #0]
20000e16:	691b      	ldr	r3, [r3, #16]
20000e18:	429a      	cmp	r2, r3
20000e1a:	db1d      	blt.n	20000e58 <padd_studs+0x5a>
	{
		if((this->posx + this->geo->sizex >= ppadd->posx) && (this->posx <= (ppadd->posx+ppadd->geo->sizex)))
20000e1c:	687b      	ldr	r3, [r7, #4]
20000e1e:	68da      	ldr	r2, [r3, #12]
20000e20:	687b      	ldr	r3, [r7, #4]
20000e22:	681b      	ldr	r3, [r3, #0]
20000e24:	685b      	ldr	r3, [r3, #4]
20000e26:	18d2      	adds	r2, r2, r3
20000e28:	683b      	ldr	r3, [r7, #0]
20000e2a:	68db      	ldr	r3, [r3, #12]
20000e2c:	429a      	cmp	r2, r3
20000e2e:	db13      	blt.n	20000e58 <padd_studs+0x5a>
20000e30:	687b      	ldr	r3, [r7, #4]
20000e32:	68da      	ldr	r2, [r3, #12]
20000e34:	683b      	ldr	r3, [r7, #0]
20000e36:	68d9      	ldr	r1, [r3, #12]
20000e38:	683b      	ldr	r3, [r7, #0]
20000e3a:	681b      	ldr	r3, [r3, #0]
20000e3c:	685b      	ldr	r3, [r3, #4]
20000e3e:	18cb      	adds	r3, r1, r3
20000e40:	429a      	cmp	r2, r3
20000e42:	dc09      	bgt.n	20000e58 <padd_studs+0x5a>
		{
			this->set_speed(this, this->dirx, -this->diry);
20000e44:	687b      	ldr	r3, [r7, #4]
20000e46:	6a1c      	ldr	r4, [r3, #32]
20000e48:	687b      	ldr	r3, [r7, #4]
20000e4a:	6859      	ldr	r1, [r3, #4]
20000e4c:	687b      	ldr	r3, [r7, #4]
20000e4e:	689b      	ldr	r3, [r3, #8]
20000e50:	425a      	negs	r2, r3
20000e52:	687b      	ldr	r3, [r7, #4]
20000e54:	0018      	movs	r0, r3
20000e56:	47a0      	blx	r4
		}
	}
}
20000e58:	46c0      	nop			; (mov r8, r8)
20000e5a:	46bd      	mov	sp, r7
20000e5c:	b003      	add	sp, #12
20000e5e:	bd90      	pop	{r4, r7, pc}

20000e60 <delay_250ns>:
 *
 */

#include "game_startup.h"

void delay_250ns(void){
20000e60:	b580      	push	{r7, lr}
20000e62:	af00      	add	r7, sp, #0
	STK_CTRL = 0;
20000e64:	4b0c      	ldr	r3, [pc, #48]	; (20000e98 <delay_250ns+0x38>)
20000e66:	2200      	movs	r2, #0
20000e68:	601a      	str	r2, [r3, #0]
	STK_LOAD = ((168/4) - 1);
20000e6a:	4b0c      	ldr	r3, [pc, #48]	; (20000e9c <delay_250ns+0x3c>)
20000e6c:	2229      	movs	r2, #41	; 0x29
20000e6e:	601a      	str	r2, [r3, #0]
	STK_VAL = 0;
20000e70:	4b0b      	ldr	r3, [pc, #44]	; (20000ea0 <delay_250ns+0x40>)
20000e72:	2200      	movs	r2, #0
20000e74:	601a      	str	r2, [r3, #0]
	STK_CTRL = 5;
20000e76:	4b08      	ldr	r3, [pc, #32]	; (20000e98 <delay_250ns+0x38>)
20000e78:	2205      	movs	r2, #5
20000e7a:	601a      	str	r2, [r3, #0]
	
	while((STK_CTRL & 0x10000) == 0){};
20000e7c:	46c0      	nop			; (mov r8, r8)
20000e7e:	4b06      	ldr	r3, [pc, #24]	; (20000e98 <delay_250ns+0x38>)
20000e80:	681a      	ldr	r2, [r3, #0]
20000e82:	2380      	movs	r3, #128	; 0x80
20000e84:	025b      	lsls	r3, r3, #9
20000e86:	4013      	ands	r3, r2
20000e88:	d0f9      	beq.n	20000e7e <delay_250ns+0x1e>
	STK_CTRL = 0;
20000e8a:	4b03      	ldr	r3, [pc, #12]	; (20000e98 <delay_250ns+0x38>)
20000e8c:	2200      	movs	r2, #0
20000e8e:	601a      	str	r2, [r3, #0]
}
20000e90:	46c0      	nop			; (mov r8, r8)
20000e92:	46bd      	mov	sp, r7
20000e94:	bd80      	pop	{r7, pc}
20000e96:	46c0      	nop			; (mov r8, r8)
20000e98:	e000e010 	and	lr, r0, r0, lsl r0
20000e9c:	e000e014 	and	lr, r0, r4, lsl r0
20000ea0:	e000e018 	and	lr, r0, r8, lsl r0

20000ea4 <delay_micro>:

void delay_micro(unsigned int us){
20000ea4:	b580      	push	{r7, lr}
20000ea6:	b082      	sub	sp, #8
20000ea8:	af00      	add	r7, sp, #0
20000eaa:	6078      	str	r0, [r7, #4]
	while(us--){
20000eac:	e007      	b.n	20000ebe <delay_micro+0x1a>
		delay_250ns();
20000eae:	f7ff ffd7 	bl	20000e60 <delay_250ns>
		delay_250ns();
20000eb2:	f7ff ffd5 	bl	20000e60 <delay_250ns>
		delay_250ns(); 
20000eb6:	f7ff ffd3 	bl	20000e60 <delay_250ns>
		delay_250ns();
20000eba:	f7ff ffd1 	bl	20000e60 <delay_250ns>
	while(us--){
20000ebe:	687b      	ldr	r3, [r7, #4]
20000ec0:	1e5a      	subs	r2, r3, #1
20000ec2:	607a      	str	r2, [r7, #4]
20000ec4:	2b00      	cmp	r3, #0
20000ec6:	d1f2      	bne.n	20000eae <delay_micro+0xa>
	}
}
20000ec8:	46c0      	nop			; (mov r8, r8)
20000eca:	46bd      	mov	sp, r7
20000ecc:	b002      	add	sp, #8
20000ece:	bd80      	pop	{r7, pc}

20000ed0 <delay_milli>:

void delay_milli(unsigned int ms){
20000ed0:	b580      	push	{r7, lr}
20000ed2:	b082      	sub	sp, #8
20000ed4:	af00      	add	r7, sp, #0
20000ed6:	6078      	str	r0, [r7, #4]

#ifdef SIMULATOR
	ms = ms / 100;
20000ed8:	687b      	ldr	r3, [r7, #4]
20000eda:	2164      	movs	r1, #100	; 0x64
20000edc:	0018      	movs	r0, r3
20000ede:	f000 f925 	bl	2000112c <__udivsi3>
20000ee2:	0003      	movs	r3, r0
20000ee4:	607b      	str	r3, [r7, #4]
	ms++;
20000ee6:	687b      	ldr	r3, [r7, #4]
20000ee8:	3301      	adds	r3, #1
20000eea:	607b      	str	r3, [r7, #4]
#endif
	
	while( ms-- )
20000eec:	e004      	b.n	20000ef8 <delay_milli+0x28>
		delay_micro(1000);
20000eee:	23fa      	movs	r3, #250	; 0xfa
20000ef0:	009b      	lsls	r3, r3, #2
20000ef2:	0018      	movs	r0, r3
20000ef4:	f7ff ffd6 	bl	20000ea4 <delay_micro>
	while( ms-- )
20000ef8:	687b      	ldr	r3, [r7, #4]
20000efa:	1e5a      	subs	r2, r3, #1
20000efc:	607a      	str	r2, [r7, #4]
20000efe:	2b00      	cmp	r3, #0
20000f00:	d1f5      	bne.n	20000eee <delay_milli+0x1e>
}
20000f02:	46c0      	nop			; (mov r8, r8)
20000f04:	46bd      	mov	sp, r7
20000f06:	b002      	add	sp, #8
20000f08:	bd80      	pop	{r7, pc}

20000f0a <delay_500ns>:

void delay_500ns(void){
20000f0a:	b580      	push	{r7, lr}
20000f0c:	af00      	add	r7, sp, #0
	delay_250ns();
20000f0e:	f7ff ffa7 	bl	20000e60 <delay_250ns>
	delay_250ns();
20000f12:	f7ff ffa5 	bl	20000e60 <delay_250ns>
20000f16:	46c0      	nop			; (mov r8, r8)
20000f18:	46bd      	mov	sp, r7
20000f1a:	bd80      	pop	{r7, pc}

20000f1c <keyb_init>:
 *
 */

#include "game_startup.h"

void keyb_init(void){
20000f1c:	b580      	push	{r7, lr}
20000f1e:	af00      	add	r7, sp, #0
#ifdef USBDM
	*((unsigned long *) 0x40023830) = 0x18; //starta clockor port E, D
	//__asm volatile ( " LDR R0,=0x8000209\n BLX R0 \n //initiera PLL");
#endif

	GPIO_MODER_D &= 0;
20000f20:	4b0c      	ldr	r3, [pc, #48]	; (20000f54 <keyb_init+0x38>)
20000f22:	681b      	ldr	r3, [r3, #0]
20000f24:	4b0b      	ldr	r3, [pc, #44]	; (20000f54 <keyb_init+0x38>)
20000f26:	2200      	movs	r2, #0
20000f28:	601a      	str	r2, [r3, #0]
	GPIO_MODER_D |= 0x55005555; //pin 1 - 8 display, pin 9 - 15 keyboard ( b0 - b3 input, b4 - b7 output) 
20000f2a:	4b0a      	ldr	r3, [pc, #40]	; (20000f54 <keyb_init+0x38>)
20000f2c:	681a      	ldr	r2, [r3, #0]
20000f2e:	4b09      	ldr	r3, [pc, #36]	; (20000f54 <keyb_init+0x38>)
20000f30:	4909      	ldr	r1, [pc, #36]	; (20000f58 <keyb_init+0x3c>)
20000f32:	430a      	orrs	r2, r1
20000f34:	601a      	str	r2, [r3, #0]
	
	GPIO_OTYPER_D |= 0x0000; //push-pull output type
20000f36:	4a09      	ldr	r2, [pc, #36]	; (20000f5c <keyb_init+0x40>)
20000f38:	4b08      	ldr	r3, [pc, #32]	; (20000f5c <keyb_init+0x40>)
20000f3a:	8812      	ldrh	r2, [r2, #0]
20000f3c:	b292      	uxth	r2, r2
20000f3e:	801a      	strh	r2, [r3, #0]
	
	GPIO_PUPDR_D |= 0x00AA0000; //pull-down input
20000f40:	4b07      	ldr	r3, [pc, #28]	; (20000f60 <keyb_init+0x44>)
20000f42:	681a      	ldr	r2, [r3, #0]
20000f44:	4b06      	ldr	r3, [pc, #24]	; (20000f60 <keyb_init+0x44>)
20000f46:	21aa      	movs	r1, #170	; 0xaa
20000f48:	0409      	lsls	r1, r1, #16
20000f4a:	430a      	orrs	r2, r1
20000f4c:	601a      	str	r2, [r3, #0]
}
20000f4e:	46c0      	nop			; (mov r8, r8)
20000f50:	46bd      	mov	sp, r7
20000f52:	bd80      	pop	{r7, pc}
20000f54:	40020c00 	andmi	r0, r2, r0, lsl #24
20000f58:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
20000f5c:	40020c04 	andmi	r0, r2, r4, lsl #24
20000f60:	40020c0c 	andmi	r0, r2, ip, lsl #24

20000f64 <out7seg>:

void out7seg (unsigned char c){
20000f64:	b580      	push	{r7, lr}
20000f66:	b082      	sub	sp, #8
20000f68:	af00      	add	r7, sp, #0
20000f6a:	0002      	movs	r2, r0
20000f6c:	1dfb      	adds	r3, r7, #7
20000f6e:	701a      	strb	r2, [r3, #0]
	switch(c){
20000f70:	1dfb      	adds	r3, r7, #7
20000f72:	781b      	ldrb	r3, [r3, #0]
20000f74:	2b0f      	cmp	r3, #15
20000f76:	d844      	bhi.n	20001002 <out7seg+0x9e>
20000f78:	009a      	lsls	r2, r3, #2
20000f7a:	4b26      	ldr	r3, [pc, #152]	; (20001014 <out7seg+0xb0>)
20000f7c:	18d3      	adds	r3, r2, r3
20000f7e:	681b      	ldr	r3, [r3, #0]
20000f80:	469f      	mov	pc, r3
		case 0: GPIO_ODR_D_LOW = 0x3F; break;
20000f82:	4b25      	ldr	r3, [pc, #148]	; (20001018 <out7seg+0xb4>)
20000f84:	223f      	movs	r2, #63	; 0x3f
20000f86:	701a      	strb	r2, [r3, #0]
20000f88:	e03f      	b.n	2000100a <out7seg+0xa6>
		case 1: GPIO_ODR_D_LOW = 0x06; break;
20000f8a:	4b23      	ldr	r3, [pc, #140]	; (20001018 <out7seg+0xb4>)
20000f8c:	2206      	movs	r2, #6
20000f8e:	701a      	strb	r2, [r3, #0]
20000f90:	e03b      	b.n	2000100a <out7seg+0xa6>
		case 2: GPIO_ODR_D_LOW = 0x5B; break;
20000f92:	4b21      	ldr	r3, [pc, #132]	; (20001018 <out7seg+0xb4>)
20000f94:	225b      	movs	r2, #91	; 0x5b
20000f96:	701a      	strb	r2, [r3, #0]
20000f98:	e037      	b.n	2000100a <out7seg+0xa6>
		case 3: GPIO_ODR_D_LOW = 0x4F; break;
20000f9a:	4b1f      	ldr	r3, [pc, #124]	; (20001018 <out7seg+0xb4>)
20000f9c:	224f      	movs	r2, #79	; 0x4f
20000f9e:	701a      	strb	r2, [r3, #0]
20000fa0:	e033      	b.n	2000100a <out7seg+0xa6>
		case 4: GPIO_ODR_D_LOW = 0x66; break;
20000fa2:	4b1d      	ldr	r3, [pc, #116]	; (20001018 <out7seg+0xb4>)
20000fa4:	2266      	movs	r2, #102	; 0x66
20000fa6:	701a      	strb	r2, [r3, #0]
20000fa8:	e02f      	b.n	2000100a <out7seg+0xa6>
		case 5: GPIO_ODR_D_LOW = 0x6D; break;
20000faa:	4b1b      	ldr	r3, [pc, #108]	; (20001018 <out7seg+0xb4>)
20000fac:	226d      	movs	r2, #109	; 0x6d
20000fae:	701a      	strb	r2, [r3, #0]
20000fb0:	e02b      	b.n	2000100a <out7seg+0xa6>
		case 6: GPIO_ODR_D_LOW = 0x7D; break;
20000fb2:	4b19      	ldr	r3, [pc, #100]	; (20001018 <out7seg+0xb4>)
20000fb4:	227d      	movs	r2, #125	; 0x7d
20000fb6:	701a      	strb	r2, [r3, #0]
20000fb8:	e027      	b.n	2000100a <out7seg+0xa6>
		case 7: GPIO_ODR_D_LOW = 0x07; break;
20000fba:	4b17      	ldr	r3, [pc, #92]	; (20001018 <out7seg+0xb4>)
20000fbc:	2207      	movs	r2, #7
20000fbe:	701a      	strb	r2, [r3, #0]
20000fc0:	e023      	b.n	2000100a <out7seg+0xa6>
		case 8: GPIO_ODR_D_LOW = 0x7F; break;
20000fc2:	4b15      	ldr	r3, [pc, #84]	; (20001018 <out7seg+0xb4>)
20000fc4:	227f      	movs	r2, #127	; 0x7f
20000fc6:	701a      	strb	r2, [r3, #0]
20000fc8:	e01f      	b.n	2000100a <out7seg+0xa6>
		case 9: GPIO_ODR_D_LOW = 0x6F; break;
20000fca:	4b13      	ldr	r3, [pc, #76]	; (20001018 <out7seg+0xb4>)
20000fcc:	226f      	movs	r2, #111	; 0x6f
20000fce:	701a      	strb	r2, [r3, #0]
20000fd0:	e01b      	b.n	2000100a <out7seg+0xa6>
		case 0xA: GPIO_ODR_D_LOW = 0x77; break;
20000fd2:	4b11      	ldr	r3, [pc, #68]	; (20001018 <out7seg+0xb4>)
20000fd4:	2277      	movs	r2, #119	; 0x77
20000fd6:	701a      	strb	r2, [r3, #0]
20000fd8:	e017      	b.n	2000100a <out7seg+0xa6>
		case 0xB: GPIO_ODR_D_LOW = 0x7C; break;
20000fda:	4b0f      	ldr	r3, [pc, #60]	; (20001018 <out7seg+0xb4>)
20000fdc:	227c      	movs	r2, #124	; 0x7c
20000fde:	701a      	strb	r2, [r3, #0]
20000fe0:	e013      	b.n	2000100a <out7seg+0xa6>
		case 0xC: GPIO_ODR_D_LOW = 0x39; break;
20000fe2:	4b0d      	ldr	r3, [pc, #52]	; (20001018 <out7seg+0xb4>)
20000fe4:	2239      	movs	r2, #57	; 0x39
20000fe6:	701a      	strb	r2, [r3, #0]
20000fe8:	e00f      	b.n	2000100a <out7seg+0xa6>
		case 0xD: GPIO_ODR_D_LOW = 0x3F; break;
20000fea:	4b0b      	ldr	r3, [pc, #44]	; (20001018 <out7seg+0xb4>)
20000fec:	223f      	movs	r2, #63	; 0x3f
20000fee:	701a      	strb	r2, [r3, #0]
20000ff0:	e00b      	b.n	2000100a <out7seg+0xa6>
		case 0xE: GPIO_ODR_D_LOW = 0x79; break;
20000ff2:	4b09      	ldr	r3, [pc, #36]	; (20001018 <out7seg+0xb4>)
20000ff4:	2279      	movs	r2, #121	; 0x79
20000ff6:	701a      	strb	r2, [r3, #0]
20000ff8:	e007      	b.n	2000100a <out7seg+0xa6>
		case 0xF: GPIO_ODR_D_LOW = 0x71; break;
20000ffa:	4b07      	ldr	r3, [pc, #28]	; (20001018 <out7seg+0xb4>)
20000ffc:	2271      	movs	r2, #113	; 0x71
20000ffe:	701a      	strb	r2, [r3, #0]
20001000:	e003      	b.n	2000100a <out7seg+0xa6>
		
		default: GPIO_ODR_D_LOW = 0x00; break;
20001002:	4b05      	ldr	r3, [pc, #20]	; (20001018 <out7seg+0xb4>)
20001004:	2200      	movs	r2, #0
20001006:	701a      	strb	r2, [r3, #0]
20001008:	46c0      	nop			; (mov r8, r8)
	}
}
2000100a:	46c0      	nop			; (mov r8, r8)
2000100c:	46bd      	mov	sp, r7
2000100e:	b002      	add	sp, #8
20001010:	bd80      	pop	{r7, pc}
20001012:	46c0      	nop			; (mov r8, r8)
20001014:	200018c4 	andcs	r1, r0, r4, asr #17
20001018:	40020c14 	andmi	r0, r2, r4, lsl ip

2000101c <keybActivate>:

void keybActivate(unsigned int row){
2000101c:	b580      	push	{r7, lr}
2000101e:	b082      	sub	sp, #8
20001020:	af00      	add	r7, sp, #0
20001022:	6078      	str	r0, [r7, #4]
	switch(row){
20001024:	687b      	ldr	r3, [r7, #4]
20001026:	2b04      	cmp	r3, #4
20001028:	d819      	bhi.n	2000105e <keybActivate+0x42>
2000102a:	687b      	ldr	r3, [r7, #4]
2000102c:	009a      	lsls	r2, r3, #2
2000102e:	4b0e      	ldr	r3, [pc, #56]	; (20001068 <keybActivate+0x4c>)
20001030:	18d3      	adds	r3, r2, r3
20001032:	681b      	ldr	r3, [r3, #0]
20001034:	469f      	mov	pc, r3
		case 1: GPIO_ODR_D_HIGH = 0x10; break;//eller GPIO_ODR_D_HIGH = (1<<(row+3));
20001036:	4b0d      	ldr	r3, [pc, #52]	; (2000106c <keybActivate+0x50>)
20001038:	2210      	movs	r2, #16
2000103a:	701a      	strb	r2, [r3, #0]
2000103c:	e00f      	b.n	2000105e <keybActivate+0x42>
		case 2: GPIO_ODR_D_HIGH = 0x20; break;
2000103e:	4b0b      	ldr	r3, [pc, #44]	; (2000106c <keybActivate+0x50>)
20001040:	2220      	movs	r2, #32
20001042:	701a      	strb	r2, [r3, #0]
20001044:	e00b      	b.n	2000105e <keybActivate+0x42>
		case 3: GPIO_ODR_D_HIGH = 0x40; break;
20001046:	4b09      	ldr	r3, [pc, #36]	; (2000106c <keybActivate+0x50>)
20001048:	2240      	movs	r2, #64	; 0x40
2000104a:	701a      	strb	r2, [r3, #0]
2000104c:	e007      	b.n	2000105e <keybActivate+0x42>
		case 4: GPIO_ODR_D_HIGH = 0x80; break;
2000104e:	4b07      	ldr	r3, [pc, #28]	; (2000106c <keybActivate+0x50>)
20001050:	2280      	movs	r2, #128	; 0x80
20001052:	701a      	strb	r2, [r3, #0]
20001054:	e003      	b.n	2000105e <keybActivate+0x42>
		case 0: GPIO_ODR_D_HIGH = 0x00; break;
20001056:	4b05      	ldr	r3, [pc, #20]	; (2000106c <keybActivate+0x50>)
20001058:	2200      	movs	r2, #0
2000105a:	701a      	strb	r2, [r3, #0]
2000105c:	46c0      	nop			; (mov r8, r8)
	}
}
2000105e:	46c0      	nop			; (mov r8, r8)
20001060:	46bd      	mov	sp, r7
20001062:	b002      	add	sp, #8
20001064:	bd80      	pop	{r7, pc}
20001066:	46c0      	nop			; (mov r8, r8)
20001068:	20001904 	andcs	r1, r0, r4, lsl #18
2000106c:	40020c15 	andmi	r0, r2, r5, lsl ip

20001070 <keybGetCol>:

int keybGetCol(void){
20001070:	b580      	push	{r7, lr}
20001072:	b082      	sub	sp, #8
20001074:	af00      	add	r7, sp, #0
	unsigned char c = GPIO_IDR_D_HIGH;
20001076:	4a12      	ldr	r2, [pc, #72]	; (200010c0 <keybGetCol+0x50>)
20001078:	1dfb      	adds	r3, r7, #7
2000107a:	7812      	ldrb	r2, [r2, #0]
2000107c:	701a      	strb	r2, [r3, #0]
	if(c & 0x8) return 4;
2000107e:	1dfb      	adds	r3, r7, #7
20001080:	781b      	ldrb	r3, [r3, #0]
20001082:	2208      	movs	r2, #8
20001084:	4013      	ands	r3, r2
20001086:	d001      	beq.n	2000108c <keybGetCol+0x1c>
20001088:	2304      	movs	r3, #4
2000108a:	e015      	b.n	200010b8 <keybGetCol+0x48>
	if(c & 0x4) return 3;
2000108c:	1dfb      	adds	r3, r7, #7
2000108e:	781b      	ldrb	r3, [r3, #0]
20001090:	2204      	movs	r2, #4
20001092:	4013      	ands	r3, r2
20001094:	d001      	beq.n	2000109a <keybGetCol+0x2a>
20001096:	2303      	movs	r3, #3
20001098:	e00e      	b.n	200010b8 <keybGetCol+0x48>
	if(c & 0x2) return 2;
2000109a:	1dfb      	adds	r3, r7, #7
2000109c:	781b      	ldrb	r3, [r3, #0]
2000109e:	2202      	movs	r2, #2
200010a0:	4013      	ands	r3, r2
200010a2:	d001      	beq.n	200010a8 <keybGetCol+0x38>
200010a4:	2302      	movs	r3, #2
200010a6:	e007      	b.n	200010b8 <keybGetCol+0x48>
	if(c & 0x1) return 1;
200010a8:	1dfb      	adds	r3, r7, #7
200010aa:	781b      	ldrb	r3, [r3, #0]
200010ac:	2201      	movs	r2, #1
200010ae:	4013      	ands	r3, r2
200010b0:	d001      	beq.n	200010b6 <keybGetCol+0x46>
200010b2:	2301      	movs	r3, #1
200010b4:	e000      	b.n	200010b8 <keybGetCol+0x48>
	return 0;
200010b6:	2300      	movs	r3, #0
}
200010b8:	0018      	movs	r0, r3
200010ba:	46bd      	mov	sp, r7
200010bc:	b002      	add	sp, #8
200010be:	bd80      	pop	{r7, pc}
200010c0:	40020c11 	andmi	r0, r2, r1, lsl ip

200010c4 <keyb>:

unsigned char keyb(void){
200010c4:	b590      	push	{r4, r7, lr}
200010c6:	b087      	sub	sp, #28
200010c8:	af00      	add	r7, sp, #0
	int row, column;
	unsigned char key[] = {1,2,3,0xA,4,5,6,0xB,7,8,9,0xC,0xE,0,0xF,0xD};
200010ca:	003b      	movs	r3, r7
200010cc:	4a16      	ldr	r2, [pc, #88]	; (20001128 <keyb+0x64>)
200010ce:	ca13      	ldmia	r2!, {r0, r1, r4}
200010d0:	c313      	stmia	r3!, {r0, r1, r4}
200010d2:	6812      	ldr	r2, [r2, #0]
200010d4:	601a      	str	r2, [r3, #0]
	for(row = 1; row <=4; row++){
200010d6:	2301      	movs	r3, #1
200010d8:	617b      	str	r3, [r7, #20]
200010da:	e019      	b.n	20001110 <keyb+0x4c>
		keybActivate(row);
200010dc:	697b      	ldr	r3, [r7, #20]
200010de:	0018      	movs	r0, r3
200010e0:	f7ff ff9c 	bl	2000101c <keybActivate>
		if( (column = keybGetCol()) )
200010e4:	f7ff ffc4 	bl	20001070 <keybGetCol>
200010e8:	0003      	movs	r3, r0
200010ea:	613b      	str	r3, [r7, #16]
200010ec:	693b      	ldr	r3, [r7, #16]
200010ee:	2b00      	cmp	r3, #0
200010f0:	d00b      	beq.n	2000110a <keyb+0x46>
		{
			keybActivate(0); //To clear the register??
200010f2:	2000      	movs	r0, #0
200010f4:	f7ff ff92 	bl	2000101c <keybActivate>
			return key[4*(row-1) + (column-1)];
200010f8:	697b      	ldr	r3, [r7, #20]
200010fa:	3b01      	subs	r3, #1
200010fc:	009a      	lsls	r2, r3, #2
200010fe:	693b      	ldr	r3, [r7, #16]
20001100:	3b01      	subs	r3, #1
20001102:	18d3      	adds	r3, r2, r3
20001104:	003a      	movs	r2, r7
20001106:	5cd3      	ldrb	r3, [r2, r3]
20001108:	e009      	b.n	2000111e <keyb+0x5a>
	for(row = 1; row <=4; row++){
2000110a:	697b      	ldr	r3, [r7, #20]
2000110c:	3301      	adds	r3, #1
2000110e:	617b      	str	r3, [r7, #20]
20001110:	697b      	ldr	r3, [r7, #20]
20001112:	2b04      	cmp	r3, #4
20001114:	dde2      	ble.n	200010dc <keyb+0x18>
		}
	}
	keybActivate(0);
20001116:	2000      	movs	r0, #0
20001118:	f7ff ff80 	bl	2000101c <keybActivate>
	return 0xFF;
2000111c:	23ff      	movs	r3, #255	; 0xff
}
2000111e:	0018      	movs	r0, r3
20001120:	46bd      	mov	sp, r7
20001122:	b007      	add	sp, #28
20001124:	bd90      	pop	{r4, r7, pc}
20001126:	46c0      	nop			; (mov r8, r8)
20001128:	20001918 	andcs	r1, r0, r8, lsl r9

2000112c <__udivsi3>:
2000112c:	2200      	movs	r2, #0
2000112e:	0843      	lsrs	r3, r0, #1
20001130:	428b      	cmp	r3, r1
20001132:	d374      	bcc.n	2000121e <__udivsi3+0xf2>
20001134:	0903      	lsrs	r3, r0, #4
20001136:	428b      	cmp	r3, r1
20001138:	d35f      	bcc.n	200011fa <__udivsi3+0xce>
2000113a:	0a03      	lsrs	r3, r0, #8
2000113c:	428b      	cmp	r3, r1
2000113e:	d344      	bcc.n	200011ca <__udivsi3+0x9e>
20001140:	0b03      	lsrs	r3, r0, #12
20001142:	428b      	cmp	r3, r1
20001144:	d328      	bcc.n	20001198 <__udivsi3+0x6c>
20001146:	0c03      	lsrs	r3, r0, #16
20001148:	428b      	cmp	r3, r1
2000114a:	d30d      	bcc.n	20001168 <__udivsi3+0x3c>
2000114c:	22ff      	movs	r2, #255	; 0xff
2000114e:	0209      	lsls	r1, r1, #8
20001150:	ba12      	rev	r2, r2
20001152:	0c03      	lsrs	r3, r0, #16
20001154:	428b      	cmp	r3, r1
20001156:	d302      	bcc.n	2000115e <__udivsi3+0x32>
20001158:	1212      	asrs	r2, r2, #8
2000115a:	0209      	lsls	r1, r1, #8
2000115c:	d065      	beq.n	2000122a <__udivsi3+0xfe>
2000115e:	0b03      	lsrs	r3, r0, #12
20001160:	428b      	cmp	r3, r1
20001162:	d319      	bcc.n	20001198 <__udivsi3+0x6c>
20001164:	e000      	b.n	20001168 <__udivsi3+0x3c>
20001166:	0a09      	lsrs	r1, r1, #8
20001168:	0bc3      	lsrs	r3, r0, #15
2000116a:	428b      	cmp	r3, r1
2000116c:	d301      	bcc.n	20001172 <__udivsi3+0x46>
2000116e:	03cb      	lsls	r3, r1, #15
20001170:	1ac0      	subs	r0, r0, r3
20001172:	4152      	adcs	r2, r2
20001174:	0b83      	lsrs	r3, r0, #14
20001176:	428b      	cmp	r3, r1
20001178:	d301      	bcc.n	2000117e <__udivsi3+0x52>
2000117a:	038b      	lsls	r3, r1, #14
2000117c:	1ac0      	subs	r0, r0, r3
2000117e:	4152      	adcs	r2, r2
20001180:	0b43      	lsrs	r3, r0, #13
20001182:	428b      	cmp	r3, r1
20001184:	d301      	bcc.n	2000118a <__udivsi3+0x5e>
20001186:	034b      	lsls	r3, r1, #13
20001188:	1ac0      	subs	r0, r0, r3
2000118a:	4152      	adcs	r2, r2
2000118c:	0b03      	lsrs	r3, r0, #12
2000118e:	428b      	cmp	r3, r1
20001190:	d301      	bcc.n	20001196 <__udivsi3+0x6a>
20001192:	030b      	lsls	r3, r1, #12
20001194:	1ac0      	subs	r0, r0, r3
20001196:	4152      	adcs	r2, r2
20001198:	0ac3      	lsrs	r3, r0, #11
2000119a:	428b      	cmp	r3, r1
2000119c:	d301      	bcc.n	200011a2 <__udivsi3+0x76>
2000119e:	02cb      	lsls	r3, r1, #11
200011a0:	1ac0      	subs	r0, r0, r3
200011a2:	4152      	adcs	r2, r2
200011a4:	0a83      	lsrs	r3, r0, #10
200011a6:	428b      	cmp	r3, r1
200011a8:	d301      	bcc.n	200011ae <__udivsi3+0x82>
200011aa:	028b      	lsls	r3, r1, #10
200011ac:	1ac0      	subs	r0, r0, r3
200011ae:	4152      	adcs	r2, r2
200011b0:	0a43      	lsrs	r3, r0, #9
200011b2:	428b      	cmp	r3, r1
200011b4:	d301      	bcc.n	200011ba <__udivsi3+0x8e>
200011b6:	024b      	lsls	r3, r1, #9
200011b8:	1ac0      	subs	r0, r0, r3
200011ba:	4152      	adcs	r2, r2
200011bc:	0a03      	lsrs	r3, r0, #8
200011be:	428b      	cmp	r3, r1
200011c0:	d301      	bcc.n	200011c6 <__udivsi3+0x9a>
200011c2:	020b      	lsls	r3, r1, #8
200011c4:	1ac0      	subs	r0, r0, r3
200011c6:	4152      	adcs	r2, r2
200011c8:	d2cd      	bcs.n	20001166 <__udivsi3+0x3a>
200011ca:	09c3      	lsrs	r3, r0, #7
200011cc:	428b      	cmp	r3, r1
200011ce:	d301      	bcc.n	200011d4 <__udivsi3+0xa8>
200011d0:	01cb      	lsls	r3, r1, #7
200011d2:	1ac0      	subs	r0, r0, r3
200011d4:	4152      	adcs	r2, r2
200011d6:	0983      	lsrs	r3, r0, #6
200011d8:	428b      	cmp	r3, r1
200011da:	d301      	bcc.n	200011e0 <__udivsi3+0xb4>
200011dc:	018b      	lsls	r3, r1, #6
200011de:	1ac0      	subs	r0, r0, r3
200011e0:	4152      	adcs	r2, r2
200011e2:	0943      	lsrs	r3, r0, #5
200011e4:	428b      	cmp	r3, r1
200011e6:	d301      	bcc.n	200011ec <__udivsi3+0xc0>
200011e8:	014b      	lsls	r3, r1, #5
200011ea:	1ac0      	subs	r0, r0, r3
200011ec:	4152      	adcs	r2, r2
200011ee:	0903      	lsrs	r3, r0, #4
200011f0:	428b      	cmp	r3, r1
200011f2:	d301      	bcc.n	200011f8 <__udivsi3+0xcc>
200011f4:	010b      	lsls	r3, r1, #4
200011f6:	1ac0      	subs	r0, r0, r3
200011f8:	4152      	adcs	r2, r2
200011fa:	08c3      	lsrs	r3, r0, #3
200011fc:	428b      	cmp	r3, r1
200011fe:	d301      	bcc.n	20001204 <__udivsi3+0xd8>
20001200:	00cb      	lsls	r3, r1, #3
20001202:	1ac0      	subs	r0, r0, r3
20001204:	4152      	adcs	r2, r2
20001206:	0883      	lsrs	r3, r0, #2
20001208:	428b      	cmp	r3, r1
2000120a:	d301      	bcc.n	20001210 <__udivsi3+0xe4>
2000120c:	008b      	lsls	r3, r1, #2
2000120e:	1ac0      	subs	r0, r0, r3
20001210:	4152      	adcs	r2, r2
20001212:	0843      	lsrs	r3, r0, #1
20001214:	428b      	cmp	r3, r1
20001216:	d301      	bcc.n	2000121c <__udivsi3+0xf0>
20001218:	004b      	lsls	r3, r1, #1
2000121a:	1ac0      	subs	r0, r0, r3
2000121c:	4152      	adcs	r2, r2
2000121e:	1a41      	subs	r1, r0, r1
20001220:	d200      	bcs.n	20001224 <__udivsi3+0xf8>
20001222:	4601      	mov	r1, r0
20001224:	4152      	adcs	r2, r2
20001226:	4610      	mov	r0, r2
20001228:	4770      	bx	lr
2000122a:	e7ff      	b.n	2000122c <__udivsi3+0x100>
2000122c:	b501      	push	{r0, lr}
2000122e:	2000      	movs	r0, #0
20001230:	f000 f806 	bl	20001240 <__aeabi_idiv0>
20001234:	bd02      	pop	{r1, pc}
20001236:	46c0      	nop			; (mov r8, r8)

20001238 <__aeabi_uidivmod>:
20001238:	2900      	cmp	r1, #0
2000123a:	d0f7      	beq.n	2000122c <__udivsi3+0x100>
2000123c:	e776      	b.n	2000112c <__udivsi3>
2000123e:	4770      	bx	lr

20001240 <__aeabi_idiv0>:
20001240:	4770      	bx	lr
20001242:	46c0      	nop			; (mov r8, r8)

20001244 <backBuffer>:
	...

20001644 <ship_bits>:
20001644:	00000100 	andeq	r0, r0, r0, lsl #2
20001648:	07c00001 	strbeq	r0, [r0, r1]
2000164c:	000c6000 	andeq	r6, ip, r0
20001650:	20000820 	andcs	r0, r0, r0, lsr #16
20001654:	18300008 	ldmdane	r0!, {r3}
20001658:	00301800 	eorseq	r1, r0, r0, lsl #16
2000165c:	08002008 	stmdaeq	r0, {r3, sp}
20001660:	600c0020 	andvs	r0, ip, r0, lsr #32
20001664:	00444400 	subeq	r4, r4, r0, lsl #8
20001668:	1c005ff4 	stcne	15, cr5, [r0], {244}	; 0xf4
2000166c:	20080070 	andcs	r0, r8, r0, ror r0
	...

20001680 <square_geometry>:
20001680:	00000010 	andeq	r0, r0, r0, lsl r0
20001684:	00000005 	andeq	r0, r0, r5
20001688:	00000005 	andeq	r0, r0, r5
2000168c:	00010000 	andeq	r0, r1, r0
20001690:	00030002 	andeq	r0, r3, r2
20001694:	01000004 	tsteq	r0, r4
20001698:	02000104 	andeq	r0, r0, #4, 2
2000169c:	03000204 	movweq	r0, #516	; 0x204
200016a0:	04000304 	streq	r0, [r0], #-772	; 0xfffffcfc
200016a4:	04020401 	streq	r0, [r2], #-1025	; 0xfffffbff
200016a8:	04040403 	streq	r0, [r4], #-1027	; 0xfffffbfd
	...

200016b4 <ball_geometry>:
200016b4:	0000000c 	andeq	r0, r0, ip
200016b8:	00000004 	andeq	r0, r0, r4
200016bc:	00000004 	andeq	r0, r0, r4
200016c0:	02000100 	andeq	r0, r0, #0, 2
200016c4:	01010001 	tsteq	r1, r1
200016c8:	03010201 	movweq	r0, #4609	; 0x1201
200016cc:	01020002 	tsteq	r2, r2
200016d0:	03020202 	movweq	r0, #8706	; 0x2202
200016d4:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

200016e8 <padd_geometry>:
200016e8:	00000028 	andeq	r0, r0, r8, lsr #32
200016ec:	00000014 	andeq	r0, r0, r4, lsl r0
200016f0:	00000002 	andeq	r0, r0, r2
200016f4:	00010000 	andeq	r0, r1, r0
200016f8:	00030002 	andeq	r0, r3, r2
200016fc:	00050004 	andeq	r0, r5, r4
20001700:	00070006 	andeq	r0, r7, r6
20001704:	00090008 	andeq	r0, r9, r8
20001708:	000b000a 	andeq	r0, fp, sl
2000170c:	000d000c 	andeq	r0, sp, ip
20001710:	000f000e 	andeq	r0, pc, lr
20001714:	00110010 	andseq	r0, r1, r0, lsl r0
20001718:	00130012 	andseq	r0, r3, r2, lsl r0

2000171c <square_1>:
2000171c:	20001680 	andcs	r1, r0, r0, lsl #13
	...
20001728:	00000001 	andeq	r0, r0, r1
2000172c:	00000001 	andeq	r0, r0, r1
20001730:	20000a11 	andcs	r0, r0, r1, lsl sl
20001734:	20000b63 	andcs	r0, r0, r3, ror #22
20001738:	20000bcf 	andcs	r0, r0, pc, asr #23
2000173c:	200009d1 	ldrdcs	r0, [r0], -r1

20001740 <square_2>:
20001740:	20001680 	andcs	r1, r0, r0, lsl #13
	...
2000174c:	00000001 	andeq	r0, r0, r1
20001750:	00000001 	andeq	r0, r0, r1
20001754:	20000a11 	andcs	r0, r0, r1, lsl sl
20001758:	20000b63 	andcs	r0, r0, r3, ror #22
2000175c:	20000bcf 	andcs	r0, r0, pc, asr #23
20001760:	200009d1 	ldrdcs	r0, [r0], -r1

20001764 <square_3>:
20001764:	20001680 	andcs	r1, r0, r0, lsl #13
	...
20001770:	00000001 	andeq	r0, r0, r1
20001774:	00000001 	andeq	r0, r0, r1
20001778:	20000a11 	andcs	r0, r0, r1, lsl sl
2000177c:	20000b63 	andcs	r0, r0, r3, ror #22
20001780:	20000bcf 	andcs	r0, r0, pc, asr #23
20001784:	200009d1 	ldrdcs	r0, [r0], -r1

20001788 <square_4>:
20001788:	20001680 	andcs	r1, r0, r0, lsl #13
	...
20001794:	00000001 	andeq	r0, r0, r1
20001798:	00000001 	andeq	r0, r0, r1
2000179c:	20000a11 	andcs	r0, r0, r1, lsl sl
200017a0:	20000b63 	andcs	r0, r0, r3, ror #22
200017a4:	20000bcf 	andcs	r0, r0, pc, asr #23
200017a8:	200009d1 	ldrdcs	r0, [r0], -r1

200017ac <square_5>:
200017ac:	20001680 	andcs	r1, r0, r0, lsl #13
	...
200017b8:	00000001 	andeq	r0, r0, r1
200017bc:	00000001 	andeq	r0, r0, r1
200017c0:	20000a11 	andcs	r0, r0, r1, lsl sl
200017c4:	20000b63 	andcs	r0, r0, r3, ror #22
200017c8:	20000bcf 	andcs	r0, r0, pc, asr #23
200017cc:	200009d1 	ldrdcs	r0, [r0], -r1

200017d0 <square_6>:
200017d0:	20001680 	andcs	r1, r0, r0, lsl #13
	...
200017dc:	00000001 	andeq	r0, r0, r1
200017e0:	00000001 	andeq	r0, r0, r1
200017e4:	20000a11 	andcs	r0, r0, r1, lsl sl
200017e8:	20000b63 	andcs	r0, r0, r3, ror #22
200017ec:	20000bcf 	andcs	r0, r0, pc, asr #23
200017f0:	200009d1 	ldrdcs	r0, [r0], -r1

200017f4 <square_7>:
200017f4:	20001680 	andcs	r1, r0, r0, lsl #13
	...
20001800:	00000001 	andeq	r0, r0, r1
20001804:	00000001 	andeq	r0, r0, r1
20001808:	20000a11 	andcs	r0, r0, r1, lsl sl
2000180c:	20000b63 	andcs	r0, r0, r3, ror #22
20001810:	20000bcf 	andcs	r0, r0, pc, asr #23
20001814:	200009d1 	ldrdcs	r0, [r0], -r1

20001818 <square_8>:
20001818:	20001680 	andcs	r1, r0, r0, lsl #13
	...
20001824:	00000001 	andeq	r0, r0, r1
20001828:	00000001 	andeq	r0, r0, r1
2000182c:	20000a11 	andcs	r0, r0, r1, lsl sl
20001830:	20000b63 	andcs	r0, r0, r3, ror #22
20001834:	20000bcf 	andcs	r0, r0, pc, asr #23
20001838:	200009d1 	ldrdcs	r0, [r0], -r1

2000183c <square_9>:
2000183c:	20001680 	andcs	r1, r0, r0, lsl #13
	...
20001848:	00000001 	andeq	r0, r0, r1
2000184c:	00000001 	andeq	r0, r0, r1
20001850:	20000a11 	andcs	r0, r0, r1, lsl sl
20001854:	20000b63 	andcs	r0, r0, r3, ror #22
20001858:	20000bcf 	andcs	r0, r0, pc, asr #23
2000185c:	200009d1 	ldrdcs	r0, [r0], -r1

20001860 <ball>:
20001860:	200016b4 			; <UNDEFINED> instruction: 0x200016b4
20001864:	fffffffd 			; <UNDEFINED> instruction: 0xfffffffd
20001868:	00000003 	andeq	r0, r0, r3
2000186c:	00000028 	andeq	r0, r0, r8, lsr #32
20001870:	0000002d 	andeq	r0, r0, sp, lsr #32
20001874:	20000a11 	andcs	r0, r0, r1, lsl sl
20001878:	20000b63 	andcs	r0, r0, r3, ror #22
2000187c:	20000bcf 	andcs	r0, r0, pc, asr #23
20001880:	200009d1 	ldrdcs	r0, [r0], -r1

20001884 <padd>:
20001884:	200016e8 	andcs	r1, r0, r8, ror #13
	...
20001890:	00000032 	andeq	r0, r0, r2, lsr r0
20001894:	00000037 	andeq	r0, r0, r7, lsr r0
20001898:	20000a11 	andcs	r0, r0, r1, lsl sl
2000189c:	20000b63 	andcs	r0, r0, r3, ror #22
200018a0:	20000d23 	andcs	r0, r0, r3, lsr #26
200018a4:	200009d1 	ldrdcs	r0, [r0], -r1
200018a8:	636c6557 	cmnvs	ip, #364904448	; 0x15c00000
200018ac:	20656d6f 	rsbcs	r6, r5, pc, ror #26
200018b0:	00000000 	andeq	r0, r0, r0
200018b4:	74206f74 	strtvc	r6, [r0], #-3956	; 0xfffff08c
200018b8:	67206568 	strvs	r6, [r0, -r8, ror #10]!
200018bc:	21656d61 	cmncs	r5, r1, ror #26
200018c0:	00000000 	andeq	r0, r0, r0
200018c4:	20000f82 	andcs	r0, r0, r2, lsl #31
200018c8:	20000f8a 	andcs	r0, r0, sl, lsl #31
200018cc:	20000f92 	mulcs	r0, r2, pc	; <UNPREDICTABLE>
200018d0:	20000f9a 	mulcs	r0, sl, pc	; <UNPREDICTABLE>
200018d4:	20000fa2 	andcs	r0, r0, r2, lsr #31
200018d8:	20000faa 	andcs	r0, r0, sl, lsr #31
200018dc:	20000fb2 			; <UNDEFINED> instruction: 0x20000fb2
200018e0:	20000fba 			; <UNDEFINED> instruction: 0x20000fba
200018e4:	20000fc2 	andcs	r0, r0, r2, asr #31
200018e8:	20000fca 	andcs	r0, r0, sl, asr #31
200018ec:	20000fd2 	ldrdcs	r0, [r0], -r2
200018f0:	20000fda 	ldrdcs	r0, [r0], -sl
200018f4:	20000fe2 	andcs	r0, r0, r2, ror #31
200018f8:	20000fea 	andcs	r0, r0, sl, ror #31
200018fc:	20000ff2 	strdcs	r0, [r0], -r2
20001900:	20000ffa 	strdcs	r0, [r0], -sl
20001904:	20001056 	andcs	r1, r0, r6, asr r0
20001908:	20001036 	andcs	r1, r0, r6, lsr r0
2000190c:	2000103e 	andcs	r1, r0, lr, lsr r0
20001910:	20001046 	andcs	r1, r0, r6, asr #32
20001914:	2000104e 	andcs	r1, r0, lr, asr #32
20001918:	0a030201 	beq	200c2124 <padd+0xc08a0>
2000191c:	0b060504 	bleq	20182d34 <padd+0x1814b0>
20001920:	0c090807 	stceq	8, cr0, [r9], {7}
20001924:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 200018f4 <padd+0x70>

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000001f7 	strdeq	r0, [r0], -r7
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000021 	andeq	r0, r0, r1, lsr #32
      10:	0000f90c 	andeq	pc, r0, ip, lsl #18
      14:	00015a00 	andeq	r5, r1, r0, lsl #20
      18:	00001000 	andeq	r1, r0, r0
      1c:	0002a620 	andeq	sl, r2, r0, lsr #12
      20:	00000000 	andeq	r0, r0, r0
      24:	08010200 	stmdaeq	r1, {r9}
      28:	000000c6 	andeq	r0, r0, r6, asr #1
      2c:	e6070202 	str	r0, [r7], -r2, lsl #4
      30:	03000000 	movweq	r0, #0
      34:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
      38:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
      3c:	00055407 	andeq	r5, r5, r7, lsl #8
      40:	00b90400 	adcseq	r0, r9, r0, lsl #8
      44:	61010000 	mrsvs	r0, (UNDEF: 1)
      48:	2000026c 	andcs	r0, r0, ip, ror #4
      4c:	0000004a 	andeq	r0, r0, sl, asr #32
      50:	007d9c01 	rsbseq	r9, sp, r1, lsl #24
      54:	78050000 	stmdavc	r5, {}	; <UNPREDICTABLE>
      58:	33610100 	cmncc	r1, #0, 2
      5c:	02000000 	andeq	r0, r0, #0
      60:	79056c91 	stmdbvc	r5, {r0, r4, r7, sl, fp, sp, lr}
      64:	33610100 	cmncc	r1, #0, 2
      68:	02000000 	andeq	r0, r0, #0
      6c:	00066891 	muleq	r6, r1, r8
      70:	01000000 	mrseq	r0, (UNDEF: 0)
      74:	00002562 	andeq	r2, r0, r2, ror #10
      78:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
      7c:	01e00400 	mvneq	r0, r0, lsl #8
      80:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
      84:	20000230 	andcs	r0, r0, r0, lsr r2
      88:	0000003c 	andeq	r0, r0, ip, lsr r0
      8c:	00a19c01 	adceq	r9, r1, r1, lsl #24
      90:	07070000 	streq	r0, [r7, -r0]
      94:	01000000 	mrseq	r0, (UNDEF: 0)
      98:	00002558 	andeq	r2, r0, r8, asr r5
      9c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
      a0:	00110800 	andseq	r0, r1, r0, lsl #16
      a4:	4a010000 	bmi	400ac <startup-0x1ffbff54>
      a8:	200001f6 	strdcs	r0, [r0], -r6
      ac:	0000003a 	andeq	r0, r0, sl, lsr r0
      b0:	bb049c01 	bllt	1270bc <startup-0x1fed8f44>
      b4:	01000001 	tsteq	r0, r1
      b8:	0001c444 	andeq	ip, r1, r4, asr #8
      bc:	00003220 	andeq	r3, r0, r0, lsr #4
      c0:	d69c0100 	ldrle	r0, [ip], r0, lsl #2
      c4:	07000000 	streq	r0, [r0, -r0]
      c8:	00000344 	andeq	r0, r0, r4, asr #6
      cc:	00254401 	eoreq	r4, r5, r1, lsl #8
      d0:	91020000 	mrsls	r0, (UNDEF: 2)
      d4:	ab090077 	blge	2402b8 <startup-0x1fdbfd48>
      d8:	01000001 	tsteq	r0, r1
      dc:	00002539 	andeq	r2, r0, r9, lsr r5
      e0:	00017c00 	andeq	r7, r1, r0, lsl #24
      e4:	00004820 	andeq	r4, r0, r0, lsr #16
      e8:	fe9c0100 	cdp2	1, 9, cr0, cr12, cr0, {0}
      ec:	06000000 	streq	r0, [r0], -r0
      f0:	0000025e 	andeq	r0, r0, lr, asr r2
      f4:	00253b01 	eoreq	r3, r5, r1, lsl #22
      f8:	91020000 	mrsls	r0, (UNDEF: 2)
      fc:	d409006f 	strle	r0, [r9], #-111	; 0xffffff91
     100:	01000000 	mrseq	r0, (UNDEF: 0)
     104:	0000252f 	andeq	r2, r0, pc, lsr #10
     108:	00013400 	andeq	r3, r1, r0, lsl #8
     10c:	00004820 	andeq	r4, r0, r0, lsr #16
     110:	269c0100 	ldrcs	r0, [ip], r0, lsl #2
     114:	06000001 	streq	r0, [r0], -r1
     118:	000000da 	ldrdeq	r0, [r0], -sl
     11c:	00253101 	eoreq	r3, r5, r1, lsl #2
     120:	91020000 	mrsls	r0, (UNDEF: 2)
     124:	8504006f 	strhi	r0, [r4, #-111]	; 0xffffff91
     128:	01000001 	tsteq	r0, r1
     12c:	00010a29 	andeq	r0, r1, r9, lsr #20
     130:	00002a20 	andeq	r2, r0, r0, lsr #20
     134:	4a9c0100 	bmi	fe70053c <padd+0xde6fecb8>
     138:	07000001 	streq	r0, [r0, -r1]
     13c:	00000263 	andeq	r0, r0, r3, ror #4
     140:	00252901 	eoreq	r2, r5, r1, lsl #18
     144:	91020000 	mrsls	r0, (UNDEF: 2)
     148:	f1040077 			; <UNDEFINED> instruction: 0xf1040077
     14c:	01000001 	tsteq	r0, r1
     150:	0000e023 	andeq	lr, r0, r3, lsr #32
     154:	00002a20 	andeq	r2, r0, r0, lsr #20
     158:	6e9c0100 	fmlvse	f0, f4, f0
     15c:	07000001 	streq	r0, [r0, -r1]
     160:	00000344 	andeq	r0, r0, r4, asr #6
     164:	00252301 	eoreq	r2, r5, r1, lsl #6
     168:	91020000 	mrsls	r0, (UNDEF: 2)
     16c:	960a0077 			; <UNDEFINED> instruction: 0x960a0077
     170:	01000001 	tsteq	r0, r1
     174:	0000a41f 	andeq	sl, r0, pc, lsl r4
     178:	00003c20 	andeq	r3, r0, r0, lsr #24
     17c:	909c0100 	addsls	r0, ip, r0, lsl #2
     180:	05000001 	streq	r0, [r0, #-1]
     184:	1f010078 	svcne	0x00010078
     188:	00000025 	andeq	r0, r0, r5, lsr #32
     18c:	00779102 	rsbseq	r9, r7, r2, lsl #2
     190:	0001470a 	andeq	r4, r1, sl, lsl #14
     194:	741a0100 	ldrvc	r0, [sl], #-256	; 0xffffff00
     198:	30200000 	eorcc	r0, r0, r0
     19c:	01000000 	mrseq	r0, (UNDEF: 0)
     1a0:	0001b29c 	muleq	r1, ip, r2
     1a4:	00780500 	rsbseq	r0, r8, r0, lsl #10
     1a8:	00251a01 	eoreq	r1, r5, r1, lsl #20
     1ac:	91020000 	mrsls	r0, (UNDEF: 2)
     1b0:	31090077 	tstcc	r9, r7, ror r0
     1b4:	01000001 	tsteq	r0, r1
     1b8:	00002510 	andeq	r2, r0, r0, lsl r5
     1bc:	00004000 	andeq	r4, r0, r0
     1c0:	00003420 	andeq	r3, r0, r0, lsr #8
     1c4:	da9c0100 	ble	fe7005cc <padd+0xde6fed48>
     1c8:	06000001 	streq	r0, [r0], -r1
     1cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     1d0:	00251401 	eoreq	r1, r5, r1, lsl #8
     1d4:	91020000 	mrsls	r0, (UNDEF: 2)
     1d8:	c90b0077 	stmdbgt	fp, {r0, r1, r2, r4, r5, r6}
     1dc:	01000001 	tsteq	r0, r1
     1e0:	00001009 	andeq	r1, r0, r9
     1e4:	00003020 	andeq	r3, r0, r0, lsr #32
     1e8:	079c0100 	ldreq	r0, [ip, r0, lsl #2]
     1ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     1f0:	00250901 	eoreq	r0, r5, r1, lsl #18
     1f4:	91020000 	mrsls	r0, (UNDEF: 2)
     1f8:	eb000077 	bl	3dc <startup-0x1ffffc24>
     1fc:	04000002 	streq	r0, [r0], #-2
     200:	0000d700 	andeq	sp, r0, r0, lsl #14
     204:	21010400 	tstcs	r1, r0, lsl #8
     208:	0c000000 	stceq	0, cr0, [r0], {-0}
     20c:	0000021b 	andeq	r0, r0, fp, lsl r2
     210:	0000015a 	andeq	r0, r0, sl, asr r1
     214:	200002b8 			; <UNDEFINED> instruction: 0x200002b8
     218:	00000510 	andeq	r0, r0, r0, lsl r5
     21c:	000000bd 	strheq	r0, [r0], -sp
     220:	0002c102 	andeq	ip, r2, r2, lsl #2
     224:	30680200 	rsbcc	r0, r8, r0, lsl #4
     228:	03000000 	movweq	r0, #0
     22c:	00c60801 	sbceq	r0, r6, r1, lsl #16
     230:	02030000 	andeq	r0, r3, #0
     234:	0000e607 	andeq	lr, r0, r7, lsl #12
     238:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
     23c:	00746e69 	rsbseq	r6, r4, r9, ror #28
     240:	54070403 	strpl	r0, [r7], #-1027	; 0xfffffbfd
     244:	05000005 	streq	r0, [r0, #-5]
     248:	00000025 	andeq	r0, r0, r5, lsr #32
     24c:	0000005d 	andeq	r0, r0, sp, asr r0
     250:	00004506 	andeq	r4, r0, r6, lsl #10
     254:	0003ff00 	andeq	pc, r3, r0, lsl #30
     258:	00021007 	andeq	r1, r2, r7
     25c:	4c810100 	stfmis	f0, [r1], {0}
     260:	05000000 	streq	r0, [r0, #-0]
     264:	00124403 	andseq	r4, r2, r3, lsl #8
     268:	020a0820 	andeq	r0, sl, #32, 16	; 0x200000
     26c:	a2010000 	andge	r0, r1, #0
     270:	20000794 	mulcs	r0, r4, r7
     274:	00000034 	andeq	r0, r0, r4, lsr r0
     278:	00909c01 	addseq	r9, r0, r1, lsl #24
     27c:	69090000 	stmdbvs	r9, {}	; <UNPREDICTABLE>
     280:	3ea30100 	fdvccs	f0, f3, f0
     284:	02000000 	andeq	r0, r0, #0
     288:	0a007491 	beq	1d4d4 <startup-0x1ffe2b2c>
     28c:	000002ed 	andeq	r0, r0, sp, ror #5
     290:	06c89501 	strbeq	r9, [r8], r1, lsl #10
     294:	00cc2000 	sbceq	r2, ip, r0
     298:	9c010000 	stcls	0, cr0, [r1], {-0}
     29c:	000000e4 	andeq	r0, r0, r4, ror #1
     2a0:	01006909 	tsteq	r0, r9, lsl #18
     2a4:	00002596 	muleq	r0, r6, r5
     2a8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     2ac:	01006a09 	tsteq	r0, r9, lsl #20
     2b0:	00002596 	muleq	r0, r6, r5
     2b4:	76910200 	ldrvc	r0, [r1], r0, lsl #4
     2b8:	00013c0b 	andeq	r3, r1, fp, lsl #24
     2bc:	25960100 	ldrcs	r0, [r6, #256]	; 0x100
     2c0:	02000000 	andeq	r0, r0, #0
     2c4:	63096f91 	movwvs	r6, #40849	; 0x9f91
     2c8:	25960100 	ldrcs	r0, [r6, #256]	; 0x100
     2cc:	02000000 	andeq	r0, r0, #0
     2d0:	6b097591 	blvs	25d91c <startup-0x1fda26e4>
     2d4:	45970100 	ldrmi	r0, [r7, #256]	; 0x100
     2d8:	02000000 	andeq	r0, r0, #0
     2dc:	0c007091 	stceq	0, cr7, [r0], {145}	; 0x91
     2e0:	000002c9 	andeq	r0, r0, r9, asr #5
     2e4:	06408301 	strbeq	r8, [r0], -r1, lsl #6
     2e8:	00882000 	addeq	r2, r8, r0
     2ec:	9c010000 	stcls	0, cr0, [r1], {-0}
     2f0:	0000012e 	andeq	r0, r0, lr, lsr #2
     2f4:	0100780d 	tsteq	r0, sp, lsl #16
     2f8:	00004583 	andeq	r4, r0, r3, lsl #11
     2fc:	6c910200 	lfmvs	f0, 4, [r1], {0}
     300:	0100790d 	tsteq	r0, sp, lsl #18
     304:	00004583 	andeq	r4, r0, r3, lsl #11
     308:	68910200 	ldmvs	r1, {r9}
     30c:	0002cf0b 	andeq	ip, r2, fp, lsl #30
     310:	25840100 	strcs	r0, [r4, #256]	; 0x100
     314:	02000000 	andeq	r0, r0, #0
     318:	d40b7391 	strle	r7, [fp], #-913	; 0xfffffc6f
     31c:	01000002 	tsteq	r0, r2
     320:	00003e85 	andeq	r3, r0, r5, lsl #29
     324:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     328:	03140a00 	tsteq	r4, #0, 20
     32c:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
     330:	200005e8 	andcs	r0, r0, r8, ror #11
     334:	00000058 	andeq	r0, r0, r8, asr r0
     338:	01749c01 	cmneq	r4, r1, lsl #24
     33c:	ee0e0000 	cdp	0, 0, cr0, cr14, cr0, {0}
     340:	4a200005 	bmi	80035c <startup-0x1f7ffca4>
     344:	0b000000 	bleq	34c <startup-0x1ffffcb4>
     348:	00000205 	andeq	r0, r0, r5, lsl #4
     34c:	003e7901 	eorseq	r7, lr, r1, lsl #18
     350:	91020000 	mrsls	r0, (UNDEF: 2)
     354:	06120e74 			; <UNDEFINED> instruction: 0x06120e74
     358:	001a2000 	andseq	r2, sl, r0
     35c:	000b0000 	andeq	r0, fp, r0
     360:	01000000 	mrseq	r0, (UNDEF: 0)
     364:	00003e7c 	andeq	r3, r0, ip, ror lr
     368:	70910200 	addsvc	r0, r1, r0, lsl #4
     36c:	0f000000 	svceq	0x00000000
     370:	00000288 	andeq	r0, r0, r8, lsl #5
     374:	05906801 	ldreq	r6, [r0, #2049]	; 0x801
     378:	00582000 	subseq	r2, r8, r0
     37c:	9c010000 	stcls	0, cr0, [r1], {-0}
     380:	00025610 	andeq	r5, r2, r0, lsl r6
     384:	30620100 	rsbcc	r0, r2, r0, lsl #2
     388:	66000000 	strvs	r0, [r0], -r0
     38c:	2a200005 	bcs	8003a8 <startup-0x1f7ffc58>
     390:	01000000 	mrseq	r0, (UNDEF: 0)
     394:	0001ad9c 	muleq	r1, ip, sp
     398:	013c1100 	teqeq	ip, r0, lsl #2
     39c:	62010000 	andvs	r0, r1, #0
     3a0:	00000030 	andeq	r0, r0, r0, lsr r0
     3a4:	00779102 	rsbseq	r9, r7, r2, lsl #2
     3a8:	0002da0a 	andeq	sp, r2, sl, lsl #20
     3ac:	205a0100 	subscs	r0, sl, r0, lsl #2
     3b0:	46200005 	strtmi	r0, [r0], -r5
     3b4:	01000000 	mrseq	r0, (UNDEF: 0)
     3b8:	0001df9c 	muleq	r1, ip, pc	; <UNPREDICTABLE>
     3bc:	02631100 	rsbeq	r1, r3, #0, 2
     3c0:	5a010000 	bpl	403c8 <startup-0x1ffbfc38>
     3c4:	00000025 	andeq	r0, r0, r5, lsr #32
     3c8:	11779102 	cmnne	r7, r2, lsl #2
     3cc:	0000013c 	andeq	r0, r0, ip, lsr r1
     3d0:	00255a01 	eoreq	r5, r5, r1, lsl #20
     3d4:	91020000 	mrsls	r0, (UNDEF: 2)
     3d8:	360a0076 			; <UNDEFINED> instruction: 0x360a0076
     3dc:	01000003 	tsteq	r0, r3
     3e0:	0004e053 	andeq	lr, r4, r3, asr r0
     3e4:	00004020 	andeq	r4, r0, r0, lsr #32
     3e8:	119c0100 	orrsne	r0, ip, r0, lsl #2
     3ec:	11000002 	tstne	r0, r2
     3f0:	00000344 	andeq	r0, r0, r4, asr #6
     3f4:	00255301 	eoreq	r5, r5, r1, lsl #6
     3f8:	91020000 	mrsls	r0, (UNDEF: 2)
     3fc:	013c1177 	teqeq	ip, r7, ror r1
     400:	53010000 	movwpl	r0, #4096	; 0x1000
     404:	00000025 	andeq	r0, r0, r5, lsr #32
     408:	00769102 	rsbseq	r9, r6, r2, lsl #2
     40c:	0002680a 	andeq	r6, r2, sl, lsl #16
     410:	683f0100 	ldmdavs	pc!, {r8}	; <UNPREDICTABLE>
     414:	78200004 	stmdavc	r0!, {r2}
     418:	01000000 	mrseq	r0, (UNDEF: 0)
     41c:	0002439c 	muleq	r2, ip, r3
     420:	08ec1100 	stmiaeq	ip!, {r8, ip}^
     424:	3f010000 	svccc	0x00010000
     428:	00000030 	andeq	r0, r0, r0, lsr r0
     42c:	11779102 	cmnne	r7, r2, lsl #2
     430:	0000013c 	andeq	r0, r0, ip, lsr r1
     434:	00303f01 	eorseq	r3, r0, r1, lsl #30
     438:	91020000 	mrsls	r0, (UNDEF: 2)
     43c:	29100076 	ldmdbcs	r0, {r1, r2, r4, r5, r6}
     440:	01000003 	tsteq	r0, r3
     444:	00003029 	andeq	r3, r0, r9, lsr #32
     448:	0003e000 	andeq	lr, r3, r0
     44c:	00008820 	andeq	r8, r0, r0, lsr #16
     450:	799c0100 	ldmibvc	ip, {r8}
     454:	11000002 	tstne	r0, r2
     458:	0000013c 	andeq	r0, r0, ip, lsr r1
     45c:	00302901 	eorseq	r2, r0, r1, lsl #18
     460:	91020000 	mrsls	r0, (UNDEF: 2)
     464:	025e0b6f 	subseq	r0, lr, #113664	; 0x1bc00
     468:	2a010000 	bcs	40470 <startup-0x1ffbfb90>
     46c:	00000030 	andeq	r0, r0, r0, lsr r0
     470:	00779102 	rsbseq	r9, r7, r2, lsl #2
     474:	00030112 	andeq	r0, r3, r2, lsl r1
     478:	86190100 	ldrhi	r0, [r9], -r0, lsl #2
     47c:	5a200003 	bpl	800490 <startup-0x1f7ffb70>
     480:	01000000 	mrseq	r0, (UNDEF: 0)
     484:	0276139c 	rsbseq	r1, r6, #156, 6	; 0x70000002
     488:	10010000 	andne	r0, r1, r0
     48c:	2000032c 	andcs	r0, r0, ip, lsr #6
     490:	0000005a 	andeq	r0, r0, sl, asr r0
     494:	02ae9c01 	adceq	r9, lr, #256	; 0x100
     498:	3c110000 	ldccc	0, cr0, [r1], {-0}
     49c:	01000001 	tsteq	r0, r1
     4a0:	00002510 	andeq	r2, r0, r0, lsl r5
     4a4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     4a8:	02950c00 	addseq	r0, r5, #0, 24
     4ac:	0c010000 	stceq	0, cr0, [r1], {-0}
     4b0:	200002f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
     4b4:	0000003c 	andeq	r0, r0, ip, lsr r0
     4b8:	02d09c01 	sbcseq	r9, r0, #256	; 0x100
     4bc:	780d0000 	stmdavc	sp, {}	; <UNPREDICTABLE>
     4c0:	250c0100 	strcs	r0, [ip, #-256]	; 0xffffff00
     4c4:	02000000 	andeq	r0, r0, #0
     4c8:	14007791 	strne	r7, [r0], #-1937	; 0xfffff86f
     4cc:	000002ac 	andeq	r0, r0, ip, lsr #5
     4d0:	02b80801 	adcseq	r0, r8, #65536	; 0x10000
     4d4:	00382000 	eorseq	r2, r8, r0
     4d8:	9c010000 	stcls	0, cr0, [r1], {-0}
     4dc:	0100780d 	tsteq	r0, sp, lsl #16
     4e0:	00002508 	andeq	r2, r0, r8, lsl #10
     4e4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     4e8:	04660000 	strbteq	r0, [r6], #-0
     4ec:	00040000 	andeq	r0, r4, r0
     4f0:	0000023c 	andeq	r0, r0, ip, lsr r2
     4f4:	00210104 	eoreq	r0, r1, r4, lsl #2
     4f8:	510c0000 	mrspl	r0, (UNDEF: 12)
     4fc:	5a000003 	bpl	510 <startup-0x1ffffaf0>
     500:	00000001 	andeq	r0, r0, r1
     504:	00000000 	andeq	r0, r0, r0
     508:	30000000 	andcc	r0, r0, r0
     50c:	02000002 	andeq	r0, r0, #2
     510:	00c60801 	sbceq	r0, r6, r1, lsl #16
     514:	02020000 	andeq	r0, r2, #0
     518:	0000e607 	andeq	lr, r0, r7, lsl #12
     51c:	045a0300 	ldrbeq	r0, [sl], #-768	; 0xfffffd00
     520:	02020000 	andeq	r0, r2, #0
     524:	000054b6 			; <UNDEFINED> instruction: 0x000054b6
     528:	00780400 	rsbseq	r0, r8, r0, lsl #8
     52c:	0025b702 	eoreq	fp, r5, r2, lsl #14
     530:	04000000 	streq	r0, [r0], #-0
     534:	b8020079 	stmdalt	r2, {r0, r3, r4, r5, r6}
     538:	00000025 	andeq	r0, r0, r5, lsr #32
     53c:	ff050001 			; <UNDEFINED> instruction: 0xff050001
     540:	02000003 	andeq	r0, r0, #3
     544:	000033b9 			; <UNDEFINED> instruction: 0x000033b9
     548:	03830300 	orreq	r0, r3, #0, 6
     54c:	02340000 	eorseq	r0, r4, #0
     550:	00009bbd 			; <UNDEFINED> instruction: 0x00009bbd
     554:	04410600 	strbeq	r0, [r1], #-1536	; 0xfffffa00
     558:	be020000 	cdplt	0, 0, cr0, cr2, cr0, {0}
     55c:	0000009b 	muleq	r0, fp, r0
     560:	041c0600 	ldreq	r0, [ip], #-1536	; 0xfffffa00
     564:	bf020000 	svclt	0x00020000
     568:	0000009b 	muleq	r0, fp, r0
     56c:	04220604 	strteq	r0, [r2], #-1540	; 0xfffff9fc
     570:	c0020000 	andgt	r0, r2, r0
     574:	0000009b 	muleq	r0, fp, r0
     578:	78700408 	ldmdavc	r0!, {r3, sl}^
     57c:	a2c10200 	sbcge	r0, r1, #0, 4
     580:	0c000000 	stceq	0, cr0, [r0], {-0}
     584:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
     588:	00746e69 	rsbseq	r6, r4, r9, ror #28
     58c:	00005408 	andeq	r5, r0, r8, lsl #8
     590:	0000b200 	andeq	fp, r0, r0, lsl #4
     594:	00b20900 	adcseq	r0, r2, r0, lsl #18
     598:	00130000 	andseq	r0, r3, r0
     59c:	54070402 	strpl	r0, [r7], #-1026	; 0xfffffbfe
     5a0:	05000005 	streq	r0, [r0, #-5]
     5a4:	000003e4 	andeq	r0, r0, r4, ror #7
     5a8:	005fc202 	subseq	ip, pc, r2, lsl #4
     5ac:	e3050000 	movw	r0, #20480	; 0x5000
     5b0:	02000003 	andeq	r0, r0, #3
     5b4:	0000cfc2 	andeq	ip, r0, r2, asr #31
     5b8:	5f040a00 	svcpl	0x00040a00
     5bc:	03000000 	movweq	r0, #0
     5c0:	00000479 	andeq	r0, r0, r9, ror r4
     5c4:	4ec50224 	cdpmi	2, 12, cr0, cr5, cr4, {1}
     5c8:	04000001 	streq	r0, [r0], #-1
     5cc:	006f6567 	rsbeq	r6, pc, r7, ror #10
     5d0:	00c4c602 	sbceq	ip, r4, r2, lsl #12
     5d4:	06000000 	streq	r0, [r0], -r0
     5d8:	0000040a 	andeq	r0, r0, sl, lsl #8
     5dc:	009bc702 	addseq	ip, fp, r2, lsl #14
     5e0:	06040000 	streq	r0, [r4], -r0
     5e4:	0000040f 	andeq	r0, r0, pc, lsl #8
     5e8:	009bc702 	addseq	ip, fp, r2, lsl #14
     5ec:	06080000 	streq	r0, [r8], -r0
     5f0:	0000034c 	andeq	r0, r0, ip, asr #6
     5f4:	009bc802 	addseq	ip, fp, r2, lsl #16
     5f8:	060c0000 	streq	r0, [ip], -r0
     5fc:	00000405 	andeq	r0, r0, r5, lsl #8
     600:	009bc802 	addseq	ip, fp, r2, lsl #16
     604:	06100000 	ldreq	r0, [r0], -r0
     608:	000004a1 	andeq	r0, r0, r1, lsr #9
     60c:	015fc902 	cmpeq	pc, r2, lsl #18
     610:	06140000 	ldreq	r0, [r4], -r0
     614:	000002a6 	andeq	r0, r0, r6, lsr #5
     618:	015fca02 	cmpeq	pc, r2, lsl #20
     61c:	06180000 	ldreq	r0, [r8], -r0
     620:	000004d5 	ldrdeq	r0, [r0], -r5
     624:	015fcb02 	cmpeq	pc, r2, lsl #22
     628:	061c0000 	ldreq	r0, [ip], -r0
     62c:	000004a6 	andeq	r0, r0, r6, lsr #9
     630:	017acc02 	cmneq	sl, r2, lsl #24
     634:	00200000 	eoreq	r0, r0, r0
     638:	0001590b 	andeq	r5, r1, fp, lsl #18
     63c:	01590c00 	cmpeq	r9, r0, lsl #24
     640:	0a000000 	beq	648 <startup-0x1ffff9b8>
     644:	0000d504 	andeq	sp, r0, r4, lsl #10
     648:	4e040a00 	vmlami.f32	s0, s8, s0
     64c:	0b000001 	bleq	658 <startup-0x1ffff9a8>
     650:	0000017a 	andeq	r0, r0, sl, ror r1
     654:	0001590c 	andeq	r5, r1, ip, lsl #18
     658:	009b0c00 	addseq	r0, fp, r0, lsl #24
     65c:	9b0c0000 	blls	300664 <startup-0x1fcff99c>
     660:	00000000 	andeq	r0, r0, r0
     664:	0165040a 	cmneq	r5, sl, lsl #8
     668:	ce050000 	cdpgt	0, 0, cr0, cr5, cr0, {0}
     66c:	02000004 	andeq	r0, r0, #4
     670:	0000d5cd 	andeq	sp, r0, sp, asr #11
     674:	04cd0500 	strbeq	r0, [sp], #1280	; 0x500
     678:	cd020000 	stcgt	0, cr0, [r2, #-0]
     67c:	00000159 	andeq	r0, r0, r9, asr r1
     680:	00002508 	andeq	r2, r0, r8, lsl #10
     684:	0001a600 	andeq	sl, r1, r0, lsl #12
     688:	00b20900 	adcseq	r0, r2, r0, lsl #18
     68c:	003b0000 	eorseq	r0, fp, r0
     690:	00047e0d 	andeq	r7, r4, sp, lsl #28
     694:	96030300 	strls	r0, [r3], -r0, lsl #6
     698:	05000001 	streq	r0, [r0, #-1]
     69c:	00164403 	andseq	r4, r6, r3, lsl #8
     6a0:	04da0e20 	ldrbeq	r0, [sl], #3616	; 0xe20
     6a4:	17010000 	strne	r0, [r1, -r0]
     6a8:	000000b9 	strheq	r0, [r0], -r9
     6ac:	16800305 	strne	r0, [r0], r5, lsl #6
     6b0:	b00e2000 	andlt	r2, lr, r0
     6b4:	01000004 	tsteq	r0, r4
     6b8:	0000b924 	andeq	fp, r0, r4, lsr #18
     6bc:	b4030500 	strlt	r0, [r3], #-1280	; 0xfffffb00
     6c0:	0e200016 	miaeq	acc0, r6, r0
     6c4:	00000466 	andeq	r0, r0, r6, ror #8
     6c8:	00b93001 	adcseq	r3, r9, r1
     6cc:	03050000 	movweq	r0, #20480	; 0x5000
     6d0:	200016e8 	andcs	r1, r0, r8, ror #13
     6d4:	00038d0d 	andeq	r8, r3, sp, lsl #26
     6d8:	803a0100 	eorshi	r0, sl, r0, lsl #2
     6dc:	05000001 	streq	r0, [r0, #-1]
     6e0:	00171c03 	andseq	r1, r7, r3, lsl #24
     6e4:	03960d20 	orrseq	r0, r6, #32, 26	; 0x800
     6e8:	45010000 	strmi	r0, [r1, #-0]
     6ec:	00000180 	andeq	r0, r0, r0, lsl #3
     6f0:	17400305 	strbne	r0, [r0, -r5, lsl #6]
     6f4:	9f0d2000 	svcls	0x000d2000
     6f8:	01000003 	tsteq	r0, r3
     6fc:	00018050 	andeq	r8, r1, r0, asr r0
     700:	64030500 	strvs	r0, [r3], #-1280	; 0xfffffb00
     704:	0d200017 	stceq	0, cr0, [r0, #-92]!	; 0xffffffa4
     708:	000003a8 	andeq	r0, r0, r8, lsr #7
     70c:	01805b01 	orreq	r5, r0, r1, lsl #22
     710:	03050000 	movweq	r0, #20480	; 0x5000
     714:	20001788 	andcs	r1, r0, r8, lsl #15
     718:	0003b10d 	andeq	fp, r3, sp, lsl #2
     71c:	80660100 	rsbhi	r0, r6, r0, lsl #2
     720:	05000001 	streq	r0, [r0, #-1]
     724:	0017ac03 	andseq	sl, r7, r3, lsl #24
     728:	03ba0d20 			; <UNDEFINED> instruction: 0x03ba0d20
     72c:	71010000 	mrsvc	r0, (UNDEF: 1)
     730:	00000180 	andeq	r0, r0, r0, lsl #3
     734:	17d00305 	ldrbne	r0, [r0, r5, lsl #6]
     738:	c30d2000 	movwgt	r2, #53248	; 0xd000
     73c:	01000003 	tsteq	r0, r3
     740:	0001807b 	andeq	r8, r1, fp, ror r0
     744:	f4030500 	vst3.8	{d0,d2,d4}, [r3], r0
     748:	0d200017 	stceq	0, cr0, [r0, #-92]!	; 0xffffffa4
     74c:	000003cc 	andeq	r0, r0, ip, asr #7
     750:	01808601 	orreq	r8, r0, r1, lsl #12
     754:	03050000 	movweq	r0, #20480	; 0x5000
     758:	20001818 	andcs	r1, r0, r8, lsl r8
     75c:	0003d50d 	andeq	sp, r3, sp, lsl #10
     760:	80910100 	addshi	r0, r1, r0, lsl #2
     764:	05000001 	streq	r0, [r0, #-1]
     768:	00183c03 	andseq	r3, r8, r3, lsl #24
     76c:	049c0d20 	ldreq	r0, [ip], #3360	; 0xd20
     770:	9b010000 	blls	40778 <startup-0x1ffbf888>
     774:	00000180 	andeq	r0, r0, r0, lsl #3
     778:	18600305 	stmdane	r0!, {r0, r2, r8, r9}^
     77c:	870d2000 	strhi	r2, [sp, -r0]
     780:	01000009 	tsteq	r0, r9
     784:	000180a6 	andeq	r8, r1, r6, lsr #1
     788:	84030500 	strhi	r0, [r3], #-1280	; 0xfffffb00
     78c:	0f200018 	svceq	0x00200018
     790:	00000474 	andeq	r0, r0, r4, ror r4
     794:	009be601 	addseq	lr, fp, r1, lsl #12
     798:	085c0000 	ldmdaeq	ip, {}^	; <UNPREDICTABLE>
     79c:	01742000 	cmneq	r4, r0
     7a0:	9c010000 	stcls	0, cr0, [r1], {-0}
     7a4:	000003c6 	andeq	r0, r0, r6, asr #7
     7a8:	00045510 	andeq	r5, r4, r0, lsl r5
     7ac:	9be60100 	blls	ff980bb4 <padd+0xdf97f330>
     7b0:	03000000 	movweq	r0, #0
     7b4:	107f8c91 			; <UNDEFINED> instruction: 0x107f8c91
     7b8:	00000461 	andeq	r0, r0, r1, ror #8
     7bc:	03c6e601 	biceq	lr, r6, #1048576	; 0x100000
     7c0:	91030000 	mrsls	r0, (UNDEF: 3)
     7c4:	ed0d7f88 	stc	15, cr7, [sp, #-544]	; 0xfffffde0
     7c8:	01000003 	tsteq	r0, r3
     7cc:	00018be9 	andeq	r8, r1, r9, ror #23
     7d0:	60910200 	addsvs	r0, r1, r0, lsl #4
     7d4:	00049b0d 	andeq	r9, r4, sp, lsl #22
     7d8:	8bea0100 	blhi	ffa80be0 <padd+0xdfa7f35c>
     7dc:	02000001 	andeq	r0, r0, #1
     7e0:	280d5c91 	stmdacs	sp, {r0, r4, r7, sl, fp, ip, lr}
     7e4:	01000004 	tsteq	r0, r4
     7e8:	00018beb 	andeq	r8, r1, fp, ror #23
     7ec:	58910200 	ldmpl	r1, {r9}
     7f0:	00042d0d 	andeq	r2, r4, sp, lsl #26
     7f4:	8bec0100 	blhi	ffb00bfc <padd+0xdfaff378>
     7f8:	02000001 	andeq	r0, r0, #1
     7fc:	320d5491 	andcc	r5, sp, #-1862270976	; 0x91000000
     800:	01000004 	tsteq	r0, r4
     804:	00018bed 	andeq	r8, r1, sp, ror #23
     808:	50910200 	addspl	r0, r1, r0, lsl #4
     80c:	0004370d 	andeq	r3, r4, sp, lsl #14
     810:	8bee0100 	blhi	ffb80c18 <padd+0xdfb7f394>
     814:	02000001 	andeq	r0, r0, #1
     818:	3c0d4c91 	stccc	12, cr4, [sp], {145}	; 0x91
     81c:	01000004 	tsteq	r0, r4
     820:	00018bef 	andeq	r8, r1, pc, ror #23
     824:	48910200 	ldmmi	r1, {r9}
     828:	0004be0d 	andeq	fp, r4, sp, lsl #28
     82c:	8bf00100 	blhi	ffc00c34 <padd+0xdfbff3b0>
     830:	02000001 	andeq	r0, r0, #1
     834:	4b0d4491 	blmi	351a80 <startup-0x1fcae580>
     838:	01000004 	tsteq	r0, r4
     83c:	00018bf1 	strdeq	r8, [r1], -r1
     840:	40910200 	addsmi	r0, r1, r0, lsl #4
     844:	0003de0d 	andeq	sp, r3, sp, lsl #28
     848:	8bf20100 	blhi	ffc80c50 <padd+0xdfc7f3cc>
     84c:	03000001 	movweq	r0, #1
     850:	0d7fbc91 	ldcleq	12, cr11, [pc, #-580]!	; 614 <startup-0x1ffff9ec>
     854:	00000450 	andeq	r0, r0, r0, asr r4
     858:	018bf301 	orreq	pc, fp, r1, lsl #6
     85c:	91030000 	mrsls	r0, (UNDEF: 3)
     860:	61117fb8 			; <UNDEFINED> instruction: 0x61117fb8
     864:	01007272 	tsteq	r0, r2, ror r2
     868:	0003d9f4 	strdeq	sp, [r3], -r4
     86c:	90910300 	addsls	r0, r1, r0, lsl #6
     870:	04880d7f 	streq	r0, [r8], #3455	; 0xd7f
     874:	fa010000 	blx	4087c <startup-0x1ffbf784>
     878:	0000009b 	muleq	r0, fp, r0
     87c:	7fb49103 	svcvc	0x00b49103
     880:	01007811 	tsteq	r0, r1, lsl r8
     884:	00009bfb 	strdeq	r9, [r0], -fp
     888:	6c910200 	lfmvs	f0, 4, [r1], {0}
     88c:	01006911 	tsteq	r0, r1, lsl r9
     890:	00009bfc 	strdeq	r9, [r0], -ip
     894:	68910200 	ldmvs	r1, {r9}
     898:	00096a12 	andeq	r6, r9, r2, lsl sl
     89c:	00002e20 	andeq	r2, r0, r0, lsr #28
     8a0:	00661300 	rsbeq	r1, r6, r0, lsl #6
     8a4:	9b010d01 	blls	43cb0 <startup-0x1ffbc350>
     8a8:	02000000 	andeq	r0, r0, #0
     8ac:	00006491 	muleq	r0, r1, r4
     8b0:	03cc040a 	biceq	r0, ip, #167772160	; 0xa000000
     8b4:	040a0000 	streq	r0, [sl], #-0
     8b8:	000003d2 	ldrdeq	r0, [r0], -r2
     8bc:	cf080102 	svcgt	0x00080102
     8c0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     8c4:	0000018b 	andeq	r0, r0, fp, lsl #3
     8c8:	000003e9 	andeq	r0, r0, r9, ror #7
     8cc:	0000b209 	andeq	fp, r0, r9, lsl #4
     8d0:	14000800 	strne	r0, [r0], #-2048	; 0xfffff800
     8d4:	000004c3 	andeq	r0, r0, r3, asr #9
     8d8:	0840c101 	stmdaeq	r0, {r0, r8, lr, pc}^
     8dc:	001c2000 	andseq	r2, ip, r0
     8e0:	9c010000 	stcls	0, cr0, [r1], {-0}
     8e4:	00048d15 	andeq	r8, r4, r5, lsl sp
     8e8:	c8b10100 	ldmgt	r1!, {r8}
     8ec:	78200007 	stmdavc	r0!, {r0, r1, r2}
     8f0:	01000000 	mrseq	r0, (UNDEF: 0)
     8f4:	0004389c 	muleq	r4, ip, r8
     8f8:	00731100 	rsbseq	r1, r3, r0, lsl #2
     8fc:	03ccb201 	biceq	fp, ip, #268435456	; 0x10000000
     900:	91020000 	mrsls	r0, (UNDEF: 2)
     904:	03f30d6c 	mvnseq	r0, #108, 26	; 0x1b00
     908:	b3010000 	movwlt	r0, #4096	; 0x1000
     90c:	00000438 	andeq	r0, r0, r8, lsr r4
     910:	0d609102 	stfeqp	f1, [r0, #-8]!
     914:	000003f9 	strdeq	r0, [r0], -r9
     918:	0448b401 	strbeq	fp, [r8], #-1025	; 0xfffffbff
     91c:	91020000 	mrsls	r0, (UNDEF: 2)
     920:	d2080050 	andle	r0, r8, #80	; 0x50
     924:	48000003 	stmdami	r0, {r0, r1}
     928:	09000004 	stmdbeq	r0, {r2}
     92c:	000000b2 	strheq	r0, [r0], -r2
     930:	d2080008 	andle	r0, r8, #8
     934:	58000003 	stmdapl	r0, {r0, r1}
     938:	09000004 	stmdbeq	r0, {r2}
     93c:	000000b2 	strheq	r0, [r0], -r2
     940:	1416000c 	ldrne	r0, [r6], #-12
     944:	01000004 	tsteq	r0, r4
     948:	0000000d 	andeq	r0, r0, sp
     94c:	00000c20 	andeq	r0, r0, r0, lsr #24
     950:	009c0100 	addseq	r0, ip, r0, lsl #2
     954:	00000d00 	andeq	r0, r0, r0, lsl #26
     958:	03830004 	orreq	r0, r3, #4
     95c:	01040000 	mrseq	r0, (UNDEF: 4)
     960:	00000021 	andeq	r0, r0, r1, lsr #32
     964:	0006a00c 	andeq	sl, r6, ip
     968:	00015a00 	andeq	r5, r1, r0, lsl #20
     96c:	0009d000 	andeq	sp, r9, r0
     970:	00049020 	andeq	r9, r4, r0, lsr #32
     974:	00032200 	andeq	r2, r3, r0, lsl #4
     978:	08010200 	stmdaeq	r1, {r9}
     97c:	000000c6 	andeq	r0, r0, r6, asr #1
     980:	e6070202 	str	r0, [r7], -r2, lsl #4
     984:	03000000 	movweq	r0, #0
     988:	0000045a 	andeq	r0, r0, sl, asr r4
     98c:	54b60202 	ldrtpl	r0, [r6], #514	; 0x202
     990:	04000000 	streq	r0, [r0], #-0
     994:	b7020078 	smlsdxlt	r2, r8, r0, r0
     998:	00000025 	andeq	r0, r0, r5, lsr #32
     99c:	00790400 	rsbseq	r0, r9, r0, lsl #8
     9a0:	0025b802 	eoreq	fp, r5, r2, lsl #16
     9a4:	00010000 	andeq	r0, r1, r0
     9a8:	0003ff05 	andeq	pc, r3, r5, lsl #30
     9ac:	33b90200 			; <UNDEFINED> instruction: 0x33b90200
     9b0:	03000000 	movweq	r0, #0
     9b4:	00000383 	andeq	r0, r0, r3, lsl #7
     9b8:	9bbd0234 	blls	fef41290 <padd+0xdef3fa0c>
     9bc:	06000000 	streq	r0, [r0], -r0
     9c0:	00000441 	andeq	r0, r0, r1, asr #8
     9c4:	009bbe02 	addseq	fp, fp, r2, lsl #28
     9c8:	06000000 	streq	r0, [r0], -r0
     9cc:	0000041c 	andeq	r0, r0, ip, lsl r4
     9d0:	009bbf02 	addseq	fp, fp, r2, lsl #30
     9d4:	06040000 	streq	r0, [r4], -r0
     9d8:	00000422 	andeq	r0, r0, r2, lsr #8
     9dc:	009bc002 	addseq	ip, fp, r2
     9e0:	04080000 	streq	r0, [r8], #-0
     9e4:	02007870 	andeq	r7, r0, #112, 16	; 0x700000
     9e8:	0000a2c1 	andeq	sl, r0, r1, asr #5
     9ec:	07000c00 	streq	r0, [r0, -r0, lsl #24]
     9f0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     9f4:	54080074 	strpl	r0, [r8], #-116	; 0xffffff8c
     9f8:	b2000000 	andlt	r0, r0, #0
     9fc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     a00:	000000b2 	strheq	r0, [r0], -r2
     a04:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
     a08:	00055407 	andeq	r5, r5, r7, lsl #8
     a0c:	03e30500 	mvneq	r0, #0, 10
     a10:	c2020000 	andgt	r0, r2, #0
     a14:	000000c4 	andeq	r0, r0, r4, asr #1
     a18:	005f040a 	subseq	r0, pc, sl, lsl #8
     a1c:	79030000 	stmdbvc	r3, {}	; <UNPREDICTABLE>
     a20:	24000004 	strcs	r0, [r0], #-4
     a24:	0143c502 	cmpeq	r3, r2, lsl #10
     a28:	67040000 	strvs	r0, [r4, -r0]
     a2c:	02006f65 	andeq	r6, r0, #404	; 0x194
     a30:	0000b9c6 	andeq	fp, r0, r6, asr #19
     a34:	0a060000 	beq	180a3c <startup-0x1fe7f5c4>
     a38:	02000004 	andeq	r0, r0, #4
     a3c:	00009bc7 	andeq	r9, r0, r7, asr #23
     a40:	0f060400 	svceq	0x00060400
     a44:	02000004 	andeq	r0, r0, #4
     a48:	00009bc7 	andeq	r9, r0, r7, asr #23
     a4c:	4c060800 	stcmi	8, cr0, [r6], {-0}
     a50:	02000003 	andeq	r0, r0, #3
     a54:	00009bc8 	andeq	r9, r0, r8, asr #23
     a58:	05060c00 	streq	r0, [r6, #-3072]	; 0xfffff400
     a5c:	02000004 	andeq	r0, r0, #4
     a60:	00009bc8 	andeq	r9, r0, r8, asr #23
     a64:	a1061000 	mrsge	r1, (UNDEF: 6)
     a68:	02000004 	andeq	r0, r0, #4
     a6c:	000154c9 	andeq	r5, r1, r9, asr #9
     a70:	a6061400 	strge	r1, [r6], -r0, lsl #8
     a74:	02000002 	andeq	r0, r0, #2
     a78:	000154ca 	andeq	r5, r1, sl, asr #9
     a7c:	d5061800 	strle	r1, [r6, #-2048]	; 0xfffff800
     a80:	02000004 	andeq	r0, r0, #4
     a84:	000154cb 	andeq	r5, r1, fp, asr #9
     a88:	a6061c00 	strge	r1, [r6], -r0, lsl #24
     a8c:	02000004 	andeq	r0, r0, #4
     a90:	00016fcc 	andeq	r6, r1, ip, asr #31
     a94:	0b002000 	bleq	8a9c <startup-0x1fff7564>
     a98:	0000014e 	andeq	r0, r0, lr, asr #2
     a9c:	00014e0c 	andeq	r4, r1, ip, lsl #28
     aa0:	040a0000 	streq	r0, [sl], #-0
     aa4:	000000ca 	andeq	r0, r0, sl, asr #1
     aa8:	0143040a 	cmpeq	r3, sl, lsl #8
     aac:	6f0b0000 	svcvs	0x000b0000
     ab0:	0c000001 	stceq	0, cr0, [r0], {1}
     ab4:	0000014e 	andeq	r0, r0, lr, asr #2
     ab8:	00009b0c 	andeq	r9, r0, ip, lsl #22
     abc:	009b0c00 	addseq	r0, fp, r0, lsl #24
     ac0:	0a000000 	beq	ac8 <startup-0x1ffff538>
     ac4:	00015a04 	andeq	r5, r1, r4, lsl #20
     ac8:	04cd0500 	strbeq	r0, [sp], #1280	; 0x500
     acc:	cd020000 	stcgt	0, cr0, [r2, #-0]
     ad0:	0000014e 	andeq	r0, r0, lr, asr #2
     ad4:	00077003 	andeq	r7, r7, r3
     ad8:	d6022c00 	strle	r2, [r2], -r0, lsl #24
     adc:	0000021d 	andeq	r0, r0, sp, lsl r2
     ae0:	6f656704 	svcvs	0x00656704
     ae4:	b9d80200 	ldmiblt	r8, {r9}^
     ae8:	00000000 	andeq	r0, r0, r0
     aec:	0007a406 	andeq	sl, r7, r6, lsl #8
     af0:	9bd90200 	blls	ff6412f8 <padd+0xdf63fa74>
     af4:	04000000 	streq	r0, [r0], #-0
     af8:	00073806 	andeq	r3, r7, r6, lsl #16
     afc:	9bd90200 	blls	ff641304 <padd+0xdf63fa80>
     b00:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     b04:	0009f306 	andeq	pc, r9, r6, lsl #6
     b08:	9bda0200 	blls	ff681310 <padd+0xdf67fa8c>
     b0c:	0c000000 	stceq	0, cr0, [r0], {-0}
     b10:	00094d06 	andeq	r4, r9, r6, lsl #26
     b14:	9bda0200 	blls	ff68131c <padd+0xdf67fa98>
     b18:	10000000 	andne	r0, r0, r0
     b1c:	00073206 	andeq	r3, r7, r6, lsl #4
     b20:	25db0200 	ldrbcs	r0, [fp, #512]	; 0x200
     b24:	14000000 	strne	r0, [r0], #-0
     b28:	000a0006 	andeq	r0, sl, r6
     b2c:	25dc0200 	ldrbcs	r0, [ip, #512]	; 0x200
     b30:	15000000 	strne	r0, [r0, #-0]
     b34:	00026306 	andeq	r6, r2, r6, lsl #6
     b38:	1ddd0200 	lfmne	f0, 2, [sp]
     b3c:	18000002 	stmdane	r0, {r1}
     b40:	0009d206 	andeq	sp, r9, r6, lsl #4
     b44:	3ede0200 	cdpcc	2, 13, cr0, cr14, cr0, {0}
     b48:	1c000002 	stcne	0, cr0, [r0], {2}
     b4c:	0008da06 	andeq	sp, r8, r6, lsl #20
     b50:	4fdf0200 	svcmi	0x00df0200
     b54:	20000002 	andcs	r0, r0, r2
     b58:	00072306 	andeq	r2, r7, r6, lsl #6
     b5c:	4fe00200 	svcmi	0x00e00200
     b60:	24000002 	strcs	r0, [r0], #-2
     b64:	00091006 	andeq	r1, r9, r6
     b68:	3ee10200 	cdpcc	2, 14, cr0, cr1, cr0, {0}
     b6c:	28000002 	stmdacs	r0, {r1}
     b70:	25040a00 	strcs	r0, [r4, #-2560]	; 0xfffff600
     b74:	0b000000 	bleq	b7c <startup-0x1ffff484>
     b78:	00000238 	andeq	r0, r0, r8, lsr r2
     b7c:	0002380c 	andeq	r3, r2, ip, lsl #16
     b80:	009b0c00 	addseq	r0, fp, r0, lsl #24
     b84:	9b0c0000 	blls	300b8c <startup-0x1fcff474>
     b88:	00000000 	andeq	r0, r0, r0
     b8c:	0180040a 	orreq	r0, r0, sl, lsl #8
     b90:	040a0000 	streq	r0, [sl], #-0
     b94:	00000223 	andeq	r0, r0, r3, lsr #4
     b98:	00024f0b 	andeq	r4, r2, fp, lsl #30
     b9c:	02380c00 	eorseq	r0, r8, #0, 24
     ba0:	0a000000 	beq	ba8 <startup-0x1ffff458>
     ba4:	00024404 	andeq	r4, r2, r4, lsl #8
     ba8:	08d30500 	ldmeq	r3, {r8, sl}^
     bac:	e2020000 	and	r0, r2, #0
     bb0:	00000180 	andeq	r0, r0, r0, lsl #3
     bb4:	00077805 	andeq	r7, r7, r5, lsl #16
     bb8:	38e20200 	stmiacc	r2!, {r9}^
     bbc:	02000002 	andeq	r0, r0, #2
     bc0:	00c80601 	sbceq	r0, r8, r1, lsl #12
     bc4:	02020000 	andeq	r0, r2, #0
     bc8:	00082f05 	andeq	r2, r8, r5, lsl #30
     bcc:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
     bd0:	000005a1 	andeq	r0, r0, r1, lsr #11
     bd4:	4f070402 	svcmi	0x00070402
     bd8:	02000005 	andeq	r0, r0, #5
     bdc:	059c0508 	ldreq	r0, [ip, #1288]	; 0x508
     be0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     be4:	00054a07 	andeq	r4, r5, r7, lsl #20
     be8:	078a0500 	streq	r0, [sl, r0, lsl #10]
     bec:	22030000 	andcs	r0, r3, #0
     bf0:	000002a0 	andeq	r0, r0, r0, lsr #5
     bf4:	02a6040a 	adceq	r0, r6, #167772160	; 0xa000000
     bf8:	e30d0000 	movw	r0, #53248	; 0xd000
     bfc:	05000008 	streq	r0, [r0, #-8]
     c00:	000007e4 	andeq	r0, r0, r4, ror #15
     c04:	02792c04 	rsbseq	r2, r9, #4, 24	; 0x400
     c08:	ff050000 			; <UNDEFINED> instruction: 0xff050000
     c0c:	04000008 	streq	r0, [r0], #-8
     c10:	00027972 	andeq	r7, r2, r2, ror r9
     c14:	07eb0e00 	strbeq	r0, [fp, r0, lsl #28]!
     c18:	65050000 	strvs	r0, [r5, #-0]
     c1c:	0000b201 	andeq	fp, r0, r1, lsl #4
     c20:	04040f00 	streq	r0, [r4], #-3840	; 0xfffff100
     c24:	0002eca6 	andeq	lr, r2, r6, lsr #25
     c28:	076a1000 	strbeq	r1, [sl, -r0]!
     c2c:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
     c30:	000002c1 	andeq	r0, r0, r1, asr #5
     c34:	0006f510 	andeq	pc, r6, r0, lsl r5	; <UNPREDICTABLE>
     c38:	eca90400 	cfstrs	mvf0, [r9]
     c3c:	00000002 	andeq	r0, r0, r2
     c40:	00002508 	andeq	r2, r0, r8, lsl #10
     c44:	0002fc00 	andeq	pc, r2, r0, lsl #24
     c48:	00b20900 	adcseq	r0, r2, r0, lsl #18
     c4c:	00030000 	andeq	r0, r3, r0
     c50:	a3040811 	movwge	r0, #18449	; 0x4811
     c54:	0000031d 	andeq	r0, r0, sp, lsl r3
     c58:	00079c06 	andeq	r9, r7, r6, lsl #24
     c5c:	9ba50400 	blls	fe941c64 <padd+0xde9403e0>
     c60:	00000000 	andeq	r0, r0, r0
     c64:	0008ea06 	andeq	lr, r8, r6, lsl #20
     c68:	cdaa0400 	cfstrsgt	mvf0, [sl]
     c6c:	04000002 	streq	r0, [r0], #-2
     c70:	085f0500 	ldmdaeq	pc, {r8, sl}^	; <UNPREDICTABLE>
     c74:	ab040000 	blge	100c7c <startup-0x1feff384>
     c78:	000002fc 	strdeq	r0, [r0], -ip
     c7c:	00067805 	andeq	r7, r6, r5, lsl #16
     c80:	95af0400 	strls	r0, [pc, #1024]!	; 1088 <startup-0x1fffef78>
     c84:	12000002 	andne	r0, r0, #2
     c88:	3b040a04 	blcc	1034a0 <startup-0x1fefcb60>
     c8c:	02000003 	andeq	r0, r0, #3
     c90:	00cf0801 	sbceq	r0, pc, r1, lsl #16
     c94:	3b130000 	blcc	4c0c9c <startup-0x1fb3f364>
     c98:	05000003 	streq	r0, [r0, #-3]
     c9c:	0000095a 	andeq	r0, r0, sl, asr r9
     ca0:	02801606 	addeq	r1, r0, #6291456	; 0x600000
     ca4:	89030000 	stmdbhi	r3, {}	; <UNPREDICTABLE>
     ca8:	18000006 	stmdane	r0, {r1, r2}
     cac:	03a52f06 			; <UNDEFINED> instruction: 0x03a52f06
     cb0:	80060000 	andhi	r0, r6, r0
     cb4:	06000008 	streq	r0, [r0], -r8
     cb8:	0003a531 	andeq	sl, r3, r1, lsr r5
     cbc:	5f040000 	svcpl	0x00040000
     cc0:	3206006b 	andcc	r0, r6, #107	; 0x6b
     cc4:	0000009b 	muleq	r0, fp, r0
     cc8:	09390604 	ldmdbeq	r9!, {r2, r9, sl}
     ccc:	32060000 	andcc	r0, r6, #0
     cd0:	0000009b 	muleq	r0, fp, r0
     cd4:	06720608 	ldrbteq	r0, [r2], -r8, lsl #12
     cd8:	32060000 	andcc	r0, r6, #0
     cdc:	0000009b 	muleq	r0, fp, r0
     ce0:	0999060c 	ldmibeq	r9, {r2, r3, r9, sl}
     ce4:	32060000 	andcc	r0, r6, #0
     ce8:	0000009b 	muleq	r0, fp, r0
     cec:	785f0410 	ldmdavc	pc, {r4, sl}^	; <UNPREDICTABLE>
     cf0:	ab330600 	blge	cc24f8 <startup-0x1f33db08>
     cf4:	14000003 	strne	r0, [r0], #-3
     cf8:	52040a00 	andpl	r0, r4, #0, 20
     cfc:	08000003 	stmdaeq	r0, {r0, r1}
     d00:	00000347 	andeq	r0, r0, r7, asr #6
     d04:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
     d08:	0000b209 	andeq	fp, r0, r9, lsl #4
     d0c:	03000000 	movweq	r0, #0
     d10:	000006e4 	andeq	r0, r0, r4, ror #13
     d14:	34370624 	ldrtcc	r0, [r7], #-1572	; 0xfffff9dc
     d18:	06000004 	streq	r0, [r0], -r4
     d1c:	00000593 	muleq	r0, r3, r5
     d20:	009b3906 	addseq	r3, fp, r6, lsl #18
     d24:	06000000 	streq	r0, [r0], -r0
     d28:	00000907 	andeq	r0, r0, r7, lsl #18
     d2c:	009b3a06 	addseq	r3, fp, r6, lsl #20
     d30:	06040000 	streq	r0, [r4], -r0
     d34:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
     d38:	009b3b06 	addseq	r3, fp, r6, lsl #22
     d3c:	06080000 	streq	r0, [r8], -r0
     d40:	00000a0c 	andeq	r0, r0, ip, lsl #20
     d44:	009b3c06 	addseq	r3, fp, r6, lsl #24
     d48:	060c0000 	streq	r0, [ip], -r0
     d4c:	000007c8 	andeq	r0, r0, r8, asr #15
     d50:	009b3d06 	addseq	r3, fp, r6, lsl #26
     d54:	06100000 	ldreq	r0, [r0], -r0
     d58:	00000792 	muleq	r0, r2, r7
     d5c:	009b3e06 	addseq	r3, fp, r6, lsl #28
     d60:	06140000 	ldreq	r0, [r4], -r0
     d64:	0000099e 	muleq	r0, lr, r9
     d68:	009b3f06 	addseq	r3, fp, r6, lsl #30
     d6c:	06180000 	ldreq	r0, [r8], -r0
     d70:	00000839 	andeq	r0, r0, r9, lsr r8
     d74:	009b4006 	addseq	r4, fp, r6
     d78:	061c0000 	ldreq	r0, [ip], -r0
     d7c:	000009e8 	andeq	r0, r0, r8, ror #19
     d80:	009b4106 	addseq	r4, fp, r6, lsl #2
     d84:	00200000 	eoreq	r0, r0, r0
     d88:	0005c514 	andeq	ip, r5, r4, lsl r5
     d8c:	06010800 	streq	r0, [r1], -r0, lsl #16
     d90:	0004744a 	andeq	r7, r4, sl, asr #8
     d94:	06580600 	ldrbeq	r0, [r8], -r0, lsl #12
     d98:	4b060000 	blmi	180da0 <startup-0x1fe7f260>
     d9c:	00000474 	andeq	r0, r0, r4, ror r4
     da0:	04ea0600 	strbteq	r0, [sl], #1536	; 0x600
     da4:	4c060000 	stcmi	0, cr0, [r6], {-0}
     da8:	00000474 	andeq	r0, r0, r4, ror r4
     dac:	09301580 	ldmdbeq	r0!, {r7, r8, sl, ip}
     db0:	4e060000 	cdpmi	0, 0, cr0, cr6, cr0, {0}
     db4:	00000347 	andeq	r0, r0, r7, asr #6
     db8:	f9150100 			; <UNDEFINED> instruction: 0xf9150100
     dbc:	06000005 	streq	r0, [r0], -r5
     dc0:	00034751 	andeq	r4, r3, r1, asr r7
     dc4:	00010400 	andeq	r0, r1, r0, lsl #8
     dc8:	00033308 	andeq	r3, r3, r8, lsl #6
     dcc:	00048400 	andeq	r8, r4, r0, lsl #8
     dd0:	00b20900 	adcseq	r0, r2, r0, lsl #18
     dd4:	001f0000 	andseq	r0, pc, r0
     dd8:	0007d114 	andeq	sp, r7, r4, lsl r1
     ddc:	06019000 	streq	r9, [r1], -r0
     de0:	0004c25d 	andeq	ip, r4, sp, asr r2
     de4:	08800600 	stmeq	r0, {r9, sl}
     de8:	5e060000 	cdppl	0, 0, cr0, cr6, cr0, {0}
     dec:	000004c2 	andeq	r0, r0, r2, asr #9
     df0:	08980600 	ldmeq	r8, {r9, sl}
     df4:	5f060000 	svcpl	0x00060000
     df8:	0000009b 	muleq	r0, fp, r0
     dfc:	066d0604 	strbteq	r0, [sp], -r4, lsl #12
     e00:	61060000 	mrsvs	r0, (UNDEF: 6)
     e04:	000004c8 	andeq	r0, r0, r8, asr #9
     e08:	05c50608 	strbeq	r0, [r5, #1544]	; 0x608
     e0c:	62060000 	andvs	r0, r6, #0
     e10:	00000434 	andeq	r0, r0, r4, lsr r4
     e14:	040a0088 	streq	r0, [sl], #-136	; 0xffffff78
     e18:	00000484 	andeq	r0, r0, r4, lsl #9
     e1c:	0004d808 	andeq	sp, r4, r8, lsl #16
     e20:	0004d800 	andeq	sp, r4, r0, lsl #16
     e24:	00b20900 	adcseq	r0, r2, r0, lsl #18
     e28:	001f0000 	andseq	r0, pc, r0
     e2c:	04de040a 	ldrbeq	r0, [lr], #1034	; 0x40a
     e30:	03160000 	tsteq	r6, #0
     e34:	00000843 	andeq	r0, r0, r3, asr #16
     e38:	04750608 	ldrbteq	r0, [r5], #-1544	; 0xfffff9f8
     e3c:	06000005 	streq	r0, [r0], -r5
     e40:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
     e44:	021d7606 	andseq	r7, sp, #6291456	; 0x600000
     e48:	06000000 	streq	r0, [r0], -r0
     e4c:	00000504 	andeq	r0, r0, r4, lsl #10
     e50:	009b7706 	addseq	r7, fp, r6, lsl #14
     e54:	00040000 	andeq	r0, r4, r0
     e58:	00086a03 	andeq	r6, r8, r3, lsl #20
     e5c:	b5066800 	strlt	r6, [r6, #-2048]	; 0xfffff800
     e60:	0000062e 	andeq	r0, r0, lr, lsr #12
     e64:	00705f04 	rsbseq	r5, r0, r4, lsl #30
     e68:	021db606 	andseq	fp, sp, #6291456	; 0x600000
     e6c:	04000000 	streq	r0, [r0], #-0
     e70:	0600725f 			; <UNDEFINED> instruction: 0x0600725f
     e74:	00009bb7 			; <UNDEFINED> instruction: 0x00009bb7
     e78:	5f040400 	svcpl	0x00040400
     e7c:	b8060077 	stmdalt	r6, {r0, r1, r2, r4, r5, r6}
     e80:	0000009b 	muleq	r0, fp, r0
     e84:	05f20608 	ldrbeq	r0, [r2, #1544]!	; 0x608
     e88:	b9060000 	stmdblt	r6, {}	; <UNPREDICTABLE>
     e8c:	00000272 	andeq	r0, r0, r2, ror r2
     e90:	070c060c 	streq	r0, [ip, -ip, lsl #12]
     e94:	ba060000 	blt	180e9c <startup-0x1fe7f164>
     e98:	00000272 	andeq	r0, r0, r2, ror r2
     e9c:	625f040e 	subsvs	r0, pc, #234881024	; 0xe000000
     ea0:	bb060066 	bllt	181040 <startup-0x1fe7efc0>
     ea4:	000004df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     ea8:	05610610 	strbeq	r0, [r1, #-1552]!	; 0xfffff9f0
     eac:	bc060000 	stclt	0, cr0, [r6], {-0}
     eb0:	0000009b 	muleq	r0, fp, r0
     eb4:	05d30618 	ldrbeq	r0, [r3, #1560]	; 0x618
     eb8:	c3060000 	movwgt	r0, #24576	; 0x6000
     ebc:	00000333 	andeq	r0, r0, r3, lsr r3
     ec0:	0330061c 	teqeq	r0, #28, 12	; 0x1c00000
     ec4:	c5060000 	strgt	r0, [r6, #-0]
     ec8:	00000789 	andeq	r0, r0, r9, lsl #15
     ecc:	026f0620 	rsbeq	r0, pc, #32, 12	; 0x2000000
     ed0:	c7060000 	strgt	r0, [r6, -r0]
     ed4:	000007b3 			; <UNDEFINED> instruction: 0x000007b3
     ed8:	08f20624 	ldmeq	r2!, {r2, r5, r9, sl}^
     edc:	ca060000 	bgt	180ee4 <startup-0x1fe7f11c>
     ee0:	000007d7 	ldrdeq	r0, [r0], -r7
     ee4:	08f80628 	ldmeq	r8!, {r3, r5, r9, sl}^
     ee8:	cb060000 	blgt	180ef0 <startup-0x1fe7f110>
     eec:	000007f1 	strdeq	r0, [r0], -r1
     ef0:	755f042c 	ldrbvc	r0, [pc, #-1068]	; acc <startup-0x1ffff534>
     ef4:	ce060062 	cdpgt	0, 0, cr0, cr6, cr2, {3}
     ef8:	000004df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     efc:	755f0430 	ldrbvc	r0, [pc, #-1072]	; ad4 <startup-0x1ffff52c>
     f00:	cf060070 	svcgt	0x00060070
     f04:	0000021d 	andeq	r0, r0, sp, lsl r2
     f08:	755f0438 	ldrbvc	r0, [pc, #-1080]	; ad8 <startup-0x1ffff528>
     f0c:	d0060072 	andle	r0, r6, r2, ror r0
     f10:	0000009b 	muleq	r0, fp, r0
     f14:	05aa063c 	streq	r0, [sl, #1596]!	; 0x63c
     f18:	d3060000 	movwle	r0, #24576	; 0x6000
     f1c:	000007f7 	strdeq	r0, [r0], -r7
     f20:	09da0640 	ldmibeq	sl, {r6, r9, sl}^
     f24:	d4060000 	strle	r0, [r6], #-0
     f28:	00000807 	andeq	r0, r0, r7, lsl #16
     f2c:	6c5f0443 	cfldrdvs	mvd0, [pc], {67}	; 0x43
     f30:	d7060062 	strle	r0, [r6, -r2, rrx]
     f34:	000004df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     f38:	06080644 	streq	r0, [r8], -r4, asr #12
     f3c:	da060000 	ble	180f44 <startup-0x1fe7f0bc>
     f40:	0000009b 	muleq	r0, fp, r0
     f44:	062c064c 	strteq	r0, [ip], -ip, asr #12
     f48:	db060000 	blle	180f50 <startup-0x1fe7f0b0>
     f4c:	000002ab 	andeq	r0, r0, fp, lsr #5
     f50:	02620650 	rsbeq	r0, r2, #80, 12	; 0x5000000
     f54:	de060000 	cdple	0, 0, cr0, cr6, cr0, {0}
     f58:	0000064c 	andeq	r0, r0, ip, asr #12
     f5c:	08e40654 	stmiaeq	r4!, {r2, r4, r6, r9, sl}^
     f60:	e2060000 	and	r0, r6, #0
     f64:	00000328 	andeq	r0, r0, r8, lsr #6
     f68:	08720658 	ldmdaeq	r2!, {r3, r4, r6, r9, sl}^
     f6c:	e4060000 	str	r0, [r6], #-0
     f70:	0000031d 	andeq	r0, r0, sp, lsl r3
     f74:	084a065c 	stmdaeq	sl, {r2, r3, r4, r6, r9, sl}^
     f78:	e5060000 	str	r0, [r6, #-0]
     f7c:	0000009b 	muleq	r0, fp, r0
     f80:	9b170064 	blls	5c1118 <startup-0x1fa3eee8>
     f84:	4c000000 	stcmi	0, cr0, [r0], {-0}
     f88:	0c000006 	stceq	0, cr0, [r0], {6}
     f8c:	0000064c 	andeq	r0, r0, ip, asr #12
     f90:	0003330c 	andeq	r3, r3, ip, lsl #6
     f94:	03350c00 	teqeq	r5, #0, 24
     f98:	9b0c0000 	blls	300fa0 <startup-0x1fcff060>
     f9c:	00000000 	andeq	r0, r0, r0
     fa0:	0657040a 	ldrbeq	r0, [r7], -sl, lsl #8
     fa4:	4c130000 	ldcmi	0, cr0, [r3], {-0}
     fa8:	18000006 	stmdane	r0, {r1, r2}
     fac:	000009cb 	andeq	r0, r0, fp, asr #19
     fb0:	39060428 	stmdbcc	r6, {r3, r5, sl}
     fb4:	00078902 	andeq	r8, r7, r2, lsl #18
     fb8:	08281900 	stmdaeq	r8!, {r8, fp, ip}
     fbc:	3b060000 	blcc	180fc4 <startup-0x1fe7f03c>
     fc0:	00009b02 	andeq	r9, r0, r2, lsl #22
     fc4:	01190000 	tsteq	r9, r0
     fc8:	06000006 	streq	r0, [r0], -r6
     fcc:	085e0240 	ldmdaeq	lr, {r6, r9}^
     fd0:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
     fd4:	000006fc 	strdeq	r0, [r0], -ip
     fd8:	5e024006 	cdppl	0, 0, cr4, cr2, cr6, {0}
     fdc:	08000008 	stmdaeq	r0, {r3}
     fe0:	00068119 	andeq	r8, r6, r9, lsl r1
     fe4:	02400600 	subeq	r0, r0, #0, 12
     fe8:	0000085e 	andeq	r0, r0, lr, asr r8
     fec:	0893190c 	ldmeq	r3, {r2, r3, r8, fp, ip}
     ff0:	42060000 	andmi	r0, r6, #0
     ff4:	00009b02 	andeq	r9, r0, r2, lsl #22
     ff8:	12191000 	andsne	r1, r9, #0
     ffc:	06000005 	streq	r0, [r0], -r5
    1000:	0a400243 	beq	1001914 <startup-0x1effe6ec>
    1004:	19140000 	ldmdbne	r4, {}	; <UNPREDICTABLE>
    1008:	000008af 	andeq	r0, r0, pc, lsr #17
    100c:	9b024606 	blls	9282c <startup-0x1ff6d7d4>
    1010:	30000000 	andcc	r0, r0, r0
    1014:	00089d19 	andeq	r9, r8, r9, lsl sp
    1018:	02470600 	subeq	r0, r7, #0, 12
    101c:	00000a55 	andeq	r0, r0, r5, asr sl
    1020:	07d91934 			; <UNDEFINED> instruction: 0x07d91934
    1024:	49060000 	stmdbmi	r6, {}	; <UNPREDICTABLE>
    1028:	00009b02 	andeq	r9, r0, r2, lsl #22
    102c:	a5193800 	ldrge	r3, [r9, #-2048]	; 0xfffff800
    1030:	06000008 	streq	r0, [r0], -r8
    1034:	0a66024b 	beq	1981968 <startup-0x1e67e698>
    1038:	193c0000 	ldmdbne	ip!, {}	; <UNPREDICTABLE>
    103c:	00000762 	andeq	r0, r0, r2, ror #14
    1040:	a5024e06 	strge	r4, [r2, #-3590]	; 0xfffff1fa
    1044:	40000003 	andmi	r0, r0, r3
    1048:	0006da19 	andeq	sp, r6, r9, lsl sl
    104c:	024f0600 	subeq	r0, pc, #0, 12
    1050:	0000009b 	muleq	r0, fp, r0
    1054:	0a071944 	beq	1c756c <startup-0x1fe38a94>
    1058:	50060000 	andpl	r0, r6, r0
    105c:	0003a502 	andeq	sl, r3, r2, lsl #10
    1060:	f8194800 			; <UNDEFINED> instruction: 0xf8194800
    1064:	06000007 	streq	r0, [r0], -r7
    1068:	0a6c0251 	beq	1b019b4 <startup-0x1e4fe64c>
    106c:	194c0000 	stmdbne	ip, {}^	; <UNPREDICTABLE>
    1070:	00000704 	andeq	r0, r0, r4, lsl #14
    1074:	9b025406 	blls	96094 <startup-0x1ff69f6c>
    1078:	50000000 	andpl	r0, r0, r0
    107c:	00062419 	andeq	r2, r6, r9, lsl r4
    1080:	02550600 	subseq	r0, r5, #0, 12
    1084:	00000335 	andeq	r0, r0, r5, lsr r3
    1088:	08101954 	ldmdaeq	r0, {r2, r4, r6, r8, fp, ip}
    108c:	78060000 	stmdavc	r6, {}	; <UNPREDICTABLE>
    1090:	000a1e02 	andeq	r1, sl, r2, lsl #28
    1094:	d11a5800 	tstle	sl, r0, lsl #16
    1098:	06000007 	streq	r0, [r0], -r7
    109c:	04c2027c 	strbeq	r0, [r2], #636	; 0x27c
    10a0:	01480000 	mrseq	r0, (UNDEF: 72)
    10a4:	0007401a 	andeq	r4, r7, sl, lsl r0
    10a8:	027d0600 	rsbseq	r0, sp, #0, 12
    10ac:	00000484 	andeq	r0, r0, r4, lsl #9
    10b0:	c11a014c 	tstgt	sl, ip, asr #2
    10b4:	06000009 	streq	r0, [r0], -r9
    10b8:	0a7d0281 	beq	1f41ac4 <startup-0x1e0be53c>
    10bc:	02dc0000 	sbcseq	r0, ip, #0
    10c0:	0005ea1a 	andeq	lr, r5, sl, lsl sl
    10c4:	02860600 	addeq	r0, r6, #0, 12
    10c8:	00000823 	andeq	r0, r0, r3, lsr #16
    10cc:	c01a02e0 	andsgt	r0, sl, r0, ror #5
    10d0:	06000005 	streq	r0, [r0], -r5
    10d4:	0a890288 	beq	fe241afc <padd+0xde240278>
    10d8:	02ec0000 	rsceq	r0, ip, #0
    10dc:	2e040a00 	vmlacs.f32	s0, s8, s0
    10e0:	17000006 	strne	r0, [r0, -r6]
    10e4:	0000009b 	muleq	r0, fp, r0
    10e8:	000007ad 	andeq	r0, r0, sp, lsr #15
    10ec:	00064c0c 	andeq	r4, r6, ip, lsl #24
    10f0:	03330c00 	teqeq	r3, #0, 24
    10f4:	ad0c0000 	stcge	0, cr0, [ip, #-0]
    10f8:	0c000007 	stceq	0, cr0, [r0], {7}
    10fc:	0000009b 	muleq	r0, fp, r0
    1100:	42040a00 	andmi	r0, r4, #0, 20
    1104:	0a000003 	beq	1118 <startup-0x1fffeee8>
    1108:	00078f04 	andeq	r8, r7, r4, lsl #30
    110c:	02b61700 	adcseq	r1, r6, #0, 14
    1110:	07d70000 	ldrbeq	r0, [r7, r0]
    1114:	4c0c0000 	stcmi	0, cr0, [ip], {-0}
    1118:	0c000006 	stceq	0, cr0, [r0], {6}
    111c:	00000333 	andeq	r0, r0, r3, lsr r3
    1120:	0002b60c 	andeq	fp, r2, ip, lsl #12
    1124:	009b0c00 	addseq	r0, fp, r0, lsl #24
    1128:	0a000000 	beq	1130 <startup-0x1fffeed0>
    112c:	0007b904 	andeq	fp, r7, r4, lsl #18
    1130:	009b1700 	addseq	r1, fp, r0, lsl #14
    1134:	07f10000 	ldrbeq	r0, [r1, r0]!
    1138:	4c0c0000 	stcmi	0, cr0, [ip], {-0}
    113c:	0c000006 	stceq	0, cr0, [r0], {6}
    1140:	00000333 	andeq	r0, r0, r3, lsr r3
    1144:	dd040a00 	vstrle	s0, [r4, #-0]
    1148:	08000007 	stmdaeq	r0, {r0, r1, r2}
    114c:	00000025 	andeq	r0, r0, r5, lsr #32
    1150:	00000807 	andeq	r0, r0, r7, lsl #16
    1154:	0000b209 	andeq	fp, r0, r9, lsl #4
    1158:	08000200 	stmdaeq	r0, {r9}
    115c:	00000025 	andeq	r0, r0, r5, lsr #32
    1160:	00000817 	andeq	r0, r0, r7, lsl r8
    1164:	0000b209 	andeq	fp, r0, r9, lsl #4
    1168:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    116c:	00000858 	andeq	r0, r0, r8, asr r8
    1170:	04011f06 	streq	r1, [r1], #-3846	; 0xfffff0fa
    1174:	1b000005 	blne	1190 <startup-0x1fffee70>
    1178:	000009a8 	andeq	r0, r0, r8, lsr #19
    117c:	0123060c 			; <UNDEFINED> instruction: 0x0123060c
    1180:	00000858 	andeq	r0, r0, r8, asr r8
    1184:	00088019 	andeq	r8, r8, r9, lsl r0
    1188:	01250600 			; <UNDEFINED> instruction: 0x01250600
    118c:	00000858 	andeq	r0, r0, r8, asr r8
    1190:	072b1900 	streq	r1, [fp, -r0, lsl #18]!
    1194:	26060000 	strcs	r0, [r6], -r0
    1198:	00009b01 	andeq	r9, r0, r1, lsl #22
    119c:	52190400 	andspl	r0, r9, #0, 8
    11a0:	06000008 	streq	r0, [r0], -r8
    11a4:	085e0127 	ldmdaeq	lr, {r0, r1, r2, r5, r8}^
    11a8:	00080000 	andeq	r0, r8, r0
    11ac:	0823040a 	stmdaeq	r3!, {r1, r3, sl}
    11b0:	040a0000 	streq	r0, [sl], #-0
    11b4:	00000817 	andeq	r0, r0, r7, lsl r8
    11b8:	00050a1b 	andeq	r0, r5, fp, lsl sl
    11bc:	3f060e00 	svccc	0x00060e00
    11c0:	00089901 	andeq	r9, r8, r1, lsl #18
    11c4:	08c81900 	stmiaeq	r8, {r8, fp, ip}^
    11c8:	40060000 	andmi	r0, r6, r0
    11cc:	00089901 	andeq	r9, r8, r1, lsl #18
    11d0:	1d190000 	ldcne	0, cr0, [r9, #-0]
    11d4:	06000009 	streq	r0, [r0], -r9
    11d8:	08990141 	ldmeq	r9, {r0, r6, r8}
    11dc:	19060000 	stmdbne	r6, {}	; <UNPREDICTABLE>
    11e0:	00000955 	andeq	r0, r0, r5, asr r9
    11e4:	2c014206 	sfmcs	f4, 4, [r1], {6}
    11e8:	0c000000 	stceq	0, cr0, [r0], {-0}
    11ec:	002c0800 	eoreq	r0, ip, r0, lsl #16
    11f0:	08a90000 	stmiaeq	r9!, {}	; <UNPREDICTABLE>
    11f4:	b2090000 	andlt	r0, r9, #0
    11f8:	02000000 	andeq	r0, r0, #0
    11fc:	06d01c00 	ldrbeq	r1, [r0], r0, lsl #24
    1200:	09aa0259 	stmibeq	sl!, {r0, r3, r4, r6, r9}
    1204:	8c190000 	ldchi	0, cr0, [r9], {-0}
    1208:	06000009 	streq	r0, [r0], -r9
    120c:	00b2025b 	adcseq	r0, r2, fp, asr r2
    1210:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    1214:	00000923 	andeq	r0, r0, r3, lsr #18
    1218:	35025c06 	strcc	r5, [r2, #-3078]	; 0xfffff3fa
    121c:	04000003 	streq	r0, [r0], #-3
    1220:	00075519 	andeq	r5, r7, r9, lsl r5
    1224:	025d0600 	subseq	r0, sp, #0, 12
    1228:	000009aa 	andeq	r0, r0, sl, lsr #19
    122c:	05db1908 	ldrbeq	r1, [fp, #2312]	; 0x908
    1230:	5e060000 	cdppl	0, 0, cr0, cr6, cr0, {0}
    1234:	0003bb02 	andeq	fp, r3, r2, lsl #22
    1238:	91192400 	tstls	r9, r0, lsl #8
    123c:	06000006 	streq	r0, [r0], -r6
    1240:	009b025f 	addseq	r0, fp, pc, asr r2
    1244:	19480000 	stmdbne	r8, {}^	; <UNPREDICTABLE>
    1248:	0000087b 	andeq	r0, r0, fp, ror r8
    124c:	8e026006 	cdphi	0, 0, cr6, cr2, cr6, {0}
    1250:	50000002 	andpl	r0, r0, r2
    1254:	0009fb19 	andeq	pc, r9, r9, lsl fp	; <UNPREDICTABLE>
    1258:	02610600 	rsbeq	r0, r1, #0, 12
    125c:	00000864 	andeq	r0, r0, r4, ror #16
    1260:	08861958 	stmeq	r6, {r3, r4, r6, r8, fp, ip}
    1264:	62060000 	andvs	r0, r6, #0
    1268:	00031d02 	andeq	r1, r3, r2, lsl #26
    126c:	f6196800 			; <UNDEFINED> instruction: 0xf6196800
    1270:	06000004 	streq	r0, [r0], -r4
    1274:	031d0263 	tsteq	sp, #805306374	; 0x30000006
    1278:	19700000 	ldmdbne	r0!, {}^	; <UNPREDICTABLE>
    127c:	00000802 	andeq	r0, r0, r2, lsl #16
    1280:	1d026406 	cfstrsne	mvf6, [r2, #-24]	; 0xffffffe8
    1284:	78000003 	stmdavc	r0, {r0, r1}
    1288:	0009b719 	andeq	fp, r9, r9, lsl r7
    128c:	02650600 	rsbeq	r0, r5, #0, 12
    1290:	000009ba 			; <UNDEFINED> instruction: 0x000009ba
    1294:	07491980 	strbeq	r1, [r9, -r0, lsl #19]
    1298:	66060000 	strvs	r0, [r6], -r0
    129c:	0009ca02 	andeq	ip, r9, r2, lsl #20
    12a0:	62198800 	andsvs	r8, r9, #0, 16
    12a4:	06000009 	streq	r0, [r0], -r9
    12a8:	009b0267 	addseq	r0, fp, r7, ror #4
    12ac:	19a00000 	stmibne	r0!, {}	; <UNPREDICTABLE>
    12b0:	0000064a 	andeq	r0, r0, sl, asr #12
    12b4:	1d026806 	stcne	8, cr6, [r2, #-24]	; 0xffffffe8
    12b8:	a4000003 	strge	r0, [r0], #-3
    12bc:	00058419 	andeq	r8, r5, r9, lsl r4
    12c0:	02690600 	rsbeq	r0, r9, #0, 12
    12c4:	0000031d 	andeq	r0, r0, sp, lsl r3
    12c8:	063919ac 	ldrteq	r1, [r9], -ip, lsr #19
    12cc:	6a060000 	bvs	1812d4 <startup-0x1fe7ed2c>
    12d0:	00031d02 	andeq	r1, r3, r2, lsl #26
    12d4:	2a19b400 	bcs	66e2dc <startup-0x1f991d24>
    12d8:	06000005 	streq	r0, [r0], -r5
    12dc:	031d026b 	tsteq	sp, #-1342177274	; 0xb0000006
    12e0:	19bc0000 	ldmibne	ip!, {}	; <UNPREDICTABLE>
    12e4:	00000539 	andeq	r0, r0, r9, lsr r5
    12e8:	1d026c06 	stcne	12, cr6, [r2, #-24]	; 0xffffffe8
    12ec:	c4000003 	strgt	r0, [r0], #-3
    12f0:	00082619 	andeq	r2, r8, r9, lsl r6
    12f4:	026d0600 	rsbeq	r0, sp, #0, 12
    12f8:	0000009b 	muleq	r0, fp, r0
    12fc:	3b0800cc 	blcc	201634 <startup-0x1fdfe9cc>
    1300:	ba000003 	blt	1314 <startup-0x1fffecec>
    1304:	09000009 	stmdbeq	r0, {r0, r3}
    1308:	000000b2 	strheq	r0, [r0], -r2
    130c:	3b080019 	blcc	201378 <startup-0x1fdfec88>
    1310:	ca000003 	bgt	1324 <startup-0x1fffecdc>
    1314:	09000009 	stmdbeq	r0, {r0, r3}
    1318:	000000b2 	strheq	r0, [r0], -r2
    131c:	3b080007 	blcc	201340 <startup-0x1fdfecc0>
    1320:	da000003 	ble	1334 <startup-0x1fffeccc>
    1324:	09000009 	stmdbeq	r0, {r0, r3}
    1328:	000000b2 	strheq	r0, [r0], -r2
    132c:	f01c0017 			; <UNDEFINED> instruction: 0xf01c0017
    1330:	fe027206 	cdp2	2, 0, cr7, cr2, cr6, {0}
    1334:	19000009 	stmdbne	r0, {r0, r3}
    1338:	000007b6 			; <UNDEFINED> instruction: 0x000007b6
    133c:	fe027506 	cdp2	5, 0, cr7, cr2, cr6, {0}
    1340:	00000009 	andeq	r0, r0, r9
    1344:	0009ae19 	andeq	sl, r9, r9, lsl lr
    1348:	02760600 	rsbseq	r0, r6, #0, 12
    134c:	00000a0e 	andeq	r0, r0, lr, lsl #20
    1350:	1d080078 	stcne	0, cr0, [r8, #-480]	; 0xfffffe20
    1354:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    1358:	0900000a 	stmdbeq	r0, {r1, r3}
    135c:	000000b2 	strheq	r0, [r0], -r2
    1360:	b208001d 	andlt	r0, r8, #29
    1364:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1368:	0900000a 	stmdbeq	r0, {r1, r3}
    136c:	000000b2 	strheq	r0, [r0], -r2
    1370:	f01d001d 			; <UNDEFINED> instruction: 0xf01d001d
    1374:	40025706 	andmi	r5, r2, r6, lsl #14
    1378:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
    137c:	000009cb 	andeq	r0, r0, fp, asr #19
    1380:	a9026e06 	stmdbge	r2, {r1, r2, r9, sl, fp, sp, lr}
    1384:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
    1388:	000009e0 	andeq	r0, r0, r0, ror #19
    138c:	da027706 	ble	9efac <startup-0x1ff61054>
    1390:	00000009 	andeq	r0, r0, r9
    1394:	00033b08 	andeq	r3, r3, r8, lsl #22
    1398:	000a5000 	andeq	r5, sl, r0
    139c:	00b20900 	adcseq	r0, r2, r0, lsl #18
    13a0:	00180000 	andseq	r0, r8, r0
    13a4:	00056a0d 	andeq	r6, r5, sp, lsl #20
    13a8:	50040a00 	andpl	r0, r4, r0, lsl #20
    13ac:	0b00000a 	bleq	13dc <startup-0x1fffec24>
    13b0:	00000a66 	andeq	r0, r0, r6, ror #20
    13b4:	00064c0c 	andeq	r4, r6, ip, lsl #24
    13b8:	040a0000 	streq	r0, [sl], #-0
    13bc:	00000a5b 	andeq	r0, r0, fp, asr sl
    13c0:	03a5040a 			; <UNDEFINED> instruction: 0x03a5040a
    13c4:	7d0b0000 	stcvc	0, cr0, [fp, #-0]
    13c8:	0c00000a 	stceq	0, cr0, [r0], {10}
    13cc:	0000009b 	muleq	r0, fp, r0
    13d0:	83040a00 	movwhi	r0, #18944	; 0x4a00
    13d4:	0a00000a 	beq	1404 <startup-0x1fffebfc>
    13d8:	000a7204 	andeq	r7, sl, r4, lsl #4
    13dc:	08170800 	ldmdaeq	r7, {fp}
    13e0:	0a990000 	beq	fe6413e8 <padd+0xde63fb64>
    13e4:	b2090000 	andlt	r0, r9, #0
    13e8:	02000000 	andeq	r0, r0, #0
    13ec:	09761f00 	ldmdbeq	r6!, {r8, r9, sl, fp, ip}^
    13f0:	07060000 	streq	r0, [r6, -r0]
    13f4:	00064c03 	andeq	r4, r6, r3, lsl #24
    13f8:	096f1f00 	stmdbeq	pc!, {r8, r9, sl, fp, ip}^	; <UNPREDICTABLE>
    13fc:	08060000 	stmdaeq	r6, {}	; <UNPREDICTABLE>
    1400:	00065203 	andeq	r5, r6, r3, lsl #4
    1404:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    1408:	000007f2 	strdeq	r0, [r0], -r2
    140c:	1d040802 	stcne	8, cr0, [r4, #-8]
    1410:	20000006 	andcs	r0, r0, r6
    1414:	000007bd 			; <UNDEFINED> instruction: 0x000007bd
    1418:	0dfe7a01 			; <UNDEFINED> instruction: 0x0dfe7a01
    141c:	00622000 	rsbeq	r2, r2, r0
    1420:	9c010000 	stcls	0, cr0, [r1], {-0}
    1424:	00000af1 	strdeq	r0, [r0], -r1
    1428:	00063421 	andeq	r3, r6, r1, lsr #8
    142c:	757a0100 	ldrbvc	r0, [sl, #-256]!	; 0xffffff00
    1430:	02000001 	andeq	r0, r0, #1
    1434:	ed216c91 	stc	12, cr6, [r1, #-580]!	; 0xfffffdbc
    1438:	01000003 	tsteq	r0, r3
    143c:	0001757a 	andeq	r7, r1, sl, ror r5
    1440:	68910200 	ldmvs	r1, {r9}
    1444:	09822000 	stmibeq	r2, {sp}
    1448:	5b010000 	blpl	41450 <startup-0x1ffbebb0>
    144c:	20000d22 	andcs	r0, r0, r2, lsr #26
    1450:	000000dc 	ldrdeq	r0, [r0], -ip
    1454:	0b159c01 	bleq	568460 <startup-0x1fa97ba0>
    1458:	34210000 	strtcc	r0, [r1], #-0
    145c:	01000006 	tsteq	r0, r6
    1460:	0001755b 	andeq	r7, r1, fp, asr r5
    1464:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1468:	08ce2000 	stmiaeq	lr, {sp}^
    146c:	47010000 	strmi	r0, [r1, -r0]
    1470:	20000c74 	andcs	r0, r0, r4, ror ip
    1474:	000000ae 	andeq	r0, r0, lr, lsr #1
    1478:	0b379c01 	bleq	de8484 <startup-0x1f217b7c>
    147c:	73220000 			; <UNDEFINED> instruction: 0x73220000
    1480:	60470100 	subvs	r0, r7, r0, lsl #2
    1484:	02000002 	andeq	r0, r0, #2
    1488:	20006c91 	mulcs	r0, r1, ip
    148c:	00000611 	andeq	r0, r0, r1, lsl r6
    1490:	0bce3301 	bleq	ff38e09c <padd+0xdf38c818>
    1494:	00a62000 	adceq	r2, r6, r0
    1498:	9c010000 	stcls	0, cr0, [r1], {-0}
    149c:	00000b59 	andeq	r0, r0, r9, asr fp
    14a0:	01006f22 	tsteq	r0, r2, lsr #30
    14a4:	00017533 	andeq	r7, r1, r3, lsr r5
    14a8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    14ac:	06602300 	strbteq	r2, [r0], -r0, lsl #6
    14b0:	2f010000 	svccs	0x00010000
    14b4:	20000bbe 			; <UNDEFINED> instruction: 0x20000bbe
    14b8:	00000010 	andeq	r0, r0, r0, lsl r0
    14bc:	0b7b9c01 	bleq	1ee84c8 <startup-0x1e117b38>
    14c0:	73220000 			; <UNDEFINED> instruction: 0x73220000
    14c4:	602f0100 	eorvs	r0, pc, r0, lsl #2
    14c8:	02000002 	andeq	r0, r0, #2
    14cc:	20007491 	mulcs	r0, r1, r4
    14d0:	0000051d 	andeq	r0, r0, sp, lsl r5
    14d4:	0b622901 	bleq	188b8e0 <startup-0x1e774720>
    14d8:	005c2000 	subseq	r2, ip, r0
    14dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    14e0:	00000bb3 			; <UNDEFINED> instruction: 0x00000bb3
    14e4:	01006f22 	tsteq	r0, r2, lsr #30
    14e8:	00017529 	andeq	r7, r1, r9, lsr #10
    14ec:	6c910200 	lfmvs	f0, 4, [r1], {0}
    14f0:	000b6a24 	andeq	r6, fp, r4, lsr #20
    14f4:	00004c20 	andeq	r4, r0, r0, lsr #24
    14f8:	00692500 	rsbeq	r2, r9, r0, lsl #10
    14fc:	009b2a01 	addseq	r2, fp, r1, lsl #20
    1500:	91020000 	mrsls	r0, (UNDEF: 2)
    1504:	20000074 	andcs	r0, r0, r4, ror r0
    1508:	00000941 	andeq	r0, r0, r1, asr #18
    150c:	0a6c1501 	beq	1b06918 <startup-0x1e4f96e8>
    1510:	00f62000 	rscseq	r2, r6, r0
    1514:	9c010000 	stcls	0, cr0, [r1], {-0}
    1518:	00000c4d 	andeq	r0, r0, sp, asr #24
    151c:	01007322 	tsteq	r0, r2, lsr #6
    1520:	000c4d15 	andeq	r4, ip, r5, lsl sp
    1524:	5c910200 	lfmpl	f0, 4, [r1], {0}
    1528:	01007822 	tsteq	r0, r2, lsr #16
    152c:	00009b15 	andeq	r9, r0, r5, lsl fp
    1530:	58910200 	ldmpl	r1, {r9}
    1534:	01007922 	tsteq	r0, r2, lsr #18
    1538:	00009b15 	andeq	r9, r0, r5, lsl fp
    153c:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    1540:	01006925 	tsteq	r0, r5, lsr #18
    1544:	00009b16 	andeq	r9, r0, r6, lsl fp
    1548:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    154c:	01006a25 	tsteq	r0, r5, lsr #20
    1550:	00009b16 	andeq	r9, r0, r6, lsl fp
    1554:	70910200 	addsvc	r0, r1, r0, lsl #4
    1558:	01006b25 	tsteq	r0, r5, lsr #22
    155c:	00009b16 	andeq	r9, r0, r6, lsl fp
    1560:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1564:	00057526 	andeq	r7, r5, r6, lsr #10
    1568:	9b160100 	blls	581970 <startup-0x1fa7e690>
    156c:	02000000 	andeq	r0, r0, #0
    1570:	aa246891 	bge	91b7bc <startup-0x1f6e4844>
    1574:	9020000a 	eorls	r0, r0, sl
    1578:	26000000 	strcs	r0, [r0], -r0
    157c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1580:	00251d01 	eoreq	r1, r5, r1, lsl #26
    1584:	91020000 	mrsls	r0, (UNDEF: 2)
    1588:	0ac82463 	beq	ff20a71c <padd+0xdf208e98>
    158c:	00662000 	rsbeq	r2, r6, r0
    1590:	68250000 	stmdavs	r5!, {}	; <UNPREDICTABLE>
    1594:	9b1f0100 	blls	7c199c <startup-0x1f83e664>
    1598:	02000000 	andeq	r0, r0, #0
    159c:	00006491 	muleq	r0, r1, r4
    15a0:	55040a00 	strpl	r0, [r4, #-2560]	; 0xfffff600
    15a4:	20000002 	andcs	r0, r0, r2
    15a8:	000006e9 	andeq	r0, r0, r9, ror #13
    15ac:	0a100f01 	beq	4051b8 <startup-0x1fbfae48>
    15b0:	005c2000 	subseq	r2, ip, r0
    15b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    15b8:	00000c8b 	andeq	r0, r0, fp, lsl #25
    15bc:	01006f22 	tsteq	r0, r2, lsr #30
    15c0:	0001750f 	andeq	r7, r1, pc, lsl #10
    15c4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    15c8:	000a1824 	andeq	r1, sl, r4, lsr #16
    15cc:	00004c20 	andeq	r4, r0, r0, lsr #24
    15d0:	00692500 	rsbeq	r2, r9, r0, lsl #10
    15d4:	009b1001 	addseq	r1, fp, r1
    15d8:	91020000 	mrsls	r0, (UNDEF: 2)
    15dc:	23000074 	movwcs	r0, #116	; 0x74
    15e0:	00000712 	andeq	r0, r0, r2, lsl r7
    15e4:	09f00a01 	ldmibeq	r0!, {r0, r9, fp}^
    15e8:	00202000 	eoreq	r2, r0, r0
    15ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    15f0:	00000cc9 	andeq	r0, r0, r9, asr #25
    15f4:	01007322 	tsteq	r0, r2, lsr #6
    15f8:	0002600a 	andeq	r6, r2, sl
    15fc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1600:	0007ac21 	andeq	sl, r7, r1, lsr #24
    1604:	9b0a0100 	blls	281a0c <startup-0x1fd7e5f4>
    1608:	02000000 	andeq	r0, r0, #0
    160c:	80217091 	mlahi	r1, r1, r0, r7
    1610:	01000007 	tsteq	r0, r7
    1614:	00009b0a 	andeq	r9, r0, sl, lsl #22
    1618:	6c910200 	lfmvs	f0, 4, [r1], {0}
    161c:	08152700 	ldmdaeq	r5, {r8, r9, sl, sp}
    1620:	05010000 	streq	r0, [r1, #-0]
    1624:	200009d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    1628:	00000020 	andeq	r0, r0, r0, lsr #32
    162c:	6f229c01 	svcvs	0x00229c01
    1630:	75050100 	strvc	r0, [r5, #-256]	; 0xffffff00
    1634:	02000001 	andeq	r0, r0, #1
    1638:	af217491 	svcge	0x00217491
    163c:	01000007 	tsteq	r0, r7
    1640:	00009b05 	andeq	r9, r0, r5, lsl #22
    1644:	70910200 	addsvc	r0, r1, r0, lsl #4
    1648:	00078321 	andeq	r8, r7, r1, lsr #6
    164c:	9b050100 	blls	141a54 <startup-0x1febe5ac>
    1650:	02000000 	andeq	r0, r0, #0
    1654:	00006c91 	muleq	r0, r1, ip
    1658:	000000a6 	andeq	r0, r0, r6, lsr #1
    165c:	05920004 	ldreq	r0, [r2, #4]
    1660:	01040000 	mrseq	r0, (UNDEF: 4)
    1664:	00000021 	andeq	r0, r0, r1, lsr #32
    1668:	000a2e0c 	andeq	r2, sl, ip, lsl #28
    166c:	00015a00 	andeq	r5, r1, r0, lsl #20
    1670:	000e6000 	andeq	r6, lr, r0
    1674:	0000bc20 	andeq	fp, r0, r0, lsr #24
    1678:	0004f100 	andeq	pc, r4, r0, lsl #2
    167c:	08010200 	stmdaeq	r1, {r9}
    1680:	000000c6 	andeq	r0, r0, r6, asr #1
    1684:	e6070202 	str	r0, [r7], -r2, lsl #4
    1688:	03000000 	movweq	r0, #0
    168c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1690:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    1694:	00055407 	andeq	r5, r5, r7, lsl #8
    1698:	0a220400 	beq	8826a0 <startup-0x1f77d960>
    169c:	26010000 	strcs	r0, [r1], -r0
    16a0:	20000f0a 	andcs	r0, r0, sl, lsl #30
    16a4:	00000012 	andeq	r0, r0, r2, lsl r0
    16a8:	67059c01 	strvs	r9, [r5, -r1, lsl #24]
    16ac:	0100000a 	tsteq	r0, sl
    16b0:	000ed01b 	andeq	sp, lr, fp, lsl r0
    16b4:	00003a20 	andeq	r3, r0, r0, lsr #20
    16b8:	759c0100 	ldrvc	r0, [ip, #256]	; 0x100
    16bc:	06000000 	streq	r0, [r0], -r0
    16c0:	0100736d 	tsteq	r0, sp, ror #6
    16c4:	00003a1b 	andeq	r3, r0, fp, lsl sl
    16c8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    16cc:	0a160500 	beq	582ad4 <startup-0x1fa7d52c>
    16d0:	12010000 	andne	r0, r1, #0
    16d4:	20000ea4 	andcs	r0, r0, r4, lsr #29
    16d8:	0000002c 	andeq	r0, r0, ip, lsr #32
    16dc:	00989c01 	addseq	r9, r8, r1, lsl #24
    16e0:	75060000 	strvc	r0, [r6, #-0]
    16e4:	12010073 	andne	r0, r1, #115	; 0x73
    16e8:	0000003a 	andeq	r0, r0, sl, lsr r0
    16ec:	00749102 	rsbseq	r9, r4, r2, lsl #2
    16f0:	000a7307 	andeq	r7, sl, r7, lsl #6
    16f4:	60080100 	andvs	r0, r8, r0, lsl #2
    16f8:	4420000e 	strtmi	r0, [r0], #-14
    16fc:	01000000 	mrseq	r0, (UNDEF: 0)
    1700:	010f009c 	swpeq	r0, ip, [pc]	; <UNPREDICTABLE>
    1704:	00040000 	andeq	r0, r4, r0
    1708:	00000615 	andeq	r0, r0, r5, lsl r6
    170c:	00210104 	eoreq	r0, r1, r4, lsl #2
    1710:	7f0c0000 	svcvc	0x000c0000
    1714:	5a00000a 	bpl	1744 <startup-0x1fffe8bc>
    1718:	1c000001 	stcne	0, cr0, [r0], {1}
    171c:	1020000f 	eorne	r0, r0, pc
    1720:	78000002 	stmdavc	r0, {r1}
    1724:	02000005 	andeq	r0, r0, #5
    1728:	00c60801 	sbceq	r0, r6, r1, lsl #16
    172c:	02020000 	andeq	r0, r2, #0
    1730:	0000e607 	andeq	lr, r0, r7, lsl #12
    1734:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
    1738:	00746e69 	rsbseq	r6, r4, r9, ror #28
    173c:	54070402 	strpl	r0, [r7], #-1026	; 0xfffffbfe
    1740:	04000005 	streq	r0, [r0], #-5
    1744:	00000acb 	andeq	r0, r0, fp, asr #21
    1748:	00254101 	eoreq	r4, r5, r1, lsl #2
    174c:	10c40000 	sbcne	r0, r4, r0
    1750:	00682000 	rsbeq	r2, r8, r0
    1754:	9c010000 	stcls	0, cr0, [r1], {-0}
    1758:	00000085 	andeq	r0, r0, r5, lsl #1
    175c:	776f7205 	strbvc	r7, [pc, -r5, lsl #4]!
    1760:	33420100 	movtcc	r0, #8448	; 0x2100
    1764:	02000000 	andeq	r0, r0, #0
    1768:	ba066c91 	blt	19c9b4 <startup-0x1fe6364c>
    176c:	0100000a 	tsteq	r0, sl
    1770:	00003342 	andeq	r3, r0, r2, asr #6
    1774:	68910200 	ldmvs	r1, {r9}
    1778:	79656b05 	stmdbvc	r5!, {r0, r2, r8, r9, fp, sp, lr}^
    177c:	85430100 	strbhi	r0, [r3, #-256]	; 0xffffff00
    1780:	02000000 	andeq	r0, r0, #0
    1784:	07005891 			; <UNDEFINED> instruction: 0x07005891
    1788:	00000025 	andeq	r0, r0, r5, lsr #32
    178c:	00000095 	muleq	r0, r5, r0
    1790:	00003a08 	andeq	r3, r0, r8, lsl #20
    1794:	09000f00 	stmdbeq	r0, {r8, r9, sl, fp}
    1798:	00000ad8 	ldrdeq	r0, [r0], -r8
    179c:	00333801 	eorseq	r3, r3, r1, lsl #16
    17a0:	10700000 	rsbsne	r0, r0, r0
    17a4:	00542000 	subseq	r2, r4, r0
    17a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    17ac:	000000bb 	strheq	r0, [r0], -fp
    17b0:	01006305 	tsteq	r0, r5, lsl #6
    17b4:	00002539 	andeq	r2, r0, r9, lsr r5
    17b8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    17bc:	0ae30a00 	beq	ff8c3fc4 <padd+0xdf8c2740>
    17c0:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    17c4:	2000101c 	andcs	r1, r0, ip, lsl r0
    17c8:	00000054 	andeq	r0, r0, r4, asr r0
    17cc:	00df9c01 	sbcseq	r9, pc, r1, lsl #24
    17d0:	720b0000 	andvc	r0, fp, #0
    17d4:	0100776f 	tsteq	r0, pc, ror #14
    17d8:	00003a2e 	andeq	r3, r0, lr, lsr #20
    17dc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    17e0:	0ad00a00 	beq	ff403fe8 <padd+0xdf402764>
    17e4:	17010000 	strne	r0, [r1, -r0]
    17e8:	20000f64 	andcs	r0, r0, r4, ror #30
    17ec:	000000b8 	strheq	r0, [r0], -r8
    17f0:	01019c01 	tsteq	r1, r1, lsl #24
    17f4:	630b0000 	movwvs	r0, #45056	; 0xb000
    17f8:	25170100 	ldrcs	r0, [r7, #-256]	; 0xffffff00
    17fc:	02000000 	andeq	r0, r0, #0
    1800:	0c007791 	stceq	7, cr7, [r0], {145}	; 0x91
    1804:	00000ac1 	andeq	r0, r0, r1, asr #21
    1808:	0f1c0801 	svceq	0x001c0801
    180c:	00482000 	subeq	r2, r8, r0
    1810:	9c010000 	stcls	0, cr0, [r1], {-0}
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	24030000 	strcs	r0, [r3], #-0
  20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  24:	0008030b 	andeq	r0, r8, fp, lsl #6
  28:	012e0400 			; <UNDEFINED> instruction: 0x012e0400
  2c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  30:	0b3b0b3a 	bleq	ec2d20 <startup-0x1f13d2e0>
  34:	01111927 	tsteq	r1, r7, lsr #18
  38:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  3c:	01194296 			; <UNDEFINED> instruction: 0x01194296
  40:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
  44:	08030005 	stmdaeq	r3, {r0, r2}
  48:	0b3b0b3a 	bleq	ec2d38 <startup-0x1f13d2c8>
  4c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  50:	34060000 	strcc	r0, [r6], #-0
  54:	3a0e0300 	bcc	380c5c <startup-0x1fc7f3a4>
  58:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  5c:	00180213 	andseq	r0, r8, r3, lsl r2
  60:	00050700 	andeq	r0, r5, r0, lsl #14
  64:	0b3a0e03 	bleq	e83878 <startup-0x1f17c788>
  68:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  6c:	00001802 	andeq	r1, r0, r2, lsl #16
  70:	3f002e08 	svccc	0x00002e08
  74:	3a0e0319 	bcc	380ce0 <startup-0x1fc7f320>
  78:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  7c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  80:	96184006 	ldrls	r4, [r8], -r6
  84:	00001942 	andeq	r1, r0, r2, asr #18
  88:	3f012e09 	svccc	0x00012e09
  8c:	3a0e0319 	bcc	380cf8 <startup-0x1fc7f308>
  90:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  94:	11134919 	tstne	r3, r9, lsl r9
  98:	40061201 	andmi	r1, r6, r1, lsl #4
  9c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  a0:	00001301 	andeq	r1, r0, r1, lsl #6
  a4:	3f012e0a 	svccc	0x00012e0a
  a8:	3a0e0319 	bcc	380d14 <startup-0x1fc7f2ec>
  ac:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  b0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  b4:	97184006 	ldrls	r4, [r8, -r6]
  b8:	13011942 	movwne	r1, #6466	; 0x1942
  bc:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
  c0:	03193f01 	tsteq	r9, #1, 30
  c4:	3b0b3a0e 	blcc	2ce904 <startup-0x1fd316fc>
  c8:	1119270b 	tstne	r9, fp, lsl #14
  cc:	40061201 	andmi	r1, r6, r1, lsl #4
  d0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  d4:	01000000 	mrseq	r0, (UNDEF: 0)
  d8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
  dc:	0e030b13 	vmoveq.32	d3[0], r0
  e0:	01110e1b 	tsteq	r1, fp, lsl lr
  e4:	17100612 			; <UNDEFINED> instruction: 0x17100612
  e8:	16020000 	strne	r0, [r2], -r0
  ec:	3a0e0300 	bcc	380cf4 <startup-0x1fc7f30c>
  f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  f4:	03000013 	movweq	r0, #19
  f8:	0b0b0024 	bleq	2c0190 <startup-0x1fd3fe70>
  fc:	0e030b3e 	vmoveq.16	d3[0], r0
 100:	24040000 	strcs	r0, [r4], #-0
 104:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 108:	0008030b 	andeq	r0, r8, fp, lsl #6
 10c:	01010500 	tsteq	r1, r0, lsl #10
 110:	13011349 	movwne	r1, #4937	; 0x1349
 114:	21060000 	mrscs	r0, (UNDEF: 6)
 118:	2f134900 	svccs	0x00134900
 11c:	07000005 	streq	r0, [r0, -r5]
 120:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 124:	0b3b0b3a 	bleq	ec2e14 <startup-0x1f13d1ec>
 128:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 12c:	00001802 	andeq	r1, r0, r2, lsl #16
 130:	3f012e08 	svccc	0x00012e08
 134:	3a0e0319 	bcc	380da0 <startup-0x1fc7f260>
 138:	110b3b0b 	tstne	fp, fp, lsl #22
 13c:	40061201 	andmi	r1, r6, r1, lsl #4
 140:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 144:	00001301 	andeq	r1, r0, r1, lsl #6
 148:	03003409 	movweq	r3, #1033	; 0x409
 14c:	3b0b3a08 	blcc	2ce974 <startup-0x1fd3168c>
 150:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 154:	0a000018 	beq	1bc <startup-0x1ffffe44>
 158:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 15c:	0b3a0e03 	bleq	e83970 <startup-0x1f17c690>
 160:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 164:	06120111 			; <UNDEFINED> instruction: 0x06120111
 168:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 16c:	00130119 	andseq	r0, r3, r9, lsl r1
 170:	00340b00 	eorseq	r0, r4, r0, lsl #22
 174:	0b3a0e03 	bleq	e83988 <startup-0x1f17c678>
 178:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 17c:	00001802 	andeq	r1, r0, r2, lsl #16
 180:	3f012e0c 	svccc	0x00012e0c
 184:	3a0e0319 	bcc	380df0 <startup-0x1fc7f210>
 188:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 18c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 190:	97184006 	ldrls	r4, [r8, -r6]
 194:	13011942 	movwne	r1, #6466	; 0x1942
 198:	050d0000 	streq	r0, [sp, #-0]
 19c:	3a080300 	bcc	200da4 <startup-0x1fdff25c>
 1a0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1a4:	00180213 	andseq	r0, r8, r3, lsl r2
 1a8:	010b0e00 	tsteq	fp, r0, lsl #28
 1ac:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1b0:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
 1b4:	03193f00 	tsteq	r9, #0, 30
 1b8:	3b0b3a0e 	blcc	2ce9f8 <startup-0x1fd31608>
 1bc:	1119270b 	tstne	r9, fp, lsl #14
 1c0:	40061201 	andmi	r1, r6, r1, lsl #4
 1c4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1c8:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 1cc:	03193f01 	tsteq	r9, #1, 30
 1d0:	3b0b3a0e 	blcc	2cea10 <startup-0x1fd315f0>
 1d4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 1d8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 1dc:	96184006 	ldrls	r4, [r8], -r6
 1e0:	13011942 	movwne	r1, #6466	; 0x1942
 1e4:	05110000 	ldreq	r0, [r1, #-0]
 1e8:	3a0e0300 	bcc	380df0 <startup-0x1fc7f210>
 1ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1f0:	00180213 	andseq	r0, r8, r3, lsl r2
 1f4:	002e1200 	eoreq	r1, lr, r0, lsl #4
 1f8:	0b3a0e03 	bleq	e83a0c <startup-0x1f17c5f4>
 1fc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 200:	06120111 			; <UNDEFINED> instruction: 0x06120111
 204:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 208:	13000019 	movwne	r0, #25
 20c:	0e03012e 	adfeqsp	f0, f3, #0.5
 210:	0b3b0b3a 	bleq	ec2f00 <startup-0x1f13d100>
 214:	01111927 	tsteq	r1, r7, lsr #18
 218:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 21c:	01194296 			; <UNDEFINED> instruction: 0x01194296
 220:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 224:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 228:	0b3a0e03 	bleq	e83a3c <startup-0x1f17c5c4>
 22c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 230:	06120111 			; <UNDEFINED> instruction: 0x06120111
 234:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 238:	00000019 	andeq	r0, r0, r9, lsl r0
 23c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 240:	030b130e 	movweq	r1, #45838	; 0xb30e
 244:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
 248:	10011117 	andne	r1, r1, r7, lsl r1
 24c:	02000017 	andeq	r0, r0, #23
 250:	0b0b0024 	bleq	2c02e8 <startup-0x1fd3fd18>
 254:	0e030b3e 	vmoveq.16	d3[0], r0
 258:	13030000 	movwne	r0, #12288	; 0x3000
 25c:	0b0e0301 	bleq	380e68 <startup-0x1fc7f198>
 260:	3b0b3a0b 	blcc	2cea94 <startup-0x1fd3156c>
 264:	0013010b 	andseq	r0, r3, fp, lsl #2
 268:	000d0400 	andeq	r0, sp, r0, lsl #8
 26c:	0b3a0803 	bleq	e82280 <startup-0x1f17dd80>
 270:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 274:	00000b38 	andeq	r0, r0, r8, lsr fp
 278:	03001605 	movweq	r1, #1541	; 0x605
 27c:	3b0b3a0e 	blcc	2ceabc <startup-0x1fd31544>
 280:	0013490b 	andseq	r4, r3, fp, lsl #18
 284:	000d0600 	andeq	r0, sp, r0, lsl #12
 288:	0b3a0e03 	bleq	e83a9c <startup-0x1f17c564>
 28c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 290:	00000b38 	andeq	r0, r0, r8, lsr fp
 294:	0b002407 	bleq	92b8 <startup-0x1fff6d48>
 298:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 29c:	08000008 	stmdaeq	r0, {r3}
 2a0:	13490101 	movtne	r0, #37121	; 0x9101
 2a4:	00001301 	andeq	r1, r0, r1, lsl #6
 2a8:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
 2ac:	000b2f13 	andeq	r2, fp, r3, lsl pc
 2b0:	000f0a00 	andeq	r0, pc, r0, lsl #20
 2b4:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 2b8:	150b0000 	strne	r0, [fp, #-0]
 2bc:	01192701 	tsteq	r9, r1, lsl #14
 2c0:	0c000013 	stceq	0, cr0, [r0], {19}
 2c4:	13490005 	movtne	r0, #36869	; 0x9005
 2c8:	340d0000 	strcc	r0, [sp], #-0
 2cc:	3a0e0300 	bcc	380ed4 <startup-0x1fc7f12c>
 2d0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2d4:	00180213 	andseq	r0, r8, r3, lsl r2
 2d8:	00340e00 	eorseq	r0, r4, r0, lsl #28
 2dc:	0b3a0e03 	bleq	e83af0 <startup-0x1f17c510>
 2e0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2e4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 2e8:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
 2ec:	03193f01 	tsteq	r9, #1, 30
 2f0:	3b0b3a0e 	blcc	2ceb30 <startup-0x1fd314d0>
 2f4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 2f8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 2fc:	96184006 	ldrls	r4, [r8], -r6
 300:	13011942 	movwne	r1, #6466	; 0x1942
 304:	05100000 	ldreq	r0, [r0, #-0]
 308:	3a0e0300 	bcc	380f10 <startup-0x1fc7f0f0>
 30c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 310:	00180213 	andseq	r0, r8, r3, lsl r2
 314:	00341100 	eorseq	r1, r4, r0, lsl #2
 318:	0b3a0803 	bleq	e8232c <startup-0x1f17dcd4>
 31c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 320:	00001802 	andeq	r1, r0, r2, lsl #16
 324:	11010b12 	tstne	r1, r2, lsl fp
 328:	00061201 	andeq	r1, r6, r1, lsl #4
 32c:	00341300 	eorseq	r1, r4, r0, lsl #6
 330:	0b3a0803 	bleq	e82344 <startup-0x1f17dcbc>
 334:	1349053b 	movtne	r0, #38203	; 0x953b
 338:	00001802 	andeq	r1, r0, r2, lsl #16
 33c:	3f002e14 	svccc	0x00002e14
 340:	3a0e0319 	bcc	380fac <startup-0x1fc7f054>
 344:	110b3b0b 	tstne	fp, fp, lsl #22
 348:	40061201 	andmi	r1, r6, r1, lsl #4
 34c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 350:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
 354:	03193f01 	tsteq	r9, #1, 30
 358:	3b0b3a0e 	blcc	2ceb98 <startup-0x1fd31468>
 35c:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 360:	96184006 	ldrls	r4, [r8], -r6
 364:	13011942 	movwne	r1, #6466	; 0x1942
 368:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
 36c:	03193f00 	tsteq	r9, #0, 30
 370:	3b0b3a0e 	blcc	2cebb0 <startup-0x1fd31450>
 374:	1119270b 	tstne	r9, fp, lsl #14
 378:	40061201 	andmi	r1, r6, r1, lsl #4
 37c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 380:	01000000 	mrseq	r0, (UNDEF: 0)
 384:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 388:	0e030b13 	vmoveq.32	d3[0], r0
 38c:	01110e1b 	tsteq	r1, fp, lsl lr
 390:	17100612 			; <UNDEFINED> instruction: 0x17100612
 394:	24020000 	strcs	r0, [r2], #-0
 398:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 39c:	000e030b 	andeq	r0, lr, fp, lsl #6
 3a0:	01130300 	tsteq	r3, r0, lsl #6
 3a4:	0b0b0e03 	bleq	2c3bb8 <startup-0x1fd3c448>
 3a8:	0b3b0b3a 	bleq	ec3098 <startup-0x1f13cf68>
 3ac:	00001301 	andeq	r1, r0, r1, lsl #6
 3b0:	03000d04 	movweq	r0, #3332	; 0xd04
 3b4:	3b0b3a08 	blcc	2cebdc <startup-0x1fd31424>
 3b8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 3bc:	0500000b 	streq	r0, [r0, #-11]
 3c0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 3c4:	0b3b0b3a 	bleq	ec30b4 <startup-0x1f13cf4c>
 3c8:	00001349 	andeq	r1, r0, r9, asr #6
 3cc:	03000d06 	movweq	r0, #3334	; 0xd06
 3d0:	3b0b3a0e 	blcc	2cec10 <startup-0x1fd313f0>
 3d4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 3d8:	0700000b 	streq	r0, [r0, -fp]
 3dc:	0b0b0024 	bleq	2c0474 <startup-0x1fd3fb8c>
 3e0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 3e4:	01080000 	mrseq	r0, (UNDEF: 8)
 3e8:	01134901 	tsteq	r3, r1, lsl #18
 3ec:	09000013 	stmdbeq	r0, {r0, r1, r4}
 3f0:	13490021 	movtne	r0, #36897	; 0x9021
 3f4:	00000b2f 	andeq	r0, r0, pc, lsr #22
 3f8:	0b000f0a 	bleq	4028 <startup-0x1fffbfd8>
 3fc:	0013490b 	andseq	r4, r3, fp, lsl #18
 400:	01150b00 	tsteq	r5, r0, lsl #22
 404:	13011927 	movwne	r1, #6439	; 0x1927
 408:	050c0000 	streq	r0, [ip, #-0]
 40c:	00134900 	andseq	r4, r3, r0, lsl #18
 410:	00130d00 	andseq	r0, r3, r0, lsl #26
 414:	193c0e03 	ldmdbne	ip!, {r0, r1, r9, sl, fp}
 418:	160e0000 	strne	r0, [lr], -r0
 41c:	3a0e0300 	bcc	381024 <startup-0x1fc7efdc>
 420:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 424:	0f000013 	svceq	0x00000013
 428:	0b0b0117 	bleq	2c088c <startup-0x1fd3f774>
 42c:	0b3b0b3a 	bleq	ec311c <startup-0x1f13cee4>
 430:	00001301 	andeq	r1, r0, r1, lsl #6
 434:	03000d10 	movweq	r0, #3344	; 0xd10
 438:	3b0b3a0e 	blcc	2cec78 <startup-0x1fd31388>
 43c:	0013490b 	andseq	r4, r3, fp, lsl #18
 440:	01131100 	tsteq	r3, r0, lsl #2
 444:	0b3a0b0b 	bleq	e83078 <startup-0x1f17cf88>
 448:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 44c:	0f120000 	svceq	0x00120000
 450:	000b0b00 	andeq	r0, fp, r0, lsl #22
 454:	00261300 	eoreq	r1, r6, r0, lsl #6
 458:	00001349 	andeq	r1, r0, r9, asr #6
 45c:	03011314 	movweq	r1, #4884	; 0x1314
 460:	3a050b0e 	bcc	1430a0 <startup-0x1febcf60>
 464:	010b3b0b 	tsteq	fp, fp, lsl #22
 468:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
 46c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 470:	0b3b0b3a 	bleq	ec3160 <startup-0x1f13cea0>
 474:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
 478:	15160000 	ldrne	r0, [r6, #-0]
 47c:	00192700 	andseq	r2, r9, r0, lsl #14
 480:	01151700 	tsteq	r5, r0, lsl #14
 484:	13491927 	movtne	r1, #39207	; 0x9927
 488:	00001301 	andeq	r1, r0, r1, lsl #6
 48c:	03011318 	movweq	r1, #4888	; 0x1318
 490:	3a050b0e 	bcc	1430d0 <startup-0x1febcf30>
 494:	01053b0b 	tsteq	r5, fp, lsl #22
 498:	19000013 	stmdbne	r0, {r0, r1, r4}
 49c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 4a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 4a4:	0b381349 	bleq	e051d0 <startup-0x1f1fae30>
 4a8:	0d1a0000 	ldceq	0, cr0, [sl, #-0]
 4ac:	3a0e0300 	bcc	3810b4 <startup-0x1fc7ef4c>
 4b0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 4b4:	00053813 	andeq	r3, r5, r3, lsl r8
 4b8:	01131b00 	tsteq	r3, r0, lsl #22
 4bc:	0b0b0e03 	bleq	2c3cd0 <startup-0x1fd3c330>
 4c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 4c4:	00001301 	andeq	r1, r0, r1, lsl #6
 4c8:	0b01131c 	bleq	45140 <startup-0x1ffbaec0>
 4cc:	3b0b3a0b 	blcc	2ced00 <startup-0x1fd31300>
 4d0:	00130105 	andseq	r0, r3, r5, lsl #2
 4d4:	01171d00 	tsteq	r7, r0, lsl #26
 4d8:	0b3a0b0b 	bleq	e8310c <startup-0x1f17cef4>
 4dc:	1301053b 	movwne	r0, #5435	; 0x153b
 4e0:	0d1e0000 	ldceq	0, cr0, [lr, #-0]
 4e4:	3a0e0300 	bcc	3810ec <startup-0x1fc7ef14>
 4e8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 4ec:	1f000013 	svcne	0x00000013
 4f0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 4f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 4f8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 4fc:	0000193c 	andeq	r1, r0, ip, lsr r9
 500:	3f012e20 	svccc	0x00012e20
 504:	3a0e0319 	bcc	381170 <startup-0x1fc7ee90>
 508:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 50c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 510:	96184006 	ldrls	r4, [r8], -r6
 514:	13011942 	movwne	r1, #6466	; 0x1942
 518:	05210000 	streq	r0, [r1, #-0]!
 51c:	3a0e0300 	bcc	381124 <startup-0x1fc7eedc>
 520:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 524:	00180213 	andseq	r0, r8, r3, lsl r2
 528:	00052200 	andeq	r2, r5, r0, lsl #4
 52c:	0b3a0803 	bleq	e82540 <startup-0x1f17dac0>
 530:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 534:	00001802 	andeq	r1, r0, r2, lsl #16
 538:	3f012e23 	svccc	0x00012e23
 53c:	3a0e0319 	bcc	3811a8 <startup-0x1fc7ee58>
 540:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 544:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 548:	97184006 	ldrls	r4, [r8, -r6]
 54c:	13011942 	movwne	r1, #6466	; 0x1942
 550:	0b240000 	bleq	900558 <startup-0x1f6ffaa8>
 554:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 558:	25000006 	strcs	r0, [r0, #-6]
 55c:	08030034 	stmdaeq	r3, {r2, r4, r5}
 560:	0b3b0b3a 	bleq	ec3250 <startup-0x1f13cdb0>
 564:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 568:	34260000 	strtcc	r0, [r6], #-0
 56c:	3a0e0300 	bcc	381174 <startup-0x1fc7ee8c>
 570:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 574:	00180213 	andseq	r0, r8, r3, lsl r2
 578:	012e2700 			; <UNDEFINED> instruction: 0x012e2700
 57c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 580:	0b3b0b3a 	bleq	ec3270 <startup-0x1f13cd90>
 584:	01111927 	tsteq	r1, r7, lsr #18
 588:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 58c:	00194297 	mulseq	r9, r7, r2
 590:	11010000 	mrsne	r0, (UNDEF: 1)
 594:	130e2501 	movwne	r2, #58625	; 0xe501
 598:	1b0e030b 	blne	3811cc <startup-0x1fc7ee34>
 59c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 5a0:	00171006 	andseq	r1, r7, r6
 5a4:	00240200 	eoreq	r0, r4, r0, lsl #4
 5a8:	0b3e0b0b 	bleq	f831dc <startup-0x1f07ce24>
 5ac:	00000e03 	andeq	r0, r0, r3, lsl #28
 5b0:	0b002403 	bleq	95c4 <startup-0x1fff6a3c>
 5b4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 5b8:	04000008 	streq	r0, [r0], #-8
 5bc:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 5c0:	0b3a0e03 	bleq	e83dd4 <startup-0x1f17c22c>
 5c4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 5c8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5cc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 5d0:	05000019 	streq	r0, [r0, #-25]	; 0xffffffe7
 5d4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 5d8:	0b3a0e03 	bleq	e83dec <startup-0x1f17c214>
 5dc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 5e0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5e4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 5e8:	00130119 	andseq	r0, r3, r9, lsl r1
 5ec:	00050600 	andeq	r0, r5, r0, lsl #12
 5f0:	0b3a0803 	bleq	e82604 <startup-0x1f17d9fc>
 5f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 5f8:	00001802 	andeq	r1, r0, r2, lsl #16
 5fc:	3f002e07 	svccc	0x00002e07
 600:	3a0e0319 	bcc	38126c <startup-0x1fc7ed94>
 604:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 608:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 60c:	97184006 	ldrls	r4, [r8, -r6]
 610:	00001942 	andeq	r1, r0, r2, asr #18
 614:	01110100 	tsteq	r1, r0, lsl #2
 618:	0b130e25 	bleq	4c3eb4 <startup-0x1fb3c14c>
 61c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 620:	06120111 			; <UNDEFINED> instruction: 0x06120111
 624:	00001710 	andeq	r1, r0, r0, lsl r7
 628:	0b002402 	bleq	9638 <startup-0x1fff69c8>
 62c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 630:	0300000e 	movweq	r0, #14
 634:	0b0b0024 	bleq	2c06cc <startup-0x1fd3f934>
 638:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 63c:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
 640:	03193f01 	tsteq	r9, #1, 30
 644:	3b0b3a0e 	blcc	2cee84 <startup-0x1fd3117c>
 648:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 64c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 650:	96184006 	ldrls	r4, [r8], -r6
 654:	13011942 	movwne	r1, #6466	; 0x1942
 658:	34050000 	strcc	r0, [r5], #-0
 65c:	3a080300 	bcc	201264 <startup-0x1fdfed9c>
 660:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 664:	00180213 	andseq	r0, r8, r3, lsl r2
 668:	00340600 	eorseq	r0, r4, r0, lsl #12
 66c:	0b3a0e03 	bleq	e83e80 <startup-0x1f17c180>
 670:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 674:	00001802 	andeq	r1, r0, r2, lsl #16
 678:	49010107 	stmdbmi	r1, {r0, r1, r2, r8}
 67c:	00130113 	andseq	r0, r3, r3, lsl r1
 680:	00210800 	eoreq	r0, r1, r0, lsl #16
 684:	0b2f1349 	bleq	bc53b0 <startup-0x1f43ac50>
 688:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
 68c:	03193f01 	tsteq	r9, #1, 30
 690:	3b0b3a0e 	blcc	2ceed0 <startup-0x1fd31130>
 694:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 698:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 69c:	97184006 	ldrls	r4, [r8, -r6]
 6a0:	13011942 	movwne	r1, #6466	; 0x1942
 6a4:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
 6a8:	03193f01 	tsteq	r9, #1, 30
 6ac:	3b0b3a0e 	blcc	2ceeec <startup-0x1fd31114>
 6b0:	1119270b 	tstne	r9, fp, lsl #14
 6b4:	40061201 	andmi	r1, r6, r1, lsl #4
 6b8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 6bc:	00001301 	andeq	r1, r0, r1, lsl #6
 6c0:	0300050b 	movweq	r0, #1291	; 0x50b
 6c4:	3b0b3a08 	blcc	2ceeec <startup-0x1fd31114>
 6c8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 6cc:	0c000018 	stceq	0, cr0, [r0], {24}
 6d0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 6d4:	0b3a0e03 	bleq	e83ee8 <startup-0x1f17c118>
 6d8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 6dc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 6e0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 6e4:	00000019 	andeq	r0, r0, r9, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000002a6 	andeq	r0, r0, r6, lsr #5
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	01fb0002 	mvnseq	r0, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	200002b8 			; <UNDEFINED> instruction: 0x200002b8
  34:	00000510 	andeq	r0, r0, r0, lsl r5
	...
  40:	00000024 	andeq	r0, r0, r4, lsr #32
  44:	04ea0002 	strbteq	r0, [sl], #2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	200007c8 	andcs	r0, r0, r8, asr #15
  54:	00000208 	andeq	r0, r0, r8, lsl #4
  58:	20000000 	andcs	r0, r0, r0
  5c:	0000000c 	andeq	r0, r0, ip
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	09540002 	ldmdbeq	r4, {r1}^
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	200009d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
  7c:	00000490 	muleq	r0, r0, r4
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	16580002 	ldrbne	r0, [r8], -r2
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000e60 	andcs	r0, r0, r0, ror #28
  9c:	000000bc 	strheq	r0, [r0], -ip
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	17020002 	strne	r0, [r2, -r2]
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20000f1c 	andcs	r0, r0, ip, lsl pc
  bc:	00000210 	andeq	r0, r0, r0, lsl r2
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000000b9 	strheq	r0, [r0], -r9
   4:	004e0002 	subeq	r0, lr, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	72646e41 	rsbvc	r6, r4, #1040	; 0x410
  28:	65442f65 	strbvs	r2, [r4, #-3941]	; 0xfffff09b
  2c:	6f746b73 	svcvs	0x00746b73
  30:	41442f70 	hvcmi	17136	; 0x42f0
  34:	30393354 	eorscc	r3, r9, r4, asr r3
  38:	62616c5f 	rsbvs	r6, r1, #24320	; 0x5f00
  3c:	34765f62 	ldrbtcc	r5, [r6], #-3938	; 0xfffff09e
  40:	6570732f 	ldrbvs	r7, [r0, #-815]!	; 0xfffffcd1
  44:	6700006c 	strvs	r0, [r0, -ip, rrx]
  48:	5f656d61 	svcpl	0x00656d61
  4c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  50:	00632e69 	rsbeq	r2, r3, r9, ror #28
  54:	00000001 	andeq	r0, r0, r1
  58:	10020500 	andne	r0, r2, r0, lsl #10
  5c:	1a200000 	bne	800064 <startup-0x1f7fff9c>
  60:	2f4b3d67 	svccs	0x004b3d67
  64:	3d3d683d 	ldccc	8, cr6, [sp, #-244]!	; 0xffffff0c
  68:	3d4b2f2f 	stclcc	15, cr2, [fp, #-188]	; 0xffffff44
  6c:	bb67772f 	bllt	19ddd30 <startup-0x1e6222d0>
  70:	13086769 	movwne	r6, #34665	; 0x8769
  74:	3d3d6776 	ldccc	7, cr6, [sp, #-472]!	; 0xfffffe28
  78:	3d674c59 	stclcc	12, cr4, [r7, #-356]!	; 0xfffffe9c
  7c:	3d4c593d 	vstrcc.16	s11, [ip, #-122]	; 0xffffff86	; <UNPREDICTABLE>
  80:	593d3d68 	ldmdbpl	sp!, {r3, r5, r6, r8, sl, fp, ip, sp}
  84:	3d842f67 	stccc	15, cr2, [r4, #412]	; 0x19c
  88:	593d3d68 	ldmdbpl	sp!, {r3, r5, r6, r8, sl, fp, ip, sp}
  8c:	67852f67 	strvs	r2, [r5, r7, ror #30]
  90:	01040200 	mrseq	r0, R12_usr
  94:	67062006 	strvs	r2, [r6, -r6]
  98:	2f4c593d 	svccs	0x004c593d
  9c:	3e3d3e3d 	mrccc	14, 1, r3, cr13, cr13, {1}
  a0:	3d3d3e3d 	ldccc	14, cr3, [sp, #-244]!	; 0xffffff0c
  a4:	0200693e 	andeq	r6, r0, #1015808	; 0xf8000
  a8:	20060104 	andcs	r0, r6, r4, lsl #2
  ac:	593d8306 	ldmdbpl	sp!, {r1, r2, r8, r9, pc}
  b0:	4b594c3d 	blmi	16531ac <startup-0x1e9ace54>
  b4:	9f683d5a 	svcls	0x00683d5a
  b8:	01000402 	tsteq	r0, r2, lsl #8
  bc:	00016f01 	andeq	r6, r1, r1, lsl #30
  c0:	63000200 	movwvs	r0, #512	; 0x200
  c4:	02000000 	andeq	r0, r0, #0
  c8:	0d0efb01 	vstreq	d15, [lr, #-4]
  cc:	01010100 	mrseq	r0, (UNDEF: 17)
  d0:	00000001 	andeq	r0, r0, r1
  d4:	01000001 	tsteq	r0, r1
  d8:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff69d <padd+0xdfffde19>
  dc:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
  e0:	646e412f 	strbtvs	r4, [lr], #-303	; 0xfffffed1
  e4:	442f6572 	strtmi	r6, [pc], #-1394	; ec <startup-0x1fffff14>
  e8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
  ec:	442f706f 	strtmi	r7, [pc], #-111	; f4 <startup-0x1fffff0c>
  f0:	39335441 	ldmdbcc	r3!, {r0, r6, sl, ip, lr}
  f4:	616c5f30 	cmnvs	ip, r0, lsr pc
  f8:	765f6262 	ldrbvc	r6, [pc], -r2, ror #4
  fc:	70732f34 	rsbsvc	r2, r3, r4, lsr pc
 100:	00006c65 	andeq	r6, r0, r5, ror #24
 104:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 108:	6172675f 	cmnvs	r2, pc, asr r7
 10c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 110:	00632e73 	rsbeq	r2, r3, r3, ror lr
 114:	67000001 	strvs	r0, [r0, -r1]
 118:	5f656d61 	svcpl	0x00656d61
 11c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 120:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
 124:	00010068 	andeq	r0, r1, r8, rrx
 128:	05000000 	streq	r0, [r0, #-0]
 12c:	0002b802 	andeq	fp, r2, r2, lsl #16
 130:	e5671920 	strb	r1, [r7, #-2336]!	; 0xfffff6e0
 134:	13086776 	movwne	r6, #34678	; 0x8776
 138:	037a6776 	cmneq	sl, #30932992	; 0x1d80000
 13c:	1b50207a 	blne	140832c <startup-0x1ebf7cd4>
 140:	4c75754b 	cfldr64mi	mvdx7, [r5], #-300	; 0xfffffed4
 144:	3d3d2f4c 	ldccc	15, cr2, [sp, #-304]!	; 0xfffffed0
 148:	3e213e3d 	mcrcc	14, 1, r3, cr1, cr13, {1}
 14c:	3d3d6c39 	ldccc	12, cr6, [sp, #-228]!	; 0xffffff1c
 150:	3d3d68bc 	ldccc	8, cr6, [sp, #-752]!	; 0xfffffd10
 154:	593d5a3d 	ldmdbpl	sp!, {r0, r2, r3, r4, r5, r9, fp, ip, lr}
 158:	3d4b3d3d 	stclcc	13, cr3, [fp, #-244]	; 0xffffff0c
 15c:	303d4b30 	eorscc	r4, sp, r0, lsr fp
 160:	4b91ca3d 	blmi	fe472a5c <padd+0xde4711d8>
 164:	593d3e5a 	ldmdbpl	sp!, {r1, r3, r4, r6, r9, sl, fp, ip, sp}
 168:	3d59303d 	ldclcc	0, cr3, [r9, #-244]	; 0xffffff0c
 16c:	3d3d3d30 	ldccc	13, cr3, [sp, #-192]!	; 0xffffff40
 170:	593d9176 	ldmdbpl	sp!, {r1, r2, r4, r5, r6, r8, ip, pc}
 174:	914c833d 	cmpls	ip, sp, lsr r3
 178:	3d3d593d 			; <UNDEFINED> instruction: 0x3d3d593d
 17c:	5a674c83 	bpl	19d3390 <startup-0x1e62cc70>
 180:	3e2f4c67 	cdpcc	12, 2, cr4, cr15, cr7, {3}
 184:	4b3d3e3e 	blmi	f4fa84 <startup-0x1f0b057c>
 188:	4b4b4b4b 	blmi	12d2ebc <startup-0x1ed2d144>
 18c:	3d3d763d 	ldccc	6, cr7, [sp, #-244]!	; 0xffffff0c
 190:	02004bad 	andeq	r4, r0, #177152	; 0x2b400
 194:	003d0304 	eorseq	r0, sp, r4, lsl #6
 198:	49030402 	stmdbmi	r3, {r1, sl}
 19c:	01040200 	mrseq	r0, R12_usr
 1a0:	02003c06 	andeq	r3, r0, #1536	; 0x600
 1a4:	39060204 	stmdbcc	r6, {r2, r9}
 1a8:	01040200 	mrseq	r0, R12_usr
 1ac:	42063c06 	andmi	r3, r6, #1536	; 0x600
 1b0:	002f5a4e 	eoreq	r5, pc, lr, asr #20
 1b4:	06010402 	streq	r0, [r1], -r2, lsl #8
 1b8:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 1bc:	02003c02 	andeq	r3, r0, #512	; 0x200
 1c0:	063c0304 	ldrteq	r0, [ip], -r4, lsl #6
 1c4:	3d3d923f 	lfmcc	f1, 1, [sp, #-252]!	; 0xffffff04
 1c8:	7503923f 	strvc	r9, [r3, #-575]	; 0xfffffdc1
 1cc:	200c03e4 	andcs	r0, ip, r4, ror #7
 1d0:	592f3e68 	stmdbpl	pc!, {r3, r5, r6, r9, sl, fp, ip, sp}	; <UNPREDICTABLE>
 1d4:	01040200 	mrseq	r0, R12_usr
 1d8:	02005806 	andeq	r5, r0, #393216	; 0x60000
 1dc:	002e0204 	eoreq	r0, lr, r4, lsl #4
 1e0:	20040402 	andcs	r0, r4, r2, lsl #8
 1e4:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 1e8:	c9592f06 	ldmdbgt	r9, {r1, r2, r8, r9, sl, fp, sp}^
 1ec:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 1f0:	02005903 	andeq	r5, r0, #49152	; 0xc000
 1f4:	009d0304 	addseq	r0, sp, r4, lsl #6
 1f8:	06010402 	streq	r0, [r1], -r2, lsl #8
 1fc:	04020090 	streq	r0, [r2], #-144	; 0xffffff70
 200:	00550602 	subseq	r0, r5, r2, lsl #12
 204:	06010402 	streq	r0, [r1], -r2, lsl #8
 208:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
 20c:	00560602 	subseq	r0, r6, r2, lsl #12
 210:	06010402 	streq	r0, [r1], -r2, lsl #8
 214:	76600666 	strbtvc	r0, [r0], -r6, ror #12
 218:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
 21c:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 220:	00570304 	subseq	r0, r7, r4, lsl #6
 224:	06010402 	streq	r0, [r1], -r2, lsl #8
 228:	024c063c 	subeq	r0, ip, #60, 12	; 0x3c00000
 22c:	01010008 	tsteq	r1, r8
 230:	000000ee 	andeq	r0, r0, lr, ror #1
 234:	00660002 	rsbeq	r0, r6, r2
 238:	01020000 	mrseq	r0, (UNDEF: 2)
 23c:	000d0efb 	strdeq	r0, [sp], -fp
 240:	01010101 	tsteq	r1, r1, lsl #2
 244:	01000000 	mrseq	r0, (UNDEF: 0)
 248:	43010000 	movwmi	r0, #4096	; 0x1000
 24c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 250:	2f737265 	svccs	0x00737265
 254:	72646e41 	rsbvc	r6, r4, #1040	; 0x410
 258:	65442f65 	strbvs	r2, [r4, #-3941]	; 0xfffff09b
 25c:	6f746b73 	svcvs	0x00746b73
 260:	41442f70 	hvcmi	17136	; 0x42f0
 264:	30393354 	eorscc	r3, r9, r4, asr r3
 268:	62616c5f 	rsbvs	r6, r1, #24320	; 0x5f00
 26c:	34765f62 	ldrbtcc	r5, [r6], #-3938	; 0xfffff09e
 270:	6570732f 	ldrbvs	r7, [r0, #-815]!	; 0xfffffcd1
 274:	6d00006c 	stcvs	0, cr0, [r0, #-432]	; 0xfffffe50
 278:	2e6e6961 	vnmulcs.f16	s13, s28, s3	; <UNPREDICTABLE>
 27c:	00010063 	andeq	r0, r1, r3, rrx
 280:	6d616700 	stclvs	7, cr6, [r1, #-0]
 284:	74735f65 	ldrbtvc	r5, [r3], #-3941	; 0xfffff09b
 288:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 28c:	00682e70 	rsbeq	r2, r8, r0, ror lr
 290:	73000001 	movwvc	r0, #1
 294:	2e706968 	vsubcs.f16	s13, s0, s17	; <UNPREDICTABLE>
 298:	006d6278 	rsbeq	r6, sp, r8, ror r2
 29c:	00000001 	andeq	r0, r0, r1
 2a0:	00020500 	andeq	r0, r2, r0, lsl #10
 2a4:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
 2a8:	5e13010d 	mufpls	f0, f3, #5.0
 2ac:	01000302 	tsteq	r0, r2, lsl #6
 2b0:	02050001 	andeq	r0, r5, #1
 2b4:	200007c8 	andcs	r0, r0, r8, asr #15
 2b8:	0101b003 	tsteq	r1, r3
 2bc:	4b67753e 	blmi	19dd7bc <startup-0x1e622844>
 2c0:	4d73212f 	ldfmie	f2, [r3, #-188]!	; 0xffffff44
 2c4:	73212f4b 			; <UNDEFINED> instruction: 0x73212f4b
 2c8:	3d2f844d 	cfstrscc	mvf8, [pc, #-308]!	; 19c <startup-0x1ffffe64>
 2cc:	74220330 	strtvc	r0, [r2], #-816	; 0xfffffcd0
 2d0:	2f2f2f59 	svccs	0x002f2f59
 2d4:	2f2f2f2f 	svccs	0x002f2f2f
 2d8:	2f2f2f2f 	svccs	0x002f2f2f
 2dc:	32ae082f 	adccc	r0, lr, #3080192	; 0x2f0000
 2e0:	002f2f2f 	eoreq	r2, pc, pc, lsr #30
 2e4:	23020402 	movwcs	r0, #9218	; 0x2402
 2e8:	02040200 	andeq	r0, r4, #0, 4
 2ec:	040200d7 	streq	r0, [r2], #-215	; 0xffffff29
 2f0:	0200c902 	andeq	ip, r0, #32768	; 0x8000
 2f4:	00c30204 	sbceq	r0, r3, r4, lsl #4
 2f8:	06010402 	streq	r0, [r1], -r2, lsl #8
 2fc:	0a030666 	beq	c1c9c <startup-0x1ff3e364>
 300:	595a2f58 	ldmdbpl	sl, {r3, r4, r6, r8, r9, sl, fp, sp}^
 304:	04020068 	streq	r0, [r2], #-104	; 0xffffff98
 308:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 30c:	00b90304 	adcseq	r0, r9, r4, lsl #6
 310:	06010402 	streq	r0, [r1], -r2, lsl #8
 314:	0a03063c 	beq	c1c0c <startup-0x1ff3e3f4>
 318:	6e033058 	mcrvs	0, 0, r3, cr3, cr8, {2}
 31c:	0018022e 	andseq	r0, r8, lr, lsr #4
 320:	01cb0101 	biceq	r0, fp, r1, lsl #2
 324:	00020000 	andeq	r0, r2, r0
 328:	0000010f 	andeq	r0, r0, pc, lsl #2
 32c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 330:	0101000d 	tsteq	r1, sp
 334:	00000101 	andeq	r0, r0, r1, lsl #2
 338:	00000100 	andeq	r0, r0, r0, lsl #2
 33c:	2f3a4301 	svccs	0x003a4301
 340:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 344:	6e412f73 	mcrvs	15, 2, r2, cr1, cr3, {3}
 348:	2f657264 	svccs	0x00657264
 34c:	6b736544 	blvs	1cd9864 <startup-0x1e32679c>
 350:	2f706f74 	svccs	0x00706f74
 354:	33544144 	cmpcc	r4, #68, 2
 358:	6c5f3039 	mrrcvs	0, 3, r3, pc, cr9	; <UNPREDICTABLE>
 35c:	5f626261 	svcpl	0x00626261
 360:	732f3476 			; <UNDEFINED> instruction: 0x732f3476
 364:	006c6570 	rsbeq	r6, ip, r0, ror r5
 368:	635c3a63 	cmpvs	ip, #405504	; 0x63000
 36c:	70616573 	rsbvc	r6, r1, r3, ror r5
 370:	6f635c70 	svcvs	0x00635c70
 374:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 378:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
 37c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 380:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
 384:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 388:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
 38c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 390:	61652d65 	cmnvs	r5, r5, ror #26
 394:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
 398:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 39c:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
 3a0:	63007379 	movwvs	r7, #889	; 0x379
 3a4:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
 3a8:	70706165 	rsbsvc	r6, r0, r5, ror #2
 3ac:	646f635c 	strbtvs	r6, [pc], #-860	; 3b4 <startup-0x1ffffc4c>
 3b0:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 3b4:	6f745c65 	svcvs	0x00745c65
 3b8:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
 3bc:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 3c0:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 3c4:	5c62696c 			; <UNDEFINED> instruction: 0x5c62696c
 3c8:	5c636367 	stclpl	3, cr6, [r3], #-412	; 0xfffffe64
 3cc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 3d0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 3d4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 3d8:	2e375c69 	cdpcs	12, 3, cr5, cr7, cr9, {3}
 3dc:	5c312e32 	ldcpl	14, cr2, [r1], #-200	; 0xffffff38
 3e0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 3e4:	00656475 	rsbeq	r6, r5, r5, ror r4
 3e8:	6d616700 	stclvs	7, cr6, [r1, #-0]
 3ec:	74735f65 	ldrbtvc	r5, [r3], #-3941	; 0xfffff09b
 3f0:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
 3f4:	00632e73 	rsbeq	r2, r3, r3, ror lr
 3f8:	67000001 	strvs	r0, [r0, -r1]
 3fc:	5f656d61 	svcpl	0x00656d61
 400:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 404:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
 408:	00010068 	andeq	r0, r1, r8, rrx
 40c:	636f6c00 	cmnvs	pc, #0, 24
 410:	00682e6b 	rsbeq	r2, r8, fp, ror #28
 414:	5f000002 	svcpl	0x00000002
 418:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 41c:	00682e73 	rsbeq	r2, r8, r3, ror lr
 420:	73000002 	movwvc	r0, #2
 424:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
 428:	00682e66 	rsbeq	r2, r8, r6, ror #28
 42c:	72000003 	andvc	r0, r0, #3
 430:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
 434:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 438:	00000000 	andeq	r0, r0, r0
 43c:	09d00205 	ldmibeq	r0, {r0, r2, r9}^
 440:	67162000 	ldrvs	r2, [r6, -r0]
 444:	674c3d3d 	smlaldxvs	r3, ip, sp, sp
 448:	4b4c3d3d 	blmi	130f944 <startup-0x1ecf06bc>
 44c:	03040200 	movweq	r0, #16896	; 0x4200
 450:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 454:	008f0803 	addeq	r0, pc, r3, lsl #16
 458:	06010402 	streq	r0, [r1], -r2, lsl #8
 45c:	4c69063c 	stclmi	6, cr0, [r9], #-240	; 0xffffff10
 460:	67687568 	strbvs	r7, [r8, -r8, ror #10]!
 464:	3dbb3d3d 	ldccc	13, cr3, [fp, #244]!	; 0xf4
 468:	0200913d 	andeq	r9, r0, #1073741839	; 0x4000000f
 46c:	c6080204 	strgt	r0, [r8], -r4, lsl #4
 470:	01040200 	mrseq	r0, R12_usr
 474:	02003c06 	andeq	r3, r0, #1536	; 0x600
 478:	65060204 	strvs	r0, [r6, #-516]	; 0xfffffdfc
 47c:	01040200 	mrseq	r0, R12_usr
 480:	02003c06 	andeq	r3, r0, #1536	; 0x600
 484:	3a060204 	bcc	180c9c <startup-0x1fe7f364>
 488:	01040200 	mrseq	r0, R12_usr
 48c:	02003c06 	andeq	r3, r0, #1536	; 0x600
 490:	49060204 	stmdbmi	r6, {r2, r9}
 494:	01040200 	mrseq	r0, R12_usr
 498:	03063c06 	movweq	r3, #27654	; 0x6c06
 49c:	4b4d660b 	blmi	1359cd0 <startup-0x1eca6330>
 4a0:	03040200 	movweq	r0, #16896	; 0x4200
 4a4:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 4a8:	008f0803 	addeq	r0, pc, r3, lsl #16
 4ac:	06010402 	streq	r0, [r1], -r2, lsl #8
 4b0:	4c69063c 	stclmi	6, cr0, [r9], #-240	; 0xffffff10
 4b4:	4b4d4c4c 	blmi	13535ec <startup-0x1ecaca14>
 4b8:	4ba04ba0 	blmi	fe813340 <padd+0xde811abc>
 4bc:	75a04ba0 	strvc	r4, [r0, #2976]!	; 0xba0
 4c0:	4b4c5975 	blmi	1316a9c <startup-0x1ece9564>
 4c4:	a04ba04b 	subge	sl, fp, fp, asr #32
 4c8:	a24ba04b 	subge	sl, fp, #75	; 0x4b
 4cc:	4d917575 	cfldr32mi	mvfx7, [r1, #468]	; 0x1d4
 4d0:	764b4d4d 	strbvc	r4, [fp], -sp, asr #26
 4d4:	764b8493 			; <UNDEFINED> instruction: 0x764b8493
 4d8:	83a04b92 	movhi	r4, #149504	; 0x24800
 4dc:	59757592 	ldmdbpl	r5!, {r1, r4, r7, r8, sl, ip, sp, lr}^
 4e0:	00a0594d 	adceq	r5, r0, sp, asr #18
 4e4:	06010402 	streq	r0, [r1], -r2, lsl #8
 4e8:	a1a0069e 	lslge	r0, lr	; <illegal shifter operand>
 4ec:	01000402 	tsteq	r0, r2, lsl #8
 4f0:	00008301 	andeq	r8, r0, r1, lsl #6
 4f4:	4f000200 	svcmi	0x00000200
 4f8:	02000000 	andeq	r0, r0, #0
 4fc:	0d0efb01 	vstreq	d15, [lr, #-4]
 500:	01010100 	mrseq	r0, (UNDEF: 17)
 504:	00000001 	andeq	r0, r0, r1
 508:	01000001 	tsteq	r0, r1
 50c:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffad1 <padd+0xdfffe24d>
 510:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 514:	646e412f 	strbtvs	r4, [lr], #-303	; 0xfffffed1
 518:	442f6572 	strtmi	r6, [pc], #-1394	; 520 <startup-0x1ffffae0>
 51c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 520:	442f706f 	strtmi	r7, [pc], #-111	; 528 <startup-0x1ffffad8>
 524:	39335441 	ldmdbcc	r3!, {r0, r6, sl, ip, lr}
 528:	616c5f30 	cmnvs	ip, r0, lsr pc
 52c:	765f6262 	ldrbvc	r6, [pc], -r2, ror #4
 530:	70732f34 	rsbsvc	r2, r3, r4, lsr pc
 534:	00006c65 	andeq	r6, r0, r5, ror #24
 538:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 53c:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
 540:	2e737961 	vsubcs.f16	s15, s6, s3	; <UNPREDICTABLE>
 544:	00010063 	andeq	r0, r1, r3, rrx
 548:	05000000 	streq	r0, [r0, #-0]
 54c:	000e6002 	andeq	r6, lr, r2
 550:	3d2f1920 			; <UNDEFINED> instruction: 0x3d2f1920
 554:	003e3d3d 	eorseq	r3, lr, sp, lsr sp
 558:	06010402 	streq	r0, [r1], -r2, lsl #8
 55c:	3d670620 	stclcc	6, cr0, [r7, #-128]!	; 0xffffff80
 560:	2f214ba0 	svccs	0x00214ba0
 564:	5e2a2f2f 	cdppl	15, 2, cr2, cr10, cr15, {1}
 568:	3f754d4c 	svccc	0x00754d4c
 56c:	4c5a5721 	mrrcmi	7, 2, r5, sl, cr1
 570:	022f2f2f 	eoreq	r2, pc, #47, 30	; 0xbc
 574:	01010003 	tsteq	r1, r3
 578:	000000c3 	andeq	r0, r0, r3, asr #1
 57c:	00510002 	subseq	r0, r1, r2
 580:	01020000 	mrseq	r0, (UNDEF: 2)
 584:	000d0efb 	strdeq	r0, [sp], -fp
 588:	01010101 	tsteq	r1, r1, lsl #2
 58c:	01000000 	mrseq	r0, (UNDEF: 0)
 590:	43010000 	movwmi	r0, #4096	; 0x1000
 594:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 598:	2f737265 	svccs	0x00737265
 59c:	72646e41 	rsbvc	r6, r4, #1040	; 0x410
 5a0:	65442f65 	strbvs	r2, [r4, #-3941]	; 0xfffff09b
 5a4:	6f746b73 	svcvs	0x00746b73
 5a8:	41442f70 	hvcmi	17136	; 0x42f0
 5ac:	30393354 	eorscc	r3, r9, r4, asr r3
 5b0:	62616c5f 	rsbvs	r6, r1, #24320	; 0x5f00
 5b4:	34765f62 	ldrbtcc	r5, [r6], #-3938	; 0xfffff09e
 5b8:	6570732f 	ldrbvs	r7, [r0, #-815]!	; 0xfffffcd1
 5bc:	6700006c 	strvs	r0, [r0, -ip, rrx]
 5c0:	5f656d61 	svcpl	0x00656d61
 5c4:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
 5c8:	6472616f 	ldrbtvs	r6, [r2], #-367	; 0xfffffe91
 5cc:	0100632e 	tsteq	r0, lr, lsr #6
 5d0:	00000000 	andeq	r0, r0, r0
 5d4:	0f1c0205 	svceq	0x001c0205
 5d8:	35192000 	ldrcc	r2, [r9, #-0]
 5dc:	755a6859 	ldrbvc	r6, [sl, #-2137]	; 0xfffff7a7
 5e0:	4b9167ae 	blmi	fe45a4a0 <padd+0xde458c1c>
 5e4:	4b4b4b4b 	blmi	12d3318 <startup-0x1ed2cce8>
 5e8:	4b4b4b4b 	blmi	12d331c <startup-0x1ed2cce4>
 5ec:	4b4b4b4b 	blmi	12d3320 <startup-0x1ed2cce0>
 5f0:	4c4c4b4b 	mcrrmi	11, 4, r4, ip, cr11
 5f4:	4b914b92 	blmi	fe453444 <padd+0xde451bc0>
 5f8:	4c4b4b4b 	mcrrmi	11, 4, r4, fp, cr11
 5fc:	004b3d92 	umaaleq	r3, fp, r2, sp
 600:	06010402 	streq	r0, [r1], -r2, lsl #8
 604:	002f0658 	eoreq	r0, pc, r8, asr r6	; <UNPREDICTABLE>
 608:	06010402 	streq	r0, [r1], -r2, lsl #8
 60c:	002f0658 	eoreq	r0, pc, r8, asr r6	; <UNPREDICTABLE>
 610:	06010402 	streq	r0, [r1], -r2, lsl #8
 614:	002f0658 	eoreq	r0, pc, r8, asr r6	; <UNPREDICTABLE>
 618:	06010402 	streq	r0, [r1], -r2, lsl #8
 61c:	212f0658 			; <UNDEFINED> instruction: 0x212f0658
 620:	3d673e68 	stclcc	14, cr3, [r7, #-416]!	; 0xfffffe60
 624:	003d764b 	eorseq	r7, sp, fp, asr #12
 628:	8b020402 	blhi	81638 <startup-0x1ff7e9c8>
 62c:	01040200 	mrseq	r0, R12_usr
 630:	44063c06 	strmi	r3, [r6], #-3078	; 0xfffff3fa
 634:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 638:	07022101 	streq	r2, [r2, -r1, lsl #2]
 63c:	Address 0x0000063c is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	65726461 	ldrbvs	r6, [r2, #-1121]!	; 0xfffffb9f
   4:	63007373 	movwvs	r7, #883	; 0x373
   8:	61726168 	cmnvs	r2, r8, ror #2
   c:	72657463 	rsbvc	r7, r5, #1660944384	; 0x63000000
  10:	63736100 	cmnvs	r3, #0, 2
  14:	695f6969 	ldmdbvs	pc, {r0, r3, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
  18:	0074696e 	rsbseq	r6, r4, lr, ror #18
  1c:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
  20:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
  24:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
  28:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  2c:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  30:	30373130 	eorscc	r3, r7, r0, lsr r1
  34:	20343039 	eorscs	r3, r4, r9, lsr r0
  38:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  3c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  40:	415b2029 	cmpmi	fp, r9, lsr #32
  44:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff2fa <padd+0xdfffda76>
  48:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  4c:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  50:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  54:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  58:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  5c:	6f697369 	svcvs	0x00697369
  60:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  64:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  68:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
  6c:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  70:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  74:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  78:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  7c:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  80:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
  84:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
  88:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
  8c:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
  90:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
  94:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  98:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  9c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  a0:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  a4:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  a8:	20672d20 	rsbcs	r2, r7, r0, lsr #26
  ac:	20304f2d 	eorscs	r4, r0, sp, lsr #30
  b0:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
  b4:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
  b8:	63736100 	cmnvs	r3, #0, 2
  bc:	675f6969 	ldrbvs	r6, [pc, -r9, ror #18]
  c0:	786f746f 	stmdavc	pc!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
  c4:	6e750079 	mrcvs	0, 3, r0, cr5, cr9, {3}
  c8:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
  cc:	63206465 			; <UNDEFINED> instruction: 0x63206465
  d0:	00726168 	rsbseq	r6, r2, r8, ror #2
  d4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  d8:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
  dc:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
  e0:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
  e4:	68730073 	ldmdavs	r3!, {r0, r1, r4, r5, r6}^
  e8:	2074726f 	rsbscs	r7, r4, pc, ror #4
  ec:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  f0:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  f4:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
  f8:	2f3a4300 	svccs	0x003a4300
  fc:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 100:	6e412f73 	mcrvs	15, 2, r2, cr1, cr3, {3}
 104:	2f657264 	svccs	0x00657264
 108:	6b736544 	blvs	1cd9620 <startup-0x1e3269e0>
 10c:	2f706f74 	svccs	0x00706f74
 110:	33544144 	cmpcc	r4, #68, 2
 114:	6c5f3039 	mrrcvs	0, 3, r3, pc, cr9	; <UNPREDICTABLE>
 118:	5f626261 	svcpl	0x00626261
 11c:	732f3476 			; <UNDEFINED> instruction: 0x732f3476
 120:	2f6c6570 	svccs	0x006c6570
 124:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 128:	6373615f 	cmnvs	r3, #-1073741801	; 0xc0000017
 12c:	632e6969 			; <UNDEFINED> instruction: 0x632e6969
 130:	63736100 	cmnvs	r3, #0, 2
 134:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 138:	5f646165 	svcpl	0x00646165
 13c:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 140:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 144:	61007265 	tstvs	r0, r5, ror #4
 148:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 14c:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 150:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 154:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
 158:	3a430074 	bcc	10c0330 <startup-0x1ef3fcd0>
 15c:	6573555c 	ldrbvs	r5, [r3, #-1372]!	; 0xfffffaa4
 160:	415c7372 	cmpmi	ip, r2, ror r3
 164:	6572646e 	ldrbvs	r6, [r2, #-1134]!	; 0xfffffb92
 168:	7365445c 	cmnvc	r5, #92, 8	; 0x5c000000
 16c:	706f746b 	rsbvc	r7, pc, fp, ror #8
 170:	5441445c 	strbpl	r4, [r1], #-1116	; 0xfffffba4
 174:	5f303933 	svcpl	0x00303933
 178:	6262616c 	rsbvs	r6, r2, #108, 2
 17c:	5c34765f 	ldcpl	6, cr7, [r4], #-380	; 0xfffffe84
 180:	6c657073 	stclvs	0, cr7, [r5], #-460	; 0xfffffe34
 184:	63736100 	cmnvs	r3, #0, 2
 188:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 18c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 190:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 194:	73610061 	cmnvc	r1, #97	; 0x61
 198:	5f696963 	svcpl	0x00696963
 19c:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 1a0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 1a4:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 1a8:	61007261 	tstvs	r0, r1, ror #4
 1ac:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 1b0:	6165725f 	cmnvs	r5, pc, asr r2
 1b4:	61645f64 	cmnvs	r4, r4, ror #30
 1b8:	61006174 	tstvs	r0, r4, ror r1
 1bc:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 1c0:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 4c <startup-0x1fffffb4>
 1c4:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 1c8:	63736100 	cmnvs	r3, #0, 2
 1cc:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 1d0:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 1d4:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 1d8:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 10 <startup-0x1ffffff0>
 1dc:	0072656c 	rsbseq	r6, r2, ip, ror #10
 1e0:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 1e4:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 1e8:	5f657469 	svcpl	0x00657469
 1ec:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 1f0:	63736100 	cmnvs	r3, #0, 2
 1f4:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 1f8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 1fc:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 88 <startup-0x1fffff78>
 200:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 204:	67617000 	strbvs	r7, [r1, -r0]!
 208:	6c630065 	stclvs	0, cr0, [r3], #-404	; 0xfffffe6c
 20c:	5f726165 	svcpl	0x00726165
 210:	6b636162 	blvs	18d87a0 <startup-0x1e727860>
 214:	66667542 	strbtvs	r7, [r6], -r2, asr #10
 218:	43007265 	movwmi	r7, #613	; 0x265
 21c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 220:	2f737265 	svccs	0x00737265
 224:	72646e41 	rsbvc	r6, r4, #1040	; 0x410
 228:	65442f65 	strbvs	r2, [r4, #-3941]	; 0xfffff09b
 22c:	6f746b73 	svcvs	0x00746b73
 230:	41442f70 	hvcmi	17136	; 0x42f0
 234:	30393354 	eorscc	r3, r9, r4, asr r3
 238:	62616c5f 	rsbvs	r6, r1, #24320	; 0x5f00
 23c:	34765f62 	ldrbtcc	r5, [r6], #-3938	; 0xfffff09e
 240:	6570732f 	ldrbvs	r7, [r0, #-815]!	; 0xfffffcd1
 244:	61672f6c 	cmnvs	r7, ip, ror #30
 248:	675f656d 	ldrbvs	r6, [pc, -sp, ror #10]
 24c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 250:	2e736369 	cdpcs	3, 7, cr6, cr3, cr9, {3}
 254:	72670063 	rsbvc	r0, r7, #99	; 0x63
 258:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 25c:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 260:	645f6461 	ldrbvs	r6, [pc], #-1121	; 268 <startup-0x1ffffd98>
 264:	00617461 	rsbeq	r7, r1, r1, ror #8
 268:	70617267 	rsbvc	r7, r1, r7, ror #4
 26c:	5f636968 	svcpl	0x00636968
 270:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 274:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0xffffff9b
 278:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
 27c:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 280:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; b8 <startup-0x1fffff48>
 284:	0072656c 	rsbseq	r6, r2, ip, ror #10
 288:	70617267 	rsbvc	r7, r1, r7, ror #4
 28c:	5f636968 	svcpl	0x00636968
 290:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 294:	61726700 	cmnvs	r2, r0, lsl #14
 298:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 29c:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 2a0:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 2a4:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 2a8:	00726165 	rsbseq	r6, r2, r5, ror #2
 2ac:	70617267 	rsbvc	r7, r1, r7, ror #4
 2b0:	5f636968 	svcpl	0x00636968
 2b4:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 2b8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 2bc:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 2c0:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
 2c4:	745f3874 	ldrbvc	r3, [pc], #-2164	; 2cc <startup-0x1ffffd34>
 2c8:	78697000 	stmdavc	r9!, {ip, sp, lr}^
 2cc:	6d006c65 	stcvs	12, cr6, [r0, #-404]	; 0xfffffe6c
 2d0:	006b7361 	rsbeq	r7, fp, r1, ror #6
 2d4:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 2d8:	72670078 	rsbvc	r0, r7, #120	; 0x78
 2dc:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2e0:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 2e4:	5f657469 	svcpl	0x00657469
 2e8:	61746164 	cmnvs	r4, r4, ror #2
 2ec:	61726700 	cmnvs	r2, r0, lsl #14
 2f0:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 2f4:	6172645f 	cmnvs	r2, pc, asr r4
 2f8:	63735f77 	cmnvs	r3, #476	; 0x1dc
 2fc:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 300:	61726700 	cmnvs	r2, r0, lsl #14
 304:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 308:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 30c:	65725f74 	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
 310:	00796461 	rsbseq	r6, r9, r1, ror #8
 314:	70617267 	rsbvc	r7, r1, r7, ror #4
 318:	5f636968 	svcpl	0x00636968
 31c:	61656c63 	cmnvs	r5, r3, ror #24
 320:	63735f72 	cmnvs	r3, #456	; 0x1c8
 324:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 328:	61726700 	cmnvs	r2, r0, lsl #14
 32c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 330:	6165725f 	cmnvs	r5, pc, asr r2
 334:	72670064 	rsbvc	r0, r7, #100	; 0x64
 338:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 33c:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 340:	5f657469 	svcpl	0x00657469
 344:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 348:	00646e61 	rsbeq	r6, r4, r1, ror #28
 34c:	78736f70 	ldmdavc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 350:	2f3a4300 	svccs	0x003a4300
 354:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 358:	6e412f73 	mcrvs	15, 2, r2, cr1, cr3, {3}
 35c:	2f657264 	svccs	0x00657264
 360:	6b736544 	blvs	1cd9878 <startup-0x1e326788>
 364:	2f706f74 	svccs	0x00706f74
 368:	33544144 	cmpcc	r4, #68, 2
 36c:	6c5f3039 	mrrcvs	0, 3, r3, pc, cr9	; <UNPREDICTABLE>
 370:	5f626261 	svcpl	0x00626261
 374:	732f3476 			; <UNDEFINED> instruction: 0x732f3476
 378:	2f6c6570 	svccs	0x006c6570
 37c:	6e69616d 	powvsez	f6, f1, #5.0
 380:	7400632e 	strvc	r6, [r0], #-814	; 0xfffffcd2
 384:	6d6f6547 	cfstr64vs	mvdx6, [pc, #-284]!	; 270 <startup-0x1ffffd90>
 388:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 38c:	75717300 	ldrbvc	r7, [r1, #-768]!	; 0xfffffd00
 390:	5f657261 	svcpl	0x00657261
 394:	71730031 	cmnvc	r3, r1, lsr r0
 398:	65726175 	ldrbvs	r6, [r2, #-373]!	; 0xfffffe8b
 39c:	7300325f 	movwvc	r3, #607	; 0x25f
 3a0:	72617571 	rsbvc	r7, r1, #473956352	; 0x1c400000
 3a4:	00335f65 	eorseq	r5, r3, r5, ror #30
 3a8:	61757173 	cmnvs	r5, r3, ror r1
 3ac:	345f6572 	ldrbcc	r6, [pc], #-1394	; 3b4 <startup-0x1ffffc4c>
 3b0:	75717300 	ldrbvc	r7, [r1, #-768]!	; 0xfffffd00
 3b4:	5f657261 	svcpl	0x00657261
 3b8:	71730035 	cmnvc	r3, r5, lsr r0
 3bc:	65726175 	ldrbvs	r6, [r2, #-373]!	; 0xfffffe8b
 3c0:	7300365f 	movwvc	r3, #1631	; 0x65f
 3c4:	72617571 	rsbvc	r7, r1, #473956352	; 0x1c400000
 3c8:	00375f65 	eorseq	r5, r7, r5, ror #30
 3cc:	61757173 	cmnvs	r5, r3, ror r1
 3d0:	385f6572 	ldmdacc	pc, {r1, r4, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
 3d4:	75717300 	ldrbvc	r7, [r1, #-768]!	; 0xfffffd00
 3d8:	5f657261 	svcpl	0x00657261
 3dc:	71730039 	cmnvc	r3, r9, lsr r0
 3e0:	5000385f 	andpl	r3, r0, pc, asr r8
 3e4:	4d4f4547 	cfstr64mi	mvdx4, [pc, #-284]	; 2d0 <startup-0x1ffffd30>
 3e8:	59525445 	ldmdbpl	r2, {r0, r2, r6, sl, ip, lr}^
 3ec:	61707000 	cmnvs	r0, r0
 3f0:	74006464 	strvc	r6, [r0], #-1124	; 0xfffffb9c
 3f4:	31747365 	cmncc	r4, r5, ror #6
 3f8:	73657400 	cmnvc	r5, #0, 8
 3fc:	50003274 	andpl	r3, r0, r4, ror r2
 400:	544e494f 	strbpl	r4, [lr], #-2383	; 0xfffff6b1
 404:	736f7000 	cmnvc	pc, #0
 408:	69640079 	stmdbvs	r4!, {r0, r3, r4, r5, r6}^
 40c:	64007872 	strvs	r7, [r0], #-2162	; 0xfffff78e
 410:	00797269 	rsbseq	r7, r9, r9, ror #4
 414:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 418:	00707574 	rsbseq	r7, r0, r4, ror r5
 41c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 420:	69730078 	ldmdbvs	r3!, {r3, r4, r5, r6}^
 424:	0079657a 	rsbseq	r6, r9, sl, ror r5
 428:	315f7173 	cmpcc	pc, r3, ror r1	; <UNPREDICTABLE>
 42c:	5f717300 	svcpl	0x00717300
 430:	71730032 	cmnvc	r3, r2, lsr r0
 434:	7300335f 	movwvc	r3, #863	; 0x35f
 438:	00345f71 	eorseq	r5, r4, r1, ror pc
 43c:	355f7173 	ldrbcc	r7, [pc, #-371]	; 2d1 <startup-0x1ffffd2f>
 440:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
 444:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 448:	73007374 	movwvc	r7, #884	; 0x374
 44c:	00375f71 	eorseq	r5, r7, r1, ror pc
 450:	395f7173 	ldmdbcc	pc, {r0, r1, r4, r5, r6, r8, ip, sp, lr}^	; <UNPREDICTABLE>
 454:	67726100 	ldrbvs	r6, [r2, -r0, lsl #2]!
 458:	50740063 	rsbspl	r0, r4, r3, rrx
 45c:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 460:	67726100 	ldrbvs	r6, [r2, -r0, lsl #2]!
 464:	61700076 	cmnvs	r0, r6, ror r0
 468:	675f6464 	ldrbvs	r6, [pc, -r4, ror #8]
 46c:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 470:	00797274 	rsbseq	r7, r9, r4, ror r2
 474:	6e69616d 	powvsez	f6, f1, #5.0
 478:	624f7400 	subvs	r7, pc, #0, 8
 47c:	6873006a 	ldmdavs	r3!, {r1, r3, r5, r6}^
 480:	625f7069 	subsvs	r7, pc, #105	; 0x69
 484:	00737469 	rsbseq	r7, r3, r9, ror #8
 488:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
 48c:	63736100 	cmnvs	r3, #0, 2
 490:	6d5f6969 	vldrvs.16	s13, [pc, #-210]	; 3c6 <startup-0x1ffffc3a>	; <UNPREDICTABLE>
 494:	61737365 	cmnvs	r3, r5, ror #6
 498:	70006567 	andvc	r6, r0, r7, ror #10
 49c:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 4a0:	61726400 	cmnvs	r2, r0, lsl #8
 4a4:	65730077 	ldrbvs	r0, [r3, #-119]!	; 0xffffff89
 4a8:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 4ac:	00646565 	rsbeq	r6, r4, r5, ror #10
 4b0:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 4b4:	6f65675f 	svcvs	0x0065675f
 4b8:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 4bc:	71730079 	cmnvc	r3, r9, ror r0
 4c0:	6900365f 	stmdbvs	r0, {r0, r1, r2, r3, r4, r6, r9, sl, ip, sp}
 4c4:	5f74696e 	svcpl	0x0074696e
 4c8:	6c657073 	stclvs	0, cr7, [r5], #-460	; 0xfffffe34
 4cc:	424f5000 	submi	r5, pc, #0
 4d0:	5443454a 	strbpl	r4, [r3], #-1354	; 0xfffffab6
 4d4:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 4d8:	71730065 	cmnvc	r3, r5, rrx
 4dc:	65726175 	ldrbvs	r6, [r2, #-373]!	; 0xfffffe8b
 4e0:	6f65675f 	svcvs	0x0065675f
 4e4:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 4e8:	645f0079 	ldrbvs	r0, [pc], #-121	; 4f0 <startup-0x1ffffb10>
 4ec:	685f6f73 	ldmdavs	pc, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 4f0:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
 4f4:	6d5f0065 	ldclvs	0, cr0, [pc, #-404]	; 368 <startup-0x1ffffc98>
 4f8:	776f7462 	strbvc	r7, [pc, -r2, ror #8]!
 4fc:	74735f63 	ldrbtvc	r5, [r3], #-3939	; 0xfffff09d
 500:	00657461 	rsbeq	r7, r5, r1, ror #8
 504:	7a69735f 	bvc	1a5d288 <startup-0x1e5a2d78>
 508:	725f0065 	subsvc	r0, pc, #101	; 0x65
 50c:	34646e61 	strbtcc	r6, [r4], #-3681	; 0xfffff19f
 510:	655f0038 	ldrbvs	r0, [pc, #-56]	; 4e0 <startup-0x1ffffb20>
 514:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 518:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
 51c:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
 520:	6f5f7261 	svcvs	0x005f7261
 524:	63656a62 	cmnvs	r5, #401408	; 0x62000
 528:	775f0074 			; <UNDEFINED> instruction: 0x775f0074
 52c:	6f747263 	svcvs	0x00747263
 530:	735f626d 	cmpvc	pc, #-805306362	; 0xd0000006
 534:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 538:	63775f00 	cmnvs	r7, #0, 30
 53c:	6f747273 	svcvs	0x00747273
 540:	5f73626d 	svcpl	0x0073626d
 544:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 548:	6f6c0065 	svcvs	0x006c0065
 54c:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
 550:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 554:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 558:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 55c:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 560:	626c5f00 	rsbvs	r5, ip, #0, 30
 564:	7a697366 	bvc	1a5d304 <startup-0x1e5a2cfc>
 568:	5f5f0065 	svcpl	0x005f0065
 56c:	61636f6c 	cmnvs	r3, ip, ror #30
 570:	745f656c 	ldrbvc	r6, [pc], #-1388	; 578 <startup-0x1ffffa88>
 574:	64697700 	strbtvs	r7, [r9], #-1792	; 0xfffff900
 578:	695f6874 	ldmdbvs	pc, {r2, r4, r5, r6, fp, sp, lr}^	; <UNPREDICTABLE>
 57c:	79625f6e 	stmdbvc	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 580:	00736574 	rsbseq	r6, r3, r4, ror r5
 584:	72626d5f 	rsbvc	r6, r2, #6080	; 0x17c0
 588:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
 58c:	6174735f 	cmnvs	r4, pc, asr r3
 590:	5f006574 	svcpl	0x00006574
 594:	5f6d745f 	svcpl	0x006d745f
 598:	00636573 	rsbeq	r6, r3, r3, ror r5
 59c:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 5a0:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
 5a4:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
 5a8:	755f0074 	ldrbvc	r0, [pc, #-116]	; 53c <startup-0x1ffffac4>
 5ac:	00667562 	rsbeq	r7, r6, r2, ror #10
 5b0:	7361625f 	cmnvc	r1, #-268435451	; 0xf0000005
 5b4:	5f5f0065 	svcpl	0x005f0065
 5b8:	685f6d74 	ldmdavs	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 5bc:	0072756f 	rsbseq	r7, r2, pc, ror #10
 5c0:	66735f5f 	uhsaxvs	r5, r3, pc	; <UNPREDICTABLE>
 5c4:	6e6f5f00 	cdpvs	15, 6, cr5, cr15, cr0, {0}
 5c8:	6978655f 	ldmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
 5cc:	72615f74 	rsbvc	r5, r1, #116, 30	; 0x1d0
 5d0:	5f007367 	svcpl	0x00007367
 5d4:	6b6f6f63 	blvs	1bdc368 <startup-0x1e423c98>
 5d8:	5f006569 	svcpl	0x00006569
 5dc:	61636f6c 	cmnvs	r3, ip, ror #30
 5e0:	6d69746c 	cfstrdvs	mvd7, [r9, #-432]!	; 0xfffffe50
 5e4:	75625f65 	strbvc	r5, [r2, #-3941]!	; 0xfffff09b
 5e8:	5f5f0066 	svcpl	0x005f0066
 5ec:	756c6773 	strbvc	r6, [ip, #-1907]!	; 0xfffff88d
 5f0:	665f0065 	ldrbvs	r0, [pc], -r5, rrx
 5f4:	7367616c 	cmnvc	r7, #108, 2
 5f8:	73695f00 	cmnvc	r9, #0, 30
 5fc:	6178635f 	cmnvs	r8, pc, asr r3
 600:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 604:	006e6964 	rsbeq	r6, lr, r4, ror #18
 608:	6b6c625f 	blvs	1b18f8c <startup-0x1e4e7074>
 60c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 610:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 614:	626f5f65 	rsbvs	r5, pc, #404	; 0x194
 618:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 61c:	756f6400 	strbvc	r6, [pc, #-1024]!	; 224 <startup-0x1ffffddc>
 620:	00656c62 	rsbeq	r6, r5, r2, ror #24
 624:	7476635f 	ldrbtvc	r6, [r6], #-863	; 0xfffffca1
 628:	00667562 	rsbeq	r7, r6, r2, ror #10
 62c:	66666f5f 	uqsaxvs	r6, r6, pc	; <UNPREDICTABLE>
 630:	00746573 	rsbseq	r6, r4, r3, ror r5
 634:	73696874 	cmnvc	r9, #116, 16	; 0x740000
 638:	626d5f00 	rsbvs	r5, sp, #0, 30
 63c:	6f747273 	svcvs	0x00747273
 640:	5f736377 	svcpl	0x00736377
 644:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 648:	6d5f0065 	ldclvs	0, cr0, [pc, #-404]	; 4bc <startup-0x1ffffb44>
 64c:	656c7262 	strbvs	r7, [ip, #-610]!	; 0xfffffd9e
 650:	74735f6e 	ldrbtvc	r5, [r3], #-3950	; 0xfffff092
 654:	00657461 	rsbeq	r7, r5, r1, ror #8
 658:	616e665f 	cmnvs	lr, pc, asr r6
 65c:	00736772 	rsbseq	r6, r3, r2, ror r7
 660:	61656c63 	cmnvs	r5, r3, ror #24
 664:	70735f72 	rsbsvc	r5, r3, r2, ror pc
 668:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 66c:	6e665f00 	cdpvs	15, 6, cr5, cr6, cr0, {0}
 670:	735f0073 	cmpvc	pc, #115	; 0x73
 674:	006e6769 	rsbeq	r6, lr, r9, ror #14
 678:	6f6c665f 	svcvs	0x006c665f
 67c:	745f6b63 	ldrbvc	r6, [pc], #-2915	; 684 <startup-0x1ffff97c>
 680:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 684:	72726564 	rsbsvc	r6, r2, #100, 10	; 0x19000000
 688:	69425f00 	stmdbvs	r2, {r8, r9, sl, fp, ip, lr}^
 68c:	746e6967 	strbtvc	r6, [lr], #-2407	; 0xfffff699
 690:	61675f00 	cmnvs	r7, r0, lsl #30
 694:	5f616d6d 	svcpl	0x00616d6d
 698:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 69c:	006d6167 	rsbeq	r6, sp, r7, ror #2
 6a0:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffc65 <padd+0xdfffe3e1>
 6a4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 6a8:	646e412f 	strbtvs	r4, [lr], #-303	; 0xfffffed1
 6ac:	442f6572 	strtmi	r6, [pc], #-1394	; 6b4 <startup-0x1ffff94c>
 6b0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 6b4:	442f706f 	strtmi	r7, [pc], #-111	; 6bc <startup-0x1ffff944>
 6b8:	39335441 	ldmdbcc	r3!, {r0, r6, sl, ip, lr}
 6bc:	616c5f30 	cmnvs	ip, r0, lsr pc
 6c0:	765f6262 	ldrbvc	r6, [pc], -r2, ror #4
 6c4:	70732f34 	rsbsvc	r2, r3, r4, lsr pc
 6c8:	672f6c65 	strvs	r6, [pc, -r5, ror #24]!
 6cc:	5f656d61 	svcpl	0x00656d61
 6d0:	75727473 	ldrbvc	r7, [r2, #-1139]!	; 0xfffffb8d
 6d4:	2e737463 	cdpcs	4, 7, cr7, cr3, cr3, {3}
 6d8:	725f0063 	subsvc	r0, pc, #99	; 0x63
 6dc:	6c757365 	ldclvs	3, cr7, [r5], #-404	; 0xfffffe6c
 6e0:	006b5f74 	rsbeq	r5, fp, r4, ror pc
 6e4:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
 6e8:	61726400 	cmnvs	r2, r0, lsl #8
 6ec:	626f5f77 	rsbvs	r5, pc, #476	; 0x1dc
 6f0:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 6f4:	775f5f00 	ldrbvc	r5, [pc, -r0, lsl #30]
 6f8:	00626863 	rsbeq	r6, r2, r3, ror #16
 6fc:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
 700:	0074756f 	rsbseq	r7, r4, pc, ror #10
 704:	7476635f 	ldrbtvc	r6, [r6], #-863	; 0xfffffca1
 708:	006e656c 	rsbeq	r6, lr, ip, ror #10
 70c:	6c69665f 	stclvs	6, cr6, [r9], #-380	; 0xfffffe84
 710:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0xffffff9b
 714:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 718:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 71c:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 720:	6d006465 	cfstrsvs	mvf6, [r0, #-404]	; 0xfffffe6c
 724:	5f65766f 	svcpl	0x0065766f
 728:	5f007073 	svcpl	0x00007073
 72c:	626f696e 	rsbvs	r6, pc, #1802240	; 0x1b8000
 730:	69770073 	ldmdbvs	r7!, {r0, r1, r4, r5, r6}^
 734:	00687464 	rsbeq	r7, r8, r4, ror #8
 738:	79726964 	ldmdbvc	r2!, {r2, r5, r6, r8, fp, sp, lr}^
 73c:	0070735f 	rsbseq	r7, r0, pc, asr r3
 740:	6574615f 	ldrbvs	r6, [r4, #-351]!	; 0xfffffea1
 744:	30746978 	rsbscc	r6, r4, r8, ror r9
 748:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
 74c:	6c616e67 	stclvs	14, cr6, [r1], #-412	; 0xfffffe64
 750:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
 754:	73615f00 	cmnvc	r1, #0, 30
 758:	6d697463 	cfstrdvs	mvd7, [r9, #-396]!	; 0xfffffe74
 75c:	75625f65 	strbvc	r5, [r2, #-3941]!	; 0xfffff09b
 760:	725f0066 	subsvc	r0, pc, #102	; 0x66
 764:	6c757365 	ldclvs	3, cr7, [r5], #-404	; 0xfffffe6c
 768:	5f5f0074 	svcpl	0x005f0074
 76c:	00686377 	rsbeq	r6, r8, r7, ror r3
 770:	72705373 	rsbsvc	r5, r0, #-872415231	; 0xcc000001
 774:	00657469 	rsbeq	r7, r5, r9, ror #8
 778:	52505350 	subspl	r5, r0, #80, 6	; 0x40000001
 77c:	00455449 	subeq	r5, r5, r9, asr #8
 780:	735f7073 	cmpvc	pc, #115	; 0x73
 784:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 788:	4c5f0079 	mrrcmi	0, 7, r0, pc, cr9	; <UNPREDICTABLE>
 78c:	5f4b434f 	svcpl	0x004b434f
 790:	5f5f0054 	svcpl	0x005f0054
 794:	795f6d74 	ldmdbvc	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 798:	00726165 	rsbseq	r6, r2, r5, ror #2
 79c:	6f635f5f 	svcvs	0x00635f5f
 7a0:	00746e75 	rsbseq	r6, r4, r5, ror lr
 7a4:	78726964 	ldmdavc	r2!, {r2, r5, r6, r8, fp, sp, lr}^
 7a8:	0070735f 	rsbseq	r7, r0, pc, asr r3
 7ac:	735f7073 	cmpvc	pc, #115	; 0x73
 7b0:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 7b4:	6e5f0078 	mrcvs	0, 2, r0, cr15, cr8, {3}
 7b8:	66747865 	ldrbtvs	r7, [r4], -r5, ror #16
 7bc:	64617000 	strbtvs	r7, [r1], #-0
 7c0:	74735f64 	ldrbtvc	r5, [r3], #-3940	; 0xfffff09c
 7c4:	00736475 	rsbseq	r6, r3, r5, ror r4
 7c8:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
 7cc:	6e6f6d5f 	mcrvs	13, 3, r6, cr15, cr15, {2}
 7d0:	74615f00 	strbtvc	r5, [r1], #-3840	; 0xfffff100
 7d4:	74697865 	strbtvc	r7, [r9], #-2149	; 0xfffff79b
 7d8:	735f5f00 	cmpvc	pc, #0, 30
 7dc:	69646964 	stmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
 7e0:	0074696e 	rsbseq	r6, r4, lr, ror #18
 7e4:	66666f5f 	uqsaxvs	r6, r6, pc	; <UNPREDICTABLE>
 7e8:	7700745f 	smlsdvc	r0, pc, r4, r7	; <UNPREDICTABLE>
 7ec:	5f746e69 	svcpl	0x00746e69
 7f0:	6c660074 	stclvs	0, cr0, [r6], #-464	; 0xfffffe30
 7f4:	0074616f 	rsbseq	r6, r4, pc, ror #2
 7f8:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
 7fc:	73696c65 	cmnvc	r9, #25856	; 0x6500
 800:	775f0074 			; <UNDEFINED> instruction: 0x775f0074
 804:	6d6f7463 	cfstrdvs	mvd7, [pc, #-396]!	; 680 <startup-0x1ffff980>
 808:	74735f62 	ldrbtvc	r5, [r3], #-3938	; 0xfffff09e
 80c:	00657461 	rsbeq	r7, r5, r1, ror #8
 810:	77656e5f 			; <UNDEFINED> instruction: 0x77656e5f
 814:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 818:	6a626f5f 	bvs	189c59c <startup-0x1e763a64>
 81c:	5f746365 	svcpl	0x00746365
 820:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 824:	685f0064 	ldmdavs	pc, {r2, r5, r6}^	; <UNPREDICTABLE>
 828:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
 82c:	73006f6e 	movwvc	r6, #3950	; 0xf6e
 830:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
 834:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 838:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 840 <startup-0x1ffff7c0>
 83c:	64795f6d 	ldrbtvs	r5, [r9], #-3949	; 0xfffff093
 840:	5f007961 	svcpl	0x00007961
 844:	7562735f 	strbvc	r7, [r2, #-863]!	; 0xfffffca1
 848:	665f0066 	ldrbvs	r0, [pc], -r6, rrx
 84c:	7367616c 	cmnvc	r7, #108, 2
 850:	695f0032 	ldmdbvs	pc, {r1, r4, r5}^	; <UNPREDICTABLE>
 854:	0073626f 	rsbseq	r6, r3, pc, ror #4
 858:	49465f5f 	stmdbmi	r6, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
 85c:	5f00454c 	svcpl	0x0000454c
 860:	7473626d 	ldrbtvc	r6, [r3], #-621	; 0xfffffd93
 864:	5f657461 	svcpl	0x00657461
 868:	5f5f0074 	svcpl	0x005f0074
 86c:	4c494673 	mcrrmi	6, 7, r4, r9, cr3
 870:	6d5f0045 	ldclvs	0, cr0, [pc, #-276]	; 764 <startup-0x1ffff89c>
 874:	61747362 	cmnvs	r4, r2, ror #6
 878:	5f006574 	svcpl	0x00006574
 87c:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
 880:	78656e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
 884:	6d5f0074 	ldclvs	0, cr0, [pc, #-464]	; 6bc <startup-0x1ffff944>
 888:	6e656c62 	cdpvs	12, 6, cr6, cr5, cr2, {3}
 88c:	6174735f 	cmnvs	r4, pc, asr r3
 890:	5f006574 	svcpl	0x00006574
 894:	00636e69 	rsbeq	r6, r3, r9, ror #28
 898:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
 89c:	6f6c5f00 	svcvs	0x006c5f00
 8a0:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
 8a4:	635f5f00 	cmpvs	pc, #0, 30
 8a8:	6e61656c 	cdpvs	5, 6, cr6, cr1, cr12, {3}
 8ac:	5f007075 	svcpl	0x00007075
 8b0:	70736e75 	rsbsvc	r6, r3, r5, ror lr
 8b4:	66696365 	strbtvs	r6, [r9], -r5, ror #6
 8b8:	5f646569 	svcpl	0x00646569
 8bc:	61636f6c 	cmnvs	r3, ip, ror #30
 8c0:	695f656c 	ldmdbvs	pc, {r2, r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
 8c4:	006f666e 	rsbeq	r6, pc, lr, ror #12
 8c8:	6565735f 	strbvs	r7, [r5, #-863]!	; 0xfffffca1
 8cc:	6f6d0064 	svcvs	0x006d0064
 8d0:	735f6576 	cmpvc	pc, #494927872	; 0x1d800000
 8d4:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 8d8:	6c630065 	stclvs	0, cr0, [r3], #-404	; 0xfffffe6c
 8dc:	5f726165 	svcpl	0x00726165
 8e0:	5f007073 	svcpl	0x00007073
 8e4:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
 8e8:	5f5f006b 	svcpl	0x005f006b
 8ec:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 8f0:	735f0065 	cmpvc	pc, #101	; 0x65
 8f4:	006b6565 	rsbeq	r6, fp, r5, ror #10
 8f8:	6f6c635f 	svcvs	0x006c635f
 8fc:	5f006573 	svcpl	0x00006573
 900:	736f7066 	cmnvc	pc, #102	; 0x66
 904:	5f00745f 	svcpl	0x0000745f
 908:	5f6d745f 	svcpl	0x006d745f
 90c:	006e696d 	rsbeq	r6, lr, sp, ror #18
 910:	5f746573 	svcpl	0x00746573
 914:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 918:	70735f64 	rsbsvc	r5, r3, r4, ror #30
 91c:	756d5f00 	strbvc	r5, [sp, #-3840]!	; 0xfffff100
 920:	5f00746c 	svcpl	0x0000746c
 924:	74727473 	ldrbtvc	r7, [r2], #-1139	; 0xfffffb8d
 928:	6c5f6b6f 	mrrcvs	11, 6, r6, pc, cr15	; <UNPREDICTABLE>
 92c:	00747361 	rsbseq	r7, r4, r1, ror #6
 930:	746e665f 	strbtvc	r6, [lr], #-1631	; 0xfffff9a1
 934:	73657079 	cmnvc	r5, #121	; 0x79
 938:	616d5f00 	cmnvs	sp, r0, lsl #30
 93c:	73647778 	cmnvc	r4, #120, 14	; 0x1e00000
 940:	61726400 	cmnvs	r2, r0, lsl #8
 944:	70735f77 	rsbsvc	r5, r3, r7, ror pc
 948:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 94c:	736f7000 	cmnvc	pc, #0
 950:	70735f79 	rsbsvc	r5, r3, r9, ror pc
 954:	64615f00 	strbtvs	r5, [r1], #-3840	; 0xfffff100
 958:	5f5f0064 	svcpl	0x005f0064
 95c:	6e6f4c55 	mcrvs	12, 3, r4, cr15, cr5, {2}
 960:	675f0067 	ldrbvs	r0, [pc, -r7, rrx]
 964:	61647465 	cmnvs	r4, r5, ror #8
 968:	655f6574 	ldrbvs	r6, [pc, #-1396]	; 3fc <startup-0x1ffffc04>
 96c:	5f007272 	svcpl	0x00007272
 970:	626f6c67 	rsbvs	r6, pc, #26368	; 0x6700
 974:	695f6c61 	ldmdbvs	pc, {r0, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 978:	7275706d 	rsbsvc	r7, r5, #109	; 0x6d
 97c:	74705f65 	ldrbtvc	r5, [r0], #-3941	; 0xfffff09b
 980:	6f6d0072 	svcvs	0x006d0072
 984:	705f6576 	subsvc	r6, pc, r6, ror r5	; <UNPREDICTABLE>
 988:	00646461 	rsbeq	r6, r4, r1, ror #8
 98c:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
 990:	5f646573 	svcpl	0x00646573
 994:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
 998:	64775f00 	ldrbtvs	r5, [r7], #-3840	; 0xfffff100
 99c:	5f5f0073 	svcpl	0x005f0073
 9a0:	775f6d74 			; <UNDEFINED> instruction: 0x775f6d74
 9a4:	00796164 	rsbseq	r6, r9, r4, ror #2
 9a8:	756c675f 	strbvc	r6, [ip, #-1887]!	; 0xfffff8a1
 9ac:	6e5f0065 	cdpvs	0, 5, cr0, cr15, cr5, {3}
 9b0:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 9b4:	5f00636f 	svcpl	0x0000636f
 9b8:	6134366c 	teqvs	r4, ip, ror #12
 9bc:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
 9c0:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
 9c4:	75665f67 	strbvc	r5, [r6, #-3943]!	; 0xfffff099
 9c8:	5f00636e 	svcpl	0x0000636e
 9cc:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 9d0:	72640074 	rsbvc	r0, r4, #116	; 0x74
 9d4:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
 9d8:	6e5f0070 	mrcvs	0, 2, r0, cr15, cr0, {3}
 9dc:	00667562 	rsbeq	r7, r6, r2, ror #10
 9e0:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
 9e4:	00646573 	rsbeq	r6, r4, r3, ror r5
 9e8:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
 9ec:	6473695f 	ldrbtvs	r6, [r3], #-2399	; 0xfffff6a1
 9f0:	70007473 	andvc	r7, r0, r3, ror r4
 9f4:	5f78736f 	svcpl	0x0078736f
 9f8:	5f007073 	svcpl	0x00007073
 9fc:	00383472 	eorseq	r3, r8, r2, ror r4
 a00:	67696568 	strbvs	r6, [r9, -r8, ror #10]!
 a04:	5f007468 	svcpl	0x00007468
 a08:	00733570 	rsbseq	r3, r3, r0, ror r5
 a0c:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
 a10:	61646d5f 	cmnvs	r4, pc, asr sp
 a14:	65640079 	strbvs	r0, [r4, #-121]!	; 0xffffff87
 a18:	5f79616c 	svcpl	0x0079616c
 a1c:	7263696d 	rsbvc	r6, r3, #1785856	; 0x1b4000
 a20:	6564006f 	strbvs	r0, [r4, #-111]!	; 0xffffff91
 a24:	5f79616c 	svcpl	0x0079616c
 a28:	6e303035 	mrcvs	0, 1, r3, cr0, cr5, {1}
 a2c:	3a430073 	bcc	10c0c00 <startup-0x1ef3f400>
 a30:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 a34:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
 a38:	6572646e 	ldrbvs	r6, [r2, #-1134]!	; 0xfffffb92
 a3c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 a40:	706f746b 	rsbvc	r7, pc, fp, ror #8
 a44:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 a48:	5f303933 	svcpl	0x00303933
 a4c:	6262616c 	rsbvs	r6, r2, #108, 2
 a50:	2f34765f 	svccs	0x0034765f
 a54:	6c657073 	stclvs	0, cr7, [r5], #-460	; 0xfffffe34
 a58:	6d61672f 	stclvs	7, cr6, [r1, #-188]!	; 0xffffff44
 a5c:	65645f65 	strbvs	r5, [r4, #-3941]!	; 0xfffff09b
 a60:	7379616c 	cmnvc	r9, #108, 2
 a64:	6400632e 	strvs	r6, [r0], #-814	; 0xfffffcd2
 a68:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 a6c:	6c696d5f 	stclvs	13, cr6, [r9], #-380	; 0xfffffe84
 a70:	6400696c 	strvs	r6, [r0], #-2412	; 0xfffff694
 a74:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 a78:	3035325f 	eorscc	r3, r5, pc, asr r2
 a7c:	4300736e 	movwmi	r7, #878	; 0x36e
 a80:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 a84:	2f737265 	svccs	0x00737265
 a88:	72646e41 	rsbvc	r6, r4, #1040	; 0x410
 a8c:	65442f65 	strbvs	r2, [r4, #-3941]	; 0xfffff09b
 a90:	6f746b73 	svcvs	0x00746b73
 a94:	41442f70 	hvcmi	17136	; 0x42f0
 a98:	30393354 	eorscc	r3, r9, r4, asr r3
 a9c:	62616c5f 	rsbvs	r6, r1, #24320	; 0x5f00
 aa0:	34765f62 	ldrbtcc	r5, [r6], #-3938	; 0xfffff09e
 aa4:	6570732f 	ldrbvs	r7, [r0, #-815]!	; 0xfffffcd1
 aa8:	61672f6c 	cmnvs	r7, ip, ror #30
 aac:	6b5f656d 	blvs	17da068 <startup-0x1e825f98>
 ab0:	6f627965 	svcvs	0x00627965
 ab4:	2e647261 	cdpcs	2, 6, cr7, cr4, cr1, {3}
 ab8:	6f630063 	svcvs	0x00630063
 abc:	6e6d756c 	cdpvs	5, 6, cr7, cr13, cr12, {3}
 ac0:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 ac4:	6e695f62 	cdpvs	15, 6, cr5, cr9, cr2, {3}
 ac8:	6b007469 	blvs	1dc74 <startup-0x1ffe238c>
 acc:	00627965 	rsbeq	r7, r2, r5, ror #18
 ad0:	3774756f 	ldrbcc	r7, [r4, -pc, ror #10]!
 ad4:	00676573 	rsbeq	r6, r7, r3, ror r5
 ad8:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
 adc:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
 ae0:	6b006c6f 	blvs	1bca4 <startup-0x1ffe435c>
 ae4:	41627965 	cmnmi	r2, r5, ror #18
 ae8:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 aec:	00657461 	rsbeq	r7, r5, r1, ror #8

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <padd+0xdfffda8a>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000030 	andeq	r0, r0, r0, lsr r0
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	100e4101 	andne	r4, lr, r1, lsl #2
  2c:	00070d41 	andeq	r0, r7, r1, asr #26
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000040 	andcs	r0, r0, r0, asr #32
  3c:	00000034 	andeq	r0, r0, r4, lsr r0
  40:	40080e41 	andmi	r0, r8, r1, asr #28
  44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  48:	100e4101 	andne	r4, lr, r1, lsl #2
  4c:	00070d41 	andeq	r0, r7, r1, asr #26
  50:	0000001c 	andeq	r0, r0, ip, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000074 	andcs	r0, r0, r4, ror r0
  5c:	00000030 	andeq	r0, r0, r0, lsr r0
  60:	40080e41 	andmi	r0, r8, r1, asr #28
  64:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  68:	100e4101 	andne	r4, lr, r1, lsl #2
  6c:	00070d41 	andeq	r0, r7, r1, asr #26
  70:	0000001c 	andeq	r0, r0, ip, lsl r0
  74:	00000000 	andeq	r0, r0, r0
  78:	200000a4 	andcs	r0, r0, r4, lsr #1
  7c:	0000003c 	andeq	r0, r0, ip, lsr r0
  80:	40080e41 	andmi	r0, r8, r1, asr #28
  84:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  88:	100e4101 	andne	r4, lr, r1, lsl #2
  8c:	00070d41 	andeq	r0, r7, r1, asr #26
  90:	0000001c 	andeq	r0, r0, ip, lsl r0
  94:	00000000 	andeq	r0, r0, r0
  98:	200000e0 	andcs	r0, r0, r0, ror #1
  9c:	0000002a 	andeq	r0, r0, sl, lsr #32
  a0:	40080e41 	andmi	r0, r8, r1, asr #28
  a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a8:	100e4101 	andne	r4, lr, r1, lsl #2
  ac:	00070d41 	andeq	r0, r7, r1, asr #26
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	2000010a 	andcs	r0, r0, sl, lsl #2
  bc:	0000002a 	andeq	r0, r0, sl, lsr #32
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	100e4101 	andne	r4, lr, r1, lsl #2
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	00000020 	andeq	r0, r0, r0, lsr #32
  d4:	00000000 	andeq	r0, r0, r0
  d8:	20000134 	andcs	r0, r0, r4, lsr r1
  dc:	00000048 	andeq	r0, r0, r8, asr #32
  e0:	400c0e41 	andmi	r0, ip, r1, asr #28
  e4:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  e8:	018e4002 	orreq	r4, lr, r2
  ec:	41180e41 	tstmi	r8, r1, asr #28
  f0:	0000070d 	andeq	r0, r0, sp, lsl #14
  f4:	00000020 	andeq	r0, r0, r0, lsr #32
  f8:	00000000 	andeq	r0, r0, r0
  fc:	2000017c 	andcs	r0, r0, ip, ror r1
 100:	00000048 	andeq	r0, r0, r8, asr #32
 104:	400c0e41 	andmi	r0, ip, r1, asr #28
 108:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 10c:	018e4002 	orreq	r4, lr, r2
 110:	41180e41 	tstmi	r8, r1, asr #28
 114:	0000070d 	andeq	r0, r0, sp, lsl #14
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	00000000 	andeq	r0, r0, r0
 120:	200001c4 	andcs	r0, r0, r4, asr #3
 124:	00000032 	andeq	r0, r0, r2, lsr r0
 128:	40080e41 	andmi	r0, r8, r1, asr #28
 12c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 130:	100e4101 	andne	r4, lr, r1, lsl #2
 134:	00070d41 	andeq	r0, r7, r1, asr #26
 138:	00000018 	andeq	r0, r0, r8, lsl r0
 13c:	00000000 	andeq	r0, r0, r0
 140:	200001f6 	strdcs	r0, [r0], -r6
 144:	0000003a 	andeq	r0, r0, sl, lsr r0
 148:	40080e41 	andmi	r0, r8, r1, asr #28
 14c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 150:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 154:	0000001c 	andeq	r0, r0, ip, lsl r0
 158:	00000000 	andeq	r0, r0, r0
 15c:	20000230 	andcs	r0, r0, r0, lsr r2
 160:	0000003c 	andeq	r0, r0, ip, lsr r0
 164:	40080e41 	andmi	r0, r8, r1, asr #28
 168:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 16c:	100e4101 	andne	r4, lr, r1, lsl #2
 170:	00070d41 	andeq	r0, r7, r1, asr #26
 174:	0000001c 	andeq	r0, r0, ip, lsl r0
 178:	00000000 	andeq	r0, r0, r0
 17c:	2000026c 	andcs	r0, r0, ip, ror #4
 180:	0000004a 	andeq	r0, r0, sl, asr #32
 184:	40080e41 	andmi	r0, r8, r1, asr #28
 188:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 18c:	180e4101 	stmdane	lr, {r0, r8, lr}
 190:	00070d41 	andeq	r0, r7, r1, asr #26
 194:	0000000c 	andeq	r0, r0, ip
 198:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 19c:	7c020001 	stcvc	0, cr0, [r2], {1}
 1a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a8:	00000194 	muleq	r0, r4, r1
 1ac:	200002b8 			; <UNDEFINED> instruction: 0x200002b8
 1b0:	00000038 	andeq	r0, r0, r8, lsr r0
 1b4:	40080e41 	andmi	r0, r8, r1, asr #28
 1b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1bc:	100e4101 	andne	r4, lr, r1, lsl #2
 1c0:	00070d41 	andeq	r0, r7, r1, asr #26
 1c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c8:	00000194 	muleq	r0, r4, r1
 1cc:	200002f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 1d0:	0000003c 	andeq	r0, r0, ip, lsr r0
 1d4:	40080e41 	andmi	r0, r8, r1, asr #28
 1d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1dc:	100e4101 	andne	r4, lr, r1, lsl #2
 1e0:	00070d41 	andeq	r0, r7, r1, asr #26
 1e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e8:	00000194 	muleq	r0, r4, r1
 1ec:	2000032c 	andcs	r0, r0, ip, lsr #6
 1f0:	0000005a 	andeq	r0, r0, sl, asr r0
 1f4:	40080e41 	andmi	r0, r8, r1, asr #28
 1f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1fc:	100e4101 	andne	r4, lr, r1, lsl #2
 200:	00070d41 	andeq	r0, r7, r1, asr #26
 204:	00000018 	andeq	r0, r0, r8, lsl r0
 208:	00000194 	muleq	r0, r4, r1
 20c:	20000386 	andcs	r0, r0, r6, lsl #7
 210:	0000005a 	andeq	r0, r0, sl, asr r0
 214:	40080e41 	andmi	r0, r8, r1, asr #28
 218:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 21c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 220:	0000001c 	andeq	r0, r0, ip, lsl r0
 224:	00000194 	muleq	r0, r4, r1
 228:	200003e0 	andcs	r0, r0, r0, ror #7
 22c:	00000088 	andeq	r0, r0, r8, lsl #1
 230:	40080e41 	andmi	r0, r8, r1, asr #28
 234:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 238:	180e4101 	stmdane	lr, {r0, r8, lr}
 23c:	00070d41 	andeq	r0, r7, r1, asr #26
 240:	0000001c 	andeq	r0, r0, ip, lsl r0
 244:	00000194 	muleq	r0, r4, r1
 248:	20000468 	andcs	r0, r0, r8, ror #8
 24c:	00000078 	andeq	r0, r0, r8, ror r0
 250:	40080e41 	andmi	r0, r8, r1, asr #28
 254:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 258:	100e4101 	andne	r4, lr, r1, lsl #2
 25c:	00070d41 	andeq	r0, r7, r1, asr #26
 260:	0000001c 	andeq	r0, r0, ip, lsl r0
 264:	00000194 	muleq	r0, r4, r1
 268:	200004e0 	andcs	r0, r0, r0, ror #9
 26c:	00000040 	andeq	r0, r0, r0, asr #32
 270:	40080e41 	andmi	r0, r8, r1, asr #28
 274:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 278:	100e4101 	andne	r4, lr, r1, lsl #2
 27c:	00070d41 	andeq	r0, r7, r1, asr #26
 280:	0000001c 	andeq	r0, r0, ip, lsl r0
 284:	00000194 	muleq	r0, r4, r1
 288:	20000520 	andcs	r0, r0, r0, lsr #10
 28c:	00000046 	andeq	r0, r0, r6, asr #32
 290:	40080e41 	andmi	r0, r8, r1, asr #28
 294:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 298:	100e4101 	andne	r4, lr, r1, lsl #2
 29c:	00070d41 	andeq	r0, r7, r1, asr #26
 2a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a4:	00000194 	muleq	r0, r4, r1
 2a8:	20000566 	andcs	r0, r0, r6, ror #10
 2ac:	0000002a 	andeq	r0, r0, sl, lsr #32
 2b0:	40080e41 	andmi	r0, r8, r1, asr #28
 2b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b8:	100e4101 	andne	r4, lr, r1, lsl #2
 2bc:	00070d41 	andeq	r0, r7, r1, asr #26
 2c0:	00000018 	andeq	r0, r0, r8, lsl r0
 2c4:	00000194 	muleq	r0, r4, r1
 2c8:	20000590 	mulcs	r0, r0, r5
 2cc:	00000058 	andeq	r0, r0, r8, asr r0
 2d0:	40080e41 	andmi	r0, r8, r1, asr #28
 2d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2e0:	00000194 	muleq	r0, r4, r1
 2e4:	200005e8 	andcs	r0, r0, r8, ror #11
 2e8:	00000058 	andeq	r0, r0, r8, asr r0
 2ec:	40080e41 	andmi	r0, r8, r1, asr #28
 2f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2f4:	100e4101 	andne	r4, lr, r1, lsl #2
 2f8:	00070d41 	andeq	r0, r7, r1, asr #26
 2fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 300:	00000194 	muleq	r0, r4, r1
 304:	20000640 	andcs	r0, r0, r0, asr #12
 308:	00000088 	andeq	r0, r0, r8, lsl #1
 30c:	40080e41 	andmi	r0, r8, r1, asr #28
 310:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 314:	180e4101 	stmdane	lr, {r0, r8, lr}
 318:	00070d41 	andeq	r0, r7, r1, asr #26
 31c:	0000001c 	andeq	r0, r0, ip, lsl r0
 320:	00000194 	muleq	r0, r4, r1
 324:	200006c8 	andcs	r0, r0, r8, asr #13
 328:	000000cc 	andeq	r0, r0, ip, asr #1
 32c:	40080e41 	andmi	r0, r8, r1, asr #28
 330:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 334:	180e4101 	stmdane	lr, {r0, r8, lr}
 338:	00070d41 	andeq	r0, r7, r1, asr #26
 33c:	0000001c 	andeq	r0, r0, ip, lsl r0
 340:	00000194 	muleq	r0, r4, r1
 344:	20000794 	mulcs	r0, r4, r7
 348:	00000034 	andeq	r0, r0, r4, lsr r0
 34c:	40080e41 	andmi	r0, r8, r1, asr #28
 350:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 354:	100e4101 	andne	r4, lr, r1, lsl #2
 358:	00070d41 	andeq	r0, r7, r1, asr #26
 35c:	0000000c 	andeq	r0, r0, ip
 360:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 364:	7c020001 	stcvc	0, cr0, [r2], {1}
 368:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 36c:	0000000c 	andeq	r0, r0, ip
 370:	0000035c 	andeq	r0, r0, ip, asr r3
 374:	20000000 	andcs	r0, r0, r0
 378:	0000000c 	andeq	r0, r0, ip
 37c:	00000024 	andeq	r0, r0, r4, lsr #32
 380:	0000035c 	andeq	r0, r0, ip, asr r3
 384:	200007c8 	andcs	r0, r0, r8, asr #15
 388:	00000078 	andeq	r0, r0, r8, ror r0
 38c:	40100e41 	andsmi	r0, r0, r1, asr #28
 390:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 394:	02874003 	addeq	r4, r7, #3
 398:	41018e40 	tstmi	r1, r0, asr #28
 39c:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 3a0:	00000007 	andeq	r0, r0, r7
 3a4:	00000018 	andeq	r0, r0, r8, lsl r0
 3a8:	0000035c 	andeq	r0, r0, ip, asr r3
 3ac:	20000840 	andcs	r0, r0, r0, asr #16
 3b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b4:	40080e41 	andmi	r0, r8, r1, asr #28
 3b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3bc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 3c0:	00000020 	andeq	r0, r0, r0, lsr #32
 3c4:	0000035c 	andeq	r0, r0, ip, asr r3
 3c8:	2000085c 	andcs	r0, r0, ip, asr r8
 3cc:	00000174 	andeq	r0, r0, r4, ror r1
 3d0:	400c0e41 	andmi	r0, ip, r1, asr #28
 3d4:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 3d8:	018e4002 	orreq	r4, lr, r2
 3dc:	41780e41 	cmnmi	r8, r1, asr #28
 3e0:	0000070d 	andeq	r0, r0, sp, lsl #14
 3e4:	0000000c 	andeq	r0, r0, ip
 3e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 3ec:	7c020001 	stcvc	0, cr0, [r2], {1}
 3f0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 3f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f8:	000003e4 	andeq	r0, r0, r4, ror #7
 3fc:	200009d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 400:	00000020 	andeq	r0, r0, r0, lsr #32
 404:	40080e41 	andmi	r0, r8, r1, asr #28
 408:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 40c:	180e4101 	stmdane	lr, {r0, r8, lr}
 410:	00070d41 	andeq	r0, r7, r1, asr #26
 414:	0000001c 	andeq	r0, r0, ip, lsl r0
 418:	000003e4 	andeq	r0, r0, r4, ror #7
 41c:	200009f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 420:	00000020 	andeq	r0, r0, r0, lsr #32
 424:	40080e41 	andmi	r0, r8, r1, asr #28
 428:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 42c:	180e4101 	stmdane	lr, {r0, r8, lr}
 430:	00070d41 	andeq	r0, r7, r1, asr #26
 434:	0000001c 	andeq	r0, r0, ip, lsl r0
 438:	000003e4 	andeq	r0, r0, r4, ror #7
 43c:	20000a10 	andcs	r0, r0, r0, lsl sl
 440:	0000005c 	andeq	r0, r0, ip, asr r0
 444:	40080e41 	andmi	r0, r8, r1, asr #28
 448:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 44c:	180e4101 	stmdane	lr, {r0, r8, lr}
 450:	00070d41 	andeq	r0, r7, r1, asr #26
 454:	0000001c 	andeq	r0, r0, ip, lsl r0
 458:	000003e4 	andeq	r0, r0, r4, ror #7
 45c:	20000a6c 	andcs	r0, r0, ip, ror #20
 460:	000000f6 	strdeq	r0, [r0], -r6
 464:	40080e41 	andmi	r0, r8, r1, asr #28
 468:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 46c:	300e4101 	andcc	r4, lr, r1, lsl #2
 470:	00070d41 	andeq	r0, r7, r1, asr #26
 474:	0000001c 	andeq	r0, r0, ip, lsl r0
 478:	000003e4 	andeq	r0, r0, r4, ror #7
 47c:	20000b62 	andcs	r0, r0, r2, ror #22
 480:	0000005c 	andeq	r0, r0, ip, asr r0
 484:	40080e41 	andmi	r0, r8, r1, asr #28
 488:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 48c:	180e4101 	stmdane	lr, {r0, r8, lr}
 490:	00070d41 	andeq	r0, r7, r1, asr #26
 494:	0000001c 	andeq	r0, r0, ip, lsl r0
 498:	000003e4 	andeq	r0, r0, r4, ror #7
 49c:	20000bbe 			; <UNDEFINED> instruction: 0x20000bbe
 4a0:	00000010 	andeq	r0, r0, r0, lsl r0
 4a4:	40080e41 	andmi	r0, r8, r1, asr #28
 4a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4ac:	100e4101 	andne	r4, lr, r1, lsl #2
 4b0:	00070d41 	andeq	r0, r7, r1, asr #26
 4b4:	00000020 	andeq	r0, r0, r0, lsr #32
 4b8:	000003e4 	andeq	r0, r0, r4, ror #7
 4bc:	20000bce 	andcs	r0, r0, lr, asr #23
 4c0:	000000a6 	andeq	r0, r0, r6, lsr #1
 4c4:	400c0e41 	andmi	r0, ip, r1, asr #28
 4c8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 4cc:	018e4002 	orreq	r4, lr, r2
 4d0:	41180e41 	tstmi	r8, r1, asr #28
 4d4:	0000070d 	andeq	r0, r0, sp, lsl #14
 4d8:	00000020 	andeq	r0, r0, r0, lsr #32
 4dc:	000003e4 	andeq	r0, r0, r4, ror #7
 4e0:	20000c74 	andcs	r0, r0, r4, ror ip
 4e4:	000000ae 	andeq	r0, r0, lr, lsr #1
 4e8:	400c0e41 	andmi	r0, ip, r1, asr #28
 4ec:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 4f0:	018e4002 	orreq	r4, lr, r2
 4f4:	41180e41 	tstmi	r8, r1, asr #28
 4f8:	0000070d 	andeq	r0, r0, sp, lsl #14
 4fc:	00000020 	andeq	r0, r0, r0, lsr #32
 500:	000003e4 	andeq	r0, r0, r4, ror #7
 504:	20000d22 	andcs	r0, r0, r2, lsr #26
 508:	000000dc 	ldrdeq	r0, [r0], -ip
 50c:	400c0e41 	andmi	r0, ip, r1, asr #28
 510:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 514:	018e4002 	orreq	r4, lr, r2
 518:	41180e41 	tstmi	r8, r1, asr #28
 51c:	0000070d 	andeq	r0, r0, sp, lsl #14
 520:	00000020 	andeq	r0, r0, r0, lsr #32
 524:	000003e4 	andeq	r0, r0, r4, ror #7
 528:	20000dfe 	strdcs	r0, [r0], -lr
 52c:	00000062 	andeq	r0, r0, r2, rrx
 530:	400c0e41 	andmi	r0, ip, r1, asr #28
 534:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 538:	018e4002 	orreq	r4, lr, r2
 53c:	41180e41 	tstmi	r8, r1, asr #28
 540:	0000070d 	andeq	r0, r0, sp, lsl #14
 544:	0000000c 	andeq	r0, r0, ip
 548:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 54c:	7c020001 	stcvc	0, cr0, [r2], {1}
 550:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 554:	00000018 	andeq	r0, r0, r8, lsl r0
 558:	00000544 	andeq	r0, r0, r4, asr #10
 55c:	20000e60 	andcs	r0, r0, r0, ror #28
 560:	00000044 	andeq	r0, r0, r4, asr #32
 564:	40080e41 	andmi	r0, r8, r1, asr #28
 568:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 56c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 570:	0000001c 	andeq	r0, r0, ip, lsl r0
 574:	00000544 	andeq	r0, r0, r4, asr #10
 578:	20000ea4 	andcs	r0, r0, r4, lsr #29
 57c:	0000002c 	andeq	r0, r0, ip, lsr #32
 580:	40080e41 	andmi	r0, r8, r1, asr #28
 584:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 588:	100e4101 	andne	r4, lr, r1, lsl #2
 58c:	00070d41 	andeq	r0, r7, r1, asr #26
 590:	0000001c 	andeq	r0, r0, ip, lsl r0
 594:	00000544 	andeq	r0, r0, r4, asr #10
 598:	20000ed0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 59c:	0000003a 	andeq	r0, r0, sl, lsr r0
 5a0:	40080e41 	andmi	r0, r8, r1, asr #28
 5a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5a8:	100e4101 	andne	r4, lr, r1, lsl #2
 5ac:	00070d41 	andeq	r0, r7, r1, asr #26
 5b0:	00000018 	andeq	r0, r0, r8, lsl r0
 5b4:	00000544 	andeq	r0, r0, r4, asr #10
 5b8:	20000f0a 	andcs	r0, r0, sl, lsl #30
 5bc:	00000012 	andeq	r0, r0, r2, lsl r0
 5c0:	40080e41 	andmi	r0, r8, r1, asr #28
 5c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5c8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 5cc:	0000000c 	andeq	r0, r0, ip
 5d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 5d4:	7c020001 	stcvc	0, cr0, [r2], {1}
 5d8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 5dc:	00000018 	andeq	r0, r0, r8, lsl r0
 5e0:	000005cc 	andeq	r0, r0, ip, asr #11
 5e4:	20000f1c 	andcs	r0, r0, ip, lsl pc
 5e8:	00000048 	andeq	r0, r0, r8, asr #32
 5ec:	40080e41 	andmi	r0, r8, r1, asr #28
 5f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5f4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 5f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5fc:	000005cc 	andeq	r0, r0, ip, asr #11
 600:	20000f64 	andcs	r0, r0, r4, ror #30
 604:	000000b8 	strheq	r0, [r0], -r8
 608:	40080e41 	andmi	r0, r8, r1, asr #28
 60c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 610:	100e4101 	andne	r4, lr, r1, lsl #2
 614:	00070d41 	andeq	r0, r7, r1, asr #26
 618:	0000001c 	andeq	r0, r0, ip, lsl r0
 61c:	000005cc 	andeq	r0, r0, ip, asr #11
 620:	2000101c 	andcs	r1, r0, ip, lsl r0
 624:	00000054 	andeq	r0, r0, r4, asr r0
 628:	40080e41 	andmi	r0, r8, r1, asr #28
 62c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 630:	100e4101 	andne	r4, lr, r1, lsl #2
 634:	00070d41 	andeq	r0, r7, r1, asr #26
 638:	0000001c 	andeq	r0, r0, ip, lsl r0
 63c:	000005cc 	andeq	r0, r0, ip, asr #11
 640:	20001070 	andcs	r1, r0, r0, ror r0
 644:	00000054 	andeq	r0, r0, r4, asr r0
 648:	40080e41 	andmi	r0, r8, r1, asr #28
 64c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 650:	100e4101 	andne	r4, lr, r1, lsl #2
 654:	00070d41 	andeq	r0, r7, r1, asr #26
 658:	00000020 	andeq	r0, r0, r0, lsr #32
 65c:	000005cc 	andeq	r0, r0, ip, asr #11
 660:	200010c4 	andcs	r1, r0, r4, asr #1
 664:	00000068 	andeq	r0, r0, r8, rrx
 668:	400c0e41 	andmi	r0, ip, r1, asr #28
 66c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 670:	018e4002 	orreq	r4, lr, r2
 674:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 678:	0000070d 	andeq	r0, r0, sp, lsl #14
 67c:	0000000c 	andeq	r0, r0, ip
 680:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 684:	7c010001 	stcvc	0, cr0, [r1], {1}
 688:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 68c:	0000000c 	andeq	r0, r0, ip
 690:	0000067c 	andeq	r0, r0, ip, ror r6
 694:	2000112d 	andcs	r1, r0, sp, lsr #2
 698:	0000010a 	andeq	r0, r0, sl, lsl #2

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	200007c8 	andcs	r0, r0, r8, asr #15
   4:	200009d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
