
./Debug/1_GAME.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#include "startup.h"


void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 faf2 	bl	200005ec <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250ns>:
 *
 */

#include "startup.h"

void delay_250ns(void){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	STK_CTRL = 0;
20000014:	4b0c      	ldr	r3, [pc, #48]	; (20000048 <delay_250ns+0x38>)
20000016:	2200      	movs	r2, #0
20000018:	601a      	str	r2, [r3, #0]
	STK_LOAD = ((168/4) - 1);
2000001a:	4b0c      	ldr	r3, [pc, #48]	; (2000004c <delay_250ns+0x3c>)
2000001c:	2229      	movs	r2, #41	; 0x29
2000001e:	601a      	str	r2, [r3, #0]
	STK_VAL = 0;
20000020:	4b0b      	ldr	r3, [pc, #44]	; (20000050 <delay_250ns+0x40>)
20000022:	2200      	movs	r2, #0
20000024:	601a      	str	r2, [r3, #0]
	STK_CTRL = 5;
20000026:	4b08      	ldr	r3, [pc, #32]	; (20000048 <delay_250ns+0x38>)
20000028:	2205      	movs	r2, #5
2000002a:	601a      	str	r2, [r3, #0]
	
	while((STK_CTRL & 0x10000) == 0){};
2000002c:	46c0      	nop			; (mov r8, r8)
2000002e:	4b06      	ldr	r3, [pc, #24]	; (20000048 <delay_250ns+0x38>)
20000030:	681a      	ldr	r2, [r3, #0]
20000032:	2380      	movs	r3, #128	; 0x80
20000034:	025b      	lsls	r3, r3, #9
20000036:	4013      	ands	r3, r2
20000038:	d0f9      	beq.n	2000002e <delay_250ns+0x1e>
	STK_CTRL = 0;
2000003a:	4b03      	ldr	r3, [pc, #12]	; (20000048 <delay_250ns+0x38>)
2000003c:	2200      	movs	r2, #0
2000003e:	601a      	str	r2, [r3, #0]
}
20000040:	46c0      	nop			; (mov r8, r8)
20000042:	46bd      	mov	sp, r7
20000044:	bd80      	pop	{r7, pc}
20000046:	46c0      	nop			; (mov r8, r8)
20000048:	e000e010 	and	lr, r0, r0, lsl r0
2000004c:	e000e014 	and	lr, r0, r4, lsl r0
20000050:	e000e018 	and	lr, r0, r8, lsl r0

20000054 <delay_micro>:

void delay_micro(unsigned int us){
20000054:	b580      	push	{r7, lr}
20000056:	b082      	sub	sp, #8
20000058:	af00      	add	r7, sp, #0
2000005a:	6078      	str	r0, [r7, #4]
	while(us--){
2000005c:	e007      	b.n	2000006e <delay_micro+0x1a>
		delay_250ns();
2000005e:	f7ff ffd7 	bl	20000010 <delay_250ns>
		delay_250ns();
20000062:	f7ff ffd5 	bl	20000010 <delay_250ns>
		delay_250ns(); 
20000066:	f7ff ffd3 	bl	20000010 <delay_250ns>
		delay_250ns();
2000006a:	f7ff ffd1 	bl	20000010 <delay_250ns>
	while(us--){
2000006e:	687b      	ldr	r3, [r7, #4]
20000070:	1e5a      	subs	r2, r3, #1
20000072:	607a      	str	r2, [r7, #4]
20000074:	2b00      	cmp	r3, #0
20000076:	d1f2      	bne.n	2000005e <delay_micro+0xa>
	}
}
20000078:	46c0      	nop			; (mov r8, r8)
2000007a:	46bd      	mov	sp, r7
2000007c:	b002      	add	sp, #8
2000007e:	bd80      	pop	{r7, pc}

20000080 <delay_milli>:

void delay_milli(unsigned int ms){
20000080:	b580      	push	{r7, lr}
20000082:	b082      	sub	sp, #8
20000084:	af00      	add	r7, sp, #0
20000086:	6078      	str	r0, [r7, #4]

#ifdef SIMULATOR
	ms = ms / 100;
20000088:	687b      	ldr	r3, [r7, #4]
2000008a:	2164      	movs	r1, #100	; 0x64
2000008c:	0018      	movs	r0, r3
2000008e:	f000 fb8b 	bl	200007a8 <__udivsi3>
20000092:	0003      	movs	r3, r0
20000094:	607b      	str	r3, [r7, #4]
	ms++;
20000096:	687b      	ldr	r3, [r7, #4]
20000098:	3301      	adds	r3, #1
2000009a:	607b      	str	r3, [r7, #4]
#endif
	
	while( ms-- )
2000009c:	e004      	b.n	200000a8 <delay_milli+0x28>
		delay_micro(1000);
2000009e:	23fa      	movs	r3, #250	; 0xfa
200000a0:	009b      	lsls	r3, r3, #2
200000a2:	0018      	movs	r0, r3
200000a4:	f7ff ffd6 	bl	20000054 <delay_micro>
	while( ms-- )
200000a8:	687b      	ldr	r3, [r7, #4]
200000aa:	1e5a      	subs	r2, r3, #1
200000ac:	607a      	str	r2, [r7, #4]
200000ae:	2b00      	cmp	r3, #0
200000b0:	d1f5      	bne.n	2000009e <delay_milli+0x1e>
}
200000b2:	46c0      	nop			; (mov r8, r8)
200000b4:	46bd      	mov	sp, r7
200000b6:	b002      	add	sp, #8
200000b8:	bd80      	pop	{r7, pc}

200000ba <delay_500ns>:

void delay_500ns(void){
200000ba:	b580      	push	{r7, lr}
200000bc:	af00      	add	r7, sp, #0
	delay_250ns();
200000be:	f7ff ffa7 	bl	20000010 <delay_250ns>
	delay_250ns();
200000c2:	f7ff ffa5 	bl	20000010 <delay_250ns>
200000c6:	46c0      	nop			; (mov r8, r8)
200000c8:	46bd      	mov	sp, r7
200000ca:	bd80      	pop	{r7, pc}

200000cc <graphic_ctrl_bit_set>:
 *
 */

#include "startup.h"

void graphic_ctrl_bit_set(uint8_t x){
200000cc:	b580      	push	{r7, lr}
200000ce:	b082      	sub	sp, #8
200000d0:	af00      	add	r7, sp, #0
200000d2:	0002      	movs	r2, r0
200000d4:	1dfb      	adds	r3, r7, #7
200000d6:	701a      	strb	r2, [r3, #0]
	GPIO_ODR_E_LOW |= (~B_SELECT & x); 			//Dubbelkolla sedan
200000d8:	4b09      	ldr	r3, [pc, #36]	; (20000100 <graphic_ctrl_bit_set+0x34>)
200000da:	781b      	ldrb	r3, [r3, #0]
200000dc:	b2db      	uxtb	r3, r3
200000de:	b25a      	sxtb	r2, r3
200000e0:	1dfb      	adds	r3, r7, #7
200000e2:	781b      	ldrb	r3, [r3, #0]
200000e4:	b25b      	sxtb	r3, r3
200000e6:	2104      	movs	r1, #4
200000e8:	438b      	bics	r3, r1
200000ea:	b25b      	sxtb	r3, r3
200000ec:	4313      	orrs	r3, r2
200000ee:	b25a      	sxtb	r2, r3
200000f0:	4b03      	ldr	r3, [pc, #12]	; (20000100 <graphic_ctrl_bit_set+0x34>)
200000f2:	b2d2      	uxtb	r2, r2
200000f4:	701a      	strb	r2, [r3, #0]
}
200000f6:	46c0      	nop			; (mov r8, r8)
200000f8:	46bd      	mov	sp, r7
200000fa:	b002      	add	sp, #8
200000fc:	bd80      	pop	{r7, pc}
200000fe:	46c0      	nop			; (mov r8, r8)
20000100:	40021014 	andmi	r1, r2, r4, lsl r0

20000104 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x){
20000104:	b580      	push	{r7, lr}
20000106:	b082      	sub	sp, #8
20000108:	af00      	add	r7, sp, #0
2000010a:	0002      	movs	r2, r0
2000010c:	1dfb      	adds	r3, r7, #7
2000010e:	701a      	strb	r2, [r3, #0]
	GPIO_ODR_E_LOW &= ~(B_SELECT | x);			//Dubbelkolla sedan
20000110:	4b0a      	ldr	r3, [pc, #40]	; (2000013c <graphic_ctrl_bit_clear+0x38>)
20000112:	781b      	ldrb	r3, [r3, #0]
20000114:	b2db      	uxtb	r3, r3
20000116:	b25b      	sxtb	r3, r3
20000118:	1dfa      	adds	r2, r7, #7
2000011a:	7812      	ldrb	r2, [r2, #0]
2000011c:	2104      	movs	r1, #4
2000011e:	430a      	orrs	r2, r1
20000120:	b2d2      	uxtb	r2, r2
20000122:	b252      	sxtb	r2, r2
20000124:	43d2      	mvns	r2, r2
20000126:	b252      	sxtb	r2, r2
20000128:	4013      	ands	r3, r2
2000012a:	b25a      	sxtb	r2, r3
2000012c:	4b03      	ldr	r3, [pc, #12]	; (2000013c <graphic_ctrl_bit_clear+0x38>)
2000012e:	b2d2      	uxtb	r2, r2
20000130:	701a      	strb	r2, [r3, #0]
}
20000132:	46c0      	nop			; (mov r8, r8)
20000134:	46bd      	mov	sp, r7
20000136:	b002      	add	sp, #8
20000138:	bd80      	pop	{r7, pc}
2000013a:	46c0      	nop			; (mov r8, r8)
2000013c:	40021014 	andmi	r1, r2, r4, lsl r0

20000140 <select_controller>:

static void select_controller(uint8_t controller){
20000140:	b580      	push	{r7, lr}
20000142:	b082      	sub	sp, #8
20000144:	af00      	add	r7, sp, #0
20000146:	0002      	movs	r2, r0
20000148:	1dfb      	adds	r3, r7, #7
2000014a:	701a      	strb	r2, [r3, #0]
	switch(controller){
2000014c:	1dfb      	adds	r3, r7, #7
2000014e:	781b      	ldrb	r3, [r3, #0]
20000150:	2b08      	cmp	r3, #8
20000152:	d00c      	beq.n	2000016e <select_controller+0x2e>
20000154:	dc02      	bgt.n	2000015c <select_controller+0x1c>
20000156:	2b00      	cmp	r3, #0
20000158:	d005      	beq.n	20000166 <select_controller+0x26>
		case 0: graphic_ctrl_bit_clear(B_CS1 | B_CS2); break;
		case 0x08: graphic_ctrl_bit_set(B_CS1); graphic_ctrl_bit_clear(B_CS2); break;
		case 0x10: graphic_ctrl_bit_set(B_CS2); graphic_ctrl_bit_clear(B_CS1); break;
		case 0x08 | 0x10: graphic_ctrl_bit_set(B_CS1 | B_CS2); break;
	}	
}
2000015a:	e01a      	b.n	20000192 <select_controller+0x52>
	switch(controller){
2000015c:	2b10      	cmp	r3, #16
2000015e:	d00d      	beq.n	2000017c <select_controller+0x3c>
20000160:	2b18      	cmp	r3, #24
20000162:	d012      	beq.n	2000018a <select_controller+0x4a>
}
20000164:	e015      	b.n	20000192 <select_controller+0x52>
		case 0: graphic_ctrl_bit_clear(B_CS1 | B_CS2); break;
20000166:	2018      	movs	r0, #24
20000168:	f7ff ffcc 	bl	20000104 <graphic_ctrl_bit_clear>
2000016c:	e011      	b.n	20000192 <select_controller+0x52>
		case 0x08: graphic_ctrl_bit_set(B_CS1); graphic_ctrl_bit_clear(B_CS2); break;
2000016e:	2008      	movs	r0, #8
20000170:	f7ff ffac 	bl	200000cc <graphic_ctrl_bit_set>
20000174:	2010      	movs	r0, #16
20000176:	f7ff ffc5 	bl	20000104 <graphic_ctrl_bit_clear>
2000017a:	e00a      	b.n	20000192 <select_controller+0x52>
		case 0x10: graphic_ctrl_bit_set(B_CS2); graphic_ctrl_bit_clear(B_CS1); break;
2000017c:	2010      	movs	r0, #16
2000017e:	f7ff ffa5 	bl	200000cc <graphic_ctrl_bit_set>
20000182:	2008      	movs	r0, #8
20000184:	f7ff ffbe 	bl	20000104 <graphic_ctrl_bit_clear>
20000188:	e003      	b.n	20000192 <select_controller+0x52>
		case 0x08 | 0x10: graphic_ctrl_bit_set(B_CS1 | B_CS2); break;
2000018a:	2018      	movs	r0, #24
2000018c:	f7ff ff9e 	bl	200000cc <graphic_ctrl_bit_set>
20000190:	46c0      	nop			; (mov r8, r8)
}
20000192:	46c0      	nop			; (mov r8, r8)
20000194:	46bd      	mov	sp, r7
20000196:	b002      	add	sp, #8
20000198:	bd80      	pop	{r7, pc}

2000019a <graphic_wait_ready>:

static void graphic_wait_ready(void){
2000019a:	b580      	push	{r7, lr}
2000019c:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_clear(B_E);
2000019e:	2040      	movs	r0, #64	; 0x40
200001a0:	f7ff ffb0 	bl	20000104 <graphic_ctrl_bit_clear>
	GPIO_MODER_E = 0x00005555;
200001a4:	4b12      	ldr	r3, [pc, #72]	; (200001f0 <graphic_wait_ready+0x56>)
200001a6:	4a13      	ldr	r2, [pc, #76]	; (200001f4 <graphic_wait_ready+0x5a>)
200001a8:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
200001aa:	2001      	movs	r0, #1
200001ac:	f7ff ffaa 	bl	20000104 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
200001b0:	2002      	movs	r0, #2
200001b2:	f7ff ff8b 	bl	200000cc <graphic_ctrl_bit_set>
	delay_500ns();
200001b6:	f7ff ff80 	bl	200000ba <delay_500ns>
	while(GPIO_IDR_E_HIGH & LCD_BUSY){
200001ba:	e009      	b.n	200001d0 <graphic_wait_ready+0x36>
		graphic_ctrl_bit_set(B_E);
200001bc:	2040      	movs	r0, #64	; 0x40
200001be:	f7ff ff85 	bl	200000cc <graphic_ctrl_bit_set>
		delay_500ns();
200001c2:	f7ff ff7a 	bl	200000ba <delay_500ns>
		graphic_ctrl_bit_clear(B_E);
200001c6:	2040      	movs	r0, #64	; 0x40
200001c8:	f7ff ff9c 	bl	20000104 <graphic_ctrl_bit_clear>
		delay_500ns();
200001cc:	f7ff ff75 	bl	200000ba <delay_500ns>
	while(GPIO_IDR_E_HIGH & LCD_BUSY){
200001d0:	4b09      	ldr	r3, [pc, #36]	; (200001f8 <graphic_wait_ready+0x5e>)
200001d2:	781b      	ldrb	r3, [r3, #0]
200001d4:	b2db      	uxtb	r3, r3
200001d6:	b25b      	sxtb	r3, r3
200001d8:	2b00      	cmp	r3, #0
200001da:	dbef      	blt.n	200001bc <graphic_wait_ready+0x22>
	}
	graphic_ctrl_bit_set(B_E);
200001dc:	2040      	movs	r0, #64	; 0x40
200001de:	f7ff ff75 	bl	200000cc <graphic_ctrl_bit_set>
	GPIO_MODER_E = 0x55555555;
200001e2:	4b03      	ldr	r3, [pc, #12]	; (200001f0 <graphic_wait_ready+0x56>)
200001e4:	4a05      	ldr	r2, [pc, #20]	; (200001fc <graphic_wait_ready+0x62>)
200001e6:	601a      	str	r2, [r3, #0]
}
200001e8:	46c0      	nop			; (mov r8, r8)
200001ea:	46bd      	mov	sp, r7
200001ec:	bd80      	pop	{r7, pc}
200001ee:	46c0      	nop			; (mov r8, r8)
200001f0:	40021000 	andmi	r1, r2, r0
200001f4:	00005555 	andeq	r5, r0, r5, asr r5
200001f8:	40021011 	andmi	r1, r2, r1, lsl r0
200001fc:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000200 <graphic_read>:

unsigned char graphic_read(unsigned char controller){
20000200:	b580      	push	{r7, lr}
20000202:	b084      	sub	sp, #16
20000204:	af00      	add	r7, sp, #0
20000206:	0002      	movs	r2, r0
20000208:	1dfb      	adds	r3, r7, #7
2000020a:	701a      	strb	r2, [r3, #0]
	unsigned char read_data;
	graphic_ctrl_bit_clear(B_E);
2000020c:	2040      	movs	r0, #64	; 0x40
2000020e:	f7ff ff79 	bl	20000104 <graphic_ctrl_bit_clear>
	GPIO_MODER_E = 0x00005555;
20000212:	4b1a      	ldr	r3, [pc, #104]	; (2000027c <graphic_read+0x7c>)
20000214:	4a1a      	ldr	r2, [pc, #104]	; (20000280 <graphic_read+0x80>)
20000216:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS | B_RW);
20000218:	2003      	movs	r0, #3
2000021a:	f7ff ff57 	bl	200000cc <graphic_ctrl_bit_set>
	select_controller(controller);
2000021e:	1dfb      	adds	r3, r7, #7
20000220:	781b      	ldrb	r3, [r3, #0]
20000222:	0018      	movs	r0, r3
20000224:	f7ff ff8c 	bl	20000140 <select_controller>
	delay_500ns();
20000228:	f7ff ff47 	bl	200000ba <delay_500ns>
	graphic_ctrl_bit_set(B_E);
2000022c:	2040      	movs	r0, #64	; 0x40
2000022e:	f7ff ff4d 	bl	200000cc <graphic_ctrl_bit_set>
	read_data = GPIO_IDR_E_HIGH;
20000232:	4a14      	ldr	r2, [pc, #80]	; (20000284 <graphic_read+0x84>)
20000234:	230f      	movs	r3, #15
20000236:	18fb      	adds	r3, r7, r3
20000238:	7812      	ldrb	r2, [r2, #0]
2000023a:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000023c:	2040      	movs	r0, #64	; 0x40
2000023e:	f7ff ff61 	bl	20000104 <graphic_ctrl_bit_clear>
	GPIO_MODER_E = 0x55555555;
20000242:	4b0e      	ldr	r3, [pc, #56]	; (2000027c <graphic_read+0x7c>)
20000244:	4a10      	ldr	r2, [pc, #64]	; (20000288 <graphic_read+0x88>)
20000246:	601a      	str	r2, [r3, #0]
	if(controller == B_CS1){
20000248:	1dfb      	adds	r3, r7, #7
2000024a:	781b      	ldrb	r3, [r3, #0]
2000024c:	2b08      	cmp	r3, #8
2000024e:	d104      	bne.n	2000025a <graphic_read+0x5a>
		select_controller(B_CS1);
20000250:	2008      	movs	r0, #8
20000252:	f7ff ff75 	bl	20000140 <select_controller>
		graphic_wait_ready();
20000256:	f7ff ffa0 	bl	2000019a <graphic_wait_ready>
	}
	if (controller == B_CS2){
2000025a:	1dfb      	adds	r3, r7, #7
2000025c:	781b      	ldrb	r3, [r3, #0]
2000025e:	2b10      	cmp	r3, #16
20000260:	d104      	bne.n	2000026c <graphic_read+0x6c>
		select_controller(B_CS2);
20000262:	2010      	movs	r0, #16
20000264:	f7ff ff6c 	bl	20000140 <select_controller>
		graphic_wait_ready();
20000268:	f7ff ff97 	bl	2000019a <graphic_wait_ready>
	}
	return read_data;
2000026c:	230f      	movs	r3, #15
2000026e:	18fb      	adds	r3, r7, r3
20000270:	781b      	ldrb	r3, [r3, #0]
}
20000272:	0018      	movs	r0, r3
20000274:	46bd      	mov	sp, r7
20000276:	b004      	add	sp, #16
20000278:	bd80      	pop	{r7, pc}
2000027a:	46c0      	nop			; (mov r8, r8)
2000027c:	40021000 	andmi	r1, r2, r0
20000280:	00005555 	andeq	r5, r0, r5, asr r5
20000284:	40021011 	andmi	r1, r2, r1, lsl r0
20000288:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000028c <graphic_write>:

void graphic_write(unsigned char value, unsigned char controller){
2000028c:	b580      	push	{r7, lr}
2000028e:	b082      	sub	sp, #8
20000290:	af00      	add	r7, sp, #0
20000292:	0002      	movs	r2, r0
20000294:	1dfb      	adds	r3, r7, #7
20000296:	701a      	strb	r2, [r3, #0]
20000298:	1dbb      	adds	r3, r7, #6
2000029a:	1c0a      	adds	r2, r1, #0
2000029c:	701a      	strb	r2, [r3, #0]
	GPIO_ODR_E_HIGH = value;
2000029e:	4a1a      	ldr	r2, [pc, #104]	; (20000308 <graphic_write+0x7c>)
200002a0:	1dfb      	adds	r3, r7, #7
200002a2:	781b      	ldrb	r3, [r3, #0]
200002a4:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
200002a6:	1dbb      	adds	r3, r7, #6
200002a8:	781b      	ldrb	r3, [r3, #0]
200002aa:	0018      	movs	r0, r3
200002ac:	f7ff ff48 	bl	20000140 <select_controller>
	delay_500ns();
200002b0:	f7ff ff03 	bl	200000ba <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200002b4:	2040      	movs	r0, #64	; 0x40
200002b6:	f7ff ff09 	bl	200000cc <graphic_ctrl_bit_set>
	delay_500ns();
200002ba:	f7ff fefe 	bl	200000ba <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
200002be:	2040      	movs	r0, #64	; 0x40
200002c0:	f7ff ff20 	bl	20000104 <graphic_ctrl_bit_clear>
	if(controller & B_CS1){
200002c4:	1dbb      	adds	r3, r7, #6
200002c6:	781b      	ldrb	r3, [r3, #0]
200002c8:	2208      	movs	r2, #8
200002ca:	4013      	ands	r3, r2
200002cc:	d004      	beq.n	200002d8 <graphic_write+0x4c>
		select_controller(B_CS1);
200002ce:	2008      	movs	r0, #8
200002d0:	f7ff ff36 	bl	20000140 <select_controller>
		graphic_wait_ready();
200002d4:	f7ff ff61 	bl	2000019a <graphic_wait_ready>
	}
	if(controller & B_CS2){
200002d8:	1dbb      	adds	r3, r7, #6
200002da:	781b      	ldrb	r3, [r3, #0]
200002dc:	2210      	movs	r2, #16
200002de:	4013      	ands	r3, r2
200002e0:	d004      	beq.n	200002ec <graphic_write+0x60>
		select_controller(B_CS2);
200002e2:	2010      	movs	r0, #16
200002e4:	f7ff ff2c 	bl	20000140 <select_controller>
		graphic_wait_ready();
200002e8:	f7ff ff57 	bl	2000019a <graphic_wait_ready>
	}
	GPIO_ODR_E_HIGH = 0;
200002ec:	4b06      	ldr	r3, [pc, #24]	; (20000308 <graphic_write+0x7c>)
200002ee:	2200      	movs	r2, #0
200002f0:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);  		//ettställs som förberedelse för nästa arbetscykel
200002f2:	2040      	movs	r0, #64	; 0x40
200002f4:	f7ff feea 	bl	200000cc <graphic_ctrl_bit_set>
	select_controller(0);
200002f8:	2000      	movs	r0, #0
200002fa:	f7ff ff21 	bl	20000140 <select_controller>
}
200002fe:	46c0      	nop			; (mov r8, r8)
20000300:	46bd      	mov	sp, r7
20000302:	b002      	add	sp, #8
20000304:	bd80      	pop	{r7, pc}
20000306:	46c0      	nop			; (mov r8, r8)
20000308:	40021015 	andmi	r1, r2, r5, lsl r0

2000030c <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller){
2000030c:	b580      	push	{r7, lr}
2000030e:	b082      	sub	sp, #8
20000310:	af00      	add	r7, sp, #0
20000312:	0002      	movs	r2, r0
20000314:	1dfb      	adds	r3, r7, #7
20000316:	701a      	strb	r2, [r3, #0]
20000318:	1dbb      	adds	r3, r7, #6
2000031a:	1c0a      	adds	r2, r1, #0
2000031c:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000031e:	2040      	movs	r0, #64	; 0x40
20000320:	f7ff fef0 	bl	20000104 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000324:	1dbb      	adds	r3, r7, #6
20000326:	781b      	ldrb	r3, [r3, #0]
20000328:	0018      	movs	r0, r3
2000032a:	f7ff ff09 	bl	20000140 <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
2000032e:	2003      	movs	r0, #3
20000330:	f7ff fee8 	bl	20000104 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20000334:	1dbb      	adds	r3, r7, #6
20000336:	781a      	ldrb	r2, [r3, #0]
20000338:	1dfb      	adds	r3, r7, #7
2000033a:	781b      	ldrb	r3, [r3, #0]
2000033c:	0011      	movs	r1, r2
2000033e:	0018      	movs	r0, r3
20000340:	f7ff ffa4 	bl	2000028c <graphic_write>
}
20000344:	46c0      	nop			; (mov r8, r8)
20000346:	46bd      	mov	sp, r7
20000348:	b002      	add	sp, #8
2000034a:	bd80      	pop	{r7, pc}

2000034c <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
2000034c:	b580      	push	{r7, lr}
2000034e:	b082      	sub	sp, #8
20000350:	af00      	add	r7, sp, #0
20000352:	0002      	movs	r2, r0
20000354:	1dfb      	adds	r3, r7, #7
20000356:	701a      	strb	r2, [r3, #0]
20000358:	1dbb      	adds	r3, r7, #6
2000035a:	1c0a      	adds	r2, r1, #0
2000035c:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000035e:	2040      	movs	r0, #64	; 0x40
20000360:	f7ff fed0 	bl	20000104 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000364:	1dbb      	adds	r3, r7, #6
20000366:	781b      	ldrb	r3, [r3, #0]
20000368:	0018      	movs	r0, r3
2000036a:	f7ff fee9 	bl	20000140 <select_controller>
	graphic_ctrl_bit_set(B_RS);
2000036e:	2001      	movs	r0, #1
20000370:	f7ff feac 	bl	200000cc <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
20000374:	2002      	movs	r0, #2
20000376:	f7ff fec5 	bl	20000104 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
2000037a:	1dbb      	adds	r3, r7, #6
2000037c:	781a      	ldrb	r2, [r3, #0]
2000037e:	1dfb      	adds	r3, r7, #7
20000380:	781b      	ldrb	r3, [r3, #0]
20000382:	0011      	movs	r1, r2
20000384:	0018      	movs	r0, r3
20000386:	f7ff ff81 	bl	2000028c <graphic_write>
}
2000038a:	46c0      	nop			; (mov r8, r8)
2000038c:	46bd      	mov	sp, r7
2000038e:	b002      	add	sp, #8
20000390:	bd80      	pop	{r7, pc}

20000392 <graphic_read_data>:

unsigned char graphic_read_data(unsigned char controller){
20000392:	b580      	push	{r7, lr}
20000394:	b082      	sub	sp, #8
20000396:	af00      	add	r7, sp, #0
20000398:	0002      	movs	r2, r0
2000039a:	1dfb      	adds	r3, r7, #7
2000039c:	701a      	strb	r2, [r3, #0]
	(void) graphic_read(controller);
2000039e:	1dfb      	adds	r3, r7, #7
200003a0:	781b      	ldrb	r3, [r3, #0]
200003a2:	0018      	movs	r0, r3
200003a4:	f7ff ff2c 	bl	20000200 <graphic_read>
	
	return graphic_read(controller);
200003a8:	1dfb      	adds	r3, r7, #7
200003aa:	781b      	ldrb	r3, [r3, #0]
200003ac:	0018      	movs	r0, r3
200003ae:	f7ff ff27 	bl	20000200 <graphic_read>
200003b2:	0003      	movs	r3, r0
}
200003b4:	0018      	movs	r0, r3
200003b6:	46bd      	mov	sp, r7
200003b8:	b002      	add	sp, #8
200003ba:	bd80      	pop	{r7, pc}

200003bc <graphic_init>:

void graphic_init(){
200003bc:	b580      	push	{r7, lr}
200003be:	af00      	add	r7, sp, #0
	GPIO_MODER_E = 0x55555555;
200003c0:	4b15      	ldr	r3, [pc, #84]	; (20000418 <graphic_init+0x5c>)
200003c2:	4a16      	ldr	r2, [pc, #88]	; (2000041c <graphic_init+0x60>)
200003c4:	601a      	str	r2, [r3, #0]
	
	graphic_ctrl_bit_set(B_E);
200003c6:	2040      	movs	r0, #64	; 0x40
200003c8:	f7ff fe80 	bl	200000cc <graphic_ctrl_bit_set>
	delay_micro(10);
200003cc:	200a      	movs	r0, #10
200003ce:	f7ff fe41 	bl	20000054 <delay_micro>
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RESET | B_E);
200003d2:	2078      	movs	r0, #120	; 0x78
200003d4:	f7ff fe96 	bl	20000104 <graphic_ctrl_bit_clear>
	delay_milli(30);
200003d8:	201e      	movs	r0, #30
200003da:	f7ff fe51 	bl	20000080 <delay_milli>
	graphic_ctrl_bit_set(B_RESET);
200003de:	2020      	movs	r0, #32
200003e0:	f7ff fe74 	bl	200000cc <graphic_ctrl_bit_set>
	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
200003e4:	2118      	movs	r1, #24
200003e6:	203e      	movs	r0, #62	; 0x3e
200003e8:	f7ff ff90 	bl	2000030c <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);
200003ec:	2118      	movs	r1, #24
200003ee:	203f      	movs	r0, #63	; 0x3f
200003f0:	f7ff ff8c 	bl	2000030c <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
200003f4:	2118      	movs	r1, #24
200003f6:	20c0      	movs	r0, #192	; 0xc0
200003f8:	f7ff ff88 	bl	2000030c <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
200003fc:	2118      	movs	r1, #24
200003fe:	2040      	movs	r0, #64	; 0x40
20000400:	f7ff ff84 	bl	2000030c <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
20000404:	2118      	movs	r1, #24
20000406:	20b8      	movs	r0, #184	; 0xb8
20000408:	f7ff ff80 	bl	2000030c <graphic_write_command>
	select_controller(0);
2000040c:	2000      	movs	r0, #0
2000040e:	f7ff fe97 	bl	20000140 <select_controller>
}
20000412:	46c0      	nop			; (mov r8, r8)
20000414:	46bd      	mov	sp, r7
20000416:	bd80      	pop	{r7, pc}
20000418:	40021000 	andmi	r1, r2, r0
2000041c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000420 <graphic_clear_screen>:

void graphic_clear_screen(){
20000420:	b580      	push	{r7, lr}
20000422:	b082      	sub	sp, #8
20000424:	af00      	add	r7, sp, #0
	for(int page = 0; page <=7; page++){
20000426:	2300      	movs	r3, #0
20000428:	607b      	str	r3, [r7, #4]
2000042a:	e01e      	b.n	2000046a <graphic_clear_screen+0x4a>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
2000042c:	687b      	ldr	r3, [r7, #4]
2000042e:	b25b      	sxtb	r3, r3
20000430:	2248      	movs	r2, #72	; 0x48
20000432:	4252      	negs	r2, r2
20000434:	4313      	orrs	r3, r2
20000436:	b25b      	sxtb	r3, r3
20000438:	b2db      	uxtb	r3, r3
2000043a:	2118      	movs	r1, #24
2000043c:	0018      	movs	r0, r3
2000043e:	f7ff ff65 	bl	2000030c <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1 | B_CS2);
20000442:	2118      	movs	r1, #24
20000444:	2040      	movs	r0, #64	; 0x40
20000446:	f7ff ff61 	bl	2000030c <graphic_write_command>
		for (int adress = 0; adress <= 63; adress++)
2000044a:	2300      	movs	r3, #0
2000044c:	603b      	str	r3, [r7, #0]
2000044e:	e006      	b.n	2000045e <graphic_clear_screen+0x3e>
			graphic_write_data(0, B_CS1 | B_CS2);
20000450:	2118      	movs	r1, #24
20000452:	2000      	movs	r0, #0
20000454:	f7ff ff7a 	bl	2000034c <graphic_write_data>
		for (int adress = 0; adress <= 63; adress++)
20000458:	683b      	ldr	r3, [r7, #0]
2000045a:	3301      	adds	r3, #1
2000045c:	603b      	str	r3, [r7, #0]
2000045e:	683b      	ldr	r3, [r7, #0]
20000460:	2b3f      	cmp	r3, #63	; 0x3f
20000462:	ddf5      	ble.n	20000450 <graphic_clear_screen+0x30>
	for(int page = 0; page <=7; page++){
20000464:	687b      	ldr	r3, [r7, #4]
20000466:	3301      	adds	r3, #1
20000468:	607b      	str	r3, [r7, #4]
2000046a:	687b      	ldr	r3, [r7, #4]
2000046c:	2b07      	cmp	r3, #7
2000046e:	dddd      	ble.n	2000042c <graphic_clear_screen+0xc>
	}
}
20000470:	46c0      	nop			; (mov r8, r8)
20000472:	46bd      	mov	sp, r7
20000474:	b002      	add	sp, #8
20000476:	bd80      	pop	{r7, pc}

20000478 <pixel>:

void pixel (unsigned int x, unsigned int y, unsigned int set){
20000478:	b5b0      	push	{r4, r5, r7, lr}
2000047a:	b088      	sub	sp, #32
2000047c:	af00      	add	r7, sp, #0
2000047e:	60f8      	str	r0, [r7, #12]
20000480:	60b9      	str	r1, [r7, #8]
20000482:	607a      	str	r2, [r7, #4]
	uint8_t mask, c, controller;
	int index;
	if (y < 1 || y > 64 || x < 1 || x > 128) 
20000484:	68bb      	ldr	r3, [r7, #8]
20000486:	2b00      	cmp	r3, #0
20000488:	d100      	bne.n	2000048c <pixel+0x14>
2000048a:	e0a9      	b.n	200005e0 <pixel+0x168>
2000048c:	68bb      	ldr	r3, [r7, #8]
2000048e:	2b40      	cmp	r3, #64	; 0x40
20000490:	d900      	bls.n	20000494 <pixel+0x1c>
20000492:	e0a5      	b.n	200005e0 <pixel+0x168>
20000494:	68fb      	ldr	r3, [r7, #12]
20000496:	2b00      	cmp	r3, #0
20000498:	d100      	bne.n	2000049c <pixel+0x24>
2000049a:	e0a1      	b.n	200005e0 <pixel+0x168>
2000049c:	68fb      	ldr	r3, [r7, #12]
2000049e:	2b80      	cmp	r3, #128	; 0x80
200004a0:	d900      	bls.n	200004a4 <pixel+0x2c>
200004a2:	e09d      	b.n	200005e0 <pixel+0x168>
		return;
	
	index = (y-1) / 8;
200004a4:	68bb      	ldr	r3, [r7, #8]
200004a6:	3b01      	subs	r3, #1
200004a8:	08db      	lsrs	r3, r3, #3
200004aa:	61bb      	str	r3, [r7, #24]
	
	switch((y-1) % 8){
200004ac:	68bb      	ldr	r3, [r7, #8]
200004ae:	3b01      	subs	r3, #1
200004b0:	2207      	movs	r2, #7
200004b2:	4013      	ands	r3, r2
200004b4:	2b07      	cmp	r3, #7
200004b6:	d82c      	bhi.n	20000512 <pixel+0x9a>
200004b8:	009a      	lsls	r2, r3, #2
200004ba:	4b4b      	ldr	r3, [pc, #300]	; (200005e8 <pixel+0x170>)
200004bc:	18d3      	adds	r3, r2, r3
200004be:	681b      	ldr	r3, [r3, #0]
200004c0:	469f      	mov	pc, r3
		case 0: mask = 1; break;
200004c2:	231f      	movs	r3, #31
200004c4:	18fb      	adds	r3, r7, r3
200004c6:	2201      	movs	r2, #1
200004c8:	701a      	strb	r2, [r3, #0]
200004ca:	e022      	b.n	20000512 <pixel+0x9a>
		case 1: mask = 2; break;
200004cc:	231f      	movs	r3, #31
200004ce:	18fb      	adds	r3, r7, r3
200004d0:	2202      	movs	r2, #2
200004d2:	701a      	strb	r2, [r3, #0]
200004d4:	e01d      	b.n	20000512 <pixel+0x9a>
		case 2: mask = 4; break;
200004d6:	231f      	movs	r3, #31
200004d8:	18fb      	adds	r3, r7, r3
200004da:	2204      	movs	r2, #4
200004dc:	701a      	strb	r2, [r3, #0]
200004de:	e018      	b.n	20000512 <pixel+0x9a>
		case 3: mask = 8; break;
200004e0:	231f      	movs	r3, #31
200004e2:	18fb      	adds	r3, r7, r3
200004e4:	2208      	movs	r2, #8
200004e6:	701a      	strb	r2, [r3, #0]
200004e8:	e013      	b.n	20000512 <pixel+0x9a>
		case 4: mask = 0x10; break;
200004ea:	231f      	movs	r3, #31
200004ec:	18fb      	adds	r3, r7, r3
200004ee:	2210      	movs	r2, #16
200004f0:	701a      	strb	r2, [r3, #0]
200004f2:	e00e      	b.n	20000512 <pixel+0x9a>
		case 5: mask = 0x20; break;
200004f4:	231f      	movs	r3, #31
200004f6:	18fb      	adds	r3, r7, r3
200004f8:	2220      	movs	r2, #32
200004fa:	701a      	strb	r2, [r3, #0]
200004fc:	e009      	b.n	20000512 <pixel+0x9a>
		case 6: mask = 0x40; break;
200004fe:	231f      	movs	r3, #31
20000500:	18fb      	adds	r3, r7, r3
20000502:	2240      	movs	r2, #64	; 0x40
20000504:	701a      	strb	r2, [r3, #0]
20000506:	e004      	b.n	20000512 <pixel+0x9a>
		case 7: mask = 0x80; break;
20000508:	231f      	movs	r3, #31
2000050a:	18fb      	adds	r3, r7, r3
2000050c:	2280      	movs	r2, #128	; 0x80
2000050e:	701a      	strb	r2, [r3, #0]
20000510:	46c0      	nop			; (mov r8, r8)
	}
	
	if (!set)
20000512:	687b      	ldr	r3, [r7, #4]
20000514:	2b00      	cmp	r3, #0
20000516:	d103      	bne.n	20000520 <pixel+0xa8>
		mask &= ~mask;
20000518:	231f      	movs	r3, #31
2000051a:	18fb      	adds	r3, r7, r3
2000051c:	2200      	movs	r2, #0
2000051e:	701a      	strb	r2, [r3, #0]
	if(x > 64){
20000520:	68fb      	ldr	r3, [r7, #12]
20000522:	2b40      	cmp	r3, #64	; 0x40
20000524:	d907      	bls.n	20000536 <pixel+0xbe>
		controller = B_CS2;
20000526:	231e      	movs	r3, #30
20000528:	18fb      	adds	r3, r7, r3
2000052a:	2210      	movs	r2, #16
2000052c:	701a      	strb	r2, [r3, #0]
		x = x-65;
2000052e:	68fb      	ldr	r3, [r7, #12]
20000530:	3b41      	subs	r3, #65	; 0x41
20000532:	60fb      	str	r3, [r7, #12]
20000534:	e006      	b.n	20000544 <pixel+0xcc>
	}
	else{
		controller = B_CS1;
20000536:	231e      	movs	r3, #30
20000538:	18fb      	adds	r3, r7, r3
2000053a:	2208      	movs	r2, #8
2000053c:	701a      	strb	r2, [r3, #0]
		x = x-1;
2000053e:	68fb      	ldr	r3, [r7, #12]
20000540:	3b01      	subs	r3, #1
20000542:	60fb      	str	r3, [r7, #12]
	}
	graphic_write_command(LCD_SET_ADD | x, controller);
20000544:	68fb      	ldr	r3, [r7, #12]
20000546:	b2db      	uxtb	r3, r3
20000548:	2240      	movs	r2, #64	; 0x40
2000054a:	4313      	orrs	r3, r2
2000054c:	b2da      	uxtb	r2, r3
2000054e:	251e      	movs	r5, #30
20000550:	197b      	adds	r3, r7, r5
20000552:	781b      	ldrb	r3, [r3, #0]
20000554:	0019      	movs	r1, r3
20000556:	0010      	movs	r0, r2
20000558:	f7ff fed8 	bl	2000030c <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
2000055c:	69bb      	ldr	r3, [r7, #24]
2000055e:	b25b      	sxtb	r3, r3
20000560:	2248      	movs	r2, #72	; 0x48
20000562:	4252      	negs	r2, r2
20000564:	4313      	orrs	r3, r2
20000566:	b25b      	sxtb	r3, r3
20000568:	b2da      	uxtb	r2, r3
2000056a:	197b      	adds	r3, r7, r5
2000056c:	781b      	ldrb	r3, [r3, #0]
2000056e:	0019      	movs	r1, r3
20000570:	0010      	movs	r0, r2
20000572:	f7ff fecb 	bl	2000030c <graphic_write_command>
	c = graphic_read_data(controller);
20000576:	2317      	movs	r3, #23
20000578:	18fc      	adds	r4, r7, r3
2000057a:	197b      	adds	r3, r7, r5
2000057c:	781b      	ldrb	r3, [r3, #0]
2000057e:	0018      	movs	r0, r3
20000580:	f7ff ff07 	bl	20000392 <graphic_read_data>
20000584:	0003      	movs	r3, r0
20000586:	7023      	strb	r3, [r4, #0]
	graphic_write_data(LCD_SET_ADD | x, controller);
20000588:	68fb      	ldr	r3, [r7, #12]
2000058a:	b2db      	uxtb	r3, r3
2000058c:	2240      	movs	r2, #64	; 0x40
2000058e:	4313      	orrs	r3, r2
20000590:	b2da      	uxtb	r2, r3
20000592:	197b      	adds	r3, r7, r5
20000594:	781b      	ldrb	r3, [r3, #0]
20000596:	0019      	movs	r1, r3
20000598:	0010      	movs	r0, r2
2000059a:	f7ff fed7 	bl	2000034c <graphic_write_data>
	
	if(set)
2000059e:	687b      	ldr	r3, [r7, #4]
200005a0:	2b00      	cmp	r3, #0
200005a2:	d009      	beq.n	200005b8 <pixel+0x140>
		mask = mask | c;
200005a4:	221f      	movs	r2, #31
200005a6:	18bb      	adds	r3, r7, r2
200005a8:	18b9      	adds	r1, r7, r2
200005aa:	2217      	movs	r2, #23
200005ac:	18ba      	adds	r2, r7, r2
200005ae:	7809      	ldrb	r1, [r1, #0]
200005b0:	7812      	ldrb	r2, [r2, #0]
200005b2:	430a      	orrs	r2, r1
200005b4:	701a      	strb	r2, [r3, #0]
200005b6:	e008      	b.n	200005ca <pixel+0x152>
	else
		mask = mask & c;
200005b8:	221f      	movs	r2, #31
200005ba:	18bb      	adds	r3, r7, r2
200005bc:	18ba      	adds	r2, r7, r2
200005be:	2117      	movs	r1, #23
200005c0:	1879      	adds	r1, r7, r1
200005c2:	7812      	ldrb	r2, [r2, #0]
200005c4:	7809      	ldrb	r1, [r1, #0]
200005c6:	400a      	ands	r2, r1
200005c8:	701a      	strb	r2, [r3, #0]
		
	graphic_write_data(mask, controller);
200005ca:	231e      	movs	r3, #30
200005cc:	18fb      	adds	r3, r7, r3
200005ce:	781a      	ldrb	r2, [r3, #0]
200005d0:	231f      	movs	r3, #31
200005d2:	18fb      	adds	r3, r7, r3
200005d4:	781b      	ldrb	r3, [r3, #0]
200005d6:	0011      	movs	r1, r2
200005d8:	0018      	movs	r0, r3
200005da:	f7ff feb7 	bl	2000034c <graphic_write_data>
200005de:	e000      	b.n	200005e2 <pixel+0x16a>
		return;
200005e0:	46c0      	nop			; (mov r8, r8)
}
200005e2:	46bd      	mov	sp, r7
200005e4:	b008      	add	sp, #32
200005e6:	bdb0      	pop	{r4, r5, r7, pc}
200005e8:	20000918 	andcs	r0, r0, r8, lsl r9

200005ec <main>:
	move_object,
	set_object_speed
};

int main(int argc, char **argv)
{
200005ec:	b580      	push	{r7, lr}
200005ee:	b084      	sub	sp, #16
200005f0:	af00      	add	r7, sp, #0
200005f2:	6078      	str	r0, [r7, #4]
200005f4:	6039      	str	r1, [r7, #0]
	POBJECT p = &ball;
200005f6:	4b08      	ldr	r3, [pc, #32]	; (20000618 <main+0x2c>)
200005f8:	60fb      	str	r3, [r7, #12]
	graphic_init();
200005fa:	f7ff fedf 	bl	200003bc <graphic_init>
	
	#ifndef SIMULATOR
		graphic_clear_screen();
	#endif
	
	p->set_speed(p, 4, 1);
200005fe:	68fb      	ldr	r3, [r7, #12]
20000600:	6a1b      	ldr	r3, [r3, #32]
20000602:	68f8      	ldr	r0, [r7, #12]
20000604:	2201      	movs	r2, #1
20000606:	2104      	movs	r1, #4
20000608:	4798      	blx	r3
	while(1){
		p->move(p);
2000060a:	68fb      	ldr	r3, [r7, #12]
2000060c:	69db      	ldr	r3, [r3, #28]
2000060e:	68fa      	ldr	r2, [r7, #12]
20000610:	0010      	movs	r0, r2
20000612:	4798      	blx	r3
20000614:	e7f9      	b.n	2000060a <main+0x1e>
20000616:	46c0      	nop			; (mov r8, r8)
20000618:	200008f4 	strdcs	r0, [r0], -r4

2000061c <set_object_speed>:
#include "startup.h"


void set_object_speed(POBJECT o, int speedx, int speedy){
2000061c:	b580      	push	{r7, lr}
2000061e:	b084      	sub	sp, #16
20000620:	af00      	add	r7, sp, #0
20000622:	60f8      	str	r0, [r7, #12]
20000624:	60b9      	str	r1, [r7, #8]
20000626:	607a      	str	r2, [r7, #4]
	o->dirx = speedx;
20000628:	68fb      	ldr	r3, [r7, #12]
2000062a:	68ba      	ldr	r2, [r7, #8]
2000062c:	605a      	str	r2, [r3, #4]
	o->diry = speedy;
2000062e:	68fb      	ldr	r3, [r7, #12]
20000630:	687a      	ldr	r2, [r7, #4]
20000632:	609a      	str	r2, [r3, #8]
}	
20000634:	46c0      	nop			; (mov r8, r8)
20000636:	46bd      	mov	sp, r7
20000638:	b004      	add	sp, #16
2000063a:	bd80      	pop	{r7, pc}

2000063c <draw_object>:
 
void draw_object(POBJECT o){
2000063c:	b580      	push	{r7, lr}
2000063e:	b084      	sub	sp, #16
20000640:	af00      	add	r7, sp, #0
20000642:	6078      	str	r0, [r7, #4]
	for(int i= 0; i<= o->geo->numpoints; i++){
20000644:	2300      	movs	r3, #0
20000646:	60fb      	str	r3, [r7, #12]
20000648:	e01d      	b.n	20000686 <draw_object+0x4a>
		pixel(o->posx + o->geo->px[i].x, o->posy + o->geo->px[i].y, 1);
2000064a:	687b      	ldr	r3, [r7, #4]
2000064c:	68da      	ldr	r2, [r3, #12]
2000064e:	687b      	ldr	r3, [r7, #4]
20000650:	6819      	ldr	r1, [r3, #0]
20000652:	68fb      	ldr	r3, [r7, #12]
20000654:	3304      	adds	r3, #4
20000656:	005b      	lsls	r3, r3, #1
20000658:	18cb      	adds	r3, r1, r3
2000065a:	3304      	adds	r3, #4
2000065c:	781b      	ldrb	r3, [r3, #0]
2000065e:	18d3      	adds	r3, r2, r3
20000660:	0018      	movs	r0, r3
20000662:	687b      	ldr	r3, [r7, #4]
20000664:	691a      	ldr	r2, [r3, #16]
20000666:	687b      	ldr	r3, [r7, #4]
20000668:	6819      	ldr	r1, [r3, #0]
2000066a:	68fb      	ldr	r3, [r7, #12]
2000066c:	3304      	adds	r3, #4
2000066e:	005b      	lsls	r3, r3, #1
20000670:	18cb      	adds	r3, r1, r3
20000672:	3305      	adds	r3, #5
20000674:	781b      	ldrb	r3, [r3, #0]
20000676:	18d3      	adds	r3, r2, r3
20000678:	2201      	movs	r2, #1
2000067a:	0019      	movs	r1, r3
2000067c:	f7ff fefc 	bl	20000478 <pixel>
	for(int i= 0; i<= o->geo->numpoints; i++){
20000680:	68fb      	ldr	r3, [r7, #12]
20000682:	3301      	adds	r3, #1
20000684:	60fb      	str	r3, [r7, #12]
20000686:	687b      	ldr	r3, [r7, #4]
20000688:	681b      	ldr	r3, [r3, #0]
2000068a:	681b      	ldr	r3, [r3, #0]
2000068c:	68fa      	ldr	r2, [r7, #12]
2000068e:	429a      	cmp	r2, r3
20000690:	dddb      	ble.n	2000064a <draw_object+0xe>
	}
}
20000692:	46c0      	nop			; (mov r8, r8)
20000694:	46bd      	mov	sp, r7
20000696:	b004      	add	sp, #16
20000698:	bd80      	pop	{r7, pc}

2000069a <clear_object>:

void clear_object(POBJECT o){
2000069a:	b580      	push	{r7, lr}
2000069c:	b084      	sub	sp, #16
2000069e:	af00      	add	r7, sp, #0
200006a0:	6078      	str	r0, [r7, #4]
	for(int i= 0; i<= o->geo->numpoints; i++){
200006a2:	2300      	movs	r3, #0
200006a4:	60fb      	str	r3, [r7, #12]
200006a6:	e01d      	b.n	200006e4 <clear_object+0x4a>
		pixel(o->posx + o->geo->px[i].x, o->posy + o->geo->px[i].y, 0);
200006a8:	687b      	ldr	r3, [r7, #4]
200006aa:	68da      	ldr	r2, [r3, #12]
200006ac:	687b      	ldr	r3, [r7, #4]
200006ae:	6819      	ldr	r1, [r3, #0]
200006b0:	68fb      	ldr	r3, [r7, #12]
200006b2:	3304      	adds	r3, #4
200006b4:	005b      	lsls	r3, r3, #1
200006b6:	18cb      	adds	r3, r1, r3
200006b8:	3304      	adds	r3, #4
200006ba:	781b      	ldrb	r3, [r3, #0]
200006bc:	18d3      	adds	r3, r2, r3
200006be:	0018      	movs	r0, r3
200006c0:	687b      	ldr	r3, [r7, #4]
200006c2:	691a      	ldr	r2, [r3, #16]
200006c4:	687b      	ldr	r3, [r7, #4]
200006c6:	6819      	ldr	r1, [r3, #0]
200006c8:	68fb      	ldr	r3, [r7, #12]
200006ca:	3304      	adds	r3, #4
200006cc:	005b      	lsls	r3, r3, #1
200006ce:	18cb      	adds	r3, r1, r3
200006d0:	3305      	adds	r3, #5
200006d2:	781b      	ldrb	r3, [r3, #0]
200006d4:	18d3      	adds	r3, r2, r3
200006d6:	2200      	movs	r2, #0
200006d8:	0019      	movs	r1, r3
200006da:	f7ff fecd 	bl	20000478 <pixel>
	for(int i= 0; i<= o->geo->numpoints; i++){
200006de:	68fb      	ldr	r3, [r7, #12]
200006e0:	3301      	adds	r3, #1
200006e2:	60fb      	str	r3, [r7, #12]
200006e4:	687b      	ldr	r3, [r7, #4]
200006e6:	681b      	ldr	r3, [r3, #0]
200006e8:	681b      	ldr	r3, [r3, #0]
200006ea:	68fa      	ldr	r2, [r7, #12]
200006ec:	429a      	cmp	r2, r3
200006ee:	dddb      	ble.n	200006a8 <clear_object+0xe>
	}
}
200006f0:	46c0      	nop			; (mov r8, r8)
200006f2:	46bd      	mov	sp, r7
200006f4:	b004      	add	sp, #16
200006f6:	bd80      	pop	{r7, pc}

200006f8 <move_object>:
 
void move_object(POBJECT o){
200006f8:	b590      	push	{r4, r7, lr}
200006fa:	b083      	sub	sp, #12
200006fc:	af00      	add	r7, sp, #0
200006fe:	6078      	str	r0, [r7, #4]
	o->clear(o);
20000700:	687b      	ldr	r3, [r7, #4]
20000702:	699b      	ldr	r3, [r3, #24]
20000704:	687a      	ldr	r2, [r7, #4]
20000706:	0010      	movs	r0, r2
20000708:	4798      	blx	r3
	
	if(o->posx < 1)
2000070a:	687b      	ldr	r3, [r7, #4]
2000070c:	68db      	ldr	r3, [r3, #12]
2000070e:	2b00      	cmp	r3, #0
20000710:	dc09      	bgt.n	20000726 <move_object+0x2e>
		o->set_speed(o, o->dirx*(-1), o->diry);
20000712:	687b      	ldr	r3, [r7, #4]
20000714:	6a1c      	ldr	r4, [r3, #32]
20000716:	687b      	ldr	r3, [r7, #4]
20000718:	685b      	ldr	r3, [r3, #4]
2000071a:	4259      	negs	r1, r3
2000071c:	687b      	ldr	r3, [r7, #4]
2000071e:	689a      	ldr	r2, [r3, #8]
20000720:	687b      	ldr	r3, [r7, #4]
20000722:	0018      	movs	r0, r3
20000724:	47a0      	blx	r4
	
	if(o->posx > 128)
20000726:	687b      	ldr	r3, [r7, #4]
20000728:	68db      	ldr	r3, [r3, #12]
2000072a:	2b80      	cmp	r3, #128	; 0x80
2000072c:	dd09      	ble.n	20000742 <move_object+0x4a>
		o->set_speed(o, -o->dirx, o->diry);
2000072e:	687b      	ldr	r3, [r7, #4]
20000730:	6a1c      	ldr	r4, [r3, #32]
20000732:	687b      	ldr	r3, [r7, #4]
20000734:	685b      	ldr	r3, [r3, #4]
20000736:	4259      	negs	r1, r3
20000738:	687b      	ldr	r3, [r7, #4]
2000073a:	689a      	ldr	r2, [r3, #8]
2000073c:	687b      	ldr	r3, [r7, #4]
2000073e:	0018      	movs	r0, r3
20000740:	47a0      	blx	r4
		
	if(o->posy < 1)
20000742:	687b      	ldr	r3, [r7, #4]
20000744:	691b      	ldr	r3, [r3, #16]
20000746:	2b00      	cmp	r3, #0
20000748:	dc09      	bgt.n	2000075e <move_object+0x66>
		o->set_speed(o, o->dirx, -o->diry);
2000074a:	687b      	ldr	r3, [r7, #4]
2000074c:	6a1c      	ldr	r4, [r3, #32]
2000074e:	687b      	ldr	r3, [r7, #4]
20000750:	6859      	ldr	r1, [r3, #4]
20000752:	687b      	ldr	r3, [r7, #4]
20000754:	689b      	ldr	r3, [r3, #8]
20000756:	425a      	negs	r2, r3
20000758:	687b      	ldr	r3, [r7, #4]
2000075a:	0018      	movs	r0, r3
2000075c:	47a0      	blx	r4
		
	if(o->posy > 64)
2000075e:	687b      	ldr	r3, [r7, #4]
20000760:	691b      	ldr	r3, [r3, #16]
20000762:	2b40      	cmp	r3, #64	; 0x40
20000764:	dd09      	ble.n	2000077a <move_object+0x82>
		o->set_speed(o, o->dirx, -o->diry);
20000766:	687b      	ldr	r3, [r7, #4]
20000768:	6a1c      	ldr	r4, [r3, #32]
2000076a:	687b      	ldr	r3, [r7, #4]
2000076c:	6859      	ldr	r1, [r3, #4]
2000076e:	687b      	ldr	r3, [r7, #4]
20000770:	689b      	ldr	r3, [r3, #8]
20000772:	425a      	negs	r2, r3
20000774:	687b      	ldr	r3, [r7, #4]
20000776:	0018      	movs	r0, r3
20000778:	47a0      	blx	r4
	
	o->posx = o->posx + o->dirx;
2000077a:	687b      	ldr	r3, [r7, #4]
2000077c:	68da      	ldr	r2, [r3, #12]
2000077e:	687b      	ldr	r3, [r7, #4]
20000780:	685b      	ldr	r3, [r3, #4]
20000782:	18d2      	adds	r2, r2, r3
20000784:	687b      	ldr	r3, [r7, #4]
20000786:	60da      	str	r2, [r3, #12]
	o->posy = o->posy + o->diry;
20000788:	687b      	ldr	r3, [r7, #4]
2000078a:	691a      	ldr	r2, [r3, #16]
2000078c:	687b      	ldr	r3, [r7, #4]
2000078e:	689b      	ldr	r3, [r3, #8]
20000790:	18d2      	adds	r2, r2, r3
20000792:	687b      	ldr	r3, [r7, #4]
20000794:	611a      	str	r2, [r3, #16]
	o->draw(o);
20000796:	687b      	ldr	r3, [r7, #4]
20000798:	695b      	ldr	r3, [r3, #20]
2000079a:	687a      	ldr	r2, [r7, #4]
2000079c:	0010      	movs	r0, r2
2000079e:	4798      	blx	r3
}
200007a0:	46c0      	nop			; (mov r8, r8)
200007a2:	46bd      	mov	sp, r7
200007a4:	b003      	add	sp, #12
200007a6:	bd90      	pop	{r4, r7, pc}

200007a8 <__udivsi3>:
200007a8:	2200      	movs	r2, #0
200007aa:	0843      	lsrs	r3, r0, #1
200007ac:	428b      	cmp	r3, r1
200007ae:	d374      	bcc.n	2000089a <__udivsi3+0xf2>
200007b0:	0903      	lsrs	r3, r0, #4
200007b2:	428b      	cmp	r3, r1
200007b4:	d35f      	bcc.n	20000876 <__udivsi3+0xce>
200007b6:	0a03      	lsrs	r3, r0, #8
200007b8:	428b      	cmp	r3, r1
200007ba:	d344      	bcc.n	20000846 <__udivsi3+0x9e>
200007bc:	0b03      	lsrs	r3, r0, #12
200007be:	428b      	cmp	r3, r1
200007c0:	d328      	bcc.n	20000814 <__udivsi3+0x6c>
200007c2:	0c03      	lsrs	r3, r0, #16
200007c4:	428b      	cmp	r3, r1
200007c6:	d30d      	bcc.n	200007e4 <__udivsi3+0x3c>
200007c8:	22ff      	movs	r2, #255	; 0xff
200007ca:	0209      	lsls	r1, r1, #8
200007cc:	ba12      	rev	r2, r2
200007ce:	0c03      	lsrs	r3, r0, #16
200007d0:	428b      	cmp	r3, r1
200007d2:	d302      	bcc.n	200007da <__udivsi3+0x32>
200007d4:	1212      	asrs	r2, r2, #8
200007d6:	0209      	lsls	r1, r1, #8
200007d8:	d065      	beq.n	200008a6 <__udivsi3+0xfe>
200007da:	0b03      	lsrs	r3, r0, #12
200007dc:	428b      	cmp	r3, r1
200007de:	d319      	bcc.n	20000814 <__udivsi3+0x6c>
200007e0:	e000      	b.n	200007e4 <__udivsi3+0x3c>
200007e2:	0a09      	lsrs	r1, r1, #8
200007e4:	0bc3      	lsrs	r3, r0, #15
200007e6:	428b      	cmp	r3, r1
200007e8:	d301      	bcc.n	200007ee <__udivsi3+0x46>
200007ea:	03cb      	lsls	r3, r1, #15
200007ec:	1ac0      	subs	r0, r0, r3
200007ee:	4152      	adcs	r2, r2
200007f0:	0b83      	lsrs	r3, r0, #14
200007f2:	428b      	cmp	r3, r1
200007f4:	d301      	bcc.n	200007fa <__udivsi3+0x52>
200007f6:	038b      	lsls	r3, r1, #14
200007f8:	1ac0      	subs	r0, r0, r3
200007fa:	4152      	adcs	r2, r2
200007fc:	0b43      	lsrs	r3, r0, #13
200007fe:	428b      	cmp	r3, r1
20000800:	d301      	bcc.n	20000806 <__udivsi3+0x5e>
20000802:	034b      	lsls	r3, r1, #13
20000804:	1ac0      	subs	r0, r0, r3
20000806:	4152      	adcs	r2, r2
20000808:	0b03      	lsrs	r3, r0, #12
2000080a:	428b      	cmp	r3, r1
2000080c:	d301      	bcc.n	20000812 <__udivsi3+0x6a>
2000080e:	030b      	lsls	r3, r1, #12
20000810:	1ac0      	subs	r0, r0, r3
20000812:	4152      	adcs	r2, r2
20000814:	0ac3      	lsrs	r3, r0, #11
20000816:	428b      	cmp	r3, r1
20000818:	d301      	bcc.n	2000081e <__udivsi3+0x76>
2000081a:	02cb      	lsls	r3, r1, #11
2000081c:	1ac0      	subs	r0, r0, r3
2000081e:	4152      	adcs	r2, r2
20000820:	0a83      	lsrs	r3, r0, #10
20000822:	428b      	cmp	r3, r1
20000824:	d301      	bcc.n	2000082a <__udivsi3+0x82>
20000826:	028b      	lsls	r3, r1, #10
20000828:	1ac0      	subs	r0, r0, r3
2000082a:	4152      	adcs	r2, r2
2000082c:	0a43      	lsrs	r3, r0, #9
2000082e:	428b      	cmp	r3, r1
20000830:	d301      	bcc.n	20000836 <__udivsi3+0x8e>
20000832:	024b      	lsls	r3, r1, #9
20000834:	1ac0      	subs	r0, r0, r3
20000836:	4152      	adcs	r2, r2
20000838:	0a03      	lsrs	r3, r0, #8
2000083a:	428b      	cmp	r3, r1
2000083c:	d301      	bcc.n	20000842 <__udivsi3+0x9a>
2000083e:	020b      	lsls	r3, r1, #8
20000840:	1ac0      	subs	r0, r0, r3
20000842:	4152      	adcs	r2, r2
20000844:	d2cd      	bcs.n	200007e2 <__udivsi3+0x3a>
20000846:	09c3      	lsrs	r3, r0, #7
20000848:	428b      	cmp	r3, r1
2000084a:	d301      	bcc.n	20000850 <__udivsi3+0xa8>
2000084c:	01cb      	lsls	r3, r1, #7
2000084e:	1ac0      	subs	r0, r0, r3
20000850:	4152      	adcs	r2, r2
20000852:	0983      	lsrs	r3, r0, #6
20000854:	428b      	cmp	r3, r1
20000856:	d301      	bcc.n	2000085c <__udivsi3+0xb4>
20000858:	018b      	lsls	r3, r1, #6
2000085a:	1ac0      	subs	r0, r0, r3
2000085c:	4152      	adcs	r2, r2
2000085e:	0943      	lsrs	r3, r0, #5
20000860:	428b      	cmp	r3, r1
20000862:	d301      	bcc.n	20000868 <__udivsi3+0xc0>
20000864:	014b      	lsls	r3, r1, #5
20000866:	1ac0      	subs	r0, r0, r3
20000868:	4152      	adcs	r2, r2
2000086a:	0903      	lsrs	r3, r0, #4
2000086c:	428b      	cmp	r3, r1
2000086e:	d301      	bcc.n	20000874 <__udivsi3+0xcc>
20000870:	010b      	lsls	r3, r1, #4
20000872:	1ac0      	subs	r0, r0, r3
20000874:	4152      	adcs	r2, r2
20000876:	08c3      	lsrs	r3, r0, #3
20000878:	428b      	cmp	r3, r1
2000087a:	d301      	bcc.n	20000880 <__udivsi3+0xd8>
2000087c:	00cb      	lsls	r3, r1, #3
2000087e:	1ac0      	subs	r0, r0, r3
20000880:	4152      	adcs	r2, r2
20000882:	0883      	lsrs	r3, r0, #2
20000884:	428b      	cmp	r3, r1
20000886:	d301      	bcc.n	2000088c <__udivsi3+0xe4>
20000888:	008b      	lsls	r3, r1, #2
2000088a:	1ac0      	subs	r0, r0, r3
2000088c:	4152      	adcs	r2, r2
2000088e:	0843      	lsrs	r3, r0, #1
20000890:	428b      	cmp	r3, r1
20000892:	d301      	bcc.n	20000898 <__udivsi3+0xf0>
20000894:	004b      	lsls	r3, r1, #1
20000896:	1ac0      	subs	r0, r0, r3
20000898:	4152      	adcs	r2, r2
2000089a:	1a41      	subs	r1, r0, r1
2000089c:	d200      	bcs.n	200008a0 <__udivsi3+0xf8>
2000089e:	4601      	mov	r1, r0
200008a0:	4152      	adcs	r2, r2
200008a2:	4610      	mov	r0, r2
200008a4:	4770      	bx	lr
200008a6:	e7ff      	b.n	200008a8 <__udivsi3+0x100>
200008a8:	b501      	push	{r0, lr}
200008aa:	2000      	movs	r0, #0
200008ac:	f000 f806 	bl	200008bc <__aeabi_idiv0>
200008b0:	bd02      	pop	{r1, pc}
200008b2:	46c0      	nop			; (mov r8, r8)

200008b4 <__aeabi_uidivmod>:
200008b4:	2900      	cmp	r1, #0
200008b6:	d0f7      	beq.n	200008a8 <__udivsi3+0x100>
200008b8:	e776      	b.n	200007a8 <__udivsi3>
200008ba:	4770      	bx	lr

200008bc <__aeabi_idiv0>:
200008bc:	4770      	bx	lr
200008be:	46c0      	nop			; (mov r8, r8)

200008c0 <ball_geometry>:
200008c0:	0000000c 	andeq	r0, r0, ip
200008c4:	00000004 	andeq	r0, r0, r4
200008c8:	00000004 	andeq	r0, r0, r4
200008cc:	02000100 	andeq	r0, r0, #0, 2
200008d0:	01010001 	tsteq	r1, r1
200008d4:	03010201 	movweq	r0, #4609	; 0x1201
200008d8:	01020002 	tsteq	r2, r2
200008dc:	03020202 	movweq	r0, #8706	; 0x2202
200008e0:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

200008f4 <ball>:
200008f4:	200008c0 	andcs	r0, r0, r0, asr #17
	...
20000900:	00000001 	andeq	r0, r0, r1
20000904:	00000001 	andeq	r0, r0, r1
20000908:	2000063d 	andcs	r0, r0, sp, lsr r6
2000090c:	2000069b 	mulcs	r0, fp, r6
20000910:	200006f9 	strdcs	r0, [r0], -r9
20000914:	2000061d 	andcs	r0, r0, sp, lsl r6
20000918:	200004c2 	andcs	r0, r0, r2, asr #9
2000091c:	200004cc 	andcs	r0, r0, ip, asr #9
20000920:	200004d6 	ldrdcs	r0, [r0], -r6
20000924:	200004e0 	andcs	r0, r0, r0, ror #9
20000928:	200004ea 	andcs	r0, r0, sl, ror #9
2000092c:	200004f4 	strdcs	r0, [r0], -r4
20000930:	200004fe 	strdcs	r0, [r0], -lr
20000934:	20000508 	andcs	r0, r0, r8, lsl #10

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000000c 	andeq	r0, r0, ip
  10:	00010e0c 	andeq	r0, r1, ip, lsl #28
  14:	0000c900 	andeq	ip, r0, r0, lsl #18
  18:	00001000 	andeq	r1, r0, r0
  1c:	0000bc20 	andeq	fp, r0, r0, lsr #24
  20:	00000000 	andeq	r0, r0, r0
  24:	08010200 	stmdaeq	r1, {r9}
  28:	00000100 	andeq	r0, r0, r0, lsl #2
  2c:	69050403 	stmdbvs	r5, {r0, r1, sl}
  30:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
  34:	00a40704 	adceq	r0, r4, r4, lsl #14
  38:	bd040000 	stclt	0, cr0, [r4, #-0]
  3c:	01000000 	mrseq	r0, (UNDEF: 0)
  40:	0000ba26 	andeq	fp, r0, r6, lsr #20
  44:	00001220 	andeq	r1, r0, r0, lsr #4
  48:	059c0100 	ldreq	r0, [ip, #256]	; 0x100
  4c:	00000000 	andeq	r0, r0, r0
  50:	00801b01 	addeq	r1, r0, r1, lsl #22
  54:	003a2000 	eorseq	r2, sl, r0
  58:	9c010000 	stcls	0, cr0, [r1], {-0}
  5c:	0000006e 	andeq	r0, r0, lr, rrx
  60:	00736d06 	rsbseq	r6, r3, r6, lsl #26
  64:	00331b01 	eorseq	r1, r3, r1, lsl #22
  68:	91020000 	mrsls	r0, (UNDEF: 2)
  6c:	f4050074 	vst4.16	{d0-d3}, [r5 :256], r4
  70:	01000000 	mrseq	r0, (UNDEF: 0)
  74:	00005412 	andeq	r5, r0, r2, lsl r4
  78:	00002c20 	andeq	r2, r0, r0, lsr #24
  7c:	919c0100 	orrsls	r0, ip, r0, lsl #2
  80:	06000000 	streq	r0, [r0], -r0
  84:	01007375 	tsteq	r0, r5, ror r3
  88:	00003312 	andeq	r3, r0, r2, lsl r3
  8c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
  90:	00b10700 	adcseq	r0, r1, r0, lsl #14
  94:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
  98:	20000010 	andcs	r0, r0, r0, lsl r0
  9c:	00000044 	andeq	r0, r0, r4, asr #32
  a0:	74009c01 	strvc	r9, [r0], #-3073	; 0xfffff3ff
  a4:	04000002 	streq	r0, [r0], #-2
  a8:	00008300 	andeq	r8, r0, r0, lsl #6
  ac:	0c010400 	cfstrseq	mvf0, [r1], {-0}
  b0:	0c000000 	stceq	0, cr0, [r0], {-0}
  b4:	00000147 	andeq	r0, r0, r7, asr #2
  b8:	000000c9 	andeq	r0, r0, r9, asr #1
  bc:	200000cc 	andcs	r0, r0, ip, asr #1
  c0:	00000520 	andeq	r0, r0, r0, lsr #10
  c4:	00000082 	andeq	r0, r0, r2, lsl #1
  c8:	0001f502 	andeq	pc, r1, r2, lsl #10
  cc:	303e0200 	eorscc	r0, lr, r0, lsl #4
  d0:	03000000 	movweq	r0, #0
  d4:	01000801 	tsteq	r0, r1, lsl #16
  d8:	04040000 	streq	r0, [r4], #-0
  dc:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
  e0:	07040300 	streq	r0, [r4, -r0, lsl #6]
  e4:	000000a4 	andeq	r0, r0, r4, lsr #1
  e8:	0001fd05 	andeq	pc, r1, r5, lsl #26
  ec:	78810100 	stmvc	r1, {r8}
  f0:	74200004 	strtvc	r0, [r0], #-4
  f4:	01000001 	tsteq	r0, r1
  f8:	0000b79c 	muleq	r0, ip, r7
  fc:	00780600 	rsbseq	r0, r8, r0, lsl #12
 100:	003e8101 	eorseq	r8, lr, r1, lsl #2
 104:	91020000 	mrsls	r0, (UNDEF: 2)
 108:	0079065c 	rsbseq	r0, r9, ip, asr r6
 10c:	003e8101 	eorseq	r8, lr, r1, lsl #2
 110:	91020000 	mrsls	r0, (UNDEF: 2)
 114:	65730658 	ldrbvs	r0, [r3, #-1624]!	; 0xfffff9a8
 118:	81010074 	tsthi	r1, r4, ror r0
 11c:	0000003e 	andeq	r0, r0, lr, lsr r0
 120:	07549102 	ldrbeq	r9, [r4, -r2, lsl #2]
 124:	00000203 	andeq	r0, r0, r3, lsl #4
 128:	00258201 	eoreq	r8, r5, r1, lsl #4
 12c:	91020000 	mrsls	r0, (UNDEF: 2)
 130:	0063086f 	rsbeq	r0, r3, pc, ror #16
 134:	00258201 	eoreq	r8, r5, r1, lsl #4
 138:	91020000 	mrsls	r0, (UNDEF: 2)
 13c:	01910767 	orrseq	r0, r1, r7, ror #14
 140:	82010000 	andhi	r0, r1, #0
 144:	00000025 	andeq	r0, r0, r5, lsr #32
 148:	076e9102 	strbeq	r9, [lr, -r2, lsl #2]!
 14c:	00000208 	andeq	r0, r0, r8, lsl #4
 150:	00378301 	eorseq	r8, r7, r1, lsl #6
 154:	91020000 	mrsls	r0, (UNDEF: 2)
 158:	34050068 	strcc	r0, [r5], #-104	; 0xffffff98
 15c:	01000002 	tsteq	r0, r2
 160:	00042078 	andeq	r2, r4, r8, ror r0
 164:	00005820 	andeq	r5, r0, r0, lsr #16
 168:	fd9c0100 	ldc2	1, cr0, [ip]
 16c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 170:	20000426 	andcs	r0, r0, r6, lsr #8
 174:	0000004a 	andeq	r0, r0, sl, asr #32
 178:	00014207 	andeq	r4, r1, r7, lsl #4
 17c:	37790100 	ldrbcc	r0, [r9, -r0, lsl #2]!
 180:	02000000 	andeq	r0, r0, #0
 184:	4a097491 	bmi	25d3d0 <startup-0x1fda2c30>
 188:	1a200004 	bne	8001a0 <startup-0x1f7ffe60>
 18c:	07000000 	streq	r0, [r0, -r0]
 190:	0000017d 	andeq	r0, r0, sp, ror r1
 194:	00377c01 	eorseq	r7, r7, r1, lsl #24
 198:	91020000 	mrsls	r0, (UNDEF: 2)
 19c:	00000070 	andeq	r0, r0, r0, ror r0
 1a0:	0001bc0a 	andeq	fp, r1, sl, lsl #24
 1a4:	bc680100 	stflte	f0, [r8], #-0
 1a8:	64200003 	strtvs	r0, [r0], #-3
 1ac:	01000000 	mrseq	r0, (UNDEF: 0)
 1b0:	019c0b9c 			; <UNDEFINED> instruction: 0x019c0b9c
 1b4:	62010000 	andvs	r0, r1, #0
 1b8:	00000030 	andeq	r0, r0, r0, lsr r0
 1bc:	20000392 	mulcs	r0, r2, r3
 1c0:	0000002a 	andeq	r0, r0, sl, lsr #32
 1c4:	01369c01 	teqeq	r6, r1, lsl #24
 1c8:	910c0000 	mrsls	r0, (UNDEF: 12)
 1cc:	01000001 	tsteq	r0, r1
 1d0:	00003062 	andeq	r3, r0, r2, rrx
 1d4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 1d8:	020e0500 	andeq	r0, lr, #0, 10
 1dc:	5a010000 	bpl	401e4 <startup-0x1ffbfe1c>
 1e0:	2000034c 	andcs	r0, r0, ip, asr #6
 1e4:	00000046 	andeq	r0, r0, r6, asr #32
 1e8:	01689c01 	cmneq	r8, r1, lsl #24
 1ec:	a90c0000 	stmdbge	ip, {}	; <UNPREDICTABLE>
 1f0:	01000001 	tsteq	r0, r1
 1f4:	0000255a 	andeq	r2, r0, sl, asr r5
 1f8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 1fc:	0001910c 	andeq	r9, r1, ip, lsl #2
 200:	255a0100 	ldrbcs	r0, [sl, #-256]	; 0xffffff00
 204:	02000000 	andeq	r0, r0, #0
 208:	05007691 	streq	r7, [r0, #-1681]	; 0xfffff96f
 20c:	00000256 	andeq	r0, r0, r6, asr r2
 210:	030c5301 	movweq	r5, #49921	; 0xc301
 214:	00402000 	subeq	r2, r0, r0
 218:	9c010000 	stcls	0, cr0, [r1], {-0}
 21c:	0000019a 	muleq	r0, sl, r1
 220:	0002640c 	andeq	r6, r2, ip, lsl #8
 224:	25530100 	ldrbcs	r0, [r3, #-256]	; 0xffffff00
 228:	02000000 	andeq	r0, r0, #0
 22c:	910c7791 			; <UNDEFINED> instruction: 0x910c7791
 230:	01000001 	tsteq	r0, r1
 234:	00002553 	andeq	r2, r0, r3, asr r5
 238:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 23c:	01ae0500 			; <UNDEFINED> instruction: 0x01ae0500
 240:	3f010000 	svccc	0x00010000
 244:	2000028c 	andcs	r0, r0, ip, lsl #5
 248:	00000080 	andeq	r0, r0, r0, lsl #1
 24c:	01cc9c01 	biceq	r9, ip, r1, lsl #24
 250:	840c0000 	strhi	r0, [ip], #-0
 254:	01000001 	tsteq	r0, r1
 258:	0000303f 	andeq	r3, r0, pc, lsr r0
 25c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 260:	0001910c 	andeq	r9, r1, ip, lsl #2
 264:	303f0100 	eorscc	r0, pc, r0, lsl #2
 268:	02000000 	andeq	r0, r0, #0
 26c:	0b007691 	bleq	1dcb8 <startup-0x1ffe2348>
 270:	00000249 	andeq	r0, r0, r9, asr #4
 274:	00302901 	eorseq	r2, r0, r1, lsl #18
 278:	02000000 	andeq	r0, r0, #0
 27c:	008c2000 	addeq	r2, ip, r0
 280:	9c010000 	stcls	0, cr0, [r1], {-0}
 284:	00000202 	andeq	r0, r0, r2, lsl #4
 288:	0001910c 	andeq	r9, r1, ip, lsl #2
 28c:	30290100 	eorcc	r0, r9, r0, lsl #2
 290:	02000000 	andeq	r0, r0, #0
 294:	a4076f91 	strge	r6, [r7], #-3985	; 0xfffff06f
 298:	01000001 	tsteq	r0, r1
 29c:	0000302a 	andeq	r3, r0, sl, lsr #32
 2a0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 2a4:	02210d00 	eoreq	r0, r1, #0, 26
 2a8:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
 2ac:	2000019a 	mulcs	r0, sl, r1
 2b0:	00000066 	andeq	r0, r0, r6, rrx
 2b4:	8a0e9c01 	bhi	3a72c0 <startup-0x1fc58d40>
 2b8:	01000001 	tsteq	r0, r1
 2bc:	00014010 	andeq	r4, r1, r0, lsl r0
 2c0:	00005a20 	andeq	r5, r0, r0, lsr #20
 2c4:	379c0100 	ldrcc	r0, [ip, r0, lsl #2]
 2c8:	0c000002 	stceq	0, cr0, [r0], {2}
 2cc:	00000191 	muleq	r0, r1, r1
 2d0:	00251001 	eoreq	r1, r5, r1
 2d4:	91020000 	mrsls	r0, (UNDEF: 2)
 2d8:	c90f0077 	stmdbgt	pc, {r0, r1, r2, r4, r5, r6}	; <UNPREDICTABLE>
 2dc:	01000001 	tsteq	r0, r1
 2e0:	0001040c 	andeq	r0, r1, ip, lsl #8
 2e4:	00003c20 	andeq	r3, r0, r0, lsr #24
 2e8:	599c0100 	ldmibpl	ip, {r8}
 2ec:	06000002 	streq	r0, [r0], -r2
 2f0:	0c010078 	stceq	0, cr0, [r1], {120}	; 0x78
 2f4:	00000025 	andeq	r0, r0, r5, lsr #32
 2f8:	00779102 	rsbseq	r9, r7, r2, lsl #2
 2fc:	0001e010 	andeq	lr, r1, r0, lsl r0
 300:	cc080100 	stfgts	f0, [r8], {-0}
 304:	38200000 	stmdacc	r0!, {}	; <UNPREDICTABLE>
 308:	01000000 	mrseq	r0, (UNDEF: 0)
 30c:	0078069c 			; <UNDEFINED> instruction: 0x0078069c
 310:	00250801 	eoreq	r0, r5, r1, lsl #16
 314:	91020000 	mrsls	r0, (UNDEF: 2)
 318:	14000077 	strne	r0, [r0], #-119	; 0xffffff89
 31c:	04000002 	streq	r0, [r0], #-2
 320:	0001ad00 	andeq	sl, r1, r0, lsl #26
 324:	0c010400 	cfstrseq	mvf0, [r1], {-0}
 328:	0c000000 	stceq	0, cr0, [r0], {-0}
 32c:	000002ed 	andeq	r0, r0, sp, ror #5
 330:	000000c9 	andeq	r0, r0, r9, asr #1
	...
 33c:	000001aa 	andeq	r0, r0, sl, lsr #3
 340:	00080102 	andeq	r0, r8, r2, lsl #2
 344:	03000001 	movweq	r0, #1
 348:	00000289 	andeq	r0, r0, r9, lsl #5
 34c:	4d750202 	lfmmi	f0, 2, [r5, #-8]!
 350:	04000000 	streq	r0, [r0], #-0
 354:	76020078 			; <UNDEFINED> instruction: 0x76020078
 358:	00000025 	andeq	r0, r0, r5, lsr #32
 35c:	00790400 	rsbseq	r0, r9, r0, lsl #8
 360:	00257702 	eoreq	r7, r5, r2, lsl #14
 364:	00010000 	andeq	r0, r1, r0
 368:	00032405 	andeq	r2, r3, r5, lsl #8
 36c:	2c780200 	lfmcs	f0, 2, [r8], #-0
 370:	03000000 	movweq	r0, #0
 374:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 378:	947c0234 	ldrbtls	r0, [ip], #-564	; 0xfffffdcc
 37c:	06000000 	streq	r0, [r0], -r0
 380:	000002d1 	ldrdeq	r0, [r0], -r1
 384:	00947d02 	addseq	r7, r4, r2, lsl #26
 388:	06000000 	streq	r0, [r0], -r0
 38c:	00000295 	muleq	r0, r5, r2
 390:	00947e02 	addseq	r7, r4, r2, lsl #28
 394:	06040000 	streq	r0, [r4], -r0
 398:	0000029b 	muleq	r0, fp, r2
 39c:	00947f02 	addseq	r7, r4, r2, lsl #30
 3a0:	04080000 	streq	r0, [r8], #-0
 3a4:	02007870 	andeq	r7, r0, #112, 16	; 0x700000
 3a8:	00009b80 	andeq	r9, r0, r0, lsl #23
 3ac:	07000c00 	streq	r0, [r0, -r0, lsl #24]
 3b0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 3b4:	4d080074 	stcmi	0, cr0, [r8, #-464]	; 0xfffffe30
 3b8:	ab000000 	blge	3c0 <startup-0x1ffffc40>
 3bc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 3c0:	000000ab 	andeq	r0, r0, fp, lsr #1
 3c4:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
 3c8:	0000a407 	andeq	sl, r0, r7, lsl #8
 3cc:	02a20500 	adceq	r0, r2, #0, 10
 3d0:	81020000 	mrshi	r0, (UNDEF: 2)
 3d4:	00000058 	andeq	r0, r0, r8, asr r0
 3d8:	0002a105 	andeq	sl, r2, r5, lsl #2
 3dc:	c8810200 	stmgt	r1, {r9}
 3e0:	0a000000 	beq	3e8 <startup-0x1ffffc18>
 3e4:	00005804 	andeq	r5, r0, r4, lsl #16
 3e8:	032f0300 			; <UNDEFINED> instruction: 0x032f0300
 3ec:	02240000 	eoreq	r0, r4, #0
 3f0:	00014783 	andeq	r4, r1, r3, lsl #15
 3f4:	65670400 	strbvs	r0, [r7, #-1024]!	; 0xfffffc00
 3f8:	8402006f 	strhi	r0, [r2], #-111	; 0xffffff91
 3fc:	000000bd 	strheq	r0, [r0], -sp
 400:	02900600 	addseq	r0, r0, #0, 12
 404:	85020000 	strhi	r0, [r2, #-0]
 408:	00000094 	muleq	r0, r4, r0
 40c:	02cc0604 	sbceq	r0, ip, #4, 12	; 0x400000
 410:	85020000 	strhi	r0, [r2, #-0]
 414:	00000094 	muleq	r0, r4, r0
 418:	032a0608 			; <UNDEFINED> instruction: 0x032a0608
 41c:	86020000 	strhi	r0, [r2], -r0
 420:	00000094 	muleq	r0, r4, r0
 424:	02ab060c 	adceq	r0, fp, #12, 12	; 0xc00000
 428:	86020000 	strhi	r0, [r2], -r0
 42c:	00000094 	muleq	r0, r4, r0
 430:	026c0610 	rsbeq	r0, ip, #16, 12	; 0x1000000
 434:	87020000 	strhi	r0, [r2, -r0]
 438:	00000158 	andeq	r0, r0, r8, asr r1
 43c:	01da0614 	bicseq	r0, sl, r4, lsl r6
 440:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
 444:	00000158 	andeq	r0, r0, r8, asr r1
 448:	031f0618 	tsteq	pc, #24, 12	; 0x1800000
 44c:	89020000 	stmdbhi	r2, {}	; <UNPREDICTABLE>
 450:	00000158 	andeq	r0, r0, r8, asr r1
 454:	0271061c 	rsbseq	r0, r1, #28, 12	; 0x1c00000
 458:	8a020000 	bhi	80460 <startup-0x1ff7fba0>
 45c:	00000173 	andeq	r0, r0, r3, ror r1
 460:	520b0020 	andpl	r0, fp, #32
 464:	0c000001 	stceq	0, cr0, [r0], {1}
 468:	00000152 	andeq	r0, r0, r2, asr r1
 46c:	ce040a00 	vmlagt.f32	s0, s8, s0
 470:	0a000000 	beq	478 <startup-0x1ffffb88>
 474:	00014704 	andeq	r4, r1, r4, lsl #14
 478:	01730b00 	cmneq	r3, r0, lsl #22
 47c:	520c0000 	andpl	r0, ip, #0
 480:	0c000001 	stceq	0, cr0, [r0], {1}
 484:	00000094 	muleq	r0, r4, r0
 488:	0000940c 	andeq	r9, r0, ip, lsl #8
 48c:	040a0000 	streq	r0, [sl], #-0
 490:	0000015e 	andeq	r0, r0, lr, asr r1
 494:	0002e105 	andeq	lr, r2, r5, lsl #2
 498:	ce8b0200 	cdpgt	2, 8, cr0, cr11, cr0, {0}
 49c:	05000000 	streq	r0, [r0, #-0]
 4a0:	000002e0 	andeq	r0, r0, r0, ror #5
 4a4:	01528b02 	cmpeq	r2, r2, lsl #22
 4a8:	7b0d0000 	blvc	3404b0 <startup-0x1fcbfb50>
 4ac:	01000002 	tsteq	r0, r2
 4b0:	0000b213 	andeq	fp, r0, r3, lsl r2
 4b4:	c0030500 	andgt	r0, r3, r0, lsl #10
 4b8:	0e200008 	cdpeq	0, 2, cr0, cr0, cr8, {0}
 4bc:	000002e8 	andeq	r0, r0, r8, ror #5
 4c0:	01791701 	cmneq	r9, r1, lsl #14
 4c4:	03050000 	movweq	r0, #20480	; 0x5000
 4c8:	200008f4 	strdcs	r0, [r0], -r4
 4cc:	0002db0f 	andeq	sp, r2, pc, lsl #22
 4d0:	94220100 	strtls	r0, [r2], #-256	; 0xffffff00
 4d4:	ec000000 	stc	0, cr0, [r0], {-0}
 4d8:	30200005 	eorcc	r0, r0, r5
 4dc:	01000000 	mrseq	r0, (UNDEF: 0)
 4e0:	0001f39c 	muleq	r1, ip, r3
 4e4:	02c71000 	sbceq	r1, r7, #0
 4e8:	22010000 	andcs	r0, r1, #0
 4ec:	00000094 	muleq	r0, r4, r0
 4f0:	106c9102 	rsbne	r9, ip, r2, lsl #2
 4f4:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
 4f8:	01f32201 	mvnseq	r2, r1, lsl #4
 4fc:	91020000 	mrsls	r0, (UNDEF: 2)
 500:	00701168 	rsbseq	r1, r0, r8, ror #2
 504:	01842401 	orreq	r2, r4, r1, lsl #8
 508:	91020000 	mrsls	r0, (UNDEF: 2)
 50c:	040a0074 	streq	r0, [sl], #-116	; 0xffffff8c
 510:	000001f9 	strdeq	r0, [r0], -r9
 514:	01ff040a 	mvnseq	r0, sl, lsl #8
 518:	01020000 	mrseq	r0, (UNDEF: 2)
 51c:	00010908 	andeq	r0, r1, r8, lsl #18
 520:	02bf1200 	adcseq	r1, pc, #0, 4
 524:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
 528:	20000000 	andcs	r0, r0, r0
 52c:	0000000c 	andeq	r0, r0, ip
 530:	42009c01 	andmi	r9, r0, #256	; 0x100
 534:	04000002 	streq	r0, [r0], #-2
 538:	0002ae00 	andeq	sl, r2, r0, lsl #28
 53c:	0c010400 	cfstrseq	mvf0, [r1], {-0}
 540:	0c000000 	stceq	0, cr0, [r0], {-0}
 544:	00000378 	andeq	r0, r0, r8, ror r3
 548:	000000c9 	andeq	r0, r0, r9, asr #1
 54c:	2000061c 	andcs	r0, r0, ip, lsl r6
 550:	0000018c 	andeq	r0, r0, ip, lsl #3
 554:	00000231 	andeq	r0, r0, r1, lsr r2
 558:	00080102 	andeq	r0, r8, r2, lsl #2
 55c:	03000001 	movweq	r0, #1
 560:	00000289 	andeq	r0, r0, r9, lsl #5
 564:	4d750202 	lfmmi	f0, 2, [r5, #-8]!
 568:	04000000 	streq	r0, [r0], #-0
 56c:	76020078 			; <UNDEFINED> instruction: 0x76020078
 570:	00000025 	andeq	r0, r0, r5, lsr #32
 574:	00790400 	rsbseq	r0, r9, r0, lsl #8
 578:	00257702 	eoreq	r7, r5, r2, lsl #14
 57c:	00010000 	andeq	r0, r1, r0
 580:	00032405 	andeq	r2, r3, r5, lsl #8
 584:	2c780200 	lfmcs	f0, 2, [r8], #-0
 588:	03000000 	movweq	r0, #0
 58c:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 590:	947c0234 	ldrbtls	r0, [ip], #-564	; 0xfffffdcc
 594:	06000000 	streq	r0, [r0], -r0
 598:	000002d1 	ldrdeq	r0, [r0], -r1
 59c:	00947d02 	addseq	r7, r4, r2, lsl #26
 5a0:	06000000 	streq	r0, [r0], -r0
 5a4:	00000295 	muleq	r0, r5, r2
 5a8:	00947e02 	addseq	r7, r4, r2, lsl #28
 5ac:	06040000 	streq	r0, [r4], -r0
 5b0:	0000029b 	muleq	r0, fp, r2
 5b4:	00947f02 	addseq	r7, r4, r2, lsl #30
 5b8:	04080000 	streq	r0, [r8], #-0
 5bc:	02007870 	andeq	r7, r0, #112, 16	; 0x700000
 5c0:	00009b80 	andeq	r9, r0, r0, lsl #23
 5c4:	07000c00 	streq	r0, [r0, -r0, lsl #24]
 5c8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 5cc:	4d080074 	stcmi	0, cr0, [r8, #-464]	; 0xfffffe30
 5d0:	ab000000 	blge	5d8 <startup-0x1ffffa28>
 5d4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 5d8:	000000ab 	andeq	r0, r0, fp, lsr #1
 5dc:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
 5e0:	0000a407 	andeq	sl, r0, r7, lsl #8
 5e4:	02a10500 	adceq	r0, r1, #0, 10
 5e8:	81020000 	mrshi	r0, (UNDEF: 2)
 5ec:	000000bd 	strheq	r0, [r0], -sp
 5f0:	0058040a 	subseq	r0, r8, sl, lsl #8
 5f4:	2f030000 	svccs	0x00030000
 5f8:	24000003 	strcs	r0, [r0], #-3
 5fc:	013c8302 	teqeq	ip, r2, lsl #6
 600:	67040000 	strvs	r0, [r4, -r0]
 604:	02006f65 	andeq	r6, r0, #404	; 0x194
 608:	0000b284 	andeq	fp, r0, r4, lsl #5
 60c:	90060000 	andls	r0, r6, r0
 610:	02000002 	andeq	r0, r0, #2
 614:	00009485 	andeq	r9, r0, r5, lsl #9
 618:	cc060400 	cfstrsgt	mvf0, [r6], {-0}
 61c:	02000002 	andeq	r0, r0, #2
 620:	00009485 	andeq	r9, r0, r5, lsl #9
 624:	2a060800 	bcs	18262c <startup-0x1fe7d9d4>
 628:	02000003 	andeq	r0, r0, #3
 62c:	00009486 	andeq	r9, r0, r6, lsl #9
 630:	ab060c00 	blge	183638 <startup-0x1fe7c9c8>
 634:	02000002 	andeq	r0, r0, #2
 638:	00009486 	andeq	r9, r0, r6, lsl #9
 63c:	6c061000 	stcvs	0, cr1, [r6], {-0}
 640:	02000002 	andeq	r0, r0, #2
 644:	00014d87 	andeq	r4, r1, r7, lsl #27
 648:	da061400 	ble	185650 <startup-0x1fe7a9b0>
 64c:	02000001 	andeq	r0, r0, #1
 650:	00014d88 	andeq	r4, r1, r8, lsl #27
 654:	1f061800 	svcne	0x00061800
 658:	02000003 	andeq	r0, r0, #3
 65c:	00014d89 	andeq	r4, r1, r9, lsl #27
 660:	71061c00 	tstvc	r6, r0, lsl #24
 664:	02000002 	andeq	r0, r0, #2
 668:	0001688a 	andeq	r6, r1, sl, lsl #17
 66c:	0b002000 	bleq	8674 <startup-0x1fff798c>
 670:	00000147 	andeq	r0, r0, r7, asr #2
 674:	0001470c 	andeq	r4, r1, ip, lsl #14
 678:	040a0000 	streq	r0, [sl], #-0
 67c:	000000c3 	andeq	r0, r0, r3, asr #1
 680:	013c040a 	teqeq	ip, sl, lsl #8
 684:	680b0000 	stmdavs	fp, {}	; <UNPREDICTABLE>
 688:	0c000001 	stceq	0, cr0, [r0], {1}
 68c:	00000147 	andeq	r0, r0, r7, asr #2
 690:	0000940c 	andeq	r9, r0, ip, lsl #8
 694:	00940c00 	addseq	r0, r4, r0, lsl #24
 698:	0a000000 	beq	6a0 <startup-0x1ffff960>
 69c:	00015304 	andeq	r5, r1, r4, lsl #6
 6a0:	02e00500 	rsceq	r0, r0, #0, 10
 6a4:	8b020000 	blhi	806ac <startup-0x1ff7f954>
 6a8:	00000147 	andeq	r0, r0, r7, asr #2
 6ac:	00036c0d 	andeq	r6, r3, sp, lsl #24
 6b0:	f8150100 			; <UNDEFINED> instruction: 0xf8150100
 6b4:	b0200006 	eorlt	r0, r0, r6
 6b8:	01000000 	mrseq	r0, (UNDEF: 0)
 6bc:	00019b9c 	muleq	r1, ip, fp
 6c0:	006f0e00 	rsbeq	r0, pc, r0, lsl #28
 6c4:	016e1501 	cmneq	lr, r1, lsl #10
 6c8:	91020000 	mrsls	r0, (UNDEF: 2)
 6cc:	5f0d006c 	svcpl	0x000d006c
 6d0:	01000003 	tsteq	r0, r3
 6d4:	00069a0f 	andeq	r9, r6, pc, lsl #20
 6d8:	00005e20 	andeq	r5, r0, r0, lsr #28
 6dc:	d39c0100 	orrsle	r0, ip, #0, 2
 6e0:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 6e4:	0f01006f 	svceq	0x0001006f
 6e8:	0000016e 	andeq	r0, r0, lr, ror #2
 6ec:	0f6c9102 	svceq	0x006c9102
 6f0:	200006a2 	andcs	r0, r0, r2, lsr #13
 6f4:	0000004e 	andeq	r0, r0, lr, asr #32
 6f8:	01006910 	tsteq	r0, r0, lsl r9
 6fc:	00009410 	andeq	r9, r0, r0, lsl r4
 700:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 704:	530d0000 	movwpl	r0, #53248	; 0xd000
 708:	01000003 	tsteq	r0, r3
 70c:	00063c09 	andeq	r3, r6, r9, lsl #24
 710:	00005e20 	andeq	r5, r0, r0, lsr #28
 714:	0b9c0100 	bleq	fe700b1c <ball+0xde700228>
 718:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
 71c:	0901006f 	stmdbeq	r1, {r0, r1, r2, r3, r5, r6}
 720:	0000016e 	andeq	r0, r0, lr, ror #2
 724:	0f6c9102 	svceq	0x006c9102
 728:	20000644 	andcs	r0, r0, r4, asr #12
 72c:	0000004e 	andeq	r0, r0, lr, asr #32
 730:	01006910 	tsteq	r0, r0, lsl r9
 734:	0000940a 	andeq	r9, r0, sl, lsl #8
 738:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 73c:	3b110000 	blcc	440744 <startup-0x1fbbf8bc>
 740:	01000003 	tsteq	r0, r3
 744:	00061c04 	andeq	r1, r6, r4, lsl #24
 748:	00002020 	andeq	r2, r0, r0, lsr #32
 74c:	0e9c0100 	fmleqe	f0, f4, f0
 750:	0401006f 	streq	r0, [r1], #-111	; 0xffffff91
 754:	0000016e 	andeq	r0, r0, lr, ror #2
 758:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
 75c:	00000334 	andeq	r0, r0, r4, lsr r3
 760:	00940401 	addseq	r0, r4, r1, lsl #8
 764:	91020000 	mrsls	r0, (UNDEF: 2)
 768:	034c1270 	movteq	r1, #49776	; 0xc270
 76c:	04010000 	streq	r0, [r1], #-0
 770:	00000094 	muleq	r0, r4, r0
 774:	006c9102 	rsbeq	r9, ip, r2, lsl #2
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	24030000 	strcs	r0, [r3], #-0
  20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  24:	0008030b 	andeq	r0, r8, fp, lsl #6
  28:	002e0400 	eoreq	r0, lr, r0, lsl #8
  2c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  30:	0b3b0b3a 	bleq	ec2d20 <startup-0x1f13d2e0>
  34:	01111927 	tsteq	r1, r7, lsr #18
  38:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  3c:	00194296 	mulseq	r9, r6, r2
  40:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
  44:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  48:	0b3b0b3a 	bleq	ec2d38 <startup-0x1f13d2c8>
  4c:	01111927 	tsteq	r1, r7, lsr #18
  50:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  54:	01194296 			; <UNDEFINED> instruction: 0x01194296
  58:	06000013 			; <UNDEFINED> instruction: 0x06000013
  5c:	08030005 	stmdaeq	r3, {r0, r2}
  60:	0b3b0b3a 	bleq	ec2d50 <startup-0x1f13d2b0>
  64:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  68:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
  6c:	03193f00 	tsteq	r9, #0, 30
  70:	3b0b3a0e 	blcc	2ce8b0 <startup-0x1fd31750>
  74:	1119270b 	tstne	r9, fp, lsl #14
  78:	40061201 	andmi	r1, r6, r1, lsl #4
  7c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  80:	01000000 	mrseq	r0, (UNDEF: 0)
  84:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
  88:	0e030b13 	vmoveq.32	d3[0], r0
  8c:	01110e1b 	tsteq	r1, fp, lsl lr
  90:	17100612 			; <UNDEFINED> instruction: 0x17100612
  94:	16020000 	strne	r0, [r2], -r0
  98:	3a0e0300 	bcc	380ca0 <startup-0x1fc7f360>
  9c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  a0:	03000013 	movweq	r0, #19
  a4:	0b0b0024 	bleq	2c013c <startup-0x1fd3fec4>
  a8:	0e030b3e 	vmoveq.16	d3[0], r0
  ac:	24040000 	strcs	r0, [r4], #-0
  b0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  b4:	0008030b 	andeq	r0, r8, fp, lsl #6
  b8:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
  bc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  c0:	0b3b0b3a 	bleq	ec2db0 <startup-0x1f13d250>
  c4:	01111927 	tsteq	r1, r7, lsr #18
  c8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  cc:	01194296 			; <UNDEFINED> instruction: 0x01194296
  d0:	06000013 			; <UNDEFINED> instruction: 0x06000013
  d4:	08030005 	stmdaeq	r3, {r0, r2}
  d8:	0b3b0b3a 	bleq	ec2dc8 <startup-0x1f13d238>
  dc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  e0:	34070000 	strcc	r0, [r7], #-0
  e4:	3a0e0300 	bcc	380cec <startup-0x1fc7f314>
  e8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  ec:	00180213 	andseq	r0, r8, r3, lsl r2
  f0:	00340800 	eorseq	r0, r4, r0, lsl #16
  f4:	0b3a0803 	bleq	e82108 <startup-0x1f17def8>
  f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  fc:	00001802 	andeq	r1, r0, r2, lsl #16
 100:	11010b09 	tstne	r1, r9, lsl #22
 104:	00061201 	andeq	r1, r6, r1, lsl #4
 108:	002e0a00 	eoreq	r0, lr, r0, lsl #20
 10c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 110:	0b3b0b3a 	bleq	ec2e00 <startup-0x1f13d200>
 114:	01111927 	tsteq	r1, r7, lsr #18
 118:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 11c:	00194296 	mulseq	r9, r6, r2
 120:	012e0b00 			; <UNDEFINED> instruction: 0x012e0b00
 124:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 128:	0b3b0b3a 	bleq	ec2e18 <startup-0x1f13d1e8>
 12c:	13491927 	movtne	r1, #39207	; 0x9927
 130:	06120111 			; <UNDEFINED> instruction: 0x06120111
 134:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 138:	00130119 	andseq	r0, r3, r9, lsl r1
 13c:	00050c00 	andeq	r0, r5, r0, lsl #24
 140:	0b3a0e03 	bleq	e83954 <startup-0x1f17c6ac>
 144:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 148:	00001802 	andeq	r1, r0, r2, lsl #16
 14c:	03002e0d 	movweq	r2, #3597	; 0xe0d
 150:	3b0b3a0e 	blcc	2ce990 <startup-0x1fd31670>
 154:	1119270b 	tstne	r9, fp, lsl #14
 158:	40061201 	andmi	r1, r6, r1, lsl #4
 15c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 160:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
 164:	3a0e0301 	bcc	380d70 <startup-0x1fc7f290>
 168:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 16c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 170:	96184006 	ldrls	r4, [r8], -r6
 174:	13011942 	movwne	r1, #6466	; 0x1942
 178:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
 17c:	03193f01 	tsteq	r9, #1, 30
 180:	3b0b3a0e 	blcc	2ce9c0 <startup-0x1fd31640>
 184:	1119270b 	tstne	r9, fp, lsl #14
 188:	40061201 	andmi	r1, r6, r1, lsl #4
 18c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 190:	00001301 	andeq	r1, r0, r1, lsl #6
 194:	3f012e10 	svccc	0x00012e10
 198:	3a0e0319 	bcc	380e04 <startup-0x1fc7f1fc>
 19c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 1a0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 1a4:	97184006 	ldrls	r4, [r8, -r6]
 1a8:	00001942 	andeq	r1, r0, r2, asr #18
 1ac:	01110100 	tsteq	r1, r0, lsl #2
 1b0:	0b130e25 	bleq	4c3a4c <startup-0x1fb3c5b4>
 1b4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 1b8:	01111755 	tsteq	r1, r5, asr r7
 1bc:	00001710 	andeq	r1, r0, r0, lsl r7
 1c0:	0b002402 	bleq	91d0 <startup-0x1fff6e30>
 1c4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 1c8:	0300000e 	movweq	r0, #14
 1cc:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 1d0:	0b3a0b0b 	bleq	e82e04 <startup-0x1f17d1fc>
 1d4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 1d8:	0d040000 	stceq	0, cr0, [r4, #-0]
 1dc:	3a080300 	bcc	200de4 <startup-0x1fdff21c>
 1e0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1e4:	000b3813 	andeq	r3, fp, r3, lsl r8
 1e8:	00160500 	andseq	r0, r6, r0, lsl #10
 1ec:	0b3a0e03 	bleq	e83a00 <startup-0x1f17c600>
 1f0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1f4:	0d060000 	stceq	0, cr0, [r6, #-0]
 1f8:	3a0e0300 	bcc	380e00 <startup-0x1fc7f200>
 1fc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 200:	000b3813 	andeq	r3, fp, r3, lsl r8
 204:	00240700 	eoreq	r0, r4, r0, lsl #14
 208:	0b3e0b0b 	bleq	f82e3c <startup-0x1f07d1c4>
 20c:	00000803 	andeq	r0, r0, r3, lsl #16
 210:	49010108 	stmdbmi	r1, {r3, r8}
 214:	00130113 	andseq	r0, r3, r3, lsl r1
 218:	00210900 	eoreq	r0, r1, r0, lsl #18
 21c:	0b2f1349 	bleq	bc4f48 <startup-0x1f43b0b8>
 220:	0f0a0000 	svceq	0x000a0000
 224:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 228:	0b000013 	bleq	27c <startup-0x1ffffd84>
 22c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 230:	00001301 	andeq	r1, r0, r1, lsl #6
 234:	4900050c 	stmdbmi	r0, {r2, r3, r8, sl}
 238:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 23c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 240:	0b3b0b3a 	bleq	ec2f30 <startup-0x1f13d0d0>
 244:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 248:	00001802 	andeq	r1, r0, r2, lsl #16
 24c:	0300340e 	movweq	r3, #1038	; 0x40e
 250:	3b0b3a0e 	blcc	2cea90 <startup-0x1fd31570>
 254:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 258:	0f000018 	svceq	0x00000018
 25c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 260:	0b3a0e03 	bleq	e83a74 <startup-0x1f17c58c>
 264:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 268:	01111349 	tsteq	r1, r9, asr #6
 26c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 270:	01194296 			; <UNDEFINED> instruction: 0x01194296
 274:	10000013 	andne	r0, r0, r3, lsl r0
 278:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 27c:	0b3b0b3a 	bleq	ec2f6c <startup-0x1f13d094>
 280:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 284:	34110000 	ldrcc	r0, [r1], #-0
 288:	3a080300 	bcc	200e90 <startup-0x1fdff170>
 28c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 290:	00180213 	andseq	r0, r8, r3, lsl r2
 294:	002e1200 	eoreq	r1, lr, r0, lsl #4
 298:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 29c:	0b3b0b3a 	bleq	ec2f8c <startup-0x1f13d074>
 2a0:	01111927 	tsteq	r1, r7, lsr #18
 2a4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2a8:	00194297 	mulseq	r9, r7, r2
 2ac:	11010000 	mrsne	r0, (UNDEF: 1)
 2b0:	130e2501 	movwne	r2, #58625	; 0xe501
 2b4:	1b0e030b 	blne	380ee8 <startup-0x1fc7f118>
 2b8:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 2bc:	00171006 	andseq	r1, r7, r6
 2c0:	00240200 	eoreq	r0, r4, r0, lsl #4
 2c4:	0b3e0b0b 	bleq	f82ef8 <startup-0x1f07d108>
 2c8:	00000e03 	andeq	r0, r0, r3, lsl #28
 2cc:	03011303 	movweq	r1, #4867	; 0x1303
 2d0:	3a0b0b0e 	bcc	2c2f10 <startup-0x1fd3d0f0>
 2d4:	010b3b0b 	tsteq	fp, fp, lsl #22
 2d8:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 2dc:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 2e0:	0b3b0b3a 	bleq	ec2fd0 <startup-0x1f13d030>
 2e4:	0b381349 	bleq	e05010 <startup-0x1f1faff0>
 2e8:	16050000 	strne	r0, [r5], -r0
 2ec:	3a0e0300 	bcc	380ef4 <startup-0x1fc7f10c>
 2f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2f4:	06000013 			; <UNDEFINED> instruction: 0x06000013
 2f8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 2fc:	0b3b0b3a 	bleq	ec2fec <startup-0x1f13d014>
 300:	0b381349 	bleq	e0502c <startup-0x1f1fafd4>
 304:	24070000 	strcs	r0, [r7], #-0
 308:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 30c:	0008030b 	andeq	r0, r8, fp, lsl #6
 310:	01010800 	tsteq	r1, r0, lsl #16
 314:	13011349 	movwne	r1, #4937	; 0x1349
 318:	21090000 	mrscs	r0, (UNDEF: 9)
 31c:	2f134900 	svccs	0x00134900
 320:	0a00000b 	beq	354 <startup-0x1ffffcac>
 324:	0b0b000f 	bleq	2c0368 <startup-0x1fd3fc98>
 328:	00001349 	andeq	r1, r0, r9, asr #6
 32c:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
 330:	00130119 	andseq	r0, r3, r9, lsl r1
 334:	00050c00 	andeq	r0, r5, r0, lsl #24
 338:	00001349 	andeq	r1, r0, r9, asr #6
 33c:	3f012e0d 	svccc	0x00012e0d
 340:	3a0e0319 	bcc	380fac <startup-0x1fc7f054>
 344:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 348:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 34c:	96184006 	ldrls	r4, [r8], -r6
 350:	13011942 	movwne	r1, #6466	; 0x1942
 354:	050e0000 	streq	r0, [lr, #-0]
 358:	3a080300 	bcc	200f60 <startup-0x1fdff0a0>
 35c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 360:	00180213 	andseq	r0, r8, r3, lsl r2
 364:	010b0f00 	tsteq	fp, r0, lsl #30
 368:	06120111 			; <UNDEFINED> instruction: 0x06120111
 36c:	34100000 	ldrcc	r0, [r0], #-0
 370:	3a080300 	bcc	200f78 <startup-0x1fdff088>
 374:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 378:	00180213 	andseq	r0, r8, r3, lsl r2
 37c:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
 380:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 384:	0b3b0b3a 	bleq	ec3074 <startup-0x1f13cf8c>
 388:	01111927 	tsteq	r1, r7, lsr #18
 38c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 390:	00194297 	mulseq	r9, r7, r2
 394:	00051200 	andeq	r1, r5, r0, lsl #4
 398:	0b3a0e03 	bleq	e83bac <startup-0x1f17c454>
 39c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3a0:	00001802 	andeq	r1, r0, r2, lsl #16
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000000bc 	strheq	r0, [r0], -ip
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00a30002 	adceq	r0, r3, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	200000cc 	andcs	r0, r0, ip, asr #1
  34:	00000520 	andeq	r0, r0, r0, lsr #10
	...
  40:	00000024 	andeq	r0, r0, r4, lsr #32
  44:	031b0002 	tsteq	fp, #2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	200005ec 	andcs	r0, r0, ip, ror #11
  54:	00000030 	andeq	r0, r0, r0, lsr r0
  58:	20000000 	andcs	r0, r0, r0
  5c:	0000000c 	andeq	r0, r0, ip
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	05330002 	ldreq	r0, [r3, #-2]!
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	2000061c 	andcs	r0, r0, ip, lsl r6
  7c:	0000018c 	andeq	r0, r0, ip, lsl #3
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000007e 	andeq	r0, r0, lr, ror r0
   4:	004a0002 	subeq	r0, sl, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	72646e41 	rsbvc	r6, r4, #1040	; 0x410
  28:	65442f65 	strbvs	r2, [r4, #-3941]	; 0xfffff09b
  2c:	6f746b73 	svcvs	0x00746b73
  30:	41442f70 	hvcmi	17136	; 0x42f0
  34:	30393354 	eorscc	r3, r9, r4, asr r3
  38:	62616c5f 	rsbvs	r6, r1, #24320	; 0x5f00
  3c:	34765f62 	ldrbtcc	r5, [r6], #-3938	; 0xfffff09e
  40:	6570732f 	ldrbvs	r7, [r0, #-815]!	; 0xfffffcd1
  44:	6400006c 	strvs	r0, [r0], #-108	; 0xffffff94
  48:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
  4c:	00632e73 	rsbeq	r2, r3, r3, ror lr
  50:	00000001 	andeq	r0, r0, r1
  54:	10020500 	andne	r0, r2, r0, lsl #10
  58:	19200000 	stmdbne	r0!, {}	; <UNPREDICTABLE>
  5c:	3d3d3d2f 	ldccc	13, cr3, [sp, #-188]!	; 0xffffff44
  60:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
  64:	06200601 	strteq	r0, [r0], -r1, lsl #12
  68:	4ba03d67 	blmi	fe80f60c <ball+0xde80ed18>
  6c:	2f2f2f21 	svccs	0x002f2f21
  70:	4d4c5e2a 	stclmi	14, cr5, [ip, #-168]	; 0xffffff58
  74:	57213f75 			; <UNDEFINED> instruction: 0x57213f75
  78:	2f2f4c5a 	svccs	0x002f4c5a
  7c:	0003022f 	andeq	r0, r3, pc, lsr #4
  80:	01240101 			; <UNDEFINED> instruction: 0x01240101
  84:	00020000 	andeq	r0, r2, r0
  88:	00000059 	andeq	r0, r0, r9, asr r0
  8c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
  90:	0101000d 	tsteq	r1, sp
  94:	00000101 	andeq	r0, r0, r1, lsl #2
  98:	00000100 	andeq	r0, r0, r0, lsl #2
  9c:	2f3a4301 	svccs	0x003a4301
  a0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
  a4:	6e412f73 	mcrvs	15, 2, r2, cr1, cr3, {3}
  a8:	2f657264 	svccs	0x00657264
  ac:	6b736544 	blvs	1cd95c4 <startup-0x1e326a3c>
  b0:	2f706f74 	svccs	0x00706f74
  b4:	33544144 	cmpcc	r4, #68, 2
  b8:	6c5f3039 	mrrcvs	0, 3, r3, pc, cr9	; <UNPREDICTABLE>
  bc:	5f626261 	svcpl	0x00626261
  c0:	732f3476 			; <UNDEFINED> instruction: 0x732f3476
  c4:	006c6570 	rsbeq	r6, ip, r0, ror r5
  c8:	61726700 	cmnvs	r2, r0, lsl #14
  cc:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  d0:	00632e73 	rsbeq	r2, r3, r3, ror lr
  d4:	73000001 	movwvc	r0, #1
  d8:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  dc:	682e7075 	stmdavs	lr!, {r0, r2, r4, r5, r6, ip, sp, lr}
  e0:	00000100 	andeq	r0, r0, r0, lsl #2
  e4:	02050000 	andeq	r0, r5, #0
  e8:	200000cc 	andcs	r0, r0, ip, asr #1
  ec:	76e56719 	usatvc	r6, #5, r9, lsl #14
  f0:	76130867 	ldrvc	r0, [r3], -r7, ror #16
  f4:	7a037a67 	bvc	dea98 <startup-0x1ff21568>
  f8:	4b1b5020 	blmi	6d4180 <startup-0x1f92be80>
  fc:	4c4c7575 	cfstr64mi	mvdx7, [ip], {117}	; 0x75
 100:	3d3d3d2f 	ldccc	13, cr3, [sp, #-188]!	; 0xffffff44
 104:	3d212f3d 	stccc	15, cr2, [r1, #-244]!	; 0xffffff0c
 108:	6c2a3d2f 	stcvs	13, cr3, [sl], #-188	; 0xffffff44
 10c:	68bc3d3d 	ldmvs	ip!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 110:	593d3d3d 	ldmdbpl	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 114:	3d593d2f 	ldclcc	13, cr3, [r9, #-188]	; 0xffffff44
 118:	303d4b3d 	eorscc	r4, sp, sp, lsr fp
 11c:	3d303d4b 	ldccc	13, cr3, [r0, #-300]!	; 0xfffffed4
 120:	594b91ca 	stmdbpl	fp, {r1, r3, r6, r7, r8, ip, pc}^
 124:	3d2f3d2f 	stccc	13, cr3, [pc, #-188]!	; 70 <startup-0x1fffff90>
 128:	59303d59 	ldmdbpl	r0!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}
 12c:	3d3d303d 	ldccc	0, cr3, [sp, #-244]!	; 0xffffff0c
 130:	3d91763d 	ldccc	6, cr7, [r1, #244]	; 0xf4
 134:	4c833d59 	stcmi	13, cr3, [r3], {89}	; 0x59
 138:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 13c:	674c833d 	smlaldxvs	r8, ip, sp, r3
 140:	2f4c675a 	svccs	0x004c675a
 144:	3d3d3d3e 	ldccc	13, cr3, [sp, #-248]!	; 0xffffff08
 148:	4b4b3d3d 	blmi	12cf644 <startup-0x1ed309bc>
 14c:	3d4b4b4b 	vstrcc	d20, [fp, #-300]	; 0xfffffed4
 150:	ad3d3d76 	ldcge	13, cr3, [sp, #-472]!	; 0xfffffe28
 154:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 158:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 15c:	00490304 	subeq	r0, r9, r4, lsl #6
 160:	06010402 	streq	r0, [r1], -r2, lsl #8
 164:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 168:	00390602 	eorseq	r0, r9, r2, lsl #12
 16c:	06010402 	streq	r0, [r1], -r2, lsl #8
 170:	4c42063c 	mcrrmi	6, 3, r0, r2, cr12
 174:	04020069 	streq	r0, [r2], #-105	; 0xffffff97
 178:	004a0601 	subeq	r0, sl, r1, lsl #12
 17c:	4a020402 	bmi	8118c <startup-0x1ff7ee74>
 180:	03040200 	movweq	r0, #16896	; 0x4200
 184:	4c4d064a 	mcrrmi	6, 4, r0, sp, cr10
 188:	595959ad 	ldmdbpl	r9, {r0, r2, r3, r5, r7, r8, fp, ip, lr}^
 18c:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
 190:	3d4b3d5b 	stclcc	13, cr3, [fp, #-364]	; 0xfffffe94
 194:	3e4b4d4b 	cdpcc	13, 4, cr4, cr11, cr11, {2}
 198:	ae91c9bb 			; <UNDEFINED> instruction: 0xae91c9bb
 19c:	0392a03d 	orrseq	sl, r2, #61	; 0x3d
 1a0:	2403ac5d 	strcs	sl, [r3], #-3165	; 0xfffff3a3
 1a4:	00050220 	andeq	r0, r5, r0, lsr #4
 1a8:	00830101 	addeq	r0, r3, r1, lsl #2
 1ac:	00020000 	andeq	r0, r2, r0
 1b0:	00000055 	andeq	r0, r0, r5, asr r0
 1b4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 1b8:	0101000d 	tsteq	r1, sp
 1bc:	00000101 	andeq	r0, r0, r1, lsl #2
 1c0:	00000100 	andeq	r0, r0, r0, lsl #2
 1c4:	2f3a4301 	svccs	0x003a4301
 1c8:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 1cc:	6e412f73 	mcrvs	15, 2, r2, cr1, cr3, {3}
 1d0:	2f657264 	svccs	0x00657264
 1d4:	6b736544 	blvs	1cd96ec <startup-0x1e326914>
 1d8:	2f706f74 	svccs	0x00706f74
 1dc:	33544144 	cmpcc	r4, #68, 2
 1e0:	6c5f3039 	mrrcvs	0, 3, r3, pc, cr9	; <UNPREDICTABLE>
 1e4:	5f626261 	svcpl	0x00626261
 1e8:	732f3476 			; <UNDEFINED> instruction: 0x732f3476
 1ec:	006c6570 	rsbeq	r6, ip, r0, ror r5
 1f0:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 1f4:	00632e6e 	rsbeq	r2, r3, lr, ror #28
 1f8:	73000001 	movwvc	r0, #1
 1fc:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 200:	682e7075 	stmdavs	lr!, {r0, r2, r4, r5, r6, ip, sp, lr}
 204:	00000100 	andeq	r0, r0, r0, lsl #2
 208:	02050000 	andeq	r0, r5, #0
 20c:	20000000 	andcs	r0, r0, r0
 210:	13010903 	movwne	r0, #6403	; 0x1903
 214:	0003025e 	andeq	r0, r3, lr, asr r2
 218:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
 21c:	0005ec02 	andeq	lr, r5, r2, lsl #24
 220:	01220320 			; <UNDEFINED> instruction: 0x01220320
 224:	00342f59 	eorseq	r2, r4, r9, asr pc
 228:	68010402 	stmdavs	r1, {r1, sl}
 22c:	01000902 	tsteq	r0, r2, lsl #18
 230:	0000a601 	andeq	sl, r0, r1, lsl #12
 234:	58000200 	stmdapl	r0, {r9}
 238:	02000000 	andeq	r0, r0, #0
 23c:	0d0efb01 	vstreq	d15, [lr, #-4]
 240:	01010100 	mrseq	r0, (UNDEF: 17)
 244:	00000001 	andeq	r0, r0, r1
 248:	01000001 	tsteq	r0, r1
 24c:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff811 <ball+0xdfffef1d>
 250:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 254:	646e412f 	strbtvs	r4, [lr], #-303	; 0xfffffed1
 258:	442f6572 	strtmi	r6, [pc], #-1394	; 260 <startup-0x1ffffda0>
 25c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 260:	442f706f 	strtmi	r7, [pc], #-111	; 268 <startup-0x1ffffd98>
 264:	39335441 	ldmdbcc	r3!, {r0, r6, sl, ip, lr}
 268:	616c5f30 	cmnvs	ip, r0, lsr pc
 26c:	765f6262 	ldrbvc	r6, [pc], -r2, ror #4
 270:	70732f34 	rsbsvc	r2, r3, r4, lsr pc
 274:	00006c65 	andeq	r6, r0, r5, ror #24
 278:	75727473 	ldrbvc	r7, [r2, #-1139]!	; 0xfffffb8d
 27c:	2e737463 	cdpcs	4, 7, cr7, cr3, cr3, {3}
 280:	00010063 	andeq	r0, r1, r3, rrx
 284:	61747300 	cmnvs	r4, r0, lsl #6
 288:	70757472 	rsbsvc	r7, r5, r2, ror r4
 28c:	0100682e 	tsteq	r0, lr, lsr #16
 290:	00000000 	andeq	r0, r0, r0
 294:	061c0205 	ldreq	r0, [ip], -r5, lsl #4
 298:	67152000 	ldrvs	r2, [r5, -r0]
 29c:	4b4c3d3d 	blmi	130f798 <startup-0x1ecf0868>
 2a0:	03040200 	movweq	r0, #16896	; 0x4200
 2a4:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 2a8:	009d0803 	addseq	r0, sp, r3, lsl #16
 2ac:	06010402 	streq	r0, [r1], -r2, lsl #8
 2b0:	4c69063c 	stclmi	6, cr0, [r9], #-240	; 0xffffff10
 2b4:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 2b8:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 2bc:	9d080304 	stcls	3, cr0, [r8, #-16]
 2c0:	01040200 	mrseq	r0, R12_usr
 2c4:	69063c06 	stmdbvs	r6, {r1, r2, sl, fp, ip, sp}
 2c8:	4b5a4b4c 	blmi	1693000 <startup-0x1e96d000>
 2cc:	4ba04ba0 	blmi	fe813154 <ball+0xde812860>
 2d0:	75a04ba0 	strvc	r4, [r0, #2976]!	; 0xba0
 2d4:	04025975 	streq	r5, [r2], #-2421	; 0xfffff68b
 2d8:	Address 0x000002d8 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	616c6564 	cmnvs	ip, r4, ror #10
   4:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
   8:	00696c6c 	rsbeq	r6, r9, ip, ror #24
   c:	20554e47 	subscs	r4, r5, r7, asr #28
  10:	20393943 	eorscs	r3, r9, r3, asr #18
  14:	2e322e37 	mrccs	14, 1, r2, cr2, cr7, {1}
  18:	30322031 	eorscc	r2, r2, r1, lsr r0
  1c:	39303731 	ldmdbcc	r0!, {r0, r4, r5, r8, r9, sl, ip, sp}
  20:	28203430 	stmdacs	r0!, {r4, r5, sl, ip, sp}
  24:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  28:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  2c:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
  30:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
  34:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
  38:	372d6465 	strcc	r6, [sp, -r5, ror #8]!
  3c:	6172622d 	cmnvs	r2, sp, lsr #4
  40:	2068636e 	rsbcs	r6, r8, lr, ror #6
  44:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  48:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  4c:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
  50:	5d343032 	ldcpl	0, cr3, [r4, #-200]!	; 0xffffff38
  54:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  58:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  5c:	616d2d20 	cmnvs	sp, r0, lsr #26
  60:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  64:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  68:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  6c:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  70:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  74:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  78:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  7c:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  80:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  84:	616d2d20 	cmnvs	sp, r0, lsr #26
  88:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  8c:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  90:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  94:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
  98:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
  9c:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
  a0:	00393963 	eorseq	r3, r9, r3, ror #18
  a4:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  a8:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  ac:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
  b0:	6c656400 	cfstrdvs	mvd6, [r5], #-0
  b4:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
  b8:	736e3035 	cmnvc	lr, #53	; 0x35
  bc:	6c656400 	cfstrdvs	mvd6, [r5], #-0
  c0:	355f7961 	ldrbcc	r7, [pc, #-2401]	; fffff767 <ball+0xdfffee73>
  c4:	736e3030 	cmnvc	lr, #48	; 0x30
  c8:	5c3a4300 	ldcpl	3, cr4, [sl], #-0
  cc:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
  d0:	6e415c73 	mcrvs	12, 2, r5, cr1, cr3, {3}
  d4:	5c657264 	sfmpl	f7, 2, [r5], #-400	; 0xfffffe70
  d8:	6b736544 	blvs	1cd95f0 <startup-0x1e326a10>
  dc:	5c706f74 	ldclpl	15, cr6, [r0], #-464	; 0xfffffe30
  e0:	33544144 	cmpcc	r4, #68, 2
  e4:	6c5f3039 	mrrcvs	0, 3, r3, pc, cr9	; <UNPREDICTABLE>
  e8:	5f626261 	svcpl	0x00626261
  ec:	735c3476 	cmpvc	ip, #1979711488	; 0x76000000
  f0:	006c6570 	rsbeq	r6, ip, r0, ror r5
  f4:	616c6564 	cmnvs	ip, r4, ror #10
  f8:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
  fc:	006f7263 	rsbeq	r7, pc, r3, ror #4
 100:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 104:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 108:	61686320 	cmnvs	r8, r0, lsr #6
 10c:	3a430072 	bcc	10c02dc <startup-0x1ef3fd24>
 110:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 114:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
 118:	6572646e 	ldrbvs	r6, [r2, #-1134]!	; 0xfffffb92
 11c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 120:	706f746b 	rsbvc	r7, pc, fp, ror #8
 124:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 128:	5f303933 	svcpl	0x00303933
 12c:	6262616c 	rsbvs	r6, r2, #108, 2
 130:	2f34765f 	svccs	0x0034765f
 134:	6c657073 	stclvs	0, cr7, [r5], #-460	; 0xfffffe34
 138:	6c65642f 	cfstrdvs	mvd6, [r5], #-188	; 0xffffff44
 13c:	2e737961 	vsubcs.f16	s15, s6, s3	; <UNPREDICTABLE>
 140:	61700063 	cmnvs	r0, r3, rrx
 144:	43006567 	movwmi	r6, #1383	; 0x567
 148:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 14c:	2f737265 	svccs	0x00737265
 150:	72646e41 	rsbvc	r6, r4, #1040	; 0x410
 154:	65442f65 	strbvs	r2, [r4, #-3941]	; 0xfffff09b
 158:	6f746b73 	svcvs	0x00746b73
 15c:	41442f70 	hvcmi	17136	; 0x42f0
 160:	30393354 	eorscc	r3, r9, r4, asr r3
 164:	62616c5f 	rsbvs	r6, r1, #24320	; 0x5f00
 168:	34765f62 	ldrbtcc	r5, [r6], #-3938	; 0xfffff09e
 16c:	6570732f 	ldrbvs	r7, [r0, #-815]!	; 0xfffffcd1
 170:	72672f6c 	rsbvc	r2, r7, #108, 30	; 0x1b0
 174:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 178:	632e7363 			; <UNDEFINED> instruction: 0x632e7363
 17c:	72646100 	rsbvc	r6, r4, #0, 2
 180:	00737365 	rsbseq	r7, r3, r5, ror #6
 184:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 188:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0xffffff9b
 18c:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
 190:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 194:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; ffffffcc <ball+0xdffff6d8>
 198:	0072656c 	rsbseq	r6, r2, ip, ror #10
 19c:	70617267 	rsbvc	r7, r1, r7, ror #4
 1a0:	5f636968 	svcpl	0x00636968
 1a4:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 1a8:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 1ac:	72670061 	rsbvc	r0, r7, #97	; 0x61
 1b0:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 1b4:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 1b8:	00657469 	rsbeq	r7, r5, r9, ror #8
 1bc:	70617267 	rsbvc	r7, r1, r7, ror #4
 1c0:	5f636968 	svcpl	0x00636968
 1c4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 1c8:	61726700 	cmnvs	r2, r0, lsl #14
 1cc:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 1d0:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 1d4:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 1d8:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 1dc:	00726165 	rsbseq	r6, r2, r5, ror #2
 1e0:	70617267 	rsbvc	r7, r1, r7, ror #4
 1e4:	5f636968 	svcpl	0x00636968
 1e8:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 1ec:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 1f0:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 1f4:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
 1f8:	745f3874 	ldrbvc	r3, [pc], #-2164	; 200 <startup-0x1ffffe00>
 1fc:	78697000 	stmdavc	r9!, {ip, sp, lr}^
 200:	6d006c65 	stcvs	12, cr6, [r0, #-404]	; 0xfffffe6c
 204:	006b7361 	rsbeq	r7, fp, r1, ror #6
 208:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 20c:	72670078 	rsbvc	r0, r7, #120	; 0x78
 210:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 214:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 218:	5f657469 	svcpl	0x00657469
 21c:	61746164 	cmnvs	r4, r4, ror #2
 220:	61726700 	cmnvs	r2, r0, lsl #14
 224:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 228:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 22c:	65725f74 	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
 230:	00796461 	rsbseq	r6, r9, r1, ror #8
 234:	70617267 	rsbvc	r7, r1, r7, ror #4
 238:	5f636968 	svcpl	0x00636968
 23c:	61656c63 	cmnvs	r5, r3, ror #24
 240:	63735f72 	cmnvs	r3, #456	; 0x1c8
 244:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 248:	61726700 	cmnvs	r2, r0, lsl #14
 24c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 250:	6165725f 	cmnvs	r5, pc, asr r2
 254:	72670064 	rsbvc	r0, r7, #100	; 0x64
 258:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 25c:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 260:	5f657469 	svcpl	0x00657469
 264:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 268:	00646e61 	rsbeq	r6, r4, r1, ror #28
 26c:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 270:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 274:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 278:	62006465 	andvs	r6, r0, #1694498816	; 0x65000000
 27c:	5f6c6c61 	svcpl	0x006c6c61
 280:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; ec <startup-0x1fffff14>
 284:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 288:	6f507400 	svcvs	0x00507400
 28c:	00746e69 	rsbseq	r6, r4, r9, ror #28
 290:	78726964 	ldmdavc	r2!, {r2, r5, r6, r8, fp, sp, lr}^
 294:	7a697300 	bvc	1a5ce9c <startup-0x1e5a3164>
 298:	73007865 	movwvc	r7, #2149	; 0x865
 29c:	79657a69 	stmdbvc	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 2a0:	45475000 	strbmi	r5, [r7, #-0]
 2a4:	54454d4f 	strbpl	r4, [r5], #-3407	; 0xfffff2b1
 2a8:	70005952 	andvc	r5, r0, r2, asr r9
 2ac:	0079736f 	rsbseq	r7, r9, pc, ror #6
 2b0:	6f654774 	svcvs	0x00654774
 2b4:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 2b8:	72610079 	rsbvc	r0, r1, #121	; 0x79
 2bc:	73007667 	movwvc	r7, #1639	; 0x667
 2c0:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 2c4:	61007075 	tstvs	r0, r5, ror r0
 2c8:	00636772 	rsbeq	r6, r3, r2, ror r7
 2cc:	79726964 	ldmdbvc	r2!, {r2, r5, r6, r8, fp, sp, lr}^
 2d0:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
 2d4:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 2d8:	6d007374 	stcvs	3, cr7, [r0, #-464]	; 0xfffffe30
 2dc:	006e6961 	rsbeq	r6, lr, r1, ror #18
 2e0:	4a424f50 	bmi	1094028 <startup-0x1ef6bfd8>
 2e4:	00544345 	subseq	r4, r4, r5, asr #6
 2e8:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 2ec:	2f3a4300 	svccs	0x003a4300
 2f0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 2f4:	6e412f73 	mcrvs	15, 2, r2, cr1, cr3, {3}
 2f8:	2f657264 	svccs	0x00657264
 2fc:	6b736544 	blvs	1cd9814 <startup-0x1e3267ec>
 300:	2f706f74 	svccs	0x00706f74
 304:	33544144 	cmpcc	r4, #68, 2
 308:	6c5f3039 	mrrcvs	0, 3, r3, pc, cr9	; <UNPREDICTABLE>
 30c:	5f626261 	svcpl	0x00626261
 310:	732f3476 			; <UNDEFINED> instruction: 0x732f3476
 314:	2f6c6570 	svccs	0x006c6570
 318:	6e69616d 	powvsez	f6, f1, #5.0
 31c:	6d00632e 	stcvs	3, cr6, [r0, #-184]	; 0xffffff48
 320:	0065766f 	rsbeq	r7, r5, pc, ror #12
 324:	4e494f50 	mcrmi	15, 2, r4, cr9, cr0, {2}
 328:	6f700054 	svcvs	0x00700054
 32c:	74007873 	strvc	r7, [r0], #-2163	; 0xfffff78d
 330:	006a624f 	rsbeq	r6, sl, pc, asr #4
 334:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 338:	73007864 	movwvc	r7, #2148	; 0x864
 33c:	6f5f7465 	svcvs	0x005f7465
 340:	63656a62 	cmnvs	r5, #401408	; 0x62000
 344:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 348:	00646565 	rsbeq	r6, r4, r5, ror #10
 34c:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 350:	64007964 	strvs	r7, [r0], #-2404	; 0xfffff69c
 354:	5f776172 	svcpl	0x00776172
 358:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 35c:	63007463 	movwvs	r7, #1123	; 0x463
 360:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 364:	6a626f5f 	bvs	189c0e8 <startup-0x1e763f18>
 368:	00746365 	rsbseq	r6, r4, r5, ror #6
 36c:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 370:	6a626f5f 	bvs	189c0f4 <startup-0x1e763f0c>
 374:	00746365 	rsbseq	r6, r4, r5, ror #6
 378:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff93d <ball+0xdffff049>
 37c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 380:	646e412f 	strbtvs	r4, [lr], #-303	; 0xfffffed1
 384:	442f6572 	strtmi	r6, [pc], #-1394	; 38c <startup-0x1ffffc74>
 388:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 38c:	442f706f 	strtmi	r7, [pc], #-111	; 394 <startup-0x1ffffc6c>
 390:	39335441 	ldmdbcc	r3!, {r0, r6, sl, ip, lr}
 394:	616c5f30 	cmnvs	ip, r0, lsr pc
 398:	765f6262 	ldrbvc	r6, [pc], -r2, ror #4
 39c:	70732f34 	rsbsvc	r2, r3, r4, lsr pc
 3a0:	732f6c65 			; <UNDEFINED> instruction: 0x732f6c65
 3a4:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
 3a8:	632e7374 			; <UNDEFINED> instruction: 0x632e7374
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <ball+0xdfffea1a>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000018 	andeq	r0, r0, r8, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000044 	andeq	r0, r0, r4, asr #32
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  2c:	0000001c 	andeq	r0, r0, ip, lsl r0
  30:	00000000 	andeq	r0, r0, r0
  34:	20000054 	andcs	r0, r0, r4, asr r0
  38:	0000002c 	andeq	r0, r0, ip, lsr #32
  3c:	40080e41 	andmi	r0, r8, r1, asr #28
  40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  44:	100e4101 	andne	r4, lr, r1, lsl #2
  48:	00070d41 	andeq	r0, r7, r1, asr #26
  4c:	0000001c 	andeq	r0, r0, ip, lsl r0
  50:	00000000 	andeq	r0, r0, r0
  54:	20000080 	andcs	r0, r0, r0, lsl #1
  58:	0000003a 	andeq	r0, r0, sl, lsr r0
  5c:	40080e41 	andmi	r0, r8, r1, asr #28
  60:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  64:	100e4101 	andne	r4, lr, r1, lsl #2
  68:	00070d41 	andeq	r0, r7, r1, asr #26
  6c:	00000018 	andeq	r0, r0, r8, lsl r0
  70:	00000000 	andeq	r0, r0, r0
  74:	200000ba 	strhcs	r0, [r0], -sl
  78:	00000012 	andeq	r0, r0, r2, lsl r0
  7c:	40080e41 	andmi	r0, r8, r1, asr #28
  80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  84:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  88:	0000000c 	andeq	r0, r0, ip
  8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  90:	7c020001 	stcvc	0, cr0, [r2], {1}
  94:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	00000088 	andeq	r0, r0, r8, lsl #1
  a0:	200000cc 	andcs	r0, r0, ip, asr #1
  a4:	00000038 	andeq	r0, r0, r8, lsr r0
  a8:	40080e41 	andmi	r0, r8, r1, asr #28
  ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b0:	100e4101 	andne	r4, lr, r1, lsl #2
  b4:	00070d41 	andeq	r0, r7, r1, asr #26
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000088 	andeq	r0, r0, r8, lsl #1
  c0:	20000104 	andcs	r0, r0, r4, lsl #2
  c4:	0000003c 	andeq	r0, r0, ip, lsr r0
  c8:	40080e41 	andmi	r0, r8, r1, asr #28
  cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d0:	100e4101 	andne	r4, lr, r1, lsl #2
  d4:	00070d41 	andeq	r0, r7, r1, asr #26
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000088 	andeq	r0, r0, r8, lsl #1
  e0:	20000140 	andcs	r0, r0, r0, asr #2
  e4:	0000005a 	andeq	r0, r0, sl, asr r0
  e8:	40080e41 	andmi	r0, r8, r1, asr #28
  ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f0:	100e4101 	andne	r4, lr, r1, lsl #2
  f4:	00070d41 	andeq	r0, r7, r1, asr #26
  f8:	00000018 	andeq	r0, r0, r8, lsl r0
  fc:	00000088 	andeq	r0, r0, r8, lsl #1
 100:	2000019a 	mulcs	r0, sl, r1
 104:	00000066 	andeq	r0, r0, r6, rrx
 108:	40080e41 	andmi	r0, r8, r1, asr #28
 10c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 110:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 114:	0000001c 	andeq	r0, r0, ip, lsl r0
 118:	00000088 	andeq	r0, r0, r8, lsl #1
 11c:	20000200 	andcs	r0, r0, r0, lsl #4
 120:	0000008c 	andeq	r0, r0, ip, lsl #1
 124:	40080e41 	andmi	r0, r8, r1, asr #28
 128:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 12c:	180e4101 	stmdane	lr, {r0, r8, lr}
 130:	00070d41 	andeq	r0, r7, r1, asr #26
 134:	0000001c 	andeq	r0, r0, ip, lsl r0
 138:	00000088 	andeq	r0, r0, r8, lsl #1
 13c:	2000028c 	andcs	r0, r0, ip, lsl #5
 140:	00000080 	andeq	r0, r0, r0, lsl #1
 144:	40080e41 	andmi	r0, r8, r1, asr #28
 148:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 14c:	100e4101 	andne	r4, lr, r1, lsl #2
 150:	00070d41 	andeq	r0, r7, r1, asr #26
 154:	0000001c 	andeq	r0, r0, ip, lsl r0
 158:	00000088 	andeq	r0, r0, r8, lsl #1
 15c:	2000030c 	andcs	r0, r0, ip, lsl #6
 160:	00000040 	andeq	r0, r0, r0, asr #32
 164:	40080e41 	andmi	r0, r8, r1, asr #28
 168:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 16c:	100e4101 	andne	r4, lr, r1, lsl #2
 170:	00070d41 	andeq	r0, r7, r1, asr #26
 174:	0000001c 	andeq	r0, r0, ip, lsl r0
 178:	00000088 	andeq	r0, r0, r8, lsl #1
 17c:	2000034c 	andcs	r0, r0, ip, asr #6
 180:	00000046 	andeq	r0, r0, r6, asr #32
 184:	40080e41 	andmi	r0, r8, r1, asr #28
 188:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 18c:	100e4101 	andne	r4, lr, r1, lsl #2
 190:	00070d41 	andeq	r0, r7, r1, asr #26
 194:	0000001c 	andeq	r0, r0, ip, lsl r0
 198:	00000088 	andeq	r0, r0, r8, lsl #1
 19c:	20000392 	mulcs	r0, r2, r3
 1a0:	0000002a 	andeq	r0, r0, sl, lsr #32
 1a4:	40080e41 	andmi	r0, r8, r1, asr #28
 1a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1ac:	100e4101 	andne	r4, lr, r1, lsl #2
 1b0:	00070d41 	andeq	r0, r7, r1, asr #26
 1b4:	00000018 	andeq	r0, r0, r8, lsl r0
 1b8:	00000088 	andeq	r0, r0, r8, lsl #1
 1bc:	200003bc 			; <UNDEFINED> instruction: 0x200003bc
 1c0:	00000064 	andeq	r0, r0, r4, rrx
 1c4:	40080e41 	andmi	r0, r8, r1, asr #28
 1c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1cc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d4:	00000088 	andeq	r0, r0, r8, lsl #1
 1d8:	20000420 	andcs	r0, r0, r0, lsr #8
 1dc:	00000058 	andeq	r0, r0, r8, asr r0
 1e0:	40080e41 	andmi	r0, r8, r1, asr #28
 1e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1e8:	100e4101 	andne	r4, lr, r1, lsl #2
 1ec:	00070d41 	andeq	r0, r7, r1, asr #26
 1f0:	00000024 	andeq	r0, r0, r4, lsr #32
 1f4:	00000088 	andeq	r0, r0, r8, lsl #1
 1f8:	20000478 	andcs	r0, r0, r8, ror r4
 1fc:	00000174 	andeq	r0, r0, r4, ror r1
 200:	40100e41 	andsmi	r0, r0, r1, asr #28
 204:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 208:	02874003 	addeq	r4, r7, #3
 20c:	41018e40 	tstmi	r1, r0, asr #28
 210:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 214:	00000007 	andeq	r0, r0, r7
 218:	0000000c 	andeq	r0, r0, ip
 21c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 220:	7c020001 	stcvc	0, cr0, [r2], {1}
 224:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 228:	0000000c 	andeq	r0, r0, ip
 22c:	00000218 	andeq	r0, r0, r8, lsl r2
 230:	20000000 	andcs	r0, r0, r0
 234:	0000000c 	andeq	r0, r0, ip
 238:	0000001c 	andeq	r0, r0, ip, lsl r0
 23c:	00000218 	andeq	r0, r0, r8, lsl r2
 240:	200005ec 	andcs	r0, r0, ip, ror #11
 244:	00000030 	andeq	r0, r0, r0, lsr r0
 248:	40080e41 	andmi	r0, r8, r1, asr #28
 24c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 250:	180e4101 	stmdane	lr, {r0, r8, lr}
 254:	00070d41 	andeq	r0, r7, r1, asr #26
 258:	0000000c 	andeq	r0, r0, ip
 25c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 260:	7c020001 	stcvc	0, cr0, [r2], {1}
 264:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 268:	0000001c 	andeq	r0, r0, ip, lsl r0
 26c:	00000258 	andeq	r0, r0, r8, asr r2
 270:	2000061c 	andcs	r0, r0, ip, lsl r6
 274:	00000020 	andeq	r0, r0, r0, lsr #32
 278:	40080e41 	andmi	r0, r8, r1, asr #28
 27c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 280:	180e4101 	stmdane	lr, {r0, r8, lr}
 284:	00070d41 	andeq	r0, r7, r1, asr #26
 288:	0000001c 	andeq	r0, r0, ip, lsl r0
 28c:	00000258 	andeq	r0, r0, r8, asr r2
 290:	2000063c 	andcs	r0, r0, ip, lsr r6
 294:	0000005e 	andeq	r0, r0, lr, asr r0
 298:	40080e41 	andmi	r0, r8, r1, asr #28
 29c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2a0:	180e4101 	stmdane	lr, {r0, r8, lr}
 2a4:	00070d41 	andeq	r0, r7, r1, asr #26
 2a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2ac:	00000258 	andeq	r0, r0, r8, asr r2
 2b0:	2000069a 	mulcs	r0, sl, r6
 2b4:	0000005e 	andeq	r0, r0, lr, asr r0
 2b8:	40080e41 	andmi	r0, r8, r1, asr #28
 2bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2c0:	180e4101 	stmdane	lr, {r0, r8, lr}
 2c4:	00070d41 	andeq	r0, r7, r1, asr #26
 2c8:	00000020 	andeq	r0, r0, r0, lsr #32
 2cc:	00000258 	andeq	r0, r0, r8, asr r2
 2d0:	200006f8 	strdcs	r0, [r0], -r8
 2d4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 2d8:	400c0e41 	andmi	r0, ip, r1, asr #28
 2dc:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 2e0:	018e4002 	orreq	r4, lr, r2
 2e4:	41180e41 	tstmi	r8, r1, asr #28
 2e8:	0000070d 	andeq	r0, r0, sp, lsl #14
 2ec:	0000000c 	andeq	r0, r0, ip
 2f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2f4:	7c010001 	stcvc	0, cr0, [r1], {1}
 2f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2fc:	0000000c 	andeq	r0, r0, ip
 300:	000002ec 	andeq	r0, r0, ip, ror #5
 304:	200007a9 	andcs	r0, r0, r9, lsr #15
 308:	0000010a 	andeq	r0, r0, sl, lsl #2

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	200005ec 	andcs	r0, r0, ip, ror #11
   4:	2000061c 	andcs	r0, r0, ip, lsl r6
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
