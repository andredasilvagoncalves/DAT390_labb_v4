
./Debug/1_GAME.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#include "ship.xbm"


void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 fa1a 	bl	2000043c <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <ascii_write_controller>:
 */
 
 #include "game_startup.h"


void ascii_write_controller (unsigned char byte){                   //#define B_E		0x40
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
20000016:	0002      	movs	r2, r0
20000018:	1dfb      	adds	r3, r7, #7
2000001a:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_E);
2000001c:	2040      	movs	r0, #64	; 0x40
2000001e:	f000 f829 	bl	20000074 <ascii_ctrl_bit_set>
	GPIO_ODR_E_HIGH = byte;															//#define B_SELECT 	4
20000022:	4a06      	ldr	r2, [pc, #24]	; (2000003c <ascii_write_controller+0x2c>)
20000024:	1dfb      	adds	r3, r7, #7
20000026:	781b      	ldrb	r3, [r3, #0]
20000028:	7013      	strb	r3, [r2, #0]
	delay_250ns();															//#define B_RW 		2
2000002a:	f000 fb03 	bl	20000634 <delay_250ns>
	ascii_ctrl_bit_clear(B_E);																//#define B_RS 		1
2000002e:	2040      	movs	r0, #64	; 0x40
20000030:	f000 f838 	bl	200000a4 <ascii_ctrl_bit_clear>
}
20000034:	46c0      	nop			; (mov r8, r8)
20000036:	46bd      	mov	sp, r7
20000038:	b002      	add	sp, #8
2000003a:	bd80      	pop	{r7, pc}
2000003c:	40021015 	andmi	r1, r2, r5, lsl r0

20000040 <ascii_read_controller>:

unsigned char ascii_read_controller (void){
20000040:	b580      	push	{r7, lr}
20000042:	b082      	sub	sp, #8
20000044:	af00      	add	r7, sp, #0
	ascii_ctrl_bit_set(B_E);															//#define B_SELECT 	4
20000046:	2040      	movs	r0, #64	; 0x40
20000048:	f000 f814 	bl	20000074 <ascii_ctrl_bit_set>
	delay_250ns();
2000004c:	f000 faf2 	bl	20000634 <delay_250ns>
	delay_250ns();
20000050:	f000 faf0 	bl	20000634 <delay_250ns>
	unsigned char byte = GPIO_IDR_E_HIGH;													//#define B_RW 		2
20000054:	4a06      	ldr	r2, [pc, #24]	; (20000070 <ascii_read_controller+0x30>)
20000056:	1dfb      	adds	r3, r7, #7
20000058:	7812      	ldrb	r2, [r2, #0]
2000005a:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
2000005c:	2040      	movs	r0, #64	; 0x40
2000005e:	f000 f821 	bl	200000a4 <ascii_ctrl_bit_clear>
	return byte;
20000062:	1dfb      	adds	r3, r7, #7
20000064:	781b      	ldrb	r3, [r3, #0]
}
20000066:	0018      	movs	r0, r3
20000068:	46bd      	mov	sp, r7
2000006a:	b002      	add	sp, #8
2000006c:	bd80      	pop	{r7, pc}
2000006e:	46c0      	nop			; (mov r8, r8)
20000070:	40021011 	andmi	r1, r2, r1, lsl r0

20000074 <ascii_ctrl_bit_set>:

//Adresserar displayen och ettst채ller de bitar som 채r 1 i x
void ascii_ctrl_bit_set(unsigned char x){
20000074:	b580      	push	{r7, lr}
20000076:	b082      	sub	sp, #8
20000078:	af00      	add	r7, sp, #0
2000007a:	0002      	movs	r2, r0
2000007c:	1dfb      	adds	r3, r7, #7
2000007e:	701a      	strb	r2, [r3, #0]
	GPIO_ODR_E_LOW |= (B_SELECT | x); 		
20000080:	4b07      	ldr	r3, [pc, #28]	; (200000a0 <ascii_ctrl_bit_set+0x2c>)
20000082:	781b      	ldrb	r3, [r3, #0]
20000084:	b2da      	uxtb	r2, r3
20000086:	1dfb      	adds	r3, r7, #7
20000088:	781b      	ldrb	r3, [r3, #0]
2000008a:	4313      	orrs	r3, r2
2000008c:	b2db      	uxtb	r3, r3
2000008e:	4a04      	ldr	r2, [pc, #16]	; (200000a0 <ascii_ctrl_bit_set+0x2c>)
20000090:	2104      	movs	r1, #4
20000092:	430b      	orrs	r3, r1
20000094:	b2db      	uxtb	r3, r3
20000096:	7013      	strb	r3, [r2, #0]
}
20000098:	46c0      	nop			; (mov r8, r8)
2000009a:	46bd      	mov	sp, r7
2000009c:	b002      	add	sp, #8
2000009e:	bd80      	pop	{r7, pc}
200000a0:	40021014 	andmi	r1, r2, r4, lsl r0

200000a4 <ascii_ctrl_bit_clear>:

//Adresserar displayen och nollst채ller de bitar som 채r 1 i x
void ascii_ctrl_bit_clear(unsigned char x){
200000a4:	b580      	push	{r7, lr}
200000a6:	b082      	sub	sp, #8
200000a8:	af00      	add	r7, sp, #0
200000aa:	0002      	movs	r2, r0
200000ac:	1dfb      	adds	r3, r7, #7
200000ae:	701a      	strb	r2, [r3, #0]
	GPIO_ODR_E_LOW &= (B_SELECT | ~x);
200000b0:	4b0a      	ldr	r3, [pc, #40]	; (200000dc <ascii_ctrl_bit_clear+0x38>)
200000b2:	781b      	ldrb	r3, [r3, #0]
200000b4:	b2db      	uxtb	r3, r3
200000b6:	b25b      	sxtb	r3, r3
200000b8:	1dfa      	adds	r2, r7, #7
200000ba:	7812      	ldrb	r2, [r2, #0]
200000bc:	b252      	sxtb	r2, r2
200000be:	43d2      	mvns	r2, r2
200000c0:	b252      	sxtb	r2, r2
200000c2:	2104      	movs	r1, #4
200000c4:	430a      	orrs	r2, r1
200000c6:	b252      	sxtb	r2, r2
200000c8:	4013      	ands	r3, r2
200000ca:	b25a      	sxtb	r2, r3
200000cc:	4b03      	ldr	r3, [pc, #12]	; (200000dc <ascii_ctrl_bit_clear+0x38>)
200000ce:	b2d2      	uxtb	r2, r2
200000d0:	701a      	strb	r2, [r3, #0]
}
200000d2:	46c0      	nop			; (mov r8, r8)
200000d4:	46bd      	mov	sp, r7
200000d6:	b002      	add	sp, #8
200000d8:	bd80      	pop	{r7, pc}
200000da:	46c0      	nop			; (mov r8, r8)
200000dc:	40021014 	andmi	r1, r2, r4, lsl r0

200000e0 <ascii_write_command>:

void ascii_write_command(unsigned char command){
200000e0:	b580      	push	{r7, lr}
200000e2:	b082      	sub	sp, #8
200000e4:	af00      	add	r7, sp, #0
200000e6:	0002      	movs	r2, r0
200000e8:	1dfb      	adds	r3, r7, #7
200000ea:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
200000ec:	2001      	movs	r0, #1
200000ee:	f7ff ffd9 	bl	200000a4 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
200000f2:	2002      	movs	r0, #2
200000f4:	f7ff ffd6 	bl	200000a4 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
200000f8:	1dfb      	adds	r3, r7, #7
200000fa:	781b      	ldrb	r3, [r3, #0]
200000fc:	0018      	movs	r0, r3
200000fe:	f7ff ff87 	bl	20000010 <ascii_write_controller>
}
20000102:	46c0      	nop			; (mov r8, r8)
20000104:	46bd      	mov	sp, r7
20000106:	b002      	add	sp, #8
20000108:	bd80      	pop	{r7, pc}

2000010a <ascii_write_data>:

void ascii_write_data(unsigned char data){
2000010a:	b580      	push	{r7, lr}
2000010c:	b082      	sub	sp, #8
2000010e:	af00      	add	r7, sp, #0
20000110:	0002      	movs	r2, r0
20000112:	1dfb      	adds	r3, r7, #7
20000114:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000116:	2001      	movs	r0, #1
20000118:	f7ff ffac 	bl	20000074 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
2000011c:	2002      	movs	r0, #2
2000011e:	f7ff ffc1 	bl	200000a4 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20000122:	1dfb      	adds	r3, r7, #7
20000124:	781b      	ldrb	r3, [r3, #0]
20000126:	0018      	movs	r0, r3
20000128:	f7ff ff72 	bl	20000010 <ascii_write_controller>
}
2000012c:	46c0      	nop			; (mov r8, r8)
2000012e:	46bd      	mov	sp, r7
20000130:	b002      	add	sp, #8
20000132:	bd80      	pop	{r7, pc}

20000134 <ascii_read_status>:

unsigned char ascii_read_status(void){
20000134:	b590      	push	{r4, r7, lr}
20000136:	b083      	sub	sp, #12
20000138:	af00      	add	r7, sp, #0
	GPIO_MODER_E &= 0x0000FFFF;
2000013a:	4b0e      	ldr	r3, [pc, #56]	; (20000174 <ascii_read_status+0x40>)
2000013c:	681a      	ldr	r2, [r3, #0]
2000013e:	4b0d      	ldr	r3, [pc, #52]	; (20000174 <ascii_read_status+0x40>)
20000140:	0412      	lsls	r2, r2, #16
20000142:	0c12      	lsrs	r2, r2, #16
20000144:	601a      	str	r2, [r3, #0]
	unsigned char read_status;
	ascii_ctrl_bit_clear(B_RS);
20000146:	2001      	movs	r0, #1
20000148:	f7ff ffac 	bl	200000a4 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
2000014c:	2002      	movs	r0, #2
2000014e:	f7ff ff91 	bl	20000074 <ascii_ctrl_bit_set>
	read_status = ascii_read_controller();
20000152:	1dfc      	adds	r4, r7, #7
20000154:	f7ff ff74 	bl	20000040 <ascii_read_controller>
20000158:	0003      	movs	r3, r0
2000015a:	7023      	strb	r3, [r4, #0]
	GPIO_MODER_E |= 0x55550000;
2000015c:	4b05      	ldr	r3, [pc, #20]	; (20000174 <ascii_read_status+0x40>)
2000015e:	681a      	ldr	r2, [r3, #0]
20000160:	4b04      	ldr	r3, [pc, #16]	; (20000174 <ascii_read_status+0x40>)
20000162:	4905      	ldr	r1, [pc, #20]	; (20000178 <ascii_read_status+0x44>)
20000164:	430a      	orrs	r2, r1
20000166:	601a      	str	r2, [r3, #0]
    return read_status;
20000168:	1dfb      	adds	r3, r7, #7
2000016a:	781b      	ldrb	r3, [r3, #0]
}
2000016c:	0018      	movs	r0, r3
2000016e:	46bd      	mov	sp, r7
20000170:	b003      	add	sp, #12
20000172:	bd90      	pop	{r4, r7, pc}
20000174:	40021000 	andmi	r1, r2, r0
20000178:	55550000 	ldrbpl	r0, [r5, #-0]

2000017c <ascii_read_data>:

unsigned char ascii_read_data(void){
2000017c:	b590      	push	{r4, r7, lr}
2000017e:	b083      	sub	sp, #12
20000180:	af00      	add	r7, sp, #0
	GPIO_MODER_E &= 0x0000FFFF;
20000182:	4b0e      	ldr	r3, [pc, #56]	; (200001bc <ascii_read_data+0x40>)
20000184:	681a      	ldr	r2, [r3, #0]
20000186:	4b0d      	ldr	r3, [pc, #52]	; (200001bc <ascii_read_data+0x40>)
20000188:	0412      	lsls	r2, r2, #16
2000018a:	0c12      	lsrs	r2, r2, #16
2000018c:	601a      	str	r2, [r3, #0]
	unsigned char read_data;
	ascii_ctrl_bit_set(B_RS);
2000018e:	2001      	movs	r0, #1
20000190:	f7ff ff70 	bl	20000074 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
20000194:	2002      	movs	r0, #2
20000196:	f7ff ff6d 	bl	20000074 <ascii_ctrl_bit_set>
	read_data = ascii_read_controller();
2000019a:	1dfc      	adds	r4, r7, #7
2000019c:	f7ff ff50 	bl	20000040 <ascii_read_controller>
200001a0:	0003      	movs	r3, r0
200001a2:	7023      	strb	r3, [r4, #0]
	GPIO_MODER_E |= 0x55550000;
200001a4:	4b05      	ldr	r3, [pc, #20]	; (200001bc <ascii_read_data+0x40>)
200001a6:	681a      	ldr	r2, [r3, #0]
200001a8:	4b04      	ldr	r3, [pc, #16]	; (200001bc <ascii_read_data+0x40>)
200001aa:	4905      	ldr	r1, [pc, #20]	; (200001c0 <ascii_read_data+0x44>)
200001ac:	430a      	orrs	r2, r1
200001ae:	601a      	str	r2, [r3, #0]
    return read_data;
200001b0:	1dfb      	adds	r3, r7, #7
200001b2:	781b      	ldrb	r3, [r3, #0]
}
200001b4:	0018      	movs	r0, r3
200001b6:	46bd      	mov	sp, r7
200001b8:	b003      	add	sp, #12
200001ba:	bd90      	pop	{r4, r7, pc}
200001bc:	40021000 	andmi	r1, r2, r0
200001c0:	55550000 	ldrbpl	r0, [r5, #-0]

200001c4 <ascii_command>:


void ascii_command (unsigned char command){
200001c4:	b580      	push	{r7, lr}
200001c6:	b082      	sub	sp, #8
200001c8:	af00      	add	r7, sp, #0
200001ca:	0002      	movs	r2, r0
200001cc:	1dfb      	adds	r3, r7, #7
200001ce:	701a      	strb	r2, [r3, #0]
	while ((ascii_read_status() & (1<<7))){}
200001d0:	46c0      	nop			; (mov r8, r8)
200001d2:	f7ff ffaf 	bl	20000134 <ascii_read_status>
200001d6:	0003      	movs	r3, r0
200001d8:	b25b      	sxtb	r3, r3
200001da:	2b00      	cmp	r3, #0
200001dc:	dbf9      	blt.n	200001d2 <ascii_command+0xe>
	delay_micro(8);
200001de:	2008      	movs	r0, #8
200001e0:	f000 fa4a 	bl	20000678 <delay_micro>
	ascii_write_command(command);
200001e4:	1dfb      	adds	r3, r7, #7
200001e6:	781b      	ldrb	r3, [r3, #0]
200001e8:	0018      	movs	r0, r3
200001ea:	f7ff ff79 	bl	200000e0 <ascii_write_command>
}
200001ee:	46c0      	nop			; (mov r8, r8)
200001f0:	46bd      	mov	sp, r7
200001f2:	b002      	add	sp, #8
200001f4:	bd80      	pop	{r7, pc}

200001f6 <ascii_init>:

void ascii_init(){
200001f6:	b580      	push	{r7, lr}
200001f8:	af00      	add	r7, sp, #0
	ascii_command(0x38); //Function set
200001fa:	2038      	movs	r0, #56	; 0x38
200001fc:	f7ff ffe2 	bl	200001c4 <ascii_command>
	delay_micro(40); 
20000200:	2028      	movs	r0, #40	; 0x28
20000202:	f000 fa39 	bl	20000678 <delay_micro>
	
	ascii_command(0xC); //Display control
20000206:	200c      	movs	r0, #12
20000208:	f7ff ffdc 	bl	200001c4 <ascii_command>
	delay_micro(40); 
2000020c:	2028      	movs	r0, #40	; 0x28
2000020e:	f000 fa33 	bl	20000678 <delay_micro>
	
	ascii_command(1); // clear display
20000212:	2001      	movs	r0, #1
20000214:	f7ff ffd6 	bl	200001c4 <ascii_command>
	delay_milli(2);
20000218:	2002      	movs	r0, #2
2000021a:	f000 fa43 	bl	200006a4 <delay_milli>
	
	ascii_command(0x6); //entry mode set
2000021e:	2006      	movs	r0, #6
20000220:	f7ff ffd0 	bl	200001c4 <ascii_command>
	delay_micro(40);
20000224:	2028      	movs	r0, #40	; 0x28
20000226:	f000 fa27 	bl	20000678 <delay_micro>
}
2000022a:	46c0      	nop			; (mov r8, r8)
2000022c:	46bd      	mov	sp, r7
2000022e:	bd80      	pop	{r7, pc}

20000230 <ascii_write_char>:

void ascii_write_char (unsigned char character){
20000230:	b580      	push	{r7, lr}
20000232:	b082      	sub	sp, #8
20000234:	af00      	add	r7, sp, #0
20000236:	0002      	movs	r2, r0
20000238:	1dfb      	adds	r3, r7, #7
2000023a:	701a      	strb	r2, [r3, #0]
	//while ((ascii_read_status() & (1<<7))){};
	
	while ((ascii_read_status() & 0x80) == 0x80) {};
2000023c:	46c0      	nop			; (mov r8, r8)
2000023e:	f7ff ff79 	bl	20000134 <ascii_read_status>
20000242:	0003      	movs	r3, r0
20000244:	001a      	movs	r2, r3
20000246:	2380      	movs	r3, #128	; 0x80
20000248:	4013      	ands	r3, r2
2000024a:	2b80      	cmp	r3, #128	; 0x80
2000024c:	d0f7      	beq.n	2000023e <ascii_write_char+0xe>
		delay_micro(8);
2000024e:	2008      	movs	r0, #8
20000250:	f000 fa12 	bl	20000678 <delay_micro>
		ascii_write_data(character);
20000254:	1dfb      	adds	r3, r7, #7
20000256:	781b      	ldrb	r3, [r3, #0]
20000258:	0018      	movs	r0, r3
2000025a:	f7ff ff56 	bl	2000010a <ascii_write_data>
		delay_micro(40);
2000025e:	2028      	movs	r0, #40	; 0x28
20000260:	f000 fa0a 	bl	20000678 <delay_micro>
}
20000264:	46c0      	nop			; (mov r8, r8)
20000266:	46bd      	mov	sp, r7
20000268:	b002      	add	sp, #8
2000026a:	bd80      	pop	{r7, pc}

2000026c <ascii_gotoxy>:

void ascii_gotoxy(int x,int y){ //x = rad, y = column
2000026c:	b580      	push	{r7, lr}
2000026e:	b084      	sub	sp, #16
20000270:	af00      	add	r7, sp, #0
20000272:	6078      	str	r0, [r7, #4]
20000274:	6039      	str	r1, [r7, #0]
	unsigned char adress = 0;
20000276:	210f      	movs	r1, #15
20000278:	187b      	adds	r3, r7, r1
2000027a:	2200      	movs	r2, #0
2000027c:	701a      	strb	r2, [r3, #0]
	adress = x-1;
2000027e:	687b      	ldr	r3, [r7, #4]
20000280:	b2da      	uxtb	r2, r3
20000282:	187b      	adds	r3, r7, r1
20000284:	3a01      	subs	r2, #1
20000286:	701a      	strb	r2, [r3, #0]
	
	if(y==2)
20000288:	683b      	ldr	r3, [r7, #0]
2000028a:	2b02      	cmp	r3, #2
2000028c:	d105      	bne.n	2000029a <ascii_gotoxy+0x2e>
		adress = adress + 0x40;
2000028e:	220f      	movs	r2, #15
20000290:	18bb      	adds	r3, r7, r2
20000292:	18ba      	adds	r2, r7, r2
20000294:	7812      	ldrb	r2, [r2, #0]
20000296:	3240      	adds	r2, #64	; 0x40
20000298:	701a      	strb	r2, [r3, #0]
		
	ascii_write_command(0x80 | adress);
2000029a:	230f      	movs	r3, #15
2000029c:	18fb      	adds	r3, r7, r3
2000029e:	781b      	ldrb	r3, [r3, #0]
200002a0:	2280      	movs	r2, #128	; 0x80
200002a2:	4252      	negs	r2, r2
200002a4:	4313      	orrs	r3, r2
200002a6:	b2db      	uxtb	r3, r3
200002a8:	0018      	movs	r0, r3
200002aa:	f7ff ff19 	bl	200000e0 <ascii_write_command>
200002ae:	46c0      	nop			; (mov r8, r8)
200002b0:	46bd      	mov	sp, r7
200002b2:	b004      	add	sp, #16
200002b4:	bd80      	pop	{r7, pc}
200002b6:	46c0      	nop			; (mov r8, r8)

200002b8 <load_sprite>:
//void(*move)(struct sprite *);
//void(*set_speed)(struct tObj *, int, int);
} sprite;

static void load_sprite(sprite* s, unsigned char* data, int width, int height)
{
200002b8:	b580      	push	{r7, lr}
200002ba:	b084      	sub	sp, #16
200002bc:	af00      	add	r7, sp, #0
200002be:	60f8      	str	r0, [r7, #12]
200002c0:	60b9      	str	r1, [r7, #8]
200002c2:	607a      	str	r2, [r7, #4]
200002c4:	603b      	str	r3, [r7, #0]
s->width = width;
200002c6:	687b      	ldr	r3, [r7, #4]
200002c8:	b2da      	uxtb	r2, r3
200002ca:	68fb      	ldr	r3, [r7, #12]
200002cc:	701a      	strb	r2, [r3, #0]
s->height = height;
200002ce:	683b      	ldr	r3, [r7, #0]
200002d0:	b2da      	uxtb	r2, r3
200002d2:	68fb      	ldr	r3, [r7, #12]
200002d4:	705a      	strb	r2, [r3, #1]
s->data = data;
200002d6:	68fb      	ldr	r3, [r7, #12]
200002d8:	68ba      	ldr	r2, [r7, #8]
200002da:	605a      	str	r2, [r3, #4]
}
200002dc:	46c0      	nop			; (mov r8, r8)
200002de:	46bd      	mov	sp, r7
200002e0:	b004      	add	sp, #16
200002e2:	bd80      	pop	{r7, pc}

200002e4 <draw_sprite>:

void draw_sprite(sprite* s, int x, int y, int set) {
200002e4:	b580      	push	{r7, lr}
200002e6:	b08a      	sub	sp, #40	; 0x28
200002e8:	af00      	add	r7, sp, #0
200002ea:	60f8      	str	r0, [r7, #12]
200002ec:	60b9      	str	r1, [r7, #8]
200002ee:	607a      	str	r2, [r7, #4]
200002f0:	603b      	str	r3, [r7, #0]
int i,j,k, width_in_bytes;
if (s->width % 8 == 0)
200002f2:	68fb      	ldr	r3, [r7, #12]
200002f4:	781b      	ldrb	r3, [r3, #0]
200002f6:	2207      	movs	r2, #7
200002f8:	4013      	ands	r3, r2
200002fa:	b2db      	uxtb	r3, r3
200002fc:	2b00      	cmp	r3, #0
200002fe:	d105      	bne.n	2000030c <draw_sprite+0x28>
width_in_bytes = s->width / 8;
20000300:	68fb      	ldr	r3, [r7, #12]
20000302:	781b      	ldrb	r3, [r3, #0]
20000304:	08db      	lsrs	r3, r3, #3
20000306:	b2db      	uxtb	r3, r3
20000308:	61bb      	str	r3, [r7, #24]
2000030a:	e005      	b.n	20000318 <draw_sprite+0x34>
else
width_in_bytes = s->width / 8 + 1;
2000030c:	68fb      	ldr	r3, [r7, #12]
2000030e:	781b      	ldrb	r3, [r3, #0]
20000310:	08db      	lsrs	r3, r3, #3
20000312:	b2db      	uxtb	r3, r3
20000314:	3301      	adds	r3, #1
20000316:	61bb      	str	r3, [r7, #24]
for (i = 0; i < s->height; i++)
20000318:	2300      	movs	r3, #0
2000031a:	627b      	str	r3, [r7, #36]	; 0x24
2000031c:	e039      	b.n	20000392 <draw_sprite+0xae>
for (j = 0; j < width_in_bytes; j++) {
2000031e:	2300      	movs	r3, #0
20000320:	623b      	str	r3, [r7, #32]
20000322:	e02f      	b.n	20000384 <draw_sprite+0xa0>
unsigned char byte = s->data[i * width_in_bytes + j];
20000324:	68fb      	ldr	r3, [r7, #12]
20000326:	685b      	ldr	r3, [r3, #4]
20000328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000032a:	69b9      	ldr	r1, [r7, #24]
2000032c:	4351      	muls	r1, r2
2000032e:	6a3a      	ldr	r2, [r7, #32]
20000330:	188a      	adds	r2, r1, r2
20000332:	189a      	adds	r2, r3, r2
20000334:	2317      	movs	r3, #23
20000336:	18fb      	adds	r3, r7, r3
20000338:	7812      	ldrb	r2, [r2, #0]
2000033a:	701a      	strb	r2, [r3, #0]
for (k =0; k < 8; k++) {
2000033c:	2300      	movs	r3, #0
2000033e:	61fb      	str	r3, [r7, #28]
20000340:	e01a      	b.n	20000378 <draw_sprite+0x94>
if (byte & (1 << k))
20000342:	2317      	movs	r3, #23
20000344:	18fb      	adds	r3, r7, r3
20000346:	781a      	ldrb	r2, [r3, #0]
20000348:	69fb      	ldr	r3, [r7, #28]
2000034a:	411a      	asrs	r2, r3
2000034c:	0013      	movs	r3, r2
2000034e:	2201      	movs	r2, #1
20000350:	4013      	ands	r3, r2
20000352:	d00e      	beq.n	20000372 <draw_sprite+0x8e>
pixel(8 * j + k + x + 1, i + y + 1);
20000354:	6a3b      	ldr	r3, [r7, #32]
20000356:	00da      	lsls	r2, r3, #3
20000358:	69fb      	ldr	r3, [r7, #28]
2000035a:	18d2      	adds	r2, r2, r3
2000035c:	68bb      	ldr	r3, [r7, #8]
2000035e:	18d3      	adds	r3, r2, r3
20000360:	3301      	adds	r3, #1
20000362:	0018      	movs	r0, r3
20000364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000366:	687b      	ldr	r3, [r7, #4]
20000368:	18d3      	adds	r3, r2, r3
2000036a:	3301      	adds	r3, #1
2000036c:	0019      	movs	r1, r3
2000036e:	f000 fc8b 	bl	20000c88 <pixel>
for (k =0; k < 8; k++) {
20000372:	69fb      	ldr	r3, [r7, #28]
20000374:	3301      	adds	r3, #1
20000376:	61fb      	str	r3, [r7, #28]
20000378:	69fb      	ldr	r3, [r7, #28]
2000037a:	2b07      	cmp	r3, #7
2000037c:	dde1      	ble.n	20000342 <draw_sprite+0x5e>
for (j = 0; j < width_in_bytes; j++) {
2000037e:	6a3b      	ldr	r3, [r7, #32]
20000380:	3301      	adds	r3, #1
20000382:	623b      	str	r3, [r7, #32]
20000384:	6a3a      	ldr	r2, [r7, #32]
20000386:	69bb      	ldr	r3, [r7, #24]
20000388:	429a      	cmp	r2, r3
2000038a:	dbcb      	blt.n	20000324 <draw_sprite+0x40>
for (i = 0; i < s->height; i++)
2000038c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000038e:	3301      	adds	r3, #1
20000390:	627b      	str	r3, [r7, #36]	; 0x24
20000392:	68fb      	ldr	r3, [r7, #12]
20000394:	785b      	ldrb	r3, [r3, #1]
20000396:	001a      	movs	r2, r3
20000398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000039a:	4293      	cmp	r3, r2
2000039c:	dbbf      	blt.n	2000031e <draw_sprite+0x3a>
}
}
}
2000039e:	46c0      	nop			; (mov r8, r8)
200003a0:	46bd      	mov	sp, r7
200003a2:	b00a      	add	sp, #40	; 0x28
200003a4:	bd80      	pop	{r7, pc}

200003a6 <ascii_message>:
	clear_object,
	move_object,
	set_object_speed
};

void ascii_message(){
200003a6:	b5b0      	push	{r4, r5, r7, lr}
200003a8:	b088      	sub	sp, #32
200003aa:	af00      	add	r7, sp, #0
	char *s;
	char test1[] = "Welcome ";
200003ac:	2410      	movs	r4, #16
200003ae:	193b      	adds	r3, r7, r4
200003b0:	4a19      	ldr	r2, [pc, #100]	; (20000418 <ascii_message+0x72>)
200003b2:	ca03      	ldmia	r2!, {r0, r1}
200003b4:	c303      	stmia	r3!, {r0, r1}
200003b6:	7812      	ldrb	r2, [r2, #0]
200003b8:	701a      	strb	r2, [r3, #0]
	char test2[] = "to the game!";
200003ba:	003b      	movs	r3, r7
200003bc:	4a17      	ldr	r2, [pc, #92]	; (2000041c <ascii_message+0x76>)
200003be:	ca23      	ldmia	r2!, {r0, r1, r5}
200003c0:	c323      	stmia	r3!, {r0, r1, r5}
200003c2:	7812      	ldrb	r2, [r2, #0]
200003c4:	701a      	strb	r2, [r3, #0]
	ascii_gotoxy(1,1);
200003c6:	2101      	movs	r1, #1
200003c8:	2001      	movs	r0, #1
200003ca:	f7ff ff4f 	bl	2000026c <ascii_gotoxy>
	s = test1;
200003ce:	193b      	adds	r3, r7, r4
200003d0:	61fb      	str	r3, [r7, #28]
	while (*s){
200003d2:	e006      	b.n	200003e2 <ascii_message+0x3c>
		ascii_write_char(*s++); // ascii_write_char
200003d4:	69fb      	ldr	r3, [r7, #28]
200003d6:	1c5a      	adds	r2, r3, #1
200003d8:	61fa      	str	r2, [r7, #28]
200003da:	781b      	ldrb	r3, [r3, #0]
200003dc:	0018      	movs	r0, r3
200003de:	f7ff ff27 	bl	20000230 <ascii_write_char>
	while (*s){
200003e2:	69fb      	ldr	r3, [r7, #28]
200003e4:	781b      	ldrb	r3, [r3, #0]
200003e6:	2b00      	cmp	r3, #0
200003e8:	d1f4      	bne.n	200003d4 <ascii_message+0x2e>
	}
	ascii_gotoxy(1,2);
200003ea:	2102      	movs	r1, #2
200003ec:	2001      	movs	r0, #1
200003ee:	f7ff ff3d 	bl	2000026c <ascii_gotoxy>
	s = test2;
200003f2:	003b      	movs	r3, r7
200003f4:	61fb      	str	r3, [r7, #28]
	while (*s){
200003f6:	e006      	b.n	20000406 <ascii_message+0x60>
		ascii_write_char(*s++); // ascii_write_char
200003f8:	69fb      	ldr	r3, [r7, #28]
200003fa:	1c5a      	adds	r2, r3, #1
200003fc:	61fa      	str	r2, [r7, #28]
200003fe:	781b      	ldrb	r3, [r3, #0]
20000400:	0018      	movs	r0, r3
20000402:	f7ff ff15 	bl	20000230 <ascii_write_char>
	while (*s){
20000406:	69fb      	ldr	r3, [r7, #28]
20000408:	781b      	ldrb	r3, [r3, #0]
2000040a:	2b00      	cmp	r3, #0
2000040c:	d1f4      	bne.n	200003f8 <ascii_message+0x52>
	}
}
2000040e:	46c0      	nop			; (mov r8, r8)
20000410:	46bd      	mov	sp, r7
20000412:	b008      	add	sp, #32
20000414:	bdb0      	pop	{r4, r5, r7, pc}
20000416:	46c0      	nop			; (mov r8, r8)
20000418:	200017c8 	andcs	r1, r0, r8, asr #15
2000041c:	200017d4 	ldrdcs	r1, [r0], -r4

20000420 <init_spel>:

void init_spel(){
20000420:	b580      	push	{r7, lr}
20000422:	af00      	add	r7, sp, #0
	GPIO_MODER_E = 0x55555555;
20000424:	4b03      	ldr	r3, [pc, #12]	; (20000434 <init_spel+0x14>)
20000426:	4a04      	ldr	r2, [pc, #16]	; (20000438 <init_spel+0x18>)
20000428:	601a      	str	r2, [r3, #0]
	ascii_init();
2000042a:	f7ff fee4 	bl	200001f6 <ascii_init>
	//ascii_message();
}
2000042e:	46c0      	nop			; (mov r8, r8)
20000430:	46bd      	mov	sp, r7
20000432:	bd80      	pop	{r7, pc}
20000434:	40021000 	andmi	r1, r2, r0
20000438:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000043c <main>:


int main(int argc, char **argv)
{
2000043c:	b580      	push	{r7, lr}
2000043e:	b086      	sub	sp, #24
20000440:	af00      	add	r7, sp, #0
20000442:	6078      	str	r0, [r7, #4]
20000444:	6039      	str	r1, [r7, #0]
	init_spel();
20000446:	f7ff ffeb 	bl	20000420 <init_spel>
	POBJECT p = &ball;
2000044a:	4b17      	ldr	r3, [pc, #92]	; (200004a8 <main+0x6c>)
2000044c:	617b      	str	r3, [r7, #20]
	sprite* plant;
	sprite* backGround;
	sprite* ship;
	graphic_init();
2000044e:	f000 fbc3 	bl	20000bd8 <graphic_init>
#ifndef	SIMULATOR
	graphic_clear_screen();
#endif
	
	load_sprite(plant, plant_bits, plant_width, plant_height);
20000452:	4916      	ldr	r1, [pc, #88]	; (200004ac <main+0x70>)
20000454:	6938      	ldr	r0, [r7, #16]
20000456:	230a      	movs	r3, #10
20000458:	2207      	movs	r2, #7
2000045a:	f7ff ff2d 	bl	200002b8 <load_sprite>
	load_sprite(ship, ship_bits, ship_width, ship_height);
2000045e:	4914      	ldr	r1, [pc, #80]	; (200004b0 <main+0x74>)
20000460:	68f8      	ldr	r0, [r7, #12]
20000462:	2314      	movs	r3, #20
20000464:	2214      	movs	r2, #20
20000466:	f7ff ff27 	bl	200002b8 <load_sprite>
	
//	plant->set_speed(plant, 5, 10); //assa
	p->set_speed(p, 12, 20);
2000046a:	697b      	ldr	r3, [r7, #20]
2000046c:	6a1b      	ldr	r3, [r3, #32]
2000046e:	6978      	ldr	r0, [r7, #20]
20000470:	2214      	movs	r2, #20
20000472:	210c      	movs	r1, #12
20000474:	4798      	blx	r3
	while(1){
		clear_backBuffer();
20000476:	f000 fcb1 	bl	20000ddc <clear_backBuffer>
		p->move(p);
2000047a:	697b      	ldr	r3, [r7, #20]
2000047c:	69db      	ldr	r3, [r3, #28]
2000047e:	697a      	ldr	r2, [r7, #20]
20000480:	0010      	movs	r0, r2
20000482:	4798      	blx	r3
		draw_sprite(plant, 50, 50, 1);
20000484:	6938      	ldr	r0, [r7, #16]
20000486:	2301      	movs	r3, #1
20000488:	2232      	movs	r2, #50	; 0x32
2000048a:	2132      	movs	r1, #50	; 0x32
2000048c:	f7ff ff2a 	bl	200002e4 <draw_sprite>
		draw_sprite(ship, 40, 20, 1);
20000490:	68f8      	ldr	r0, [r7, #12]
20000492:	2301      	movs	r3, #1
20000494:	2214      	movs	r2, #20
20000496:	2128      	movs	r1, #40	; 0x28
20000498:	f7ff ff24 	bl	200002e4 <draw_sprite>
//		plant->move(plant);
		graphic_draw_screen();
2000049c:	f000 fc38 	bl	20000d10 <graphic_draw_screen>
		//delay_milli(40); //25 fps
		graphic_clear_screen();
200004a0:	f000 fbc6 	bl	20000c30 <graphic_clear_screen>
		clear_backBuffer();
200004a4:	e7e7      	b.n	20000476 <main+0x3a>
200004a6:	46c0      	nop			; (mov r8, r8)
200004a8:	200017a4 	andcs	r1, r0, r4, lsr #15
200004ac:	20001328 	andcs	r1, r0, r8, lsr #6
200004b0:	20001734 	andcs	r1, r0, r4, lsr r7

200004b4 <set_object_speed>:
#include "game_startup.h"

void set_object_speed(POBJECT o, int speedx, int speedy){
200004b4:	b580      	push	{r7, lr}
200004b6:	b084      	sub	sp, #16
200004b8:	af00      	add	r7, sp, #0
200004ba:	60f8      	str	r0, [r7, #12]
200004bc:	60b9      	str	r1, [r7, #8]
200004be:	607a      	str	r2, [r7, #4]
	o->dirx = speedx;
200004c0:	68fb      	ldr	r3, [r7, #12]
200004c2:	68ba      	ldr	r2, [r7, #8]
200004c4:	605a      	str	r2, [r3, #4]
	o->diry = speedy;
200004c6:	68fb      	ldr	r3, [r7, #12]
200004c8:	687a      	ldr	r2, [r7, #4]
200004ca:	609a      	str	r2, [r3, #8]
}	
200004cc:	46c0      	nop			; (mov r8, r8)
200004ce:	46bd      	mov	sp, r7
200004d0:	b004      	add	sp, #16
200004d2:	bd80      	pop	{r7, pc}

200004d4 <draw_object>:
 
void draw_object(POBJECT o){
200004d4:	b580      	push	{r7, lr}
200004d6:	b084      	sub	sp, #16
200004d8:	af00      	add	r7, sp, #0
200004da:	6078      	str	r0, [r7, #4]
	for(int i= 0; i<= o->geo->numpoints; i++){
200004dc:	2300      	movs	r3, #0
200004de:	60fb      	str	r3, [r7, #12]
200004e0:	e01c      	b.n	2000051c <draw_object+0x48>
		pixel(o->posx + o->geo->px[i].x, o->posy + o->geo->px[i].y);
200004e2:	687b      	ldr	r3, [r7, #4]
200004e4:	68da      	ldr	r2, [r3, #12]
200004e6:	687b      	ldr	r3, [r7, #4]
200004e8:	6819      	ldr	r1, [r3, #0]
200004ea:	68fb      	ldr	r3, [r7, #12]
200004ec:	3304      	adds	r3, #4
200004ee:	005b      	lsls	r3, r3, #1
200004f0:	18cb      	adds	r3, r1, r3
200004f2:	3304      	adds	r3, #4
200004f4:	781b      	ldrb	r3, [r3, #0]
200004f6:	18d3      	adds	r3, r2, r3
200004f8:	0018      	movs	r0, r3
200004fa:	687b      	ldr	r3, [r7, #4]
200004fc:	691a      	ldr	r2, [r3, #16]
200004fe:	687b      	ldr	r3, [r7, #4]
20000500:	6819      	ldr	r1, [r3, #0]
20000502:	68fb      	ldr	r3, [r7, #12]
20000504:	3304      	adds	r3, #4
20000506:	005b      	lsls	r3, r3, #1
20000508:	18cb      	adds	r3, r1, r3
2000050a:	3305      	adds	r3, #5
2000050c:	781b      	ldrb	r3, [r3, #0]
2000050e:	18d3      	adds	r3, r2, r3
20000510:	0019      	movs	r1, r3
20000512:	f000 fbb9 	bl	20000c88 <pixel>
	for(int i= 0; i<= o->geo->numpoints; i++){
20000516:	68fb      	ldr	r3, [r7, #12]
20000518:	3301      	adds	r3, #1
2000051a:	60fb      	str	r3, [r7, #12]
2000051c:	687b      	ldr	r3, [r7, #4]
2000051e:	681b      	ldr	r3, [r3, #0]
20000520:	681b      	ldr	r3, [r3, #0]
20000522:	68fa      	ldr	r2, [r7, #12]
20000524:	429a      	cmp	r2, r3
20000526:	dddc      	ble.n	200004e2 <draw_object+0xe>
	}
}
20000528:	46c0      	nop			; (mov r8, r8)
2000052a:	46bd      	mov	sp, r7
2000052c:	b004      	add	sp, #16
2000052e:	bd80      	pop	{r7, pc}

20000530 <clear_object>:


void clear_object(POBJECT o){
20000530:	b580      	push	{r7, lr}
20000532:	b084      	sub	sp, #16
20000534:	af00      	add	r7, sp, #0
20000536:	6078      	str	r0, [r7, #4]
	for(int i= 0; i<= o->geo->numpoints; i++){
20000538:	2300      	movs	r3, #0
2000053a:	60fb      	str	r3, [r7, #12]
2000053c:	e01c      	b.n	20000578 <clear_object+0x48>
		 pixel(o->posx + o->geo->px[i].x, o->posy + o->geo->px[i].y);
2000053e:	687b      	ldr	r3, [r7, #4]
20000540:	68da      	ldr	r2, [r3, #12]
20000542:	687b      	ldr	r3, [r7, #4]
20000544:	6819      	ldr	r1, [r3, #0]
20000546:	68fb      	ldr	r3, [r7, #12]
20000548:	3304      	adds	r3, #4
2000054a:	005b      	lsls	r3, r3, #1
2000054c:	18cb      	adds	r3, r1, r3
2000054e:	3304      	adds	r3, #4
20000550:	781b      	ldrb	r3, [r3, #0]
20000552:	18d3      	adds	r3, r2, r3
20000554:	0018      	movs	r0, r3
20000556:	687b      	ldr	r3, [r7, #4]
20000558:	691a      	ldr	r2, [r3, #16]
2000055a:	687b      	ldr	r3, [r7, #4]
2000055c:	6819      	ldr	r1, [r3, #0]
2000055e:	68fb      	ldr	r3, [r7, #12]
20000560:	3304      	adds	r3, #4
20000562:	005b      	lsls	r3, r3, #1
20000564:	18cb      	adds	r3, r1, r3
20000566:	3305      	adds	r3, #5
20000568:	781b      	ldrb	r3, [r3, #0]
2000056a:	18d3      	adds	r3, r2, r3
2000056c:	0019      	movs	r1, r3
2000056e:	f000 fb8b 	bl	20000c88 <pixel>
	for(int i= 0; i<= o->geo->numpoints; i++){
20000572:	68fb      	ldr	r3, [r7, #12]
20000574:	3301      	adds	r3, #1
20000576:	60fb      	str	r3, [r7, #12]
20000578:	687b      	ldr	r3, [r7, #4]
2000057a:	681b      	ldr	r3, [r3, #0]
2000057c:	681b      	ldr	r3, [r3, #0]
2000057e:	68fa      	ldr	r2, [r7, #12]
20000580:	429a      	cmp	r2, r3
20000582:	dddc      	ble.n	2000053e <clear_object+0xe>
	}
}
20000584:	46c0      	nop			; (mov r8, r8)
20000586:	46bd      	mov	sp, r7
20000588:	b004      	add	sp, #16
2000058a:	bd80      	pop	{r7, pc}

2000058c <move_object>:

void move_object(POBJECT o){
2000058c:	b590      	push	{r4, r7, lr}
2000058e:	b083      	sub	sp, #12
20000590:	af00      	add	r7, sp, #0
20000592:	6078      	str	r0, [r7, #4]
//	o->clear(o);
	
	if(o->posx < 1)
20000594:	687b      	ldr	r3, [r7, #4]
20000596:	68db      	ldr	r3, [r3, #12]
20000598:	2b00      	cmp	r3, #0
2000059a:	dc09      	bgt.n	200005b0 <move_object+0x24>
		o->set_speed(o, o->dirx*(-1), o->diry);
2000059c:	687b      	ldr	r3, [r7, #4]
2000059e:	6a1c      	ldr	r4, [r3, #32]
200005a0:	687b      	ldr	r3, [r7, #4]
200005a2:	685b      	ldr	r3, [r3, #4]
200005a4:	4259      	negs	r1, r3
200005a6:	687b      	ldr	r3, [r7, #4]
200005a8:	689a      	ldr	r2, [r3, #8]
200005aa:	687b      	ldr	r3, [r7, #4]
200005ac:	0018      	movs	r0, r3
200005ae:	47a0      	blx	r4
	
	if(o->posx > 128)
200005b0:	687b      	ldr	r3, [r7, #4]
200005b2:	68db      	ldr	r3, [r3, #12]
200005b4:	2b80      	cmp	r3, #128	; 0x80
200005b6:	dd09      	ble.n	200005cc <move_object+0x40>
		o->set_speed(o, -o->dirx, o->diry);
200005b8:	687b      	ldr	r3, [r7, #4]
200005ba:	6a1c      	ldr	r4, [r3, #32]
200005bc:	687b      	ldr	r3, [r7, #4]
200005be:	685b      	ldr	r3, [r3, #4]
200005c0:	4259      	negs	r1, r3
200005c2:	687b      	ldr	r3, [r7, #4]
200005c4:	689a      	ldr	r2, [r3, #8]
200005c6:	687b      	ldr	r3, [r7, #4]
200005c8:	0018      	movs	r0, r3
200005ca:	47a0      	blx	r4
		
	if(o->posy < 1)
200005cc:	687b      	ldr	r3, [r7, #4]
200005ce:	691b      	ldr	r3, [r3, #16]
200005d0:	2b00      	cmp	r3, #0
200005d2:	dc09      	bgt.n	200005e8 <move_object+0x5c>
		o->set_speed(o, o->dirx, -o->diry);
200005d4:	687b      	ldr	r3, [r7, #4]
200005d6:	6a1c      	ldr	r4, [r3, #32]
200005d8:	687b      	ldr	r3, [r7, #4]
200005da:	6859      	ldr	r1, [r3, #4]
200005dc:	687b      	ldr	r3, [r7, #4]
200005de:	689b      	ldr	r3, [r3, #8]
200005e0:	425a      	negs	r2, r3
200005e2:	687b      	ldr	r3, [r7, #4]
200005e4:	0018      	movs	r0, r3
200005e6:	47a0      	blx	r4
		
	if(o->posy > 64)
200005e8:	687b      	ldr	r3, [r7, #4]
200005ea:	691b      	ldr	r3, [r3, #16]
200005ec:	2b40      	cmp	r3, #64	; 0x40
200005ee:	dd09      	ble.n	20000604 <move_object+0x78>
		o->set_speed(o, o->dirx, -o->diry);
200005f0:	687b      	ldr	r3, [r7, #4]
200005f2:	6a1c      	ldr	r4, [r3, #32]
200005f4:	687b      	ldr	r3, [r7, #4]
200005f6:	6859      	ldr	r1, [r3, #4]
200005f8:	687b      	ldr	r3, [r7, #4]
200005fa:	689b      	ldr	r3, [r3, #8]
200005fc:	425a      	negs	r2, r3
200005fe:	687b      	ldr	r3, [r7, #4]
20000600:	0018      	movs	r0, r3
20000602:	47a0      	blx	r4
	
	o->posx = o->posx + o->dirx;
20000604:	687b      	ldr	r3, [r7, #4]
20000606:	68da      	ldr	r2, [r3, #12]
20000608:	687b      	ldr	r3, [r7, #4]
2000060a:	685b      	ldr	r3, [r3, #4]
2000060c:	18d2      	adds	r2, r2, r3
2000060e:	687b      	ldr	r3, [r7, #4]
20000610:	60da      	str	r2, [r3, #12]
	o->posy = o->posy + o->diry;
20000612:	687b      	ldr	r3, [r7, #4]
20000614:	691a      	ldr	r2, [r3, #16]
20000616:	687b      	ldr	r3, [r7, #4]
20000618:	689b      	ldr	r3, [r3, #8]
2000061a:	18d2      	adds	r2, r2, r3
2000061c:	687b      	ldr	r3, [r7, #4]
2000061e:	611a      	str	r2, [r3, #16]
	o->draw(o);
20000620:	687b      	ldr	r3, [r7, #4]
20000622:	695b      	ldr	r3, [r3, #20]
20000624:	687a      	ldr	r2, [r7, #4]
20000626:	0010      	movs	r0, r2
20000628:	4798      	blx	r3
2000062a:	46c0      	nop			; (mov r8, r8)
2000062c:	46bd      	mov	sp, r7
2000062e:	b003      	add	sp, #12
20000630:	bd90      	pop	{r4, r7, pc}
	...

20000634 <delay_250ns>:
 *
 */

#include "game_startup.h"

void delay_250ns(void){
20000634:	b580      	push	{r7, lr}
20000636:	af00      	add	r7, sp, #0
	STK_CTRL = 0;
20000638:	4b0c      	ldr	r3, [pc, #48]	; (2000066c <delay_250ns+0x38>)
2000063a:	2200      	movs	r2, #0
2000063c:	601a      	str	r2, [r3, #0]
	STK_LOAD = ((168/4) - 1);
2000063e:	4b0c      	ldr	r3, [pc, #48]	; (20000670 <delay_250ns+0x3c>)
20000640:	2229      	movs	r2, #41	; 0x29
20000642:	601a      	str	r2, [r3, #0]
	STK_VAL = 0;
20000644:	4b0b      	ldr	r3, [pc, #44]	; (20000674 <delay_250ns+0x40>)
20000646:	2200      	movs	r2, #0
20000648:	601a      	str	r2, [r3, #0]
	STK_CTRL = 5;
2000064a:	4b08      	ldr	r3, [pc, #32]	; (2000066c <delay_250ns+0x38>)
2000064c:	2205      	movs	r2, #5
2000064e:	601a      	str	r2, [r3, #0]
	
	while((STK_CTRL & 0x10000) == 0){};
20000650:	46c0      	nop			; (mov r8, r8)
20000652:	4b06      	ldr	r3, [pc, #24]	; (2000066c <delay_250ns+0x38>)
20000654:	681a      	ldr	r2, [r3, #0]
20000656:	2380      	movs	r3, #128	; 0x80
20000658:	025b      	lsls	r3, r3, #9
2000065a:	4013      	ands	r3, r2
2000065c:	d0f9      	beq.n	20000652 <delay_250ns+0x1e>
	STK_CTRL = 0;
2000065e:	4b03      	ldr	r3, [pc, #12]	; (2000066c <delay_250ns+0x38>)
20000660:	2200      	movs	r2, #0
20000662:	601a      	str	r2, [r3, #0]
}
20000664:	46c0      	nop			; (mov r8, r8)
20000666:	46bd      	mov	sp, r7
20000668:	bd80      	pop	{r7, pc}
2000066a:	46c0      	nop			; (mov r8, r8)
2000066c:	e000e010 	and	lr, r0, r0, lsl r0
20000670:	e000e014 	and	lr, r0, r4, lsl r0
20000674:	e000e018 	and	lr, r0, r8, lsl r0

20000678 <delay_micro>:

void delay_micro(unsigned int us){
20000678:	b580      	push	{r7, lr}
2000067a:	b082      	sub	sp, #8
2000067c:	af00      	add	r7, sp, #0
2000067e:	6078      	str	r0, [r7, #4]
	while(us--){
20000680:	e007      	b.n	20000692 <delay_micro+0x1a>
		delay_250ns();
20000682:	f7ff ffd7 	bl	20000634 <delay_250ns>
		delay_250ns();
20000686:	f7ff ffd5 	bl	20000634 <delay_250ns>
		delay_250ns(); 
2000068a:	f7ff ffd3 	bl	20000634 <delay_250ns>
		delay_250ns();
2000068e:	f7ff ffd1 	bl	20000634 <delay_250ns>
	while(us--){
20000692:	687b      	ldr	r3, [r7, #4]
20000694:	1e5a      	subs	r2, r3, #1
20000696:	607a      	str	r2, [r7, #4]
20000698:	2b00      	cmp	r3, #0
2000069a:	d1f2      	bne.n	20000682 <delay_micro+0xa>
	}
}
2000069c:	46c0      	nop			; (mov r8, r8)
2000069e:	46bd      	mov	sp, r7
200006a0:	b002      	add	sp, #8
200006a2:	bd80      	pop	{r7, pc}

200006a4 <delay_milli>:

void delay_milli(unsigned int ms){
200006a4:	b580      	push	{r7, lr}
200006a6:	b082      	sub	sp, #8
200006a8:	af00      	add	r7, sp, #0
200006aa:	6078      	str	r0, [r7, #4]

#ifdef SIMULATOR
	ms = ms / 100;
200006ac:	687b      	ldr	r3, [r7, #4]
200006ae:	2164      	movs	r1, #100	; 0x64
200006b0:	0018      	movs	r0, r3
200006b2:	f000 fbad 	bl	20000e10 <__udivsi3>
200006b6:	0003      	movs	r3, r0
200006b8:	607b      	str	r3, [r7, #4]
	ms++;
200006ba:	687b      	ldr	r3, [r7, #4]
200006bc:	3301      	adds	r3, #1
200006be:	607b      	str	r3, [r7, #4]
#endif
	
	while( ms-- )
200006c0:	e004      	b.n	200006cc <delay_milli+0x28>
		delay_micro(1000);
200006c2:	23fa      	movs	r3, #250	; 0xfa
200006c4:	009b      	lsls	r3, r3, #2
200006c6:	0018      	movs	r0, r3
200006c8:	f7ff ffd6 	bl	20000678 <delay_micro>
	while( ms-- )
200006cc:	687b      	ldr	r3, [r7, #4]
200006ce:	1e5a      	subs	r2, r3, #1
200006d0:	607a      	str	r2, [r7, #4]
200006d2:	2b00      	cmp	r3, #0
200006d4:	d1f5      	bne.n	200006c2 <delay_milli+0x1e>
}
200006d6:	46c0      	nop			; (mov r8, r8)
200006d8:	46bd      	mov	sp, r7
200006da:	b002      	add	sp, #8
200006dc:	bd80      	pop	{r7, pc}

200006de <delay_500ns>:

void delay_500ns(void){
200006de:	b580      	push	{r7, lr}
200006e0:	af00      	add	r7, sp, #0
	delay_250ns();
200006e2:	f7ff ffa7 	bl	20000634 <delay_250ns>
	delay_250ns();
200006e6:	f7ff ffa5 	bl	20000634 <delay_250ns>
200006ea:	46c0      	nop			; (mov r8, r8)
200006ec:	46bd      	mov	sp, r7
200006ee:	bd80      	pop	{r7, pc}

200006f0 <keyb_init>:
 *
 */

#include "game_startup.h"

void keyb_init(void){
200006f0:	b580      	push	{r7, lr}
200006f2:	af00      	add	r7, sp, #0
#ifdef USBDM
	*((unsigned long *) 0x40023830) = 0x18; //starta clockor port E, D
	//__asm volatile ( " LDR R0,=0x8000209\n BLX R0 \n //initiera PLL");
#endif

	GPIO_MODER_D &= 0;
200006f4:	4b0c      	ldr	r3, [pc, #48]	; (20000728 <keyb_init+0x38>)
200006f6:	681b      	ldr	r3, [r3, #0]
200006f8:	4b0b      	ldr	r3, [pc, #44]	; (20000728 <keyb_init+0x38>)
200006fa:	2200      	movs	r2, #0
200006fc:	601a      	str	r2, [r3, #0]
	GPIO_MODER_D |= 0x55005555; //pin 1 - 8 display, pin 9 - 15 keyboard ( b0 - b3 input, b4 - b7 output) 
200006fe:	4b0a      	ldr	r3, [pc, #40]	; (20000728 <keyb_init+0x38>)
20000700:	681a      	ldr	r2, [r3, #0]
20000702:	4b09      	ldr	r3, [pc, #36]	; (20000728 <keyb_init+0x38>)
20000704:	4909      	ldr	r1, [pc, #36]	; (2000072c <keyb_init+0x3c>)
20000706:	430a      	orrs	r2, r1
20000708:	601a      	str	r2, [r3, #0]
	
	GPIO_OTYPER_D |= 0x0000; //push-pull output type
2000070a:	4a09      	ldr	r2, [pc, #36]	; (20000730 <keyb_init+0x40>)
2000070c:	4b08      	ldr	r3, [pc, #32]	; (20000730 <keyb_init+0x40>)
2000070e:	8812      	ldrh	r2, [r2, #0]
20000710:	b292      	uxth	r2, r2
20000712:	801a      	strh	r2, [r3, #0]
	
	GPIO_PUPDR_D |= 0x00AA0000; //pull-down input
20000714:	4b07      	ldr	r3, [pc, #28]	; (20000734 <keyb_init+0x44>)
20000716:	681a      	ldr	r2, [r3, #0]
20000718:	4b06      	ldr	r3, [pc, #24]	; (20000734 <keyb_init+0x44>)
2000071a:	21aa      	movs	r1, #170	; 0xaa
2000071c:	0409      	lsls	r1, r1, #16
2000071e:	430a      	orrs	r2, r1
20000720:	601a      	str	r2, [r3, #0]
}
20000722:	46c0      	nop			; (mov r8, r8)
20000724:	46bd      	mov	sp, r7
20000726:	bd80      	pop	{r7, pc}
20000728:	40020c00 	andmi	r0, r2, r0, lsl #24
2000072c:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
20000730:	40020c04 	andmi	r0, r2, r4, lsl #24
20000734:	40020c0c 	andmi	r0, r2, ip, lsl #24

20000738 <out7seg>:

void out7seg (unsigned char c){
20000738:	b580      	push	{r7, lr}
2000073a:	b082      	sub	sp, #8
2000073c:	af00      	add	r7, sp, #0
2000073e:	0002      	movs	r2, r0
20000740:	1dfb      	adds	r3, r7, #7
20000742:	701a      	strb	r2, [r3, #0]
	switch(c){
20000744:	1dfb      	adds	r3, r7, #7
20000746:	781b      	ldrb	r3, [r3, #0]
20000748:	2b0f      	cmp	r3, #15
2000074a:	d844      	bhi.n	200007d6 <out7seg+0x9e>
2000074c:	009a      	lsls	r2, r3, #2
2000074e:	4b26      	ldr	r3, [pc, #152]	; (200007e8 <out7seg+0xb0>)
20000750:	18d3      	adds	r3, r2, r3
20000752:	681b      	ldr	r3, [r3, #0]
20000754:	469f      	mov	pc, r3
		case 0: GPIO_ODR_D_LOW = 0x3F; break;
20000756:	4b25      	ldr	r3, [pc, #148]	; (200007ec <out7seg+0xb4>)
20000758:	223f      	movs	r2, #63	; 0x3f
2000075a:	701a      	strb	r2, [r3, #0]
2000075c:	e03f      	b.n	200007de <out7seg+0xa6>
		case 1: GPIO_ODR_D_LOW = 0x06; break;
2000075e:	4b23      	ldr	r3, [pc, #140]	; (200007ec <out7seg+0xb4>)
20000760:	2206      	movs	r2, #6
20000762:	701a      	strb	r2, [r3, #0]
20000764:	e03b      	b.n	200007de <out7seg+0xa6>
		case 2: GPIO_ODR_D_LOW = 0x5B; break;
20000766:	4b21      	ldr	r3, [pc, #132]	; (200007ec <out7seg+0xb4>)
20000768:	225b      	movs	r2, #91	; 0x5b
2000076a:	701a      	strb	r2, [r3, #0]
2000076c:	e037      	b.n	200007de <out7seg+0xa6>
		case 3: GPIO_ODR_D_LOW = 0x4F; break;
2000076e:	4b1f      	ldr	r3, [pc, #124]	; (200007ec <out7seg+0xb4>)
20000770:	224f      	movs	r2, #79	; 0x4f
20000772:	701a      	strb	r2, [r3, #0]
20000774:	e033      	b.n	200007de <out7seg+0xa6>
		case 4: GPIO_ODR_D_LOW = 0x66; break;
20000776:	4b1d      	ldr	r3, [pc, #116]	; (200007ec <out7seg+0xb4>)
20000778:	2266      	movs	r2, #102	; 0x66
2000077a:	701a      	strb	r2, [r3, #0]
2000077c:	e02f      	b.n	200007de <out7seg+0xa6>
		case 5: GPIO_ODR_D_LOW = 0x6D; break;
2000077e:	4b1b      	ldr	r3, [pc, #108]	; (200007ec <out7seg+0xb4>)
20000780:	226d      	movs	r2, #109	; 0x6d
20000782:	701a      	strb	r2, [r3, #0]
20000784:	e02b      	b.n	200007de <out7seg+0xa6>
		case 6: GPIO_ODR_D_LOW = 0x7D; break;
20000786:	4b19      	ldr	r3, [pc, #100]	; (200007ec <out7seg+0xb4>)
20000788:	227d      	movs	r2, #125	; 0x7d
2000078a:	701a      	strb	r2, [r3, #0]
2000078c:	e027      	b.n	200007de <out7seg+0xa6>
		case 7: GPIO_ODR_D_LOW = 0x07; break;
2000078e:	4b17      	ldr	r3, [pc, #92]	; (200007ec <out7seg+0xb4>)
20000790:	2207      	movs	r2, #7
20000792:	701a      	strb	r2, [r3, #0]
20000794:	e023      	b.n	200007de <out7seg+0xa6>
		case 8: GPIO_ODR_D_LOW = 0x7F; break;
20000796:	4b15      	ldr	r3, [pc, #84]	; (200007ec <out7seg+0xb4>)
20000798:	227f      	movs	r2, #127	; 0x7f
2000079a:	701a      	strb	r2, [r3, #0]
2000079c:	e01f      	b.n	200007de <out7seg+0xa6>
		case 9: GPIO_ODR_D_LOW = 0x6F; break;
2000079e:	4b13      	ldr	r3, [pc, #76]	; (200007ec <out7seg+0xb4>)
200007a0:	226f      	movs	r2, #111	; 0x6f
200007a2:	701a      	strb	r2, [r3, #0]
200007a4:	e01b      	b.n	200007de <out7seg+0xa6>
		case 0xA: GPIO_ODR_D_LOW = 0x77; break;
200007a6:	4b11      	ldr	r3, [pc, #68]	; (200007ec <out7seg+0xb4>)
200007a8:	2277      	movs	r2, #119	; 0x77
200007aa:	701a      	strb	r2, [r3, #0]
200007ac:	e017      	b.n	200007de <out7seg+0xa6>
		case 0xB: GPIO_ODR_D_LOW = 0x7C; break;
200007ae:	4b0f      	ldr	r3, [pc, #60]	; (200007ec <out7seg+0xb4>)
200007b0:	227c      	movs	r2, #124	; 0x7c
200007b2:	701a      	strb	r2, [r3, #0]
200007b4:	e013      	b.n	200007de <out7seg+0xa6>
		case 0xC: GPIO_ODR_D_LOW = 0x39; break;
200007b6:	4b0d      	ldr	r3, [pc, #52]	; (200007ec <out7seg+0xb4>)
200007b8:	2239      	movs	r2, #57	; 0x39
200007ba:	701a      	strb	r2, [r3, #0]
200007bc:	e00f      	b.n	200007de <out7seg+0xa6>
		case 0xD: GPIO_ODR_D_LOW = 0x3F; break;
200007be:	4b0b      	ldr	r3, [pc, #44]	; (200007ec <out7seg+0xb4>)
200007c0:	223f      	movs	r2, #63	; 0x3f
200007c2:	701a      	strb	r2, [r3, #0]
200007c4:	e00b      	b.n	200007de <out7seg+0xa6>
		case 0xE: GPIO_ODR_D_LOW = 0x79; break;
200007c6:	4b09      	ldr	r3, [pc, #36]	; (200007ec <out7seg+0xb4>)
200007c8:	2279      	movs	r2, #121	; 0x79
200007ca:	701a      	strb	r2, [r3, #0]
200007cc:	e007      	b.n	200007de <out7seg+0xa6>
		case 0xF: GPIO_ODR_D_LOW = 0x71; break;
200007ce:	4b07      	ldr	r3, [pc, #28]	; (200007ec <out7seg+0xb4>)
200007d0:	2271      	movs	r2, #113	; 0x71
200007d2:	701a      	strb	r2, [r3, #0]
200007d4:	e003      	b.n	200007de <out7seg+0xa6>
		
		default: GPIO_ODR_D_LOW = 0x00; break;
200007d6:	4b05      	ldr	r3, [pc, #20]	; (200007ec <out7seg+0xb4>)
200007d8:	2200      	movs	r2, #0
200007da:	701a      	strb	r2, [r3, #0]
200007dc:	46c0      	nop			; (mov r8, r8)
	}
}
200007de:	46c0      	nop			; (mov r8, r8)
200007e0:	46bd      	mov	sp, r7
200007e2:	b002      	add	sp, #8
200007e4:	bd80      	pop	{r7, pc}
200007e6:	46c0      	nop			; (mov r8, r8)
200007e8:	200017e4 	andcs	r1, r0, r4, ror #15
200007ec:	40020c14 	andmi	r0, r2, r4, lsl ip

200007f0 <keybActivate>:

void keybActivate(unsigned int row){
200007f0:	b580      	push	{r7, lr}
200007f2:	b082      	sub	sp, #8
200007f4:	af00      	add	r7, sp, #0
200007f6:	6078      	str	r0, [r7, #4]
	switch(row){
200007f8:	687b      	ldr	r3, [r7, #4]
200007fa:	2b04      	cmp	r3, #4
200007fc:	d819      	bhi.n	20000832 <keybActivate+0x42>
200007fe:	687b      	ldr	r3, [r7, #4]
20000800:	009a      	lsls	r2, r3, #2
20000802:	4b0e      	ldr	r3, [pc, #56]	; (2000083c <keybActivate+0x4c>)
20000804:	18d3      	adds	r3, r2, r3
20000806:	681b      	ldr	r3, [r3, #0]
20000808:	469f      	mov	pc, r3
		case 1: GPIO_ODR_D_HIGH = 0x10; break;//eller GPIO_ODR_D_HIGH = (1<<(row+3));
2000080a:	4b0d      	ldr	r3, [pc, #52]	; (20000840 <keybActivate+0x50>)
2000080c:	2210      	movs	r2, #16
2000080e:	701a      	strb	r2, [r3, #0]
20000810:	e00f      	b.n	20000832 <keybActivate+0x42>
		case 2: GPIO_ODR_D_HIGH = 0x20; break;
20000812:	4b0b      	ldr	r3, [pc, #44]	; (20000840 <keybActivate+0x50>)
20000814:	2220      	movs	r2, #32
20000816:	701a      	strb	r2, [r3, #0]
20000818:	e00b      	b.n	20000832 <keybActivate+0x42>
		case 3: GPIO_ODR_D_HIGH = 0x40; break;
2000081a:	4b09      	ldr	r3, [pc, #36]	; (20000840 <keybActivate+0x50>)
2000081c:	2240      	movs	r2, #64	; 0x40
2000081e:	701a      	strb	r2, [r3, #0]
20000820:	e007      	b.n	20000832 <keybActivate+0x42>
		case 4: GPIO_ODR_D_HIGH = 0x80; break;
20000822:	4b07      	ldr	r3, [pc, #28]	; (20000840 <keybActivate+0x50>)
20000824:	2280      	movs	r2, #128	; 0x80
20000826:	701a      	strb	r2, [r3, #0]
20000828:	e003      	b.n	20000832 <keybActivate+0x42>
		case 0: GPIO_ODR_D_HIGH = 0x00; break;
2000082a:	4b05      	ldr	r3, [pc, #20]	; (20000840 <keybActivate+0x50>)
2000082c:	2200      	movs	r2, #0
2000082e:	701a      	strb	r2, [r3, #0]
20000830:	46c0      	nop			; (mov r8, r8)
	}
}
20000832:	46c0      	nop			; (mov r8, r8)
20000834:	46bd      	mov	sp, r7
20000836:	b002      	add	sp, #8
20000838:	bd80      	pop	{r7, pc}
2000083a:	46c0      	nop			; (mov r8, r8)
2000083c:	20001824 	andcs	r1, r0, r4, lsr #16
20000840:	40020c15 	andmi	r0, r2, r5, lsl ip

20000844 <keybGetCol>:

int keybGetCol(void){
20000844:	b580      	push	{r7, lr}
20000846:	b082      	sub	sp, #8
20000848:	af00      	add	r7, sp, #0
	unsigned char c = GPIO_IDR_D_HIGH;
2000084a:	4a12      	ldr	r2, [pc, #72]	; (20000894 <keybGetCol+0x50>)
2000084c:	1dfb      	adds	r3, r7, #7
2000084e:	7812      	ldrb	r2, [r2, #0]
20000850:	701a      	strb	r2, [r3, #0]
	if(c & 0x8) return 4;
20000852:	1dfb      	adds	r3, r7, #7
20000854:	781b      	ldrb	r3, [r3, #0]
20000856:	2208      	movs	r2, #8
20000858:	4013      	ands	r3, r2
2000085a:	d001      	beq.n	20000860 <keybGetCol+0x1c>
2000085c:	2304      	movs	r3, #4
2000085e:	e015      	b.n	2000088c <keybGetCol+0x48>
	if(c & 0x4) return 3;
20000860:	1dfb      	adds	r3, r7, #7
20000862:	781b      	ldrb	r3, [r3, #0]
20000864:	2204      	movs	r2, #4
20000866:	4013      	ands	r3, r2
20000868:	d001      	beq.n	2000086e <keybGetCol+0x2a>
2000086a:	2303      	movs	r3, #3
2000086c:	e00e      	b.n	2000088c <keybGetCol+0x48>
	if(c & 0x2) return 2;
2000086e:	1dfb      	adds	r3, r7, #7
20000870:	781b      	ldrb	r3, [r3, #0]
20000872:	2202      	movs	r2, #2
20000874:	4013      	ands	r3, r2
20000876:	d001      	beq.n	2000087c <keybGetCol+0x38>
20000878:	2302      	movs	r3, #2
2000087a:	e007      	b.n	2000088c <keybGetCol+0x48>
	if(c & 0x1) return 1;
2000087c:	1dfb      	adds	r3, r7, #7
2000087e:	781b      	ldrb	r3, [r3, #0]
20000880:	2201      	movs	r2, #1
20000882:	4013      	ands	r3, r2
20000884:	d001      	beq.n	2000088a <keybGetCol+0x46>
20000886:	2301      	movs	r3, #1
20000888:	e000      	b.n	2000088c <keybGetCol+0x48>
	return 0;
2000088a:	2300      	movs	r3, #0
}
2000088c:	0018      	movs	r0, r3
2000088e:	46bd      	mov	sp, r7
20000890:	b002      	add	sp, #8
20000892:	bd80      	pop	{r7, pc}
20000894:	40020c11 	andmi	r0, r2, r1, lsl ip

20000898 <keyb>:

unsigned char keyb(void){
20000898:	b590      	push	{r4, r7, lr}
2000089a:	b087      	sub	sp, #28
2000089c:	af00      	add	r7, sp, #0
	int row, column;
	unsigned char key[] = {1,2,3,0xA,4,5,6,0xB,7,8,9,0xC,0xE,0,0xF,0xD};
2000089e:	003b      	movs	r3, r7
200008a0:	4a16      	ldr	r2, [pc, #88]	; (200008fc <keyb+0x64>)
200008a2:	ca13      	ldmia	r2!, {r0, r1, r4}
200008a4:	c313      	stmia	r3!, {r0, r1, r4}
200008a6:	6812      	ldr	r2, [r2, #0]
200008a8:	601a      	str	r2, [r3, #0]
	for(row = 1; row <=4; row++){
200008aa:	2301      	movs	r3, #1
200008ac:	617b      	str	r3, [r7, #20]
200008ae:	e019      	b.n	200008e4 <keyb+0x4c>
		keybActivate(row);
200008b0:	697b      	ldr	r3, [r7, #20]
200008b2:	0018      	movs	r0, r3
200008b4:	f7ff ff9c 	bl	200007f0 <keybActivate>
		if( (column = keybGetCol()) )
200008b8:	f7ff ffc4 	bl	20000844 <keybGetCol>
200008bc:	0003      	movs	r3, r0
200008be:	613b      	str	r3, [r7, #16]
200008c0:	693b      	ldr	r3, [r7, #16]
200008c2:	2b00      	cmp	r3, #0
200008c4:	d00b      	beq.n	200008de <keyb+0x46>
		{
			keybActivate(0); //To clear the register??
200008c6:	2000      	movs	r0, #0
200008c8:	f7ff ff92 	bl	200007f0 <keybActivate>
			return key[4*(row-1) + (column-1)];
200008cc:	697b      	ldr	r3, [r7, #20]
200008ce:	3b01      	subs	r3, #1
200008d0:	009a      	lsls	r2, r3, #2
200008d2:	693b      	ldr	r3, [r7, #16]
200008d4:	3b01      	subs	r3, #1
200008d6:	18d3      	adds	r3, r2, r3
200008d8:	003a      	movs	r2, r7
200008da:	5cd3      	ldrb	r3, [r2, r3]
200008dc:	e009      	b.n	200008f2 <keyb+0x5a>
	for(row = 1; row <=4; row++){
200008de:	697b      	ldr	r3, [r7, #20]
200008e0:	3301      	adds	r3, #1
200008e2:	617b      	str	r3, [r7, #20]
200008e4:	697b      	ldr	r3, [r7, #20]
200008e6:	2b04      	cmp	r3, #4
200008e8:	dde2      	ble.n	200008b0 <keyb+0x18>
		}
	}
	keybActivate(0);
200008ea:	2000      	movs	r0, #0
200008ec:	f7ff ff80 	bl	200007f0 <keybActivate>
	return 0xFF;
200008f0:	23ff      	movs	r3, #255	; 0xff
}
200008f2:	0018      	movs	r0, r3
200008f4:	46bd      	mov	sp, r7
200008f6:	b007      	add	sp, #28
200008f8:	bd90      	pop	{r4, r7, pc}
200008fa:	46c0      	nop			; (mov r8, r8)
200008fc:	20001838 	andcs	r1, r0, r8, lsr r8

20000900 <graphic_ctrl_bit_set>:
 *
 */

#include "game_startup.h"

void graphic_ctrl_bit_set(uint8_t x){
20000900:	b580      	push	{r7, lr}
20000902:	b082      	sub	sp, #8
20000904:	af00      	add	r7, sp, #0
20000906:	0002      	movs	r2, r0
20000908:	1dfb      	adds	r3, r7, #7
2000090a:	701a      	strb	r2, [r3, #0]
	GPIO_ODR_E_LOW |= (~B_SELECT & x); 			//Dubbelkolla sedan
2000090c:	4b09      	ldr	r3, [pc, #36]	; (20000934 <graphic_ctrl_bit_set+0x34>)
2000090e:	781b      	ldrb	r3, [r3, #0]
20000910:	b2db      	uxtb	r3, r3
20000912:	b25a      	sxtb	r2, r3
20000914:	1dfb      	adds	r3, r7, #7
20000916:	781b      	ldrb	r3, [r3, #0]
20000918:	b25b      	sxtb	r3, r3
2000091a:	2104      	movs	r1, #4
2000091c:	438b      	bics	r3, r1
2000091e:	b25b      	sxtb	r3, r3
20000920:	4313      	orrs	r3, r2
20000922:	b25a      	sxtb	r2, r3
20000924:	4b03      	ldr	r3, [pc, #12]	; (20000934 <graphic_ctrl_bit_set+0x34>)
20000926:	b2d2      	uxtb	r2, r2
20000928:	701a      	strb	r2, [r3, #0]
}
2000092a:	46c0      	nop			; (mov r8, r8)
2000092c:	46bd      	mov	sp, r7
2000092e:	b002      	add	sp, #8
20000930:	bd80      	pop	{r7, pc}
20000932:	46c0      	nop			; (mov r8, r8)
20000934:	40021014 	andmi	r1, r2, r4, lsl r0

20000938 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x){
20000938:	b580      	push	{r7, lr}
2000093a:	b082      	sub	sp, #8
2000093c:	af00      	add	r7, sp, #0
2000093e:	0002      	movs	r2, r0
20000940:	1dfb      	adds	r3, r7, #7
20000942:	701a      	strb	r2, [r3, #0]
	GPIO_ODR_E_LOW &= ~(B_SELECT | x);			//Dubbelkolla sedan
20000944:	4b0a      	ldr	r3, [pc, #40]	; (20000970 <graphic_ctrl_bit_clear+0x38>)
20000946:	781b      	ldrb	r3, [r3, #0]
20000948:	b2db      	uxtb	r3, r3
2000094a:	b25b      	sxtb	r3, r3
2000094c:	1dfa      	adds	r2, r7, #7
2000094e:	7812      	ldrb	r2, [r2, #0]
20000950:	2104      	movs	r1, #4
20000952:	430a      	orrs	r2, r1
20000954:	b2d2      	uxtb	r2, r2
20000956:	b252      	sxtb	r2, r2
20000958:	43d2      	mvns	r2, r2
2000095a:	b252      	sxtb	r2, r2
2000095c:	4013      	ands	r3, r2
2000095e:	b25a      	sxtb	r2, r3
20000960:	4b03      	ldr	r3, [pc, #12]	; (20000970 <graphic_ctrl_bit_clear+0x38>)
20000962:	b2d2      	uxtb	r2, r2
20000964:	701a      	strb	r2, [r3, #0]
}
20000966:	46c0      	nop			; (mov r8, r8)
20000968:	46bd      	mov	sp, r7
2000096a:	b002      	add	sp, #8
2000096c:	bd80      	pop	{r7, pc}
2000096e:	46c0      	nop			; (mov r8, r8)
20000970:	40021014 	andmi	r1, r2, r4, lsl r0

20000974 <select_controller>:

static void select_controller(uint8_t controller){
20000974:	b580      	push	{r7, lr}
20000976:	b082      	sub	sp, #8
20000978:	af00      	add	r7, sp, #0
2000097a:	0002      	movs	r2, r0
2000097c:	1dfb      	adds	r3, r7, #7
2000097e:	701a      	strb	r2, [r3, #0]
	switch(controller){
20000980:	1dfb      	adds	r3, r7, #7
20000982:	781b      	ldrb	r3, [r3, #0]
20000984:	2b08      	cmp	r3, #8
20000986:	d00c      	beq.n	200009a2 <select_controller+0x2e>
20000988:	dc02      	bgt.n	20000990 <select_controller+0x1c>
2000098a:	2b00      	cmp	r3, #0
2000098c:	d005      	beq.n	2000099a <select_controller+0x26>
		case 0: graphic_ctrl_bit_clear(B_CS1 | B_CS2); break;
		case 0x08: graphic_ctrl_bit_set(B_CS1); graphic_ctrl_bit_clear(B_CS2); break;
		case 0x10: graphic_ctrl_bit_set(B_CS2); graphic_ctrl_bit_clear(B_CS1); break;
		case 0x08 | 0x10: graphic_ctrl_bit_set(B_CS1 | B_CS2); break;
	}	
}
2000098e:	e01a      	b.n	200009c6 <select_controller+0x52>
	switch(controller){
20000990:	2b10      	cmp	r3, #16
20000992:	d00d      	beq.n	200009b0 <select_controller+0x3c>
20000994:	2b18      	cmp	r3, #24
20000996:	d012      	beq.n	200009be <select_controller+0x4a>
}
20000998:	e015      	b.n	200009c6 <select_controller+0x52>
		case 0: graphic_ctrl_bit_clear(B_CS1 | B_CS2); break;
2000099a:	2018      	movs	r0, #24
2000099c:	f7ff ffcc 	bl	20000938 <graphic_ctrl_bit_clear>
200009a0:	e011      	b.n	200009c6 <select_controller+0x52>
		case 0x08: graphic_ctrl_bit_set(B_CS1); graphic_ctrl_bit_clear(B_CS2); break;
200009a2:	2008      	movs	r0, #8
200009a4:	f7ff ffac 	bl	20000900 <graphic_ctrl_bit_set>
200009a8:	2010      	movs	r0, #16
200009aa:	f7ff ffc5 	bl	20000938 <graphic_ctrl_bit_clear>
200009ae:	e00a      	b.n	200009c6 <select_controller+0x52>
		case 0x10: graphic_ctrl_bit_set(B_CS2); graphic_ctrl_bit_clear(B_CS1); break;
200009b0:	2010      	movs	r0, #16
200009b2:	f7ff ffa5 	bl	20000900 <graphic_ctrl_bit_set>
200009b6:	2008      	movs	r0, #8
200009b8:	f7ff ffbe 	bl	20000938 <graphic_ctrl_bit_clear>
200009bc:	e003      	b.n	200009c6 <select_controller+0x52>
		case 0x08 | 0x10: graphic_ctrl_bit_set(B_CS1 | B_CS2); break;
200009be:	2018      	movs	r0, #24
200009c0:	f7ff ff9e 	bl	20000900 <graphic_ctrl_bit_set>
200009c4:	46c0      	nop			; (mov r8, r8)
}
200009c6:	46c0      	nop			; (mov r8, r8)
200009c8:	46bd      	mov	sp, r7
200009ca:	b002      	add	sp, #8
200009cc:	bd80      	pop	{r7, pc}

200009ce <graphic_wait_ready>:

static void graphic_wait_ready(void){
200009ce:	b580      	push	{r7, lr}
200009d0:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_clear(B_E);
200009d2:	2040      	movs	r0, #64	; 0x40
200009d4:	f7ff ffb0 	bl	20000938 <graphic_ctrl_bit_clear>
	GPIO_MODER_E = 0x00005555;
200009d8:	4b0f      	ldr	r3, [pc, #60]	; (20000a18 <graphic_wait_ready+0x4a>)
200009da:	4a10      	ldr	r2, [pc, #64]	; (20000a1c <graphic_wait_ready+0x4e>)
200009dc:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
200009de:	2001      	movs	r0, #1
200009e0:	f7ff ffaa 	bl	20000938 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
200009e4:	2002      	movs	r0, #2
200009e6:	f7ff ff8b 	bl	20000900 <graphic_ctrl_bit_set>
//	delay_500ns();
	while(GPIO_IDR_E_HIGH & LCD_BUSY){
200009ea:	e005      	b.n	200009f8 <graphic_wait_ready+0x2a>
		graphic_ctrl_bit_set(B_E);
200009ec:	2040      	movs	r0, #64	; 0x40
200009ee:	f7ff ff87 	bl	20000900 <graphic_ctrl_bit_set>
//		delay_500ns();
		graphic_ctrl_bit_clear(B_E);
200009f2:	2040      	movs	r0, #64	; 0x40
200009f4:	f7ff ffa0 	bl	20000938 <graphic_ctrl_bit_clear>
	while(GPIO_IDR_E_HIGH & LCD_BUSY){
200009f8:	4b09      	ldr	r3, [pc, #36]	; (20000a20 <graphic_wait_ready+0x52>)
200009fa:	781b      	ldrb	r3, [r3, #0]
200009fc:	b2db      	uxtb	r3, r3
200009fe:	b25b      	sxtb	r3, r3
20000a00:	2b00      	cmp	r3, #0
20000a02:	dbf3      	blt.n	200009ec <graphic_wait_ready+0x1e>
//		delay_500ns();
	}
	graphic_ctrl_bit_set(B_E);
20000a04:	2040      	movs	r0, #64	; 0x40
20000a06:	f7ff ff7b 	bl	20000900 <graphic_ctrl_bit_set>
	GPIO_MODER_E = 0x55555555;
20000a0a:	4b03      	ldr	r3, [pc, #12]	; (20000a18 <graphic_wait_ready+0x4a>)
20000a0c:	4a05      	ldr	r2, [pc, #20]	; (20000a24 <graphic_wait_ready+0x56>)
20000a0e:	601a      	str	r2, [r3, #0]
}
20000a10:	46c0      	nop			; (mov r8, r8)
20000a12:	46bd      	mov	sp, r7
20000a14:	bd80      	pop	{r7, pc}
20000a16:	46c0      	nop			; (mov r8, r8)
20000a18:	40021000 	andmi	r1, r2, r0
20000a1c:	00005555 	andeq	r5, r0, r5, asr r5
20000a20:	40021011 	andmi	r1, r2, r1, lsl r0
20000a24:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000a28 <graphic_read>:

unsigned char graphic_read(unsigned char controller){
20000a28:	b580      	push	{r7, lr}
20000a2a:	b084      	sub	sp, #16
20000a2c:	af00      	add	r7, sp, #0
20000a2e:	0002      	movs	r2, r0
20000a30:	1dfb      	adds	r3, r7, #7
20000a32:	701a      	strb	r2, [r3, #0]
	unsigned char read_data;
	graphic_ctrl_bit_clear(B_E);
20000a34:	2040      	movs	r0, #64	; 0x40
20000a36:	f7ff ff7f 	bl	20000938 <graphic_ctrl_bit_clear>
	GPIO_MODER_E = 0x00005555;
20000a3a:	4b19      	ldr	r3, [pc, #100]	; (20000aa0 <graphic_read+0x78>)
20000a3c:	4a19      	ldr	r2, [pc, #100]	; (20000aa4 <graphic_read+0x7c>)
20000a3e:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS | B_RW);
20000a40:	2003      	movs	r0, #3
20000a42:	f7ff ff5d 	bl	20000900 <graphic_ctrl_bit_set>
	select_controller(controller);
20000a46:	1dfb      	adds	r3, r7, #7
20000a48:	781b      	ldrb	r3, [r3, #0]
20000a4a:	0018      	movs	r0, r3
20000a4c:	f7ff ff92 	bl	20000974 <select_controller>
//	delay_500ns();
	graphic_ctrl_bit_set(B_E);
20000a50:	2040      	movs	r0, #64	; 0x40
20000a52:	f7ff ff55 	bl	20000900 <graphic_ctrl_bit_set>
	read_data = GPIO_IDR_E_HIGH;
20000a56:	4a14      	ldr	r2, [pc, #80]	; (20000aa8 <graphic_read+0x80>)
20000a58:	230f      	movs	r3, #15
20000a5a:	18fb      	adds	r3, r7, r3
20000a5c:	7812      	ldrb	r2, [r2, #0]
20000a5e:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000a60:	2040      	movs	r0, #64	; 0x40
20000a62:	f7ff ff69 	bl	20000938 <graphic_ctrl_bit_clear>
	GPIO_MODER_E = 0x55555555;
20000a66:	4b0e      	ldr	r3, [pc, #56]	; (20000aa0 <graphic_read+0x78>)
20000a68:	4a10      	ldr	r2, [pc, #64]	; (20000aac <graphic_read+0x84>)
20000a6a:	601a      	str	r2, [r3, #0]
	if(controller == B_CS1){
20000a6c:	1dfb      	adds	r3, r7, #7
20000a6e:	781b      	ldrb	r3, [r3, #0]
20000a70:	2b08      	cmp	r3, #8
20000a72:	d104      	bne.n	20000a7e <graphic_read+0x56>
		select_controller(B_CS1);
20000a74:	2008      	movs	r0, #8
20000a76:	f7ff ff7d 	bl	20000974 <select_controller>
		graphic_wait_ready();
20000a7a:	f7ff ffa8 	bl	200009ce <graphic_wait_ready>
	}
	if (controller == B_CS2){
20000a7e:	1dfb      	adds	r3, r7, #7
20000a80:	781b      	ldrb	r3, [r3, #0]
20000a82:	2b10      	cmp	r3, #16
20000a84:	d104      	bne.n	20000a90 <graphic_read+0x68>
		select_controller(B_CS2);
20000a86:	2010      	movs	r0, #16
20000a88:	f7ff ff74 	bl	20000974 <select_controller>
		graphic_wait_ready();
20000a8c:	f7ff ff9f 	bl	200009ce <graphic_wait_ready>
	}
	return read_data;
20000a90:	230f      	movs	r3, #15
20000a92:	18fb      	adds	r3, r7, r3
20000a94:	781b      	ldrb	r3, [r3, #0]
}
20000a96:	0018      	movs	r0, r3
20000a98:	46bd      	mov	sp, r7
20000a9a:	b004      	add	sp, #16
20000a9c:	bd80      	pop	{r7, pc}
20000a9e:	46c0      	nop			; (mov r8, r8)
20000aa0:	40021000 	andmi	r1, r2, r0
20000aa4:	00005555 	andeq	r5, r0, r5, asr r5
20000aa8:	40021011 	andmi	r1, r2, r1, lsl r0
20000aac:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000ab0 <graphic_write>:

void graphic_write(unsigned char value, unsigned char controller){
20000ab0:	b580      	push	{r7, lr}
20000ab2:	b082      	sub	sp, #8
20000ab4:	af00      	add	r7, sp, #0
20000ab6:	0002      	movs	r2, r0
20000ab8:	1dfb      	adds	r3, r7, #7
20000aba:	701a      	strb	r2, [r3, #0]
20000abc:	1dbb      	adds	r3, r7, #6
20000abe:	1c0a      	adds	r2, r1, #0
20000ac0:	701a      	strb	r2, [r3, #0]
	GPIO_ODR_E_HIGH = value;
20000ac2:	4a18      	ldr	r2, [pc, #96]	; (20000b24 <graphic_write+0x74>)
20000ac4:	1dfb      	adds	r3, r7, #7
20000ac6:	781b      	ldrb	r3, [r3, #0]
20000ac8:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
20000aca:	1dbb      	adds	r3, r7, #6
20000acc:	781b      	ldrb	r3, [r3, #0]
20000ace:	0018      	movs	r0, r3
20000ad0:	f7ff ff50 	bl	20000974 <select_controller>
//	delay_500ns();
	graphic_ctrl_bit_set(B_E);
20000ad4:	2040      	movs	r0, #64	; 0x40
20000ad6:	f7ff ff13 	bl	20000900 <graphic_ctrl_bit_set>
//	delay_500ns();
	graphic_ctrl_bit_clear(B_E);
20000ada:	2040      	movs	r0, #64	; 0x40
20000adc:	f7ff ff2c 	bl	20000938 <graphic_ctrl_bit_clear>
	if(controller & B_CS1){
20000ae0:	1dbb      	adds	r3, r7, #6
20000ae2:	781b      	ldrb	r3, [r3, #0]
20000ae4:	2208      	movs	r2, #8
20000ae6:	4013      	ands	r3, r2
20000ae8:	d004      	beq.n	20000af4 <graphic_write+0x44>
		select_controller(B_CS1);
20000aea:	2008      	movs	r0, #8
20000aec:	f7ff ff42 	bl	20000974 <select_controller>
		graphic_wait_ready();
20000af0:	f7ff ff6d 	bl	200009ce <graphic_wait_ready>
	}
	if(controller & B_CS2){
20000af4:	1dbb      	adds	r3, r7, #6
20000af6:	781b      	ldrb	r3, [r3, #0]
20000af8:	2210      	movs	r2, #16
20000afa:	4013      	ands	r3, r2
20000afc:	d004      	beq.n	20000b08 <graphic_write+0x58>
		select_controller(B_CS2);
20000afe:	2010      	movs	r0, #16
20000b00:	f7ff ff38 	bl	20000974 <select_controller>
		graphic_wait_ready();
20000b04:	f7ff ff63 	bl	200009ce <graphic_wait_ready>
	}
	GPIO_ODR_E_HIGH = 0;
20000b08:	4b06      	ldr	r3, [pc, #24]	; (20000b24 <graphic_write+0x74>)
20000b0a:	2200      	movs	r2, #0
20000b0c:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);  		//ettst채lls som f철rberedelse f철r n채sta arbetscykel
20000b0e:	2040      	movs	r0, #64	; 0x40
20000b10:	f7ff fef6 	bl	20000900 <graphic_ctrl_bit_set>
	select_controller(0);
20000b14:	2000      	movs	r0, #0
20000b16:	f7ff ff2d 	bl	20000974 <select_controller>
}
20000b1a:	46c0      	nop			; (mov r8, r8)
20000b1c:	46bd      	mov	sp, r7
20000b1e:	b002      	add	sp, #8
20000b20:	bd80      	pop	{r7, pc}
20000b22:	46c0      	nop			; (mov r8, r8)
20000b24:	40021015 	andmi	r1, r2, r5, lsl r0

20000b28 <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller){
20000b28:	b580      	push	{r7, lr}
20000b2a:	b082      	sub	sp, #8
20000b2c:	af00      	add	r7, sp, #0
20000b2e:	0002      	movs	r2, r0
20000b30:	1dfb      	adds	r3, r7, #7
20000b32:	701a      	strb	r2, [r3, #0]
20000b34:	1dbb      	adds	r3, r7, #6
20000b36:	1c0a      	adds	r2, r1, #0
20000b38:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000b3a:	2040      	movs	r0, #64	; 0x40
20000b3c:	f7ff fefc 	bl	20000938 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000b40:	1dbb      	adds	r3, r7, #6
20000b42:	781b      	ldrb	r3, [r3, #0]
20000b44:	0018      	movs	r0, r3
20000b46:	f7ff ff15 	bl	20000974 <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
20000b4a:	2003      	movs	r0, #3
20000b4c:	f7ff fef4 	bl	20000938 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20000b50:	1dbb      	adds	r3, r7, #6
20000b52:	781a      	ldrb	r2, [r3, #0]
20000b54:	1dfb      	adds	r3, r7, #7
20000b56:	781b      	ldrb	r3, [r3, #0]
20000b58:	0011      	movs	r1, r2
20000b5a:	0018      	movs	r0, r3
20000b5c:	f7ff ffa8 	bl	20000ab0 <graphic_write>
}
20000b60:	46c0      	nop			; (mov r8, r8)
20000b62:	46bd      	mov	sp, r7
20000b64:	b002      	add	sp, #8
20000b66:	bd80      	pop	{r7, pc}

20000b68 <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
20000b68:	b580      	push	{r7, lr}
20000b6a:	b082      	sub	sp, #8
20000b6c:	af00      	add	r7, sp, #0
20000b6e:	0002      	movs	r2, r0
20000b70:	1dfb      	adds	r3, r7, #7
20000b72:	701a      	strb	r2, [r3, #0]
20000b74:	1dbb      	adds	r3, r7, #6
20000b76:	1c0a      	adds	r2, r1, #0
20000b78:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000b7a:	2040      	movs	r0, #64	; 0x40
20000b7c:	f7ff fedc 	bl	20000938 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000b80:	1dbb      	adds	r3, r7, #6
20000b82:	781b      	ldrb	r3, [r3, #0]
20000b84:	0018      	movs	r0, r3
20000b86:	f7ff fef5 	bl	20000974 <select_controller>
	graphic_ctrl_bit_set(B_RS);
20000b8a:	2001      	movs	r0, #1
20000b8c:	f7ff feb8 	bl	20000900 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
20000b90:	2002      	movs	r0, #2
20000b92:	f7ff fed1 	bl	20000938 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
20000b96:	1dbb      	adds	r3, r7, #6
20000b98:	781a      	ldrb	r2, [r3, #0]
20000b9a:	1dfb      	adds	r3, r7, #7
20000b9c:	781b      	ldrb	r3, [r3, #0]
20000b9e:	0011      	movs	r1, r2
20000ba0:	0018      	movs	r0, r3
20000ba2:	f7ff ff85 	bl	20000ab0 <graphic_write>
}
20000ba6:	46c0      	nop			; (mov r8, r8)
20000ba8:	46bd      	mov	sp, r7
20000baa:	b002      	add	sp, #8
20000bac:	bd80      	pop	{r7, pc}

20000bae <graphic_read_data>:

unsigned char graphic_read_data(unsigned char controller){
20000bae:	b580      	push	{r7, lr}
20000bb0:	b082      	sub	sp, #8
20000bb2:	af00      	add	r7, sp, #0
20000bb4:	0002      	movs	r2, r0
20000bb6:	1dfb      	adds	r3, r7, #7
20000bb8:	701a      	strb	r2, [r3, #0]
	(void) graphic_read(controller);
20000bba:	1dfb      	adds	r3, r7, #7
20000bbc:	781b      	ldrb	r3, [r3, #0]
20000bbe:	0018      	movs	r0, r3
20000bc0:	f7ff ff32 	bl	20000a28 <graphic_read>
	
	return graphic_read(controller);
20000bc4:	1dfb      	adds	r3, r7, #7
20000bc6:	781b      	ldrb	r3, [r3, #0]
20000bc8:	0018      	movs	r0, r3
20000bca:	f7ff ff2d 	bl	20000a28 <graphic_read>
20000bce:	0003      	movs	r3, r0
}
20000bd0:	0018      	movs	r0, r3
20000bd2:	46bd      	mov	sp, r7
20000bd4:	b002      	add	sp, #8
20000bd6:	bd80      	pop	{r7, pc}

20000bd8 <graphic_init>:

void graphic_init(){
20000bd8:	b580      	push	{r7, lr}
20000bda:	af00      	add	r7, sp, #0
	GPIO_MODER_E = 0x55555555;
20000bdc:	4b12      	ldr	r3, [pc, #72]	; (20000c28 <graphic_init+0x50>)
20000bde:	4a13      	ldr	r2, [pc, #76]	; (20000c2c <graphic_init+0x54>)
20000be0:	601a      	str	r2, [r3, #0]
	
	graphic_ctrl_bit_set(B_E);
20000be2:	2040      	movs	r0, #64	; 0x40
20000be4:	f7ff fe8c 	bl	20000900 <graphic_ctrl_bit_set>
//	delay_micro(10);
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RESET | B_E);
20000be8:	2078      	movs	r0, #120	; 0x78
20000bea:	f7ff fea5 	bl	20000938 <graphic_ctrl_bit_clear>
//	delay_milli(30);
	graphic_ctrl_bit_set(B_RESET);
20000bee:	2020      	movs	r0, #32
20000bf0:	f7ff fe86 	bl	20000900 <graphic_ctrl_bit_set>
	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
20000bf4:	2118      	movs	r1, #24
20000bf6:	203e      	movs	r0, #62	; 0x3e
20000bf8:	f7ff ff96 	bl	20000b28 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);
20000bfc:	2118      	movs	r1, #24
20000bfe:	203f      	movs	r0, #63	; 0x3f
20000c00:	f7ff ff92 	bl	20000b28 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
20000c04:	2118      	movs	r1, #24
20000c06:	20c0      	movs	r0, #192	; 0xc0
20000c08:	f7ff ff8e 	bl	20000b28 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
20000c0c:	2118      	movs	r1, #24
20000c0e:	2040      	movs	r0, #64	; 0x40
20000c10:	f7ff ff8a 	bl	20000b28 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
20000c14:	2118      	movs	r1, #24
20000c16:	20b8      	movs	r0, #184	; 0xb8
20000c18:	f7ff ff86 	bl	20000b28 <graphic_write_command>
	select_controller(0);
20000c1c:	2000      	movs	r0, #0
20000c1e:	f7ff fea9 	bl	20000974 <select_controller>
}
20000c22:	46c0      	nop			; (mov r8, r8)
20000c24:	46bd      	mov	sp, r7
20000c26:	bd80      	pop	{r7, pc}
20000c28:	40021000 	andmi	r1, r2, r0
20000c2c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000c30 <graphic_clear_screen>:

void graphic_clear_screen(){
20000c30:	b580      	push	{r7, lr}
20000c32:	b082      	sub	sp, #8
20000c34:	af00      	add	r7, sp, #0
	for(int page = 0; page <=7; page++){
20000c36:	2300      	movs	r3, #0
20000c38:	607b      	str	r3, [r7, #4]
20000c3a:	e01e      	b.n	20000c7a <graphic_clear_screen+0x4a>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
20000c3c:	687b      	ldr	r3, [r7, #4]
20000c3e:	b25b      	sxtb	r3, r3
20000c40:	2248      	movs	r2, #72	; 0x48
20000c42:	4252      	negs	r2, r2
20000c44:	4313      	orrs	r3, r2
20000c46:	b25b      	sxtb	r3, r3
20000c48:	b2db      	uxtb	r3, r3
20000c4a:	2118      	movs	r1, #24
20000c4c:	0018      	movs	r0, r3
20000c4e:	f7ff ff6b 	bl	20000b28 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1 | B_CS2);
20000c52:	2118      	movs	r1, #24
20000c54:	2040      	movs	r0, #64	; 0x40
20000c56:	f7ff ff67 	bl	20000b28 <graphic_write_command>
		for (int adress = 0; adress <= 63; adress++)
20000c5a:	2300      	movs	r3, #0
20000c5c:	603b      	str	r3, [r7, #0]
20000c5e:	e006      	b.n	20000c6e <graphic_clear_screen+0x3e>
			graphic_write_data(0, B_CS1 | B_CS2);
20000c60:	2118      	movs	r1, #24
20000c62:	2000      	movs	r0, #0
20000c64:	f7ff ff80 	bl	20000b68 <graphic_write_data>
		for (int adress = 0; adress <= 63; adress++)
20000c68:	683b      	ldr	r3, [r7, #0]
20000c6a:	3301      	adds	r3, #1
20000c6c:	603b      	str	r3, [r7, #0]
20000c6e:	683b      	ldr	r3, [r7, #0]
20000c70:	2b3f      	cmp	r3, #63	; 0x3f
20000c72:	ddf5      	ble.n	20000c60 <graphic_clear_screen+0x30>
	for(int page = 0; page <=7; page++){
20000c74:	687b      	ldr	r3, [r7, #4]
20000c76:	3301      	adds	r3, #1
20000c78:	607b      	str	r3, [r7, #4]
20000c7a:	687b      	ldr	r3, [r7, #4]
20000c7c:	2b07      	cmp	r3, #7
20000c7e:	dddd      	ble.n	20000c3c <graphic_clear_screen+0xc>
	}
}
20000c80:	46c0      	nop			; (mov r8, r8)
20000c82:	46bd      	mov	sp, r7
20000c84:	b002      	add	sp, #8
20000c86:	bd80      	pop	{r7, pc}

20000c88 <pixel>:

uint8_t backBuffer[1024]; // 128 * 64 / 8

void pixel (unsigned int x, unsigned int y){
20000c88:	b580      	push	{r7, lr}
20000c8a:	b084      	sub	sp, #16
20000c8c:	af00      	add	r7, sp, #0
20000c8e:	6078      	str	r0, [r7, #4]
20000c90:	6039      	str	r1, [r7, #0]
	uint8_t mask;
	int index = 0;
20000c92:	2300      	movs	r3, #0
20000c94:	60fb      	str	r3, [r7, #12]
	if (y < 1 || y > 64 || x < 1 || x > 128) 
20000c96:	683b      	ldr	r3, [r7, #0]
20000c98:	2b00      	cmp	r3, #0
20000c9a:	d032      	beq.n	20000d02 <pixel+0x7a>
20000c9c:	683b      	ldr	r3, [r7, #0]
20000c9e:	2b40      	cmp	r3, #64	; 0x40
20000ca0:	d82f      	bhi.n	20000d02 <pixel+0x7a>
20000ca2:	687b      	ldr	r3, [r7, #4]
20000ca4:	2b00      	cmp	r3, #0
20000ca6:	d02c      	beq.n	20000d02 <pixel+0x7a>
20000ca8:	687b      	ldr	r3, [r7, #4]
20000caa:	2b80      	cmp	r3, #128	; 0x80
20000cac:	d829      	bhi.n	20000d02 <pixel+0x7a>
		return;
	
	mask = 1 << ((y-1) % 8);
20000cae:	683b      	ldr	r3, [r7, #0]
20000cb0:	3b01      	subs	r3, #1
20000cb2:	2207      	movs	r2, #7
20000cb4:	4013      	ands	r3, r2
20000cb6:	2201      	movs	r2, #1
20000cb8:	409a      	lsls	r2, r3
20000cba:	230b      	movs	r3, #11
20000cbc:	18fb      	adds	r3, r7, r3
20000cbe:	701a      	strb	r2, [r3, #0]
	
	if(x > 64){
20000cc0:	687b      	ldr	r3, [r7, #4]
20000cc2:	2b40      	cmp	r3, #64	; 0x40
20000cc4:	d905      	bls.n	20000cd2 <pixel+0x4a>
		index = 512;
20000cc6:	2380      	movs	r3, #128	; 0x80
20000cc8:	009b      	lsls	r3, r3, #2
20000cca:	60fb      	str	r3, [r7, #12]
		x -= 65;
20000ccc:	687b      	ldr	r3, [r7, #4]
20000cce:	3b41      	subs	r3, #65	; 0x41
20000cd0:	607b      	str	r3, [r7, #4]
	}
	
	index += x + ((y-1) / 8) * 64; 
20000cd2:	683b      	ldr	r3, [r7, #0]
20000cd4:	3b01      	subs	r3, #1
20000cd6:	08db      	lsrs	r3, r3, #3
20000cd8:	019a      	lsls	r2, r3, #6
20000cda:	687b      	ldr	r3, [r7, #4]
20000cdc:	18d2      	adds	r2, r2, r3
20000cde:	68fb      	ldr	r3, [r7, #12]
20000ce0:	18d3      	adds	r3, r2, r3
20000ce2:	60fb      	str	r3, [r7, #12]
	
	backBuffer[index] |= mask;
20000ce4:	4a09      	ldr	r2, [pc, #36]	; (20000d0c <pixel+0x84>)
20000ce6:	68fb      	ldr	r3, [r7, #12]
20000ce8:	18d3      	adds	r3, r2, r3
20000cea:	781a      	ldrb	r2, [r3, #0]
20000cec:	230b      	movs	r3, #11
20000cee:	18fb      	adds	r3, r7, r3
20000cf0:	781b      	ldrb	r3, [r3, #0]
20000cf2:	4313      	orrs	r3, r2
20000cf4:	b2d9      	uxtb	r1, r3
20000cf6:	4a05      	ldr	r2, [pc, #20]	; (20000d0c <pixel+0x84>)
20000cf8:	68fb      	ldr	r3, [r7, #12]
20000cfa:	18d3      	adds	r3, r2, r3
20000cfc:	1c0a      	adds	r2, r1, #0
20000cfe:	701a      	strb	r2, [r3, #0]
20000d00:	e000      	b.n	20000d04 <pixel+0x7c>
		return;
20000d02:	46c0      	nop			; (mov r8, r8)
}
20000d04:	46bd      	mov	sp, r7
20000d06:	b004      	add	sp, #16
20000d08:	bd80      	pop	{r7, pc}
20000d0a:	46c0      	nop			; (mov r8, r8)
20000d0c:	20000f28 	andcs	r0, r0, r8, lsr #30

20000d10 <graphic_draw_screen>:

void graphic_draw_screen(void) {
20000d10:	b580      	push	{r7, lr}
20000d12:	b084      	sub	sp, #16
20000d14:	af00      	add	r7, sp, #0
	uint8_t i, j, controller, c;
	unsigned int k = 0;
20000d16:	2300      	movs	r3, #0
20000d18:	60bb      	str	r3, [r7, #8]
	for(c = 0; c < 2; c++) {
20000d1a:	230d      	movs	r3, #13
20000d1c:	18fb      	adds	r3, r7, r3
20000d1e:	2200      	movs	r2, #0
20000d20:	701a      	strb	r2, [r3, #0]
20000d22:	e04f      	b.n	20000dc4 <graphic_draw_screen+0xb4>
		controller = (c == 0) ? B_CS1 : B_CS2;
20000d24:	230d      	movs	r3, #13
20000d26:	18fb      	adds	r3, r7, r3
20000d28:	781b      	ldrb	r3, [r3, #0]
20000d2a:	2b00      	cmp	r3, #0
20000d2c:	d101      	bne.n	20000d32 <graphic_draw_screen+0x22>
20000d2e:	2208      	movs	r2, #8
20000d30:	e000      	b.n	20000d34 <graphic_draw_screen+0x24>
20000d32:	2210      	movs	r2, #16
20000d34:	1dfb      	adds	r3, r7, #7
20000d36:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 8; j++) {
20000d38:	230e      	movs	r3, #14
20000d3a:	18fb      	adds	r3, r7, r3
20000d3c:	2200      	movs	r2, #0
20000d3e:	701a      	strb	r2, [r3, #0]
20000d40:	e035      	b.n	20000dae <graphic_draw_screen+0x9e>
			graphic_write_command(LCD_SET_PAGE | j, controller);
20000d42:	230e      	movs	r3, #14
20000d44:	18fb      	adds	r3, r7, r3
20000d46:	781b      	ldrb	r3, [r3, #0]
20000d48:	2248      	movs	r2, #72	; 0x48
20000d4a:	4252      	negs	r2, r2
20000d4c:	4313      	orrs	r3, r2
20000d4e:	b2da      	uxtb	r2, r3
20000d50:	1dfb      	adds	r3, r7, #7
20000d52:	781b      	ldrb	r3, [r3, #0]
20000d54:	0019      	movs	r1, r3
20000d56:	0010      	movs	r0, r2
20000d58:	f7ff fee6 	bl	20000b28 <graphic_write_command>
			graphic_write_command(LCD_SET_ADD | 0, controller);
20000d5c:	1dfb      	adds	r3, r7, #7
20000d5e:	781b      	ldrb	r3, [r3, #0]
20000d60:	0019      	movs	r1, r3
20000d62:	2040      	movs	r0, #64	; 0x40
20000d64:	f7ff fee0 	bl	20000b28 <graphic_write_command>
			for(i = 0; i <= 63; i++, k++) {
20000d68:	230f      	movs	r3, #15
20000d6a:	18fb      	adds	r3, r7, r3
20000d6c:	2200      	movs	r2, #0
20000d6e:	701a      	strb	r2, [r3, #0]
20000d70:	e012      	b.n	20000d98 <graphic_draw_screen+0x88>
				graphic_write_data(backBuffer[k], controller);
20000d72:	4a19      	ldr	r2, [pc, #100]	; (20000dd8 <graphic_draw_screen+0xc8>)
20000d74:	68bb      	ldr	r3, [r7, #8]
20000d76:	18d3      	adds	r3, r2, r3
20000d78:	781a      	ldrb	r2, [r3, #0]
20000d7a:	1dfb      	adds	r3, r7, #7
20000d7c:	781b      	ldrb	r3, [r3, #0]
20000d7e:	0019      	movs	r1, r3
20000d80:	0010      	movs	r0, r2
20000d82:	f7ff fef1 	bl	20000b68 <graphic_write_data>
			for(i = 0; i <= 63; i++, k++) {
20000d86:	210f      	movs	r1, #15
20000d88:	187b      	adds	r3, r7, r1
20000d8a:	781a      	ldrb	r2, [r3, #0]
20000d8c:	187b      	adds	r3, r7, r1
20000d8e:	3201      	adds	r2, #1
20000d90:	701a      	strb	r2, [r3, #0]
20000d92:	68bb      	ldr	r3, [r7, #8]
20000d94:	3301      	adds	r3, #1
20000d96:	60bb      	str	r3, [r7, #8]
20000d98:	230f      	movs	r3, #15
20000d9a:	18fb      	adds	r3, r7, r3
20000d9c:	781b      	ldrb	r3, [r3, #0]
20000d9e:	2b3f      	cmp	r3, #63	; 0x3f
20000da0:	d9e7      	bls.n	20000d72 <graphic_draw_screen+0x62>
		for(j = 0; j < 8; j++) {
20000da2:	210e      	movs	r1, #14
20000da4:	187b      	adds	r3, r7, r1
20000da6:	781a      	ldrb	r2, [r3, #0]
20000da8:	187b      	adds	r3, r7, r1
20000daa:	3201      	adds	r2, #1
20000dac:	701a      	strb	r2, [r3, #0]
20000dae:	230e      	movs	r3, #14
20000db0:	18fb      	adds	r3, r7, r3
20000db2:	781b      	ldrb	r3, [r3, #0]
20000db4:	2b07      	cmp	r3, #7
20000db6:	d9c4      	bls.n	20000d42 <graphic_draw_screen+0x32>
	for(c = 0; c < 2; c++) {
20000db8:	210d      	movs	r1, #13
20000dba:	187b      	adds	r3, r7, r1
20000dbc:	781a      	ldrb	r2, [r3, #0]
20000dbe:	187b      	adds	r3, r7, r1
20000dc0:	3201      	adds	r2, #1
20000dc2:	701a      	strb	r2, [r3, #0]
20000dc4:	230d      	movs	r3, #13
20000dc6:	18fb      	adds	r3, r7, r3
20000dc8:	781b      	ldrb	r3, [r3, #0]
20000dca:	2b01      	cmp	r3, #1
20000dcc:	d9aa      	bls.n	20000d24 <graphic_draw_screen+0x14>
	}	}	}
}
20000dce:	46c0      	nop			; (mov r8, r8)
20000dd0:	46bd      	mov	sp, r7
20000dd2:	b004      	add	sp, #16
20000dd4:	bd80      	pop	{r7, pc}
20000dd6:	46c0      	nop			; (mov r8, r8)
20000dd8:	20000f28 	andcs	r0, r0, r8, lsr #30

20000ddc <clear_backBuffer>:

void clear_backBuffer() {
20000ddc:	b580      	push	{r7, lr}
20000dde:	b082      	sub	sp, #8
20000de0:	af00      	add	r7, sp, #0
	int i;
	for (i = 0; i < 1024; i++)
20000de2:	2300      	movs	r3, #0
20000de4:	607b      	str	r3, [r7, #4]
20000de6:	e007      	b.n	20000df8 <clear_backBuffer+0x1c>
		backBuffer[i] = 0;
20000de8:	4a07      	ldr	r2, [pc, #28]	; (20000e08 <clear_backBuffer+0x2c>)
20000dea:	687b      	ldr	r3, [r7, #4]
20000dec:	18d3      	adds	r3, r2, r3
20000dee:	2200      	movs	r2, #0
20000df0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 1024; i++)
20000df2:	687b      	ldr	r3, [r7, #4]
20000df4:	3301      	adds	r3, #1
20000df6:	607b      	str	r3, [r7, #4]
20000df8:	687b      	ldr	r3, [r7, #4]
20000dfa:	4a04      	ldr	r2, [pc, #16]	; (20000e0c <clear_backBuffer+0x30>)
20000dfc:	4293      	cmp	r3, r2
20000dfe:	ddf3      	ble.n	20000de8 <clear_backBuffer+0xc>
}
20000e00:	46c0      	nop			; (mov r8, r8)
20000e02:	46bd      	mov	sp, r7
20000e04:	b002      	add	sp, #8
20000e06:	bd80      	pop	{r7, pc}
20000e08:	20000f28 	andcs	r0, r0, r8, lsr #30
20000e0c:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20000e10 <__udivsi3>:
20000e10:	2200      	movs	r2, #0
20000e12:	0843      	lsrs	r3, r0, #1
20000e14:	428b      	cmp	r3, r1
20000e16:	d374      	bcc.n	20000f02 <__udivsi3+0xf2>
20000e18:	0903      	lsrs	r3, r0, #4
20000e1a:	428b      	cmp	r3, r1
20000e1c:	d35f      	bcc.n	20000ede <__udivsi3+0xce>
20000e1e:	0a03      	lsrs	r3, r0, #8
20000e20:	428b      	cmp	r3, r1
20000e22:	d344      	bcc.n	20000eae <__udivsi3+0x9e>
20000e24:	0b03      	lsrs	r3, r0, #12
20000e26:	428b      	cmp	r3, r1
20000e28:	d328      	bcc.n	20000e7c <__udivsi3+0x6c>
20000e2a:	0c03      	lsrs	r3, r0, #16
20000e2c:	428b      	cmp	r3, r1
20000e2e:	d30d      	bcc.n	20000e4c <__udivsi3+0x3c>
20000e30:	22ff      	movs	r2, #255	; 0xff
20000e32:	0209      	lsls	r1, r1, #8
20000e34:	ba12      	rev	r2, r2
20000e36:	0c03      	lsrs	r3, r0, #16
20000e38:	428b      	cmp	r3, r1
20000e3a:	d302      	bcc.n	20000e42 <__udivsi3+0x32>
20000e3c:	1212      	asrs	r2, r2, #8
20000e3e:	0209      	lsls	r1, r1, #8
20000e40:	d065      	beq.n	20000f0e <__udivsi3+0xfe>
20000e42:	0b03      	lsrs	r3, r0, #12
20000e44:	428b      	cmp	r3, r1
20000e46:	d319      	bcc.n	20000e7c <__udivsi3+0x6c>
20000e48:	e000      	b.n	20000e4c <__udivsi3+0x3c>
20000e4a:	0a09      	lsrs	r1, r1, #8
20000e4c:	0bc3      	lsrs	r3, r0, #15
20000e4e:	428b      	cmp	r3, r1
20000e50:	d301      	bcc.n	20000e56 <__udivsi3+0x46>
20000e52:	03cb      	lsls	r3, r1, #15
20000e54:	1ac0      	subs	r0, r0, r3
20000e56:	4152      	adcs	r2, r2
20000e58:	0b83      	lsrs	r3, r0, #14
20000e5a:	428b      	cmp	r3, r1
20000e5c:	d301      	bcc.n	20000e62 <__udivsi3+0x52>
20000e5e:	038b      	lsls	r3, r1, #14
20000e60:	1ac0      	subs	r0, r0, r3
20000e62:	4152      	adcs	r2, r2
20000e64:	0b43      	lsrs	r3, r0, #13
20000e66:	428b      	cmp	r3, r1
20000e68:	d301      	bcc.n	20000e6e <__udivsi3+0x5e>
20000e6a:	034b      	lsls	r3, r1, #13
20000e6c:	1ac0      	subs	r0, r0, r3
20000e6e:	4152      	adcs	r2, r2
20000e70:	0b03      	lsrs	r3, r0, #12
20000e72:	428b      	cmp	r3, r1
20000e74:	d301      	bcc.n	20000e7a <__udivsi3+0x6a>
20000e76:	030b      	lsls	r3, r1, #12
20000e78:	1ac0      	subs	r0, r0, r3
20000e7a:	4152      	adcs	r2, r2
20000e7c:	0ac3      	lsrs	r3, r0, #11
20000e7e:	428b      	cmp	r3, r1
20000e80:	d301      	bcc.n	20000e86 <__udivsi3+0x76>
20000e82:	02cb      	lsls	r3, r1, #11
20000e84:	1ac0      	subs	r0, r0, r3
20000e86:	4152      	adcs	r2, r2
20000e88:	0a83      	lsrs	r3, r0, #10
20000e8a:	428b      	cmp	r3, r1
20000e8c:	d301      	bcc.n	20000e92 <__udivsi3+0x82>
20000e8e:	028b      	lsls	r3, r1, #10
20000e90:	1ac0      	subs	r0, r0, r3
20000e92:	4152      	adcs	r2, r2
20000e94:	0a43      	lsrs	r3, r0, #9
20000e96:	428b      	cmp	r3, r1
20000e98:	d301      	bcc.n	20000e9e <__udivsi3+0x8e>
20000e9a:	024b      	lsls	r3, r1, #9
20000e9c:	1ac0      	subs	r0, r0, r3
20000e9e:	4152      	adcs	r2, r2
20000ea0:	0a03      	lsrs	r3, r0, #8
20000ea2:	428b      	cmp	r3, r1
20000ea4:	d301      	bcc.n	20000eaa <__udivsi3+0x9a>
20000ea6:	020b      	lsls	r3, r1, #8
20000ea8:	1ac0      	subs	r0, r0, r3
20000eaa:	4152      	adcs	r2, r2
20000eac:	d2cd      	bcs.n	20000e4a <__udivsi3+0x3a>
20000eae:	09c3      	lsrs	r3, r0, #7
20000eb0:	428b      	cmp	r3, r1
20000eb2:	d301      	bcc.n	20000eb8 <__udivsi3+0xa8>
20000eb4:	01cb      	lsls	r3, r1, #7
20000eb6:	1ac0      	subs	r0, r0, r3
20000eb8:	4152      	adcs	r2, r2
20000eba:	0983      	lsrs	r3, r0, #6
20000ebc:	428b      	cmp	r3, r1
20000ebe:	d301      	bcc.n	20000ec4 <__udivsi3+0xb4>
20000ec0:	018b      	lsls	r3, r1, #6
20000ec2:	1ac0      	subs	r0, r0, r3
20000ec4:	4152      	adcs	r2, r2
20000ec6:	0943      	lsrs	r3, r0, #5
20000ec8:	428b      	cmp	r3, r1
20000eca:	d301      	bcc.n	20000ed0 <__udivsi3+0xc0>
20000ecc:	014b      	lsls	r3, r1, #5
20000ece:	1ac0      	subs	r0, r0, r3
20000ed0:	4152      	adcs	r2, r2
20000ed2:	0903      	lsrs	r3, r0, #4
20000ed4:	428b      	cmp	r3, r1
20000ed6:	d301      	bcc.n	20000edc <__udivsi3+0xcc>
20000ed8:	010b      	lsls	r3, r1, #4
20000eda:	1ac0      	subs	r0, r0, r3
20000edc:	4152      	adcs	r2, r2
20000ede:	08c3      	lsrs	r3, r0, #3
20000ee0:	428b      	cmp	r3, r1
20000ee2:	d301      	bcc.n	20000ee8 <__udivsi3+0xd8>
20000ee4:	00cb      	lsls	r3, r1, #3
20000ee6:	1ac0      	subs	r0, r0, r3
20000ee8:	4152      	adcs	r2, r2
20000eea:	0883      	lsrs	r3, r0, #2
20000eec:	428b      	cmp	r3, r1
20000eee:	d301      	bcc.n	20000ef4 <__udivsi3+0xe4>
20000ef0:	008b      	lsls	r3, r1, #2
20000ef2:	1ac0      	subs	r0, r0, r3
20000ef4:	4152      	adcs	r2, r2
20000ef6:	0843      	lsrs	r3, r0, #1
20000ef8:	428b      	cmp	r3, r1
20000efa:	d301      	bcc.n	20000f00 <__udivsi3+0xf0>
20000efc:	004b      	lsls	r3, r1, #1
20000efe:	1ac0      	subs	r0, r0, r3
20000f00:	4152      	adcs	r2, r2
20000f02:	1a41      	subs	r1, r0, r1
20000f04:	d200      	bcs.n	20000f08 <__udivsi3+0xf8>
20000f06:	4601      	mov	r1, r0
20000f08:	4152      	adcs	r2, r2
20000f0a:	4610      	mov	r0, r2
20000f0c:	4770      	bx	lr
20000f0e:	e7ff      	b.n	20000f10 <__udivsi3+0x100>
20000f10:	b501      	push	{r0, lr}
20000f12:	2000      	movs	r0, #0
20000f14:	f000 f806 	bl	20000f24 <__aeabi_idiv0>
20000f18:	bd02      	pop	{r1, pc}
20000f1a:	46c0      	nop			; (mov r8, r8)

20000f1c <__aeabi_uidivmod>:
20000f1c:	2900      	cmp	r1, #0
20000f1e:	d0f7      	beq.n	20000f10 <__udivsi3+0x100>
20000f20:	e776      	b.n	20000e10 <__udivsi3>
20000f22:	4770      	bx	lr

20000f24 <__aeabi_idiv0>:
20000f24:	4770      	bx	lr
20000f26:	46c0      	nop			; (mov r8, r8)

20000f28 <backBuffer>:
	...

20001328 <plant_bits>:
20001328:	3e1c0800 	cdpcc	8, 1, cr0, cr12, cr0, {0}
2000132c:	1c087f7f 	stcne	15, cr7, [r8], {127}	; 0x7f
20001330:	0000001c 	andeq	r0, r0, ip, lsl r0

20001334 <backGround_bits>:
	...
200013f8:	00000ffc 	strdeq	r0, [r0], -ip
	...
20001408:	00000007 	andeq	r0, r0, r7
	...
20001414:	c0000000 	andgt	r0, r0, r0
20001418:	00000001 	andeq	r0, r0, r1
	...
20001424:	40000000 	andmi	r0, r0, r0
20001428:	00200000 	eoreq	r0, r0, r0
	...
20001434:	40000000 	andmi	r0, r0, r0
20001438:	00300000 	eorseq	r0, r0, r0
	...
20001444:	40000000 	andmi	r0, r0, r0
20001448:	00500000 	subseq	r0, r0, r0
2000144c:	00000200 	andeq	r0, r0, r0, lsl #4
20001450:	0001f800 	andeq	pc, r1, r0, lsl #16
20001454:	40000000 	andmi	r0, r0, r0
20001458:	00900000 	addseq	r0, r0, r0
2000145c:	00000200 	andeq	r0, r0, r0, lsl #4
20001460:	00000ffc 	strdeq	r0, [r0], -ip
20001464:	40000000 	andmi	r0, r0, r0
20001468:	00980000 	addseq	r0, r8, r0
2000146c:	00c00200 	sbceq	r0, r0, r0, lsl #4
20001470:	00000001 	andeq	r0, r0, r1
20001474:	40000000 	andmi	r0, r0, r0
20001478:	01080000 	mrseq	r0, (UNDEF: 8)
2000147c:	00c00600 	sbceq	r0, r0, r0, lsl #12
20001480:	00000001 	andeq	r0, r0, r1
20001484:	40000000 	andmi	r0, r0, r0
20001488:	01080000 	mrseq	r0, (UNDEF: 8)
2000148c:	00a01c00 	adceq	r1, r0, r0, lsl #24
20001490:	00000001 	andeq	r0, r0, r1
20001494:	40000000 	andmi	r0, r0, r0
20001498:	020c0000 	andeq	r0, ip, #0
2000149c:	00b02400 	adcseq	r2, r0, r0, lsl #8
200014a0:	00000001 	andeq	r0, r0, r1
200014a4:	40000000 	andmi	r0, r0, r0
200014a8:	06040000 	streq	r0, [r4], -r0
200014ac:	00904400 	addseq	r4, r0, r0, lsl #8
200014b0:	00000001 	andeq	r0, r0, r1
200014b4:	40000000 	andmi	r0, r0, r0
200014b8:	080401c0 	stmdaeq	r4, {r6, r7, r8}
200014bc:	00898400 	addeq	r8, r9, r0, lsl #8
200014c0:	00000003 	andeq	r0, r0, r3
200014c4:	40000000 	andmi	r0, r0, r0
200014c8:	08020030 	stmdaeq	r2, {r4, r5}
200014cc:	008a0400 	addeq	r0, sl, r0, lsl #8
200014d0:	000007f6 	strdeq	r0, [r0], -r6
200014d4:	80000000 	andhi	r0, r0, r0
200014d8:	1ffe00e0 	svcne	0x00fe00e0
200014dc:	008c0400 	addeq	r0, ip, r0, lsl #8
200014e0:	00000004 	andeq	r0, r0, r4
200014e4:	80000000 	andhi	r0, r0, r0
200014e8:	28020040 	stmdacs	r2, {r6}
200014ec:	00800400 	addeq	r0, r0, r0, lsl #8
200014f0:	00000004 	andeq	r0, r0, r4
200014f4:	80000000 	andhi	r0, r0, r0
200014f8:	40010040 	andmi	r0, r1, r0, asr #32
200014fc:	00800400 	addeq	r0, r0, r0, lsl #8
20001500:	00000004 	andeq	r0, r0, r4
20001504:	00000000 	andeq	r0, r0, r0
20001508:	80010041 	andhi	r0, r1, r1, asr #32
2000150c:	00800400 	addeq	r0, r0, r0, lsl #8
20001510:	00000004 	andeq	r0, r0, r4
20001514:	00000000 	andeq	r0, r0, r0
20001518:	80018041 	andhi	r8, r1, r1, asr #32
2000151c:	00800400 	addeq	r0, r0, r0, lsl #8
20001520:	000003c4 	andeq	r0, r0, r4, asr #7
20001524:	00000000 	andeq	r0, r0, r0
20001528:	00008042 	andeq	r8, r0, r2, asr #32
2000152c:	00000001 	andeq	r0, r0, r1
20001530:	00000074 	andeq	r0, r0, r4, ror r0
20001534:	00000000 	andeq	r0, r0, r0
20001538:	00008044 	andeq	r8, r0, r4, asr #32
2000153c:	00000006 	andeq	r0, r0, r6
20001540:	0000000c 	andeq	r0, r0, ip
20001544:	00000000 	andeq	r0, r0, r0
20001548:	0000c024 	andeq	ip, r0, r4, lsr #32
2000154c:	00000004 	andeq	r0, r0, r4
	...
20001558:	00004038 	andeq	r4, r0, r8, lsr r0
2000155c:	00000018 	andeq	r0, r0, r8, lsl r0
	...
20001568:	00004000 	andeq	r4, r0, r0
2000156c:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20001578:	00004000 	andeq	r4, r0, r0
	...
20001588:	00004000 	andeq	r4, r0, r0
	...

20001734 <ship_bits>:
20001734:	00000100 	andeq	r0, r0, r0, lsl #2
20001738:	07c00001 	strbeq	r0, [r0, r1]
2000173c:	000c6000 	andeq	r6, ip, r0
20001740:	20000820 	andcs	r0, r0, r0, lsr #16
20001744:	18300008 	ldmdane	r0!, {r3}
20001748:	00301800 	eorseq	r1, r0, r0, lsl #16
2000174c:	08002008 	stmdaeq	r0, {r3, sp}
20001750:	600c0020 	andvs	r0, ip, r0, lsr #32
20001754:	00444400 	subeq	r4, r4, r0, lsl #8
20001758:	1c005ff4 	stcne	15, cr5, [r0], {244}	; 0xf4
2000175c:	20080070 	andcs	r0, r8, r0, ror r0
	...

20001770 <ball_geometry>:
20001770:	0000000c 	andeq	r0, r0, ip
20001774:	00000004 	andeq	r0, r0, r4
20001778:	00000004 	andeq	r0, r0, r4
2000177c:	02000100 	andeq	r0, r0, #0, 2
20001780:	01010001 	tsteq	r1, r1
20001784:	03010201 	movweq	r0, #4609	; 0x1201
20001788:	01020002 	tsteq	r2, r2
2000178c:	03020202 	movweq	r0, #8706	; 0x2202
20001790:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

200017a4 <ball>:
200017a4:	20001770 	andcs	r1, r0, r0, ror r7
200017a8:	fffffffd 			; <UNDEFINED> instruction: 0xfffffffd
200017ac:	00000003 	andeq	r0, r0, r3
200017b0:	00000001 	andeq	r0, r0, r1
200017b4:	00000001 	andeq	r0, r0, r1
200017b8:	200004d5 	ldrdcs	r0, [r0], -r5
200017bc:	20000531 	andcs	r0, r0, r1, lsr r5
200017c0:	2000058d 	andcs	r0, r0, sp, lsl #11
200017c4:	200004b5 			; <UNDEFINED> instruction: 0x200004b5
200017c8:	636c6557 	cmnvs	ip, #364904448	; 0x15c00000
200017cc:	20656d6f 	rsbcs	r6, r5, pc, ror #26
200017d0:	00000000 	andeq	r0, r0, r0
200017d4:	74206f74 	strtvc	r6, [r0], #-3956	; 0xfffff08c
200017d8:	67206568 	strvs	r6, [r0, -r8, ror #10]!
200017dc:	21656d61 	cmncs	r5, r1, ror #26
200017e0:	00000000 	andeq	r0, r0, r0
200017e4:	20000756 	andcs	r0, r0, r6, asr r7
200017e8:	2000075e 	andcs	r0, r0, lr, asr r7
200017ec:	20000766 	andcs	r0, r0, r6, ror #14
200017f0:	2000076e 	andcs	r0, r0, lr, ror #14
200017f4:	20000776 	andcs	r0, r0, r6, ror r7
200017f8:	2000077e 	andcs	r0, r0, lr, ror r7
200017fc:	20000786 	andcs	r0, r0, r6, lsl #15
20001800:	2000078e 	andcs	r0, r0, lr, lsl #15
20001804:	20000796 	mulcs	r0, r6, r7
20001808:	2000079e 	mulcs	r0, lr, r7
2000180c:	200007a6 	andcs	r0, r0, r6, lsr #15
20001810:	200007ae 	andcs	r0, r0, lr, lsr #15
20001814:	200007b6 			; <UNDEFINED> instruction: 0x200007b6
20001818:	200007be 			; <UNDEFINED> instruction: 0x200007be
2000181c:	200007c6 	andcs	r0, r0, r6, asr #15
20001820:	200007ce 	andcs	r0, r0, lr, asr #15
20001824:	2000082a 	andcs	r0, r0, sl, lsr #16
20001828:	2000080a 	andcs	r0, r0, sl, lsl #16
2000182c:	20000812 	andcs	r0, r0, r2, lsl r8
20001830:	2000081a 	andcs	r0, r0, sl, lsl r8
20001834:	20000822 	andcs	r0, r0, r2, lsr #16
20001838:	0a030201 	beq	200c2044 <ball+0xc08a0>
2000183c:	0b060504 	bleq	20182c54 <ball+0x1814b0>
20001840:	0c090807 	stceq	8, cr0, [r9], {7}
20001844:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20001814 <ball+0x70>

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000001f7 	strdeq	r0, [r0], -r7
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	0000f90c 	andeq	pc, r0, ip, lsl #18
  14:	00015a00 	andeq	r5, r1, r0, lsl #20
  18:	00001000 	andeq	r1, r0, r0
  1c:	0002a620 	andeq	sl, r2, r0, lsr #12
  20:	00000000 	andeq	r0, r0, r0
  24:	08010200 	stmdaeq	r1, {r9}
  28:	000000c6 	andeq	r0, r0, r6, asr #1
  2c:	e6070202 	str	r0, [r7], -r2, lsl #4
  30:	03000000 	movweq	r0, #0
  34:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
  38:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
  3c:	0000ec07 	andeq	lr, r0, r7, lsl #24
  40:	00b90400 	adcseq	r0, r9, r0, lsl #8
  44:	61010000 	mrsvs	r0, (UNDEF: 1)
  48:	2000026c 	andcs	r0, r0, ip, ror #4
  4c:	0000004a 	andeq	r0, r0, sl, asr #32
  50:	007d9c01 	rsbseq	r9, sp, r1, lsl #24
  54:	78050000 	stmdavc	r5, {}	; <UNPREDICTABLE>
  58:	33610100 	cmncc	r1, #0, 2
  5c:	02000000 	andeq	r0, r0, #0
  60:	79056c91 	stmdbvc	r5, {r0, r4, r7, sl, fp, sp, lr}
  64:	33610100 	cmncc	r1, #0, 2
  68:	02000000 	andeq	r0, r0, #0
  6c:	00066891 	muleq	r6, r1, r8
  70:	01000000 	mrseq	r0, (UNDEF: 0)
  74:	00002562 	andeq	r2, r0, r2, ror #10
  78:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
  7c:	01e00400 	mvneq	r0, r0, lsl #8
  80:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
  84:	20000230 	andcs	r0, r0, r0, lsr r2
  88:	0000003c 	andeq	r0, r0, ip, lsr r0
  8c:	00a19c01 	adceq	r9, r1, r1, lsl #24
  90:	07070000 	streq	r0, [r7, -r0]
  94:	01000000 	mrseq	r0, (UNDEF: 0)
  98:	00002558 	andeq	r2, r0, r8, asr r5
  9c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
  a0:	00110800 	andseq	r0, r1, r0, lsl #16
  a4:	4a010000 	bmi	400ac <startup-0x1ffbff54>
  a8:	200001f6 	strdcs	r0, [r0], -r6
  ac:	0000003a 	andeq	r0, r0, sl, lsr r0
  b0:	bb049c01 	bllt	1270bc <startup-0x1fed8f44>
  b4:	01000001 	tsteq	r0, r1
  b8:	0001c444 	andeq	ip, r1, r4, asr #8
  bc:	00003220 	andeq	r3, r0, r0, lsr #4
  c0:	d69c0100 	ldrle	r0, [ip], r0, lsl #2
  c4:	07000000 	streq	r0, [r0, -r0]
  c8:	000005fd 	strdeq	r0, [r0], -sp
  cc:	00254401 	eoreq	r4, r5, r1, lsl #8
  d0:	91020000 	mrsls	r0, (UNDEF: 2)
  d4:	ab090077 	blge	2402b8 <startup-0x1fdbfd48>
  d8:	01000001 	tsteq	r0, r1
  dc:	00002539 	andeq	r2, r0, r9, lsr r5
  e0:	00017c00 	andeq	r7, r1, r0, lsl #24
  e4:	00004820 	andeq	r4, r0, r0, lsr #16
  e8:	fe9c0100 	cdp2	1, 9, cr0, cr12, cr0, {0}
  ec:	06000000 	streq	r0, [r0], -r0
  f0:	00000517 	andeq	r0, r0, r7, lsl r5
  f4:	00253b01 	eoreq	r3, r5, r1, lsl #22
  f8:	91020000 	mrsls	r0, (UNDEF: 2)
  fc:	d409006f 	strle	r0, [r9], #-111	; 0xffffff91
 100:	01000000 	mrseq	r0, (UNDEF: 0)
 104:	0000252f 	andeq	r2, r0, pc, lsr #10
 108:	00013400 	andeq	r3, r1, r0, lsl #8
 10c:	00004820 	andeq	r4, r0, r0, lsr #16
 110:	269c0100 	ldrcs	r0, [ip], r0, lsl #2
 114:	06000001 	streq	r0, [r0], -r1
 118:	000000da 	ldrdeq	r0, [r0], -sl
 11c:	00253101 	eoreq	r3, r5, r1, lsl #2
 120:	91020000 	mrsls	r0, (UNDEF: 2)
 124:	8504006f 	strhi	r0, [r4, #-111]	; 0xffffff91
 128:	01000001 	tsteq	r0, r1
 12c:	00010a29 	andeq	r0, r1, r9, lsr #20
 130:	00002a20 	andeq	r2, r0, r0, lsr #20
 134:	4a9c0100 	bmi	fe70053c <ball+0xde6fed98>
 138:	07000001 	streq	r0, [r0, -r1]
 13c:	0000051c 	andeq	r0, r0, ip, lsl r5
 140:	00252901 	eoreq	r2, r5, r1, lsl #18
 144:	91020000 	mrsls	r0, (UNDEF: 2)
 148:	f1040077 			; <UNDEFINED> instruction: 0xf1040077
 14c:	01000001 	tsteq	r0, r1
 150:	0000e023 	andeq	lr, r0, r3, lsr #32
 154:	00002a20 	andeq	r2, r0, r0, lsr #20
 158:	6e9c0100 	fmlvse	f0, f4, f0
 15c:	07000001 	streq	r0, [r0, -r1]
 160:	000005fd 	strdeq	r0, [r0], -sp
 164:	00252301 	eoreq	r2, r5, r1, lsl #6
 168:	91020000 	mrsls	r0, (UNDEF: 2)
 16c:	960a0077 			; <UNDEFINED> instruction: 0x960a0077
 170:	01000001 	tsteq	r0, r1
 174:	0000a41f 	andeq	sl, r0, pc, lsl r4
 178:	00003c20 	andeq	r3, r0, r0, lsr #24
 17c:	909c0100 	addsls	r0, ip, r0, lsl #2
 180:	05000001 	streq	r0, [r0, #-1]
 184:	1f010078 	svcne	0x00010078
 188:	00000025 	andeq	r0, r0, r5, lsr #32
 18c:	00779102 	rsbseq	r9, r7, r2, lsl #2
 190:	0001470a 	andeq	r4, r1, sl, lsl #14
 194:	741a0100 	ldrvc	r0, [sl], #-256	; 0xffffff00
 198:	30200000 	eorcc	r0, r0, r0
 19c:	01000000 	mrseq	r0, (UNDEF: 0)
 1a0:	0001b29c 	muleq	r1, ip, r2
 1a4:	00780500 	rsbseq	r0, r8, r0, lsl #10
 1a8:	00251a01 	eoreq	r1, r5, r1, lsl #20
 1ac:	91020000 	mrsls	r0, (UNDEF: 2)
 1b0:	31090077 	tstcc	r9, r7, ror r0
 1b4:	01000001 	tsteq	r0, r1
 1b8:	00002510 	andeq	r2, r0, r0, lsl r5
 1bc:	00004000 	andeq	r4, r0, r0
 1c0:	00003420 	andeq	r3, r0, r0, lsr #8
 1c4:	da9c0100 	ble	fe7005cc <ball+0xde6fee28>
 1c8:	06000001 	streq	r0, [r0], -r1
 1cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d0:	00251401 	eoreq	r1, r5, r1, lsl #8
 1d4:	91020000 	mrsls	r0, (UNDEF: 2)
 1d8:	c90b0077 	stmdbgt	fp, {r0, r1, r2, r4, r5, r6}
 1dc:	01000001 	tsteq	r0, r1
 1e0:	00001009 	andeq	r1, r0, r9
 1e4:	00003020 	andeq	r3, r0, r0, lsr #32
 1e8:	079c0100 	ldreq	r0, [ip, r0, lsl #2]
 1ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f0:	00250901 	eoreq	r0, r5, r1, lsl #18
 1f4:	91020000 	mrsls	r0, (UNDEF: 2)
 1f8:	37000077 	smlsdxcc	r0, r7, r0, r0
 1fc:	04000004 	streq	r0, [r0], #-4
 200:	0000d700 	andeq	sp, r0, r0, lsl #14
 204:	21010400 	tstcs	r1, r0, lsl #8
 208:	0c000000 	stceq	0, cr0, [r0], {-0}
 20c:	00000214 	andeq	r0, r0, r4, lsl r2
 210:	0000015a 	andeq	r0, r0, sl, asr r1
	...
 21c:	000000bd 	strheq	r0, [r0], -sp
 220:	c6080102 	strgt	r0, [r8], -r2, lsl #2
 224:	02000000 	andeq	r0, r0, #0
 228:	00e60702 	rsceq	r0, r6, r2, lsl #14
 22c:	68030000 	stmdavs	r3, {}	; <UNPREDICTABLE>
 230:	02000002 	andeq	r0, r0, #2
 234:	0054b602 	subseq	fp, r4, r2, lsl #12
 238:	78040000 	stmdavc	r4, {}	; <UNPREDICTABLE>
 23c:	25b70200 	ldrcs	r0, [r7, #512]!	; 0x200
 240:	00000000 	andeq	r0, r0, r0
 244:	02007904 	andeq	r7, r0, #4, 18	; 0x10000
 248:	000025b8 			; <UNDEFINED> instruction: 0x000025b8
 24c:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
 250:	0000027a 	andeq	r0, r0, sl, ror r2
 254:	0033b902 	eorseq	fp, r3, r2, lsl #18
 258:	ca030000 	bgt	c0260 <startup-0x1ff3fda0>
 25c:	34000002 	strcc	r0, [r0], #-2
 260:	009bbd02 	addseq	fp, fp, r2, lsl #26
 264:	36060000 	strcc	r0, [r6], -r0
 268:	02000003 	andeq	r0, r0, #3
 26c:	00009bbe 			; <UNDEFINED> instruction: 0x00009bbe
 270:	e2060000 	and	r0, r6, #0
 274:	02000002 	andeq	r0, r0, #2
 278:	00009bbf 			; <UNDEFINED> instruction: 0x00009bbf
 27c:	e8060400 	stmda	r6, {sl}
 280:	02000002 	andeq	r0, r0, #2
 284:	00009bc0 	andeq	r9, r0, r0, asr #23
 288:	70040800 	andvc	r0, r4, r0, lsl #16
 28c:	c1020078 	tstgt	r2, r8, ror r0
 290:	000000a2 	andeq	r0, r0, r2, lsr #1
 294:	0407000c 	streq	r0, [r7], #-12
 298:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 29c:	00540800 	subseq	r0, r4, r0, lsl #16
 2a0:	00b20000 	adcseq	r0, r2, r0
 2a4:	b2090000 	andlt	r0, r9, #0
 2a8:	13000000 	movwne	r0, #0
 2ac:	07040200 	streq	r0, [r4, -r0, lsl #4]
 2b0:	000000ec 	andeq	r0, r0, ip, ror #1
 2b4:	00020605 	andeq	r0, r2, r5, lsl #12
 2b8:	5fc20200 	svcpl	0x00c20200
 2bc:	05000000 	streq	r0, [r0, #-0]
 2c0:	00000205 	andeq	r0, r0, r5, lsl #4
 2c4:	00cfc202 	sbceq	ip, pc, r2, lsl #4
 2c8:	040a0000 	streq	r0, [sl], #-0
 2cc:	0000005f 	andeq	r0, r0, pc, asr r0
 2d0:	00033103 	andeq	r3, r3, r3, lsl #2
 2d4:	c5022400 	strgt	r2, [r2, #-1024]	; 0xfffffc00
 2d8:	0000014e 	andeq	r0, r0, lr, asr #2
 2dc:	6f656704 	svcvs	0x00656704
 2e0:	c4c60200 	strbgt	r0, [r6], #512	; 0x200
 2e4:	00000000 	andeq	r0, r0, r0
 2e8:	00025006 	andeq	r5, r2, r6
 2ec:	9bc70200 	blls	ff1c0af4 <ball+0xdf1bf350>
 2f0:	04000000 	streq	r0, [r0], #-0
 2f4:	00025506 	andeq	r5, r2, r6, lsl #10
 2f8:	9bc70200 	blls	ff1c0b00 <ball+0xdf1bf35c>
 2fc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 300:	00028a06 	andeq	r8, r2, r6, lsl #20
 304:	9bc80200 	blls	ff200b0c <ball+0xdf1ff368>
 308:	0c000000 	stceq	0, cr0, [r0], {-0}
 30c:	00028f06 	andeq	r8, r2, r6, lsl #30
 310:	9bc80200 	blls	ff200b18 <ball+0xdf1ff374>
 314:	10000000 	andne	r0, r0, r0
 318:	00030006 	andeq	r0, r3, r6
 31c:	5fc90200 	svcpl	0x00c90200
 320:	14000001 	strne	r0, [r0], #-1
 324:	00055f06 	andeq	r5, r5, r6, lsl #30
 328:	5fca0200 	svcpl	0x00ca0200
 32c:	18000001 	stmdane	r0, {r0}
 330:	00024606 	andeq	r4, r2, r6, lsl #12
 334:	5fcb0200 	svcpl	0x00cb0200
 338:	1c000001 	stcne	0, cr0, [r0], {1}
 33c:	00028006 	andeq	r8, r2, r6
 340:	7acc0200 	bvc	ff300b48 <ball+0xdf2ff3a4>
 344:	20000001 	andcs	r0, r0, r1
 348:	01590b00 	cmpeq	r9, r0, lsl #22
 34c:	590c0000 	stmdbpl	ip, {}	; <UNPREDICTABLE>
 350:	00000001 	andeq	r0, r0, r1
 354:	00d5040a 	sbcseq	r0, r5, sl, lsl #8
 358:	040a0000 	streq	r0, [sl], #-0
 35c:	0000014e 	andeq	r0, r0, lr, asr #2
 360:	00017a0b 	andeq	r7, r1, fp, lsl #20
 364:	01590c00 	cmpeq	r9, r0, lsl #24
 368:	9b0c0000 	blls	300370 <startup-0x1fcffc90>
 36c:	0c000000 	stceq	0, cr0, [r0], {-0}
 370:	0000009b 	muleq	r0, fp, r0
 374:	65040a00 	strvs	r0, [r4, #-2560]	; 0xfffff600
 378:	05000001 	streq	r0, [r0, #-1]
 37c:	00000359 	andeq	r0, r0, r9, asr r3
 380:	00d5cd02 	sbcseq	ip, r5, r2, lsl #26
 384:	58050000 	stmdapl	r5, {}	; <UNPREDICTABLE>
 388:	02000003 	andeq	r0, r0, #3
 38c:	000159cd 	andeq	r5, r1, sp, asr #19
 390:	00250800 	eoreq	r0, r5, r0, lsl #16
 394:	01a60000 			; <UNDEFINED> instruction: 0x01a60000
 398:	b2090000 	andlt	r0, r9, #0
 39c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 3a0:	026f0d00 	rsbeq	r0, pc, #0, 26
 3a4:	03030000 	movweq	r0, #12288	; 0x3000
 3a8:	00000196 	muleq	r0, r6, r1
 3ac:	13280305 			; <UNDEFINED> instruction: 0x13280305
 3b0:	25082000 	strcs	r2, [r8, #-0]
 3b4:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
 3b8:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 3bc:	000000b2 	strheq	r0, [r0], -r2
 3c0:	0d0003ff 	stceq	3, cr0, [r0, #-1020]	; 0xfffffc04
 3c4:	00000294 	muleq	r0, r4, r2
 3c8:	01b70304 			; <UNDEFINED> instruction: 0x01b70304
 3cc:	03050000 	movweq	r0, #20480	; 0x5000
 3d0:	20001334 	andcs	r1, r0, r4, lsr r3
 3d4:	00002508 	andeq	r2, r0, r8, lsl #10
 3d8:	0001e900 	andeq	lr, r1, r0, lsl #18
 3dc:	00b20900 	adcseq	r0, r2, r0, lsl #18
 3e0:	003b0000 	eorseq	r0, fp, r0
 3e4:	0002a40d 	andeq	sl, r2, sp, lsl #8
 3e8:	d9030500 	stmdble	r3, {r8, sl}
 3ec:	05000001 	streq	r0, [r0, #-1]
 3f0:	00173403 	andseq	r3, r7, r3, lsl #8
 3f4:	01080f20 	tsteq	r8, r0, lsr #30
 3f8:	00022716 	andeq	r2, r2, r6, lsl r7
 3fc:	03050600 	movweq	r0, #22016	; 0x5600
 400:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
 404:	00000025 	andeq	r0, r0, r5, lsr #32
 408:	02b40600 	adcseq	r0, r4, #0, 12
 40c:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
 410:	00000025 	andeq	r0, r0, r5, lsr #32
 414:	051c0601 	ldreq	r0, [ip, #-1537]	; 0xfffff9ff
 418:	1a010000 	bne	40420 <startup-0x1ffbfbe0>
 41c:	00000227 	andeq	r0, r0, r7, lsr #4
 420:	040a0004 	streq	r0, [sl], #-4
 424:	00000025 	andeq	r0, r0, r5, lsr #32
 428:	00031f05 	andeq	r1, r3, r5, lsl #30
 42c:	fa1d0100 	blx	740834 <startup-0x1f8bf7cc>
 430:	10000001 	andne	r0, r0, r1
 434:	0000025a 	andeq	r0, r0, sl, asr r2
 438:	00b93601 	adcseq	r3, r9, r1, lsl #12
 43c:	03050000 	movweq	r0, #20480	; 0x5000
 440:	20001770 	andcs	r1, r0, r0, ror r7
 444:	0002fb0d 	andeq	pc, r2, sp, lsl #22
 448:	80430100 	subhi	r0, r3, r0, lsl #2
 44c:	05000001 	streq	r0, [r0, #-1]
 450:	0017a403 	andseq	sl, r7, r3, lsl #8
 454:	02c51120 	sbceq	r1, r5, #32, 2
 458:	65010000 	strvs	r0, [r1, #-0]
 45c:	0000009b 	muleq	r0, fp, r0
 460:	2000043c 	andcs	r0, r0, ip, lsr r4
 464:	00000078 	andeq	r0, r0, r8, ror r0
 468:	02c39c01 	sbceq	r9, r3, #256	; 0x100
 46c:	ee120000 	cdp	0, 1, cr0, cr2, cr0, {0}
 470:	01000002 	tsteq	r0, r2
 474:	00009b65 	andeq	r9, r0, r5, ror #22
 478:	64910200 	ldrvs	r0, [r1], #512	; 0x200
 47c:	00024b12 	andeq	r4, r2, r2, lsl fp
 480:	c3650100 	cmngt	r5, #0, 2
 484:	02000002 	andeq	r0, r0, #2
 488:	70136091 	mulsvc	r3, r1, r0
 48c:	8b680100 	blhi	1a00894 <startup-0x1e5ff76c>
 490:	02000001 	andeq	r0, r0, #1
 494:	ae0d7491 	mcrge	4, 0, r7, cr13, cr1, {4}
 498:	01000002 	tsteq	r0, r2
 49c:	0002d669 	andeq	sp, r2, r9, ror #12
 4a0:	70910200 	addsvc	r0, r1, r0, lsl #4
 4a4:	00032614 	andeq	r2, r3, r4, lsl r6
 4a8:	d66a0100 	strbtle	r0, [sl], -r0, lsl #2
 4ac:	0d000002 	stceq	0, cr0, [r0, #-8]
 4b0:	0000020f 	andeq	r0, r0, pc, lsl #4
 4b4:	02d66b01 	sbcseq	r6, r6, #1024	; 0x400
 4b8:	91020000 	mrsls	r0, (UNDEF: 2)
 4bc:	040a006c 	streq	r0, [sl], #-108	; 0xffffff94
 4c0:	000002c9 	andeq	r0, r0, r9, asr #5
 4c4:	02cf040a 	sbceq	r0, pc, #167772160	; 0xa000000
 4c8:	01020000 	mrseq	r0, (UNDEF: 2)
 4cc:	0000cf08 	andeq	ip, r0, r8, lsl #30
 4d0:	2d040a00 	vstrcs	s0, [r4, #-0]
 4d4:	15000002 	strne	r0, [r0, #-2]
 4d8:	000002bb 			; <UNDEFINED> instruction: 0x000002bb
 4dc:	04205e01 	strteq	r5, [r0], #-3585	; 0xfffff1ff
 4e0:	001c2000 	andseq	r2, ip, r0
 4e4:	9c010000 	stcls	0, cr0, [r1], {-0}
 4e8:	0002d416 	andeq	sp, r2, r6, lsl r4
 4ec:	a64e0100 	strbge	r0, [lr], -r0, lsl #2
 4f0:	7a200003 	bvc	800504 <startup-0x1f7ffafc>
 4f4:	01000000 	mrseq	r0, (UNDEF: 0)
 4f8:	00032b9c 	muleq	r3, ip, fp
 4fc:	00731300 	rsbseq	r1, r3, r0, lsl #6
 500:	02c94f01 	sbceq	r4, r9, #1, 30
 504:	91020000 	mrsls	r0, (UNDEF: 2)
 508:	034c0d6c 	movteq	r0, #52588	; 0xcd6c
 50c:	50010000 	andpl	r0, r1, r0
 510:	0000032b 	andeq	r0, r0, fp, lsr #6
 514:	0d609102 	stfeqp	f1, [r0, #-8]!
 518:	00000352 	andeq	r0, r0, r2, asr r3
 51c:	033b5101 	teqeq	fp, #1073741824	; 0x40000000
 520:	91020000 	mrsls	r0, (UNDEF: 2)
 524:	cf080050 	svcgt	0x00080050
 528:	3b000002 	blcc	538 <startup-0x1ffffac8>
 52c:	09000003 	stmdbeq	r0, {r0, r1}
 530:	000000b2 	strheq	r0, [r0], -r2
 534:	cf080008 	svcgt	0x00080008
 538:	4b000002 	blmi	548 <startup-0x1ffffab8>
 53c:	09000003 	stmdbeq	r0, {r0, r1}
 540:	000000b2 	strheq	r0, [r0], -r2
 544:	4017000c 	andsmi	r0, r7, ip
 548:	01000003 	tsteq	r0, r3
 54c:	0002e426 	andeq	lr, r2, r6, lsr #8
 550:	0000c220 	andeq	ip, r0, r0, lsr #4
 554:	dd9c0100 	ldfles	f0, [ip]
 558:	18000003 	stmdane	r0, {r0, r1}
 55c:	26010073 			; <UNDEFINED> instruction: 0x26010073
 560:	000002d6 	ldrdeq	r0, [r0], -r6
 564:	185c9102 	ldmdane	ip, {r1, r8, ip, pc}^
 568:	26010078 			; <UNDEFINED> instruction: 0x26010078
 56c:	0000009b 	muleq	r0, fp, r0
 570:	18589102 	ldmdane	r8, {r1, r8, ip, pc}^
 574:	26010079 			; <UNDEFINED> instruction: 0x26010079
 578:	0000009b 	muleq	r0, fp, r0
 57c:	18549102 	ldmdane	r4, {r1, r8, ip, pc}^
 580:	00746573 	rsbseq	r6, r4, r3, ror r5
 584:	009b2601 	addseq	r2, fp, r1, lsl #12
 588:	91020000 	mrsls	r0, (UNDEF: 2)
 58c:	00691350 	rsbeq	r1, r9, r0, asr r3
 590:	009b2701 	addseq	r2, fp, r1, lsl #14
 594:	91020000 	mrsls	r0, (UNDEF: 2)
 598:	006a1374 	rsbeq	r1, sl, r4, ror r3
 59c:	009b2701 	addseq	r2, fp, r1, lsl #14
 5a0:	91020000 	mrsls	r0, (UNDEF: 2)
 5a4:	006b1370 	rsbeq	r1, fp, r0, ror r3
 5a8:	009b2701 	addseq	r2, fp, r1, lsl #14
 5ac:	91020000 	mrsls	r0, (UNDEF: 2)
 5b0:	030b0d6c 	movweq	r0, #48492	; 0xbd6c
 5b4:	27010000 	strcs	r0, [r1, -r0]
 5b8:	0000009b 	muleq	r0, fp, r0
 5bc:	19689102 	stmdbne	r8!, {r1, r8, ip, pc}^
 5c0:	20000324 	andcs	r0, r0, r4, lsr #6
 5c4:	0000005a 	andeq	r0, r0, sl, asr r0
 5c8:	00001c0d 	andeq	r1, r0, sp, lsl #24
 5cc:	252e0100 	strcs	r0, [lr, #-256]!	; 0xffffff00
 5d0:	02000000 	andeq	r0, r0, #0
 5d4:	00006791 	muleq	r0, r1, r7
 5d8:	00031a1a 	andeq	r1, r3, sl, lsl sl
 5dc:	b81f0100 	ldmdalt	pc, {r8}	; <UNPREDICTABLE>
 5e0:	2c200002 	stccs	0, cr0, [r0], #-8
 5e4:	01000000 	mrseq	r0, (UNDEF: 0)
 5e8:	0004299c 	muleq	r4, ip, r9
 5ec:	00731800 	rsbseq	r1, r3, r0, lsl #16
 5f0:	02d61f01 	sbcseq	r1, r6, #1, 30
 5f4:	91020000 	mrsls	r0, (UNDEF: 2)
 5f8:	051c1274 	ldreq	r1, [ip, #-628]	; 0xfffffd8c
 5fc:	1f010000 	svcne	0x00010000
 600:	00000227 	andeq	r0, r0, r7, lsr #4
 604:	12709102 	rsbsne	r9, r0, #-2147483648	; 0x80000000
 608:	00000305 	andeq	r0, r0, r5, lsl #6
 60c:	009b1f01 	addseq	r1, fp, r1, lsl #30
 610:	91020000 	mrsls	r0, (UNDEF: 2)
 614:	02b4126c 	adcseq	r1, r4, #108, 4	; 0xc0000006
 618:	1f010000 	svcne	0x00010000
 61c:	0000009b 	muleq	r0, fp, r0
 620:	00689102 	rsbeq	r9, r8, r2, lsl #2
 624:	0002f31b 	andeq	pc, r2, fp, lsl r3	; <UNPREDICTABLE>
 628:	000c0100 	andeq	r0, ip, r0, lsl #2
 62c:	0c200000 	stceq	0, cr0, [r0], #-0
 630:	01000000 	mrseq	r0, (UNDEF: 0)
 634:	0249009c 	subeq	r0, r9, #156	; 0x9c
 638:	00040000 	andeq	r0, r4, r0
 63c:	00000273 	andeq	r0, r0, r3, ror r2
 640:	00210104 	eoreq	r0, r1, r4, lsl #2
 644:	600c0000 	andvs	r0, ip, r0
 648:	5a000003 	bpl	65c <startup-0x1ffff9a4>
 64c:	b4000001 	strlt	r0, [r0], #-1
 650:	7e200004 	cdpvc	0, 2, cr0, cr0, cr4, {0}
 654:	df000001 	svcle	0x00000001
 658:	02000001 	andeq	r0, r0, #1
 65c:	00c60801 	sbceq	r0, r6, r1, lsl #16
 660:	02020000 	andeq	r0, r2, #0
 664:	0000e607 	andeq	lr, r0, r7, lsl #12
 668:	02680300 	rsbeq	r0, r8, #0, 6
 66c:	02020000 	andeq	r0, r2, #0
 670:	000054b6 			; <UNDEFINED> instruction: 0x000054b6
 674:	00780400 	rsbseq	r0, r8, r0, lsl #8
 678:	0025b702 	eoreq	fp, r5, r2, lsl #14
 67c:	04000000 	streq	r0, [r0], #-0
 680:	b8020079 	stmdalt	r2, {r0, r3, r4, r5, r6}
 684:	00000025 	andeq	r0, r0, r5, lsr #32
 688:	7a050001 	bvc	140694 <startup-0x1febf96c>
 68c:	02000002 	andeq	r0, r0, #2
 690:	000033b9 			; <UNDEFINED> instruction: 0x000033b9
 694:	02ca0300 	sbceq	r0, sl, #0, 6
 698:	02340000 	eorseq	r0, r4, #0
 69c:	00009bbd 			; <UNDEFINED> instruction: 0x00009bbd
 6a0:	03360600 	teqeq	r6, #0, 12
 6a4:	be020000 	cdplt	0, 0, cr0, cr2, cr0, {0}
 6a8:	0000009b 	muleq	r0, fp, r0
 6ac:	02e20600 	rsceq	r0, r2, #0, 12
 6b0:	bf020000 	svclt	0x00020000
 6b4:	0000009b 	muleq	r0, fp, r0
 6b8:	02e80604 	rsceq	r0, r8, #4, 12	; 0x400000
 6bc:	c0020000 	andgt	r0, r2, r0
 6c0:	0000009b 	muleq	r0, fp, r0
 6c4:	78700408 	ldmdavc	r0!, {r3, sl}^
 6c8:	a2c10200 	sbcge	r0, r1, #0, 4
 6cc:	0c000000 	stceq	0, cr0, [r0], {-0}
 6d0:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
 6d4:	00746e69 	rsbseq	r6, r4, r9, ror #28
 6d8:	00005408 	andeq	r5, r0, r8, lsl #8
 6dc:	0000b200 	andeq	fp, r0, r0, lsl #4
 6e0:	00b20900 	adcseq	r0, r2, r0, lsl #18
 6e4:	00130000 	andseq	r0, r3, r0
 6e8:	ec070402 	cfstrs	mvf0, [r7], {2}
 6ec:	05000000 	streq	r0, [r0, #-0]
 6f0:	00000205 	andeq	r0, r0, r5, lsl #4
 6f4:	00c4c202 	sbceq	ip, r4, r2, lsl #4
 6f8:	040a0000 	streq	r0, [sl], #-0
 6fc:	0000005f 	andeq	r0, r0, pc, asr r0
 700:	00033103 	andeq	r3, r3, r3, lsl #2
 704:	c5022400 	strgt	r2, [r2, #-1024]	; 0xfffffc00
 708:	00000143 	andeq	r0, r0, r3, asr #2
 70c:	6f656704 	svcvs	0x00656704
 710:	b9c60200 	stmiblt	r6, {r9}^
 714:	00000000 	andeq	r0, r0, r0
 718:	00025006 	andeq	r5, r2, r6
 71c:	9bc70200 	blls	ff1c0f24 <ball+0xdf1bf780>
 720:	04000000 	streq	r0, [r0], #-0
 724:	00025506 	andeq	r5, r2, r6, lsl #10
 728:	9bc70200 	blls	ff1c0f30 <ball+0xdf1bf78c>
 72c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 730:	00028a06 	andeq	r8, r2, r6, lsl #20
 734:	9bc80200 	blls	ff200f3c <ball+0xdf1ff798>
 738:	0c000000 	stceq	0, cr0, [r0], {-0}
 73c:	00028f06 	andeq	r8, r2, r6, lsl #30
 740:	9bc80200 	blls	ff200f48 <ball+0xdf1ff7a4>
 744:	10000000 	andne	r0, r0, r0
 748:	00030006 	andeq	r0, r3, r6
 74c:	54c90200 	strbpl	r0, [r9], #512	; 0x200
 750:	14000001 	strne	r0, [r0], #-1
 754:	00055f06 	andeq	r5, r5, r6, lsl #30
 758:	54ca0200 	strbpl	r0, [sl], #512	; 0x200
 75c:	18000001 	stmdane	r0, {r0}
 760:	00024606 	andeq	r4, r2, r6, lsl #12
 764:	54cb0200 	strbpl	r0, [fp], #512	; 0x200
 768:	1c000001 	stcne	0, cr0, [r0], {1}
 76c:	00028006 	andeq	r8, r2, r6
 770:	6fcc0200 	svcvs	0x00cc0200
 774:	20000001 	andcs	r0, r0, r1
 778:	014e0b00 	cmpeq	lr, r0, lsl #22
 77c:	4e0c0000 	cdpmi	0, 0, cr0, cr12, cr0, {0}
 780:	00000001 	andeq	r0, r0, r1
 784:	00ca040a 	sbceq	r0, sl, sl, lsl #8
 788:	040a0000 	streq	r0, [sl], #-0
 78c:	00000143 	andeq	r0, r0, r3, asr #2
 790:	00016f0b 	andeq	r6, r1, fp, lsl #30
 794:	014e0c00 	cmpeq	lr, r0, lsl #24
 798:	9b0c0000 	blls	3007a0 <startup-0x1fcff860>
 79c:	0c000000 	stceq	0, cr0, [r0], {-0}
 7a0:	0000009b 	muleq	r0, fp, r0
 7a4:	5a040a00 	bpl	102fac <startup-0x1fefd054>
 7a8:	05000001 	streq	r0, [r0, #-1]
 7ac:	00000358 	andeq	r0, r0, r8, asr r3
 7b0:	014ecd02 	cmpeq	lr, r2, lsl #26
 7b4:	c40d0000 	strgt	r0, [sp], #-0
 7b8:	01000003 	tsteq	r0, r3
 7bc:	00058c15 	andeq	r8, r5, r5, lsl ip
 7c0:	0000a620 	andeq	sl, r0, r0, lsr #12
 7c4:	a29c0100 	addsge	r0, ip, #0, 2
 7c8:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 7cc:	1501006f 	strne	r0, [r1, #-111]	; 0xffffff91
 7d0:	00000175 	andeq	r0, r0, r5, ror r1
 7d4:	006c9102 	rsbeq	r9, ip, r2, lsl #2
 7d8:	0003ab0d 	andeq	sl, r3, sp, lsl #22
 7dc:	300f0100 	andcc	r0, pc, r0, lsl #2
 7e0:	5c200005 	stcpl	0, cr0, [r0], #-20	; 0xffffffec
 7e4:	01000000 	mrseq	r0, (UNDEF: 0)
 7e8:	0001da9c 	muleq	r1, ip, sl
 7ec:	006f0e00 	rsbeq	r0, pc, r0, lsl #28
 7f0:	01750f01 	cmneq	r5, r1, lsl #30
 7f4:	91020000 	mrsls	r0, (UNDEF: 2)
 7f8:	05380f6c 	ldreq	r0, [r8, #-3948]!	; 0xfffff094
 7fc:	004c2000 	subeq	r2, ip, r0
 800:	69100000 	ldmdbvs	r0, {}	; <UNPREDICTABLE>
 804:	9b100100 	blls	400c0c <startup-0x1fbff3f4>
 808:	02000000 	andeq	r0, r0, #0
 80c:	00007491 	muleq	r0, r1, r4
 810:	0003b80d 	andeq	fp, r3, sp, lsl #16
 814:	d4080100 	strle	r0, [r8], #-256	; 0xffffff00
 818:	5c200004 	stcpl	0, cr0, [r0], #-16
 81c:	01000000 	mrseq	r0, (UNDEF: 0)
 820:	0002129c 	muleq	r2, ip, r2
 824:	006f0e00 	rsbeq	r0, pc, r0, lsl #28
 828:	01750801 	cmneq	r5, r1, lsl #16
 82c:	91020000 	mrsls	r0, (UNDEF: 2)
 830:	04dc0f6c 	ldrbeq	r0, [ip], #3948	; 0xf6c
 834:	004c2000 	subeq	r2, ip, r0
 838:	69100000 	ldmdbvs	r0, {}	; <UNPREDICTABLE>
 83c:	9b090100 	blls	240c44 <startup-0x1fdbf3bc>
 840:	02000000 	andeq	r0, r0, #0
 844:	00007491 	muleq	r0, r1, r4
 848:	00039a11 	andeq	r9, r3, r1, lsl sl
 84c:	b4030100 	strlt	r0, [r3], #-256	; 0xffffff00
 850:	20200004 	eorcs	r0, r0, r4
 854:	01000000 	mrseq	r0, (UNDEF: 0)
 858:	006f0e9c 	mlseq	pc, ip, lr, r0	; <UNPREDICTABLE>
 85c:	01750301 	cmneq	r5, r1, lsl #6
 860:	91020000 	mrsls	r0, (UNDEF: 2)
 864:	03d01274 	bicseq	r1, r0, #116, 4	; 0x40000007
 868:	03010000 	movweq	r0, #4096	; 0x1000
 86c:	0000009b 	muleq	r0, fp, r0
 870:	12709102 	rsbsne	r9, r0, #-2147483648	; 0x80000000
 874:	000003d7 	ldrdeq	r0, [r0], -r7
 878:	009b0301 	addseq	r0, fp, r1, lsl #6
 87c:	91020000 	mrsls	r0, (UNDEF: 2)
 880:	a600006c 	strge	r0, [r0], -ip, rrx
 884:	04000000 	streq	r0, [r0], #-0
 888:	00036a00 	andeq	r6, r3, r0, lsl #20
 88c:	21010400 	tstcs	r1, r0, lsl #8
 890:	0c000000 	stceq	0, cr0, [r0], {-0}
 894:	000003f6 	strdeq	r0, [r0], -r6
 898:	0000015a 	andeq	r0, r0, sl, asr r1
 89c:	20000634 	andcs	r0, r0, r4, lsr r6
 8a0:	000000bc 	strheq	r0, [r0], -ip
 8a4:	00000292 	muleq	r0, r2, r2
 8a8:	c6080102 	strgt	r0, [r8], -r2, lsl #2
 8ac:	02000000 	andeq	r0, r0, #0
 8b0:	00e60702 	rsceq	r0, r6, r2, lsl #14
 8b4:	04030000 	streq	r0, [r3], #-0
 8b8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 8bc:	07040200 	streq	r0, [r4, -r0, lsl #4]
 8c0:	000000ec 	andeq	r0, r0, ip, ror #1
 8c4:	0003ea04 	andeq	lr, r3, r4, lsl #20
 8c8:	de260100 	sufles	f0, f6, f0
 8cc:	12200006 	eorne	r0, r0, #6
 8d0:	01000000 	mrseq	r0, (UNDEF: 0)
 8d4:	042f059c 	strteq	r0, [pc], #-1436	; 8dc <startup-0x1ffff724>
 8d8:	1b010000 	blne	408e0 <startup-0x1ffbf720>
 8dc:	200006a4 	andcs	r0, r0, r4, lsr #13
 8e0:	0000003a 	andeq	r0, r0, sl, lsr r0
 8e4:	00759c01 	rsbseq	r9, r5, r1, lsl #24
 8e8:	6d060000 	stcvs	0, cr0, [r6, #-0]
 8ec:	1b010073 	blne	40ac0 <startup-0x1ffbf540>
 8f0:	0000003a 	andeq	r0, r0, sl, lsr r0
 8f4:	00749102 	rsbseq	r9, r4, r2, lsl #2
 8f8:	0003de05 	andeq	sp, r3, r5, lsl #28
 8fc:	78120100 	ldmdavc	r2, {r8}
 900:	2c200006 	stccs	0, cr0, [r0], #-24	; 0xffffffe8
 904:	01000000 	mrseq	r0, (UNDEF: 0)
 908:	0000989c 	muleq	r0, ip, r8
 90c:	73750600 	cmnvc	r5, #0, 12
 910:	3a120100 	bcc	480d18 <startup-0x1fb7f2e8>
 914:	02000000 	andeq	r0, r0, #0
 918:	07007491 			; <UNDEFINED> instruction: 0x07007491
 91c:	0000043b 	andeq	r0, r0, fp, lsr r4
 920:	06340801 	ldrteq	r0, [r4], -r1, lsl #16
 924:	00442000 	subeq	r2, r4, r0
 928:	9c010000 	stcls	0, cr0, [r1], {-0}
 92c:	00010f00 	andeq	r0, r1, r0, lsl #30
 930:	ed000400 	cfstrs	mvf0, [r0, #-0]
 934:	04000003 	streq	r0, [r0], #-3
 938:	00002101 	andeq	r2, r0, r1, lsl #2
 93c:	04470c00 	strbeq	r0, [r7], #-3072	; 0xfffff400
 940:	015a0000 	cmpeq	sl, r0
 944:	06f00000 	ldrbteq	r0, [r0], r0
 948:	02102000 	andseq	r2, r0, #0
 94c:	03190000 	tsteq	r9, #0
 950:	01020000 	mrseq	r0, (UNDEF: 2)
 954:	0000c608 	andeq	ip, r0, r8, lsl #12
 958:	07020200 	streq	r0, [r2, -r0, lsl #4]
 95c:	000000e6 	andeq	r0, r0, r6, ror #1
 960:	69050403 	stmdbvs	r5, {r0, r1, sl}
 964:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
 968:	00ec0704 	rsceq	r0, ip, r4, lsl #14
 96c:	93040000 	movwls	r0, #16384	; 0x4000
 970:	01000004 	tsteq	r0, r4
 974:	00002541 	andeq	r2, r0, r1, asr #10
 978:	00089800 	andeq	r9, r8, r0, lsl #16
 97c:	00006820 	andeq	r6, r0, r0, lsr #16
 980:	859c0100 	ldrhi	r0, [ip, #256]	; 0x100
 984:	05000000 	streq	r0, [r0, #-0]
 988:	00776f72 	rsbseq	r6, r7, r2, ror pc
 98c:	00334201 	eorseq	r4, r3, r1, lsl #4
 990:	91020000 	mrsls	r0, (UNDEF: 2)
 994:	0482066c 	streq	r0, [r2], #1644	; 0x66c
 998:	42010000 	andmi	r0, r1, #0
 99c:	00000033 	andeq	r0, r0, r3, lsr r0
 9a0:	05689102 	strbeq	r9, [r8, #-258]!	; 0xfffffefe
 9a4:	0079656b 	rsbseq	r6, r9, fp, ror #10
 9a8:	00854301 	addeq	r4, r5, r1, lsl #6
 9ac:	91020000 	mrsls	r0, (UNDEF: 2)
 9b0:	25070058 	strcs	r0, [r7, #-88]	; 0xffffffa8
 9b4:	95000000 	strls	r0, [r0, #-0]
 9b8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 9bc:	0000003a 	andeq	r0, r0, sl, lsr r0
 9c0:	a009000f 	andge	r0, r9, pc
 9c4:	01000004 	tsteq	r0, r4
 9c8:	00003338 	andeq	r3, r0, r8, lsr r3
 9cc:	00084400 	andeq	r4, r8, r0, lsl #8
 9d0:	00005420 	andeq	r5, r0, r0, lsr #8
 9d4:	bb9c0100 	bllt	fe700ddc <ball+0xde6ff638>
 9d8:	05000000 	streq	r0, [r0, #-0]
 9dc:	39010063 	stmdbcc	r1, {r0, r1, r5, r6}
 9e0:	00000025 	andeq	r0, r0, r5, lsr #32
 9e4:	00779102 	rsbseq	r9, r7, r2, lsl #2
 9e8:	0004ab0a 	andeq	sl, r4, sl, lsl #22
 9ec:	f02e0100 			; <UNDEFINED> instruction: 0xf02e0100
 9f0:	54200007 	strtpl	r0, [r0], #-7
 9f4:	01000000 	mrseq	r0, (UNDEF: 0)
 9f8:	0000df9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
 9fc:	6f720b00 	svcvs	0x00720b00
 a00:	2e010077 	mcrcs	0, 0, r0, cr1, cr7, {3}
 a04:	0000003a 	andeq	r0, r0, sl, lsr r0
 a08:	00749102 	rsbseq	r9, r4, r2, lsl #2
 a0c:	0004980a 	andeq	r9, r4, sl, lsl #16
 a10:	38170100 	ldmdacc	r7, {r8}
 a14:	b8200007 	stmdalt	r0!, {r0, r1, r2}
 a18:	01000000 	mrseq	r0, (UNDEF: 0)
 a1c:	0001019c 	muleq	r1, ip, r1
 a20:	00630b00 	rsbeq	r0, r3, r0, lsl #22
 a24:	00251701 	eoreq	r1, r5, r1, lsl #14
 a28:	91020000 	mrsls	r0, (UNDEF: 2)
 a2c:	890c0077 	stmdbhi	ip, {r0, r1, r2, r4, r5, r6}
 a30:	01000004 	tsteq	r0, r4
 a34:	0006f008 	andeq	pc, r6, r8
 a38:	00004820 	andeq	r4, r0, r0, lsr #16
 a3c:	009c0100 	addseq	r0, ip, r0, lsl #2
 a40:	000002eb 	andeq	r0, r0, fp, ror #5
 a44:	04c00004 	strbeq	r0, [r0], #4
 a48:	01040000 	mrseq	r0, (UNDEF: 4)
 a4c:	00000021 	andeq	r0, r0, r1, lsr #32
 a50:	0004ce0c 	andeq	ip, r4, ip, lsl #28
 a54:	00015a00 	andeq	r5, r1, r0, lsl #20
 a58:	00090000 	andeq	r0, r9, r0
 a5c:	00051020 	andeq	r1, r5, r0, lsr #32
 a60:	0003e000 	andeq	lr, r3, r0
 a64:	057a0200 	ldrbeq	r0, [sl, #-512]!	; 0xfffffe00
 a68:	68020000 	stmdavs	r2, {}	; <UNPREDICTABLE>
 a6c:	00000030 	andeq	r0, r0, r0, lsr r0
 a70:	c6080103 	strgt	r0, [r8], -r3, lsl #2
 a74:	03000000 	movweq	r0, #0
 a78:	00e60702 	rsceq	r0, r6, r2, lsl #14
 a7c:	04040000 	streq	r0, [r4], #-0
 a80:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 a84:	07040300 	streq	r0, [r4, -r0, lsl #6]
 a88:	000000ec 	andeq	r0, r0, ip, ror #1
 a8c:	00002505 	andeq	r2, r0, r5, lsl #10
 a90:	00005d00 	andeq	r5, r0, r0, lsl #26
 a94:	00450600 	subeq	r0, r5, r0, lsl #12
 a98:	03ff0000 	mvnseq	r0, #0
 a9c:	04c30700 	strbeq	r0, [r3], #1792	; 0x700
 aa0:	81010000 	mrshi	r0, (UNDEF: 1)
 aa4:	0000004c 	andeq	r0, r0, ip, asr #32
 aa8:	0f280305 	svceq	0x00280305
 aac:	bd082000 	stclt	0, cr2, [r8, #-0]
 ab0:	01000004 	tsteq	r0, r4
 ab4:	000ddca2 	andeq	sp, sp, r2, lsr #25
 ab8:	00003420 	andeq	r3, r0, r0, lsr #8
 abc:	909c0100 	addsls	r0, ip, r0, lsl #2
 ac0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 ac4:	a3010069 	movwge	r0, #4201	; 0x1069
 ac8:	0000003e 	andeq	r0, r0, lr, lsr r0
 acc:	00749102 	rsbseq	r9, r4, r2, lsl #2
 ad0:	0005a60a 	andeq	sl, r5, sl, lsl #12
 ad4:	10950100 	addsne	r0, r5, r0, lsl #2
 ad8:	cc20000d 	stcgt	0, cr0, [r0], #-52	; 0xffffffcc
 adc:	01000000 	mrseq	r0, (UNDEF: 0)
 ae0:	0000e49c 	muleq	r0, ip, r4
 ae4:	00690900 	rsbeq	r0, r9, r0, lsl #18
 ae8:	00259601 	eoreq	r9, r5, r1, lsl #12
 aec:	91020000 	mrsls	r0, (UNDEF: 2)
 af0:	006a0977 	rsbeq	r0, sl, r7, ror r9
 af4:	00259601 	eoreq	r9, r5, r1, lsl #12
 af8:	91020000 	mrsls	r0, (UNDEF: 2)
 afc:	013c0b76 	teqeq	ip, r6, ror fp
 b00:	96010000 	strls	r0, [r1], -r0
 b04:	00000025 	andeq	r0, r0, r5, lsr #32
 b08:	096f9102 	stmdbeq	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
 b0c:	96010063 	strls	r0, [r1], -r3, rrx
 b10:	00000025 	andeq	r0, r0, r5, lsr #32
 b14:	09759102 	ldmdbeq	r5!, {r1, r8, ip, pc}^
 b18:	9701006b 	strls	r0, [r1, -fp, rrx]
 b1c:	00000045 	andeq	r0, r0, r5, asr #32
 b20:	00709102 	rsbseq	r9, r0, r2, lsl #2
 b24:	0005820c 	andeq	r8, r5, ip, lsl #4
 b28:	88830100 	stmhi	r3, {r8}
 b2c:	8820000c 	stmdahi	r0!, {r2, r3}
 b30:	01000000 	mrseq	r0, (UNDEF: 0)
 b34:	00012e9c 	muleq	r1, ip, lr
 b38:	00780d00 	rsbseq	r0, r8, r0, lsl #26
 b3c:	00458301 	subeq	r8, r5, r1, lsl #6
 b40:	91020000 	mrsls	r0, (UNDEF: 2)
 b44:	00790d6c 	rsbseq	r0, r9, ip, ror #26
 b48:	00458301 	subeq	r8, r5, r1, lsl #6
 b4c:	91020000 	mrsls	r0, (UNDEF: 2)
 b50:	05880b68 	streq	r0, [r8, #2920]	; 0xb68
 b54:	84010000 	strhi	r0, [r1], #-0
 b58:	00000025 	andeq	r0, r0, r5, lsr #32
 b5c:	0b739102 	bleq	1ce4f6c <startup-0x1e31b094>
 b60:	0000058d 	andeq	r0, r0, sp, lsl #11
 b64:	003e8501 	eorseq	r8, lr, r1, lsl #10
 b68:	91020000 	mrsls	r0, (UNDEF: 2)
 b6c:	cd0a0074 	stcgt	0, cr0, [sl, #-464]	; 0xfffffe30
 b70:	01000005 	tsteq	r0, r5
 b74:	000c3078 	andeq	r3, ip, r8, ror r0
 b78:	00005820 	andeq	r5, r0, r0, lsr #16
 b7c:	749c0100 	ldrvc	r0, [ip], #256	; 0x100
 b80:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 b84:	20000c36 	andcs	r0, r0, r6, lsr ip
 b88:	0000004a 	andeq	r0, r0, sl, asr #32
 b8c:	0004b80b 	andeq	fp, r4, fp, lsl #16
 b90:	3e790100 	rpwcce	f0, f1, f0
 b94:	02000000 	andeq	r0, r0, #0
 b98:	5a0e7491 	bpl	39dde4 <startup-0x1fc6221c>
 b9c:	1a20000c 	bne	800bd4 <startup-0x1f7ff42c>
 ba0:	0b000000 	bleq	ba8 <startup-0x1ffff458>
 ba4:	00000000 	andeq	r0, r0, r0
 ba8:	003e7c01 	eorseq	r7, lr, r1, lsl #24
 bac:	91020000 	mrsls	r0, (UNDEF: 2)
 bb0:	00000070 	andeq	r0, r0, r0, ror r0
 bb4:	0005410f 	andeq	r4, r5, pc, lsl #2
 bb8:	d8680100 	stmdale	r8!, {r8}^
 bbc:	5820000b 	stmdapl	r0!, {r0, r1, r3}
 bc0:	01000000 	mrseq	r0, (UNDEF: 0)
 bc4:	050f109c 	streq	r1, [pc, #-156]	; b30 <startup-0x1ffff4d0>
 bc8:	62010000 	andvs	r0, r1, #0
 bcc:	00000030 	andeq	r0, r0, r0, lsr r0
 bd0:	20000bae 	andcs	r0, r0, lr, lsr #23
 bd4:	0000002a 	andeq	r0, r0, sl, lsr #32
 bd8:	01ad9c01 			; <UNDEFINED> instruction: 0x01ad9c01
 bdc:	3c110000 	ldccc	0, cr0, [r1], {-0}
 be0:	01000001 	tsteq	r0, r1
 be4:	00003062 	andeq	r3, r0, r2, rrx
 be8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 bec:	05930a00 	ldreq	r0, [r3, #2560]	; 0xa00
 bf0:	5a010000 	bpl	40bf8 <startup-0x1ffbf408>
 bf4:	20000b68 	andcs	r0, r0, r8, ror #22
 bf8:	00000046 	andeq	r0, r0, r6, asr #32
 bfc:	01df9c01 	bicseq	r9, pc, r1, lsl #24
 c00:	1c110000 	ldcne	0, cr0, [r1], {-0}
 c04:	01000005 	tsteq	r0, r5
 c08:	0000255a 	andeq	r2, r0, sl, asr r5
 c0c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 c10:	00013c11 	andeq	r3, r1, r1, lsl ip
 c14:	255a0100 	ldrbcs	r0, [sl, #-256]	; 0xffffff00
 c18:	02000000 	andeq	r0, r0, #0
 c1c:	0a007691 	beq	1e668 <startup-0x1ffe1998>
 c20:	000005ef 	andeq	r0, r0, pc, ror #11
 c24:	0b285301 	bleq	a15830 <startup-0x1f5ea7d0>
 c28:	00402000 	subeq	r2, r0, r0
 c2c:	9c010000 	stcls	0, cr0, [r1], {-0}
 c30:	00000211 	andeq	r0, r0, r1, lsl r2
 c34:	0005fd11 	andeq	pc, r5, r1, lsl sp	; <UNPREDICTABLE>
 c38:	25530100 	ldrbcs	r0, [r3, #-256]	; 0xffffff00
 c3c:	02000000 	andeq	r0, r0, #0
 c40:	3c117791 	ldccc	7, cr7, [r1], {145}	; 0x91
 c44:	01000001 	tsteq	r0, r1
 c48:	00002553 	andeq	r2, r0, r3, asr r5
 c4c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 c50:	05210a00 	streq	r0, [r1, #-2560]!	; 0xfffff600
 c54:	3f010000 	svccc	0x00010000
 c58:	20000ab0 			; <UNDEFINED> instruction: 0x20000ab0
 c5c:	00000078 	andeq	r0, r0, r8, ror r0
 c60:	02439c01 	subeq	r9, r3, #256	; 0x100
 c64:	09110000 	ldmdbeq	r1, {}	; <UNPREDICTABLE>
 c68:	01000005 	tsteq	r0, r5
 c6c:	0000303f 	andeq	r3, r0, pc, lsr r0
 c70:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 c74:	00013c11 	andeq	r3, r1, r1, lsl ip
 c78:	303f0100 	eorscc	r0, pc, r0, lsl #2
 c7c:	02000000 	andeq	r0, r0, #0
 c80:	10007691 	mulne	r0, r1, r6
 c84:	000005e2 	andeq	r0, r0, r2, ror #11
 c88:	00302901 	eorseq	r2, r0, r1, lsl #18
 c8c:	0a280000 	beq	a00c94 <startup-0x1f5ff36c>
 c90:	00882000 	addeq	r2, r8, r0
 c94:	9c010000 	stcls	0, cr0, [r1], {-0}
 c98:	00000279 	andeq	r0, r0, r9, ror r2
 c9c:	00013c11 	andeq	r3, r1, r1, lsl ip
 ca0:	30290100 	eorcc	r0, r9, r0, lsl #2
 ca4:	02000000 	andeq	r0, r0, #0
 ca8:	170b6f91 			; <UNDEFINED> instruction: 0x170b6f91
 cac:	01000005 	tsteq	r0, r5
 cb0:	0000302a 	andeq	r3, r0, sl, lsr #32
 cb4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 cb8:	05ba1200 	ldreq	r1, [sl, #512]!	; 0x200
 cbc:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
 cc0:	200009ce 	andcs	r0, r0, lr, asr #19
 cc4:	0000005a 	andeq	r0, r0, sl, asr r0
 cc8:	2f139c01 	svccs	0x00139c01
 ccc:	01000005 	tsteq	r0, r5
 cd0:	00097410 	andeq	r7, r9, r0, lsl r4
 cd4:	00005a20 	andeq	r5, r0, r0, lsr #20
 cd8:	ae9c0100 	fmlgee	f0, f4, f0
 cdc:	11000002 	tstne	r0, r2
 ce0:	0000013c 	andeq	r0, r0, ip, lsr r1
 ce4:	00251001 	eoreq	r1, r5, r1
 ce8:	91020000 	mrsls	r0, (UNDEF: 2)
 cec:	4e0c0077 	mcrmi	0, 0, r0, cr12, cr7, {3}
 cf0:	01000005 	tsteq	r0, r5
 cf4:	0009380c 	andeq	r3, r9, ip, lsl #16
 cf8:	00003c20 	andeq	r3, r0, r0, lsr #24
 cfc:	d09c0100 	addsle	r0, ip, r0, lsl #2
 d00:	0d000002 	stceq	0, cr0, [r0, #-8]
 d04:	0c010078 	stceq	0, cr0, [r1], {120}	; 0x78
 d08:	00000025 	andeq	r0, r0, r5, lsr #32
 d0c:	00779102 	rsbseq	r9, r7, r2, lsl #2
 d10:	00056514 	andeq	r6, r5, r4, lsl r5
 d14:	00080100 	andeq	r0, r8, r0, lsl #2
 d18:	38200009 	stmdacc	r0!, {r0, r3}
 d1c:	01000000 	mrseq	r0, (UNDEF: 0)
 d20:	00780d9c 			; <UNDEFINED> instruction: 0x00780d9c
 d24:	00250801 	eoreq	r0, r5, r1, lsl #16
 d28:	91020000 	mrsls	r0, (UNDEF: 2)
 d2c:	Address 0x00000d2c is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	24030000 	strcs	r0, [r3], #-0
  20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  24:	0008030b 	andeq	r0, r8, fp, lsl #6
  28:	012e0400 			; <UNDEFINED> instruction: 0x012e0400
  2c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  30:	0b3b0b3a 	bleq	ec2d20 <startup-0x1f13d2e0>
  34:	01111927 	tsteq	r1, r7, lsr #18
  38:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  3c:	01194296 			; <UNDEFINED> instruction: 0x01194296
  40:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
  44:	08030005 	stmdaeq	r3, {r0, r2}
  48:	0b3b0b3a 	bleq	ec2d38 <startup-0x1f13d2c8>
  4c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  50:	34060000 	strcc	r0, [r6], #-0
  54:	3a0e0300 	bcc	380c5c <startup-0x1fc7f3a4>
  58:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  5c:	00180213 	andseq	r0, r8, r3, lsl r2
  60:	00050700 	andeq	r0, r5, r0, lsl #14
  64:	0b3a0e03 	bleq	e83878 <startup-0x1f17c788>
  68:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  6c:	00001802 	andeq	r1, r0, r2, lsl #16
  70:	3f002e08 	svccc	0x00002e08
  74:	3a0e0319 	bcc	380ce0 <startup-0x1fc7f320>
  78:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  7c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  80:	96184006 	ldrls	r4, [r8], -r6
  84:	00001942 	andeq	r1, r0, r2, asr #18
  88:	3f012e09 	svccc	0x00012e09
  8c:	3a0e0319 	bcc	380cf8 <startup-0x1fc7f308>
  90:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  94:	11134919 	tstne	r3, r9, lsl r9
  98:	40061201 	andmi	r1, r6, r1, lsl #4
  9c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  a0:	00001301 	andeq	r1, r0, r1, lsl #6
  a4:	3f012e0a 	svccc	0x00012e0a
  a8:	3a0e0319 	bcc	380d14 <startup-0x1fc7f2ec>
  ac:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  b0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  b4:	97184006 	ldrls	r4, [r8, -r6]
  b8:	13011942 	movwne	r1, #6466	; 0x1942
  bc:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
  c0:	03193f01 	tsteq	r9, #1, 30
  c4:	3b0b3a0e 	blcc	2ce904 <startup-0x1fd316fc>
  c8:	1119270b 	tstne	r9, fp, lsl #14
  cc:	40061201 	andmi	r1, r6, r1, lsl #4
  d0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  d4:	01000000 	mrseq	r0, (UNDEF: 0)
  d8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
  dc:	0e030b13 	vmoveq.32	d3[0], r0
  e0:	17550e1b 	smmlane	r5, fp, lr, r0
  e4:	17100111 			; <UNDEFINED> instruction: 0x17100111
  e8:	24020000 	strcs	r0, [r2], #-0
  ec:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  f0:	000e030b 	andeq	r0, lr, fp, lsl #6
  f4:	01130300 	tsteq	r3, r0, lsl #6
  f8:	0b0b0e03 	bleq	2c390c <startup-0x1fd3c6f4>
  fc:	0b3b0b3a 	bleq	ec2dec <startup-0x1f13d214>
 100:	00001301 	andeq	r1, r0, r1, lsl #6
 104:	03000d04 	movweq	r0, #3332	; 0xd04
 108:	3b0b3a08 	blcc	2ce930 <startup-0x1fd316d0>
 10c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 110:	0500000b 	streq	r0, [r0, #-11]
 114:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 118:	0b3b0b3a 	bleq	ec2e08 <startup-0x1f13d1f8>
 11c:	00001349 	andeq	r1, r0, r9, asr #6
 120:	03000d06 	movweq	r0, #3334	; 0xd06
 124:	3b0b3a0e 	blcc	2ce964 <startup-0x1fd3169c>
 128:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 12c:	0700000b 	streq	r0, [r0, -fp]
 130:	0b0b0024 	bleq	2c01c8 <startup-0x1fd3fe38>
 134:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 138:	01080000 	mrseq	r0, (UNDEF: 8)
 13c:	01134901 	tsteq	r3, r1, lsl #18
 140:	09000013 	stmdbeq	r0, {r0, r1, r4}
 144:	13490021 	movtne	r0, #36897	; 0x9021
 148:	00000b2f 	andeq	r0, r0, pc, lsr #22
 14c:	0b000f0a 	bleq	3d7c <startup-0x1fffc284>
 150:	0013490b 	andseq	r4, r3, fp, lsl #18
 154:	01150b00 	tsteq	r5, r0, lsl #22
 158:	13011927 	movwne	r1, #6439	; 0x1927
 15c:	050c0000 	streq	r0, [ip, #-0]
 160:	00134900 	andseq	r4, r3, r0, lsl #18
 164:	00340d00 	eorseq	r0, r4, r0, lsl #26
 168:	0b3a0e03 	bleq	e8397c <startup-0x1f17c684>
 16c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 170:	00001802 	andeq	r1, r0, r2, lsl #16
 174:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
 178:	00052f13 	andeq	r2, r5, r3, lsl pc
 17c:	01130f00 	tsteq	r3, r0, lsl #30
 180:	0b3a0b0b 	bleq	e82db4 <startup-0x1f17d24c>
 184:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 188:	34100000 	ldrcc	r0, [r0], #-0
 18c:	3a0e0300 	bcc	380d94 <startup-0x1fc7f26c>
 190:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 194:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 198:	11000018 	tstne	r0, r8, lsl r0
 19c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1a0:	0b3a0e03 	bleq	e839b4 <startup-0x1f17c64c>
 1a4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1a8:	01111349 	tsteq	r1, r9, asr #6
 1ac:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1b0:	01194296 			; <UNDEFINED> instruction: 0x01194296
 1b4:	12000013 	andne	r0, r0, #19
 1b8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 1bc:	0b3b0b3a 	bleq	ec2eac <startup-0x1f13d154>
 1c0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1c4:	34130000 	ldrcc	r0, [r3], #-0
 1c8:	3a080300 	bcc	200dd0 <startup-0x1fdff230>
 1cc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1d0:	00180213 	andseq	r0, r8, r3, lsl r2
 1d4:	00341400 	eorseq	r1, r4, r0, lsl #8
 1d8:	0b3a0e03 	bleq	e839ec <startup-0x1f17c614>
 1dc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1e0:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
 1e4:	03193f00 	tsteq	r9, #0, 30
 1e8:	3b0b3a0e 	blcc	2cea28 <startup-0x1fd315d8>
 1ec:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 1f0:	96184006 	ldrls	r4, [r8], -r6
 1f4:	00001942 	andeq	r1, r0, r2, asr #18
 1f8:	3f012e16 	svccc	0x00012e16
 1fc:	3a0e0319 	bcc	380e68 <startup-0x1fc7f198>
 200:	110b3b0b 	tstne	fp, fp, lsl #22
 204:	40061201 	andmi	r1, r6, r1, lsl #4
 208:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 20c:	00001301 	andeq	r1, r0, r1, lsl #6
 210:	3f012e17 	svccc	0x00012e17
 214:	3a0e0319 	bcc	380e80 <startup-0x1fc7f180>
 218:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 21c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 220:	96184006 	ldrls	r4, [r8], -r6
 224:	13011942 	movwne	r1, #6466	; 0x1942
 228:	05180000 	ldreq	r0, [r8, #-0]
 22c:	3a080300 	bcc	200e34 <startup-0x1fdff1cc>
 230:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 234:	00180213 	andseq	r0, r8, r3, lsl r2
 238:	010b1900 	tsteq	fp, r0, lsl #18
 23c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 240:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
 244:	3a0e0301 	bcc	380e50 <startup-0x1fc7f1b0>
 248:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 24c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 250:	97184006 	ldrls	r4, [r8, -r6]
 254:	13011942 	movwne	r1, #6466	; 0x1942
 258:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
 25c:	03193f00 	tsteq	r9, #0, 30
 260:	3b0b3a0e 	blcc	2ceaa0 <startup-0x1fd31560>
 264:	1119270b 	tstne	r9, fp, lsl #14
 268:	40061201 	andmi	r1, r6, r1, lsl #4
 26c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 270:	01000000 	mrseq	r0, (UNDEF: 0)
 274:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 278:	0e030b13 	vmoveq.32	d3[0], r0
 27c:	01110e1b 	tsteq	r1, fp, lsl lr
 280:	17100612 			; <UNDEFINED> instruction: 0x17100612
 284:	24020000 	strcs	r0, [r2], #-0
 288:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 28c:	000e030b 	andeq	r0, lr, fp, lsl #6
 290:	01130300 	tsteq	r3, r0, lsl #6
 294:	0b0b0e03 	bleq	2c3aa8 <startup-0x1fd3c558>
 298:	0b3b0b3a 	bleq	ec2f88 <startup-0x1f13d078>
 29c:	00001301 	andeq	r1, r0, r1, lsl #6
 2a0:	03000d04 	movweq	r0, #3332	; 0xd04
 2a4:	3b0b3a08 	blcc	2ceacc <startup-0x1fd31534>
 2a8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 2ac:	0500000b 	streq	r0, [r0, #-11]
 2b0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 2b4:	0b3b0b3a 	bleq	ec2fa4 <startup-0x1f13d05c>
 2b8:	00001349 	andeq	r1, r0, r9, asr #6
 2bc:	03000d06 	movweq	r0, #3334	; 0xd06
 2c0:	3b0b3a0e 	blcc	2ceb00 <startup-0x1fd31500>
 2c4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 2c8:	0700000b 	streq	r0, [r0, -fp]
 2cc:	0b0b0024 	bleq	2c0364 <startup-0x1fd3fc9c>
 2d0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 2d4:	01080000 	mrseq	r0, (UNDEF: 8)
 2d8:	01134901 	tsteq	r3, r1, lsl #18
 2dc:	09000013 	stmdbeq	r0, {r0, r1, r4}
 2e0:	13490021 	movtne	r0, #36897	; 0x9021
 2e4:	00000b2f 	andeq	r0, r0, pc, lsr #22
 2e8:	0b000f0a 	bleq	3f18 <startup-0x1fffc0e8>
 2ec:	0013490b 	andseq	r4, r3, fp, lsl #18
 2f0:	01150b00 	tsteq	r5, r0, lsl #22
 2f4:	13011927 	movwne	r1, #6439	; 0x1927
 2f8:	050c0000 	streq	r0, [ip, #-0]
 2fc:	00134900 	andseq	r4, r3, r0, lsl #18
 300:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
 304:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 308:	0b3b0b3a 	bleq	ec2ff8 <startup-0x1f13d008>
 30c:	01111927 	tsteq	r1, r7, lsr #18
 310:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 314:	01194296 			; <UNDEFINED> instruction: 0x01194296
 318:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 31c:	08030005 	stmdaeq	r3, {r0, r2}
 320:	0b3b0b3a 	bleq	ec3010 <startup-0x1f13cff0>
 324:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 328:	0b0f0000 	bleq	3c0330 <startup-0x1fc3fcd0>
 32c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 330:	10000006 	andne	r0, r0, r6
 334:	08030034 	stmdaeq	r3, {r2, r4, r5}
 338:	0b3b0b3a 	bleq	ec3028 <startup-0x1f13cfd8>
 33c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 340:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 344:	03193f01 	tsteq	r9, #1, 30
 348:	3b0b3a0e 	blcc	2ceb88 <startup-0x1fd31478>
 34c:	1119270b 	tstne	r9, fp, lsl #14
 350:	40061201 	andmi	r1, r6, r1, lsl #4
 354:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 358:	05120000 	ldreq	r0, [r2, #-0]
 35c:	3a0e0300 	bcc	380f64 <startup-0x1fc7f09c>
 360:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 364:	00180213 	andseq	r0, r8, r3, lsl r2
 368:	11010000 	mrsne	r0, (UNDEF: 1)
 36c:	130e2501 	movwne	r2, #58625	; 0xe501
 370:	1b0e030b 	blne	380fa4 <startup-0x1fc7f05c>
 374:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 378:	00171006 	andseq	r1, r7, r6
 37c:	00240200 	eoreq	r0, r4, r0, lsl #4
 380:	0b3e0b0b 	bleq	f82fb4 <startup-0x1f07d04c>
 384:	00000e03 	andeq	r0, r0, r3, lsl #28
 388:	0b002403 	bleq	939c <startup-0x1fff6c64>
 38c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 390:	04000008 	streq	r0, [r0], #-8
 394:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 398:	0b3a0e03 	bleq	e83bac <startup-0x1f17c454>
 39c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 3a0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3a4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 3a8:	05000019 	streq	r0, [r0, #-25]	; 0xffffffe7
 3ac:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 3b0:	0b3a0e03 	bleq	e83bc4 <startup-0x1f17c43c>
 3b4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 3b8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3bc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 3c0:	00130119 	andseq	r0, r3, r9, lsl r1
 3c4:	00050600 	andeq	r0, r5, r0, lsl #12
 3c8:	0b3a0803 	bleq	e823dc <startup-0x1f17dc24>
 3cc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3d0:	00001802 	andeq	r1, r0, r2, lsl #16
 3d4:	3f002e07 	svccc	0x00002e07
 3d8:	3a0e0319 	bcc	381044 <startup-0x1fc7efbc>
 3dc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 3e0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 3e4:	97184006 	ldrls	r4, [r8, -r6]
 3e8:	00001942 	andeq	r1, r0, r2, asr #18
 3ec:	01110100 	tsteq	r1, r0, lsl #2
 3f0:	0b130e25 	bleq	4c3c8c <startup-0x1fb3c374>
 3f4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 3f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3fc:	00001710 	andeq	r1, r0, r0, lsl r7
 400:	0b002402 	bleq	9410 <startup-0x1fff6bf0>
 404:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 408:	0300000e 	movweq	r0, #14
 40c:	0b0b0024 	bleq	2c04a4 <startup-0x1fd3fb5c>
 410:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 414:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
 418:	03193f01 	tsteq	r9, #1, 30
 41c:	3b0b3a0e 	blcc	2cec5c <startup-0x1fd313a4>
 420:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 424:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 428:	96184006 	ldrls	r4, [r8], -r6
 42c:	13011942 	movwne	r1, #6466	; 0x1942
 430:	34050000 	strcc	r0, [r5], #-0
 434:	3a080300 	bcc	20103c <startup-0x1fdfefc4>
 438:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 43c:	00180213 	andseq	r0, r8, r3, lsl r2
 440:	00340600 	eorseq	r0, r4, r0, lsl #12
 444:	0b3a0e03 	bleq	e83c58 <startup-0x1f17c3a8>
 448:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 44c:	00001802 	andeq	r1, r0, r2, lsl #16
 450:	49010107 	stmdbmi	r1, {r0, r1, r2, r8}
 454:	00130113 	andseq	r0, r3, r3, lsl r1
 458:	00210800 	eoreq	r0, r1, r0, lsl #16
 45c:	0b2f1349 	bleq	bc5188 <startup-0x1f43ae78>
 460:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
 464:	03193f01 	tsteq	r9, #1, 30
 468:	3b0b3a0e 	blcc	2ceca8 <startup-0x1fd31358>
 46c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 470:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 474:	97184006 	ldrls	r4, [r8, -r6]
 478:	13011942 	movwne	r1, #6466	; 0x1942
 47c:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
 480:	03193f01 	tsteq	r9, #1, 30
 484:	3b0b3a0e 	blcc	2cecc4 <startup-0x1fd3133c>
 488:	1119270b 	tstne	r9, fp, lsl #14
 48c:	40061201 	andmi	r1, r6, r1, lsl #4
 490:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 494:	00001301 	andeq	r1, r0, r1, lsl #6
 498:	0300050b 	movweq	r0, #1291	; 0x50b
 49c:	3b0b3a08 	blcc	2cecc4 <startup-0x1fd3133c>
 4a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 4a4:	0c000018 	stceq	0, cr0, [r0], {24}
 4a8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 4ac:	0b3a0e03 	bleq	e83cc0 <startup-0x1f17c340>
 4b0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 4b4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 4b8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 4bc:	00000019 	andeq	r0, r0, r9, lsl r0
 4c0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 4c4:	030b130e 	movweq	r1, #45838	; 0xb30e
 4c8:	110e1b0e 	tstne	lr, lr, lsl #22
 4cc:	10061201 	andne	r1, r6, r1, lsl #4
 4d0:	02000017 	andeq	r0, r0, #23
 4d4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 4d8:	0b3b0b3a 	bleq	ec31c8 <startup-0x1f13ce38>
 4dc:	00001349 	andeq	r1, r0, r9, asr #6
 4e0:	0b002403 	bleq	94f4 <startup-0x1fff6b0c>
 4e4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 4e8:	0400000e 	streq	r0, [r0], #-14
 4ec:	0b0b0024 	bleq	2c0584 <startup-0x1fd3fa7c>
 4f0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 4f4:	01050000 	mrseq	r0, (UNDEF: 5)
 4f8:	01134901 	tsteq	r3, r1, lsl #18
 4fc:	06000013 			; <UNDEFINED> instruction: 0x06000013
 500:	13490021 	movtne	r0, #36897	; 0x9021
 504:	0000052f 	andeq	r0, r0, pc, lsr #10
 508:	03003407 	movweq	r3, #1031	; 0x407
 50c:	3b0b3a0e 	blcc	2ced4c <startup-0x1fd312b4>
 510:	3f13490b 	svccc	0x0013490b
 514:	00180219 	andseq	r0, r8, r9, lsl r2
 518:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
 51c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 520:	0b3b0b3a 	bleq	ec3210 <startup-0x1f13cdf0>
 524:	06120111 			; <UNDEFINED> instruction: 0x06120111
 528:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 52c:	00130119 	andseq	r0, r3, r9, lsl r1
 530:	00340900 	eorseq	r0, r4, r0, lsl #18
 534:	0b3a0803 	bleq	e82548 <startup-0x1f17dab8>
 538:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 53c:	00001802 	andeq	r1, r0, r2, lsl #16
 540:	3f012e0a 	svccc	0x00012e0a
 544:	3a0e0319 	bcc	3811b0 <startup-0x1fc7ee50>
 548:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 54c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 550:	96184006 	ldrls	r4, [r8], -r6
 554:	13011942 	movwne	r1, #6466	; 0x1942
 558:	340b0000 	strcc	r0, [fp], #-0
 55c:	3a0e0300 	bcc	381164 <startup-0x1fc7ee9c>
 560:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 564:	00180213 	andseq	r0, r8, r3, lsl r2
 568:	012e0c00 			; <UNDEFINED> instruction: 0x012e0c00
 56c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 570:	0b3b0b3a 	bleq	ec3260 <startup-0x1f13cda0>
 574:	01111927 	tsteq	r1, r7, lsr #18
 578:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 57c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 580:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 584:	08030005 	stmdaeq	r3, {r0, r2}
 588:	0b3b0b3a 	bleq	ec3278 <startup-0x1f13cd88>
 58c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 590:	0b0e0000 	bleq	380598 <startup-0x1fc7fa68>
 594:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 598:	0f000006 	svceq	0x00000006
 59c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 5a0:	0b3a0e03 	bleq	e83db4 <startup-0x1f17c24c>
 5a4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 5a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5ac:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 5b0:	10000019 	andne	r0, r0, r9, lsl r0
 5b4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 5b8:	0b3a0e03 	bleq	e83dcc <startup-0x1f17c234>
 5bc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 5c0:	01111349 	tsteq	r1, r9, asr #6
 5c4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 5c8:	01194296 			; <UNDEFINED> instruction: 0x01194296
 5cc:	11000013 	tstne	r0, r3, lsl r0
 5d0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 5d4:	0b3b0b3a 	bleq	ec32c4 <startup-0x1f13cd3c>
 5d8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 5dc:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
 5e0:	3a0e0300 	bcc	3811e8 <startup-0x1fc7ee18>
 5e4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 5e8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 5ec:	96184006 	ldrls	r4, [r8], -r6
 5f0:	00001942 	andeq	r1, r0, r2, asr #18
 5f4:	03012e13 	movweq	r2, #7699	; 0x1e13
 5f8:	3b0b3a0e 	blcc	2cee38 <startup-0x1fd311c8>
 5fc:	1119270b 	tstne	r9, fp, lsl #14
 600:	40061201 	andmi	r1, r6, r1, lsl #4
 604:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 608:	00001301 	andeq	r1, r0, r1, lsl #6
 60c:	3f012e14 	svccc	0x00012e14
 610:	3a0e0319 	bcc	38127c <startup-0x1fc7ed84>
 614:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 618:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 61c:	97184006 	ldrls	r4, [r8, -r6]
 620:	00001942 	andeq	r1, r0, r2, asr #18
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000002a6 	andeq	r0, r0, r6, lsr #5
	...
  20:	00000024 	andeq	r0, r0, r4, lsr #32
  24:	01fb0002 	mvnseq	r0, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	200002b8 			; <UNDEFINED> instruction: 0x200002b8
  34:	000001fc 	strdeq	r0, [r0], -ip
  38:	20000000 	andcs	r0, r0, r0
  3c:	0000000c 	andeq	r0, r0, ip
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	06360002 	ldrteq	r0, [r6], -r2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200004b4 			; <UNDEFINED> instruction: 0x200004b4
  5c:	0000017e 	andeq	r0, r0, lr, ror r1
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	08830002 	stmeq	r3, {r1}
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000634 	andcs	r0, r0, r4, lsr r6
  7c:	000000bc 	strheq	r0, [r0], -ip
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	092d0002 	stmfdeq	sp!, {r1}
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	200006f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
  9c:	00000210 	andeq	r0, r0, r0, lsl r2
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	0a400002 	beq	10000bc <startup-0x1effff44>
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20000900 	andcs	r0, r0, r0, lsl #18
  bc:	00000510 	andeq	r0, r0, r0, lsl r5
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000000b9 	strheq	r0, [r0], -r9
   4:	004e0002 	subeq	r0, lr, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	72646e41 	rsbvc	r6, r4, #1040	; 0x410
  28:	65442f65 	strbvs	r2, [r4, #-3941]	; 0xfffff09b
  2c:	6f746b73 	svcvs	0x00746b73
  30:	41442f70 	hvcmi	17136	; 0x42f0
  34:	30393354 	eorscc	r3, r9, r4, asr r3
  38:	62616c5f 	rsbvs	r6, r1, #24320	; 0x5f00
  3c:	34765f62 	ldrbtcc	r5, [r6], #-3938	; 0xfffff09e
  40:	6570732f 	ldrbvs	r7, [r0, #-815]!	; 0xfffffcd1
  44:	6700006c 	strvs	r0, [r0, -ip, rrx]
  48:	5f656d61 	svcpl	0x00656d61
  4c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  50:	00632e69 	rsbeq	r2, r3, r9, ror #28
  54:	00000001 	andeq	r0, r0, r1
  58:	10020500 	andne	r0, r2, r0, lsl #10
  5c:	1a200000 	bne	800064 <startup-0x1f7fff9c>
  60:	2f4b3d67 	svccs	0x004b3d67
  64:	3d3d683d 	ldccc	8, cr6, [sp, #-244]!	; 0xffffff0c
  68:	3d4b2f2f 	stclcc	15, cr2, [fp, #-188]	; 0xffffff44
  6c:	bb67772f 	bllt	19ddd30 <startup-0x1e6222d0>
  70:	13086769 	movwne	r6, #34665	; 0x8769
  74:	3d3d6776 	ldccc	7, cr6, [sp, #-472]!	; 0xfffffe28
  78:	3d674c59 	stclcc	12, cr4, [r7, #-356]!	; 0xfffffe9c
  7c:	3d4c593d 	vstrcc.16	s11, [ip, #-122]	; 0xffffff86	; <UNPREDICTABLE>
  80:	593d3d68 	ldmdbpl	sp!, {r3, r5, r6, r8, sl, fp, ip, sp}
  84:	3d842f67 	stccc	15, cr2, [r4, #412]	; 0x19c
  88:	593d3d68 	ldmdbpl	sp!, {r3, r5, r6, r8, sl, fp, ip, sp}
  8c:	67852f67 	strvs	r2, [r5, r7, ror #30]
  90:	01040200 	mrseq	r0, R12_usr
  94:	67062006 	strvs	r2, [r6, -r6]
  98:	2f4c593d 	svccs	0x004c593d
  9c:	3e3d3e3d 	mrccc	14, 1, r3, cr13, cr13, {1}
  a0:	3d3d3e3d 	ldccc	14, cr3, [sp, #-244]!	; 0xffffff0c
  a4:	0200693e 	andeq	r6, r0, #1015808	; 0xf8000
  a8:	20060104 	andcs	r0, r6, r4, lsl #2
  ac:	593d8306 	ldmdbpl	sp!, {r1, r2, r8, r9, pc}
  b0:	4b594c3d 	blmi	16531ac <startup-0x1e9ace54>
  b4:	9f683d5a 	svcls	0x00683d5a
  b8:	01000402 	tsteq	r0, r2, lsl #8
  bc:	00011e01 	andeq	r1, r1, r1, lsl #28
  c0:	85000200 	strhi	r0, [r0, #-512]	; 0xfffffe00
  c4:	02000000 	andeq	r0, r0, #0
  c8:	0d0efb01 	vstreq	d15, [lr, #-4]
  cc:	01010100 	mrseq	r0, (UNDEF: 17)
  d0:	00000001 	andeq	r0, r0, r1
  d4:	01000001 	tsteq	r0, r1
  d8:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff69d <ball+0xdfffdef9>
  dc:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
  e0:	646e412f 	strbtvs	r4, [lr], #-303	; 0xfffffed1
  e4:	442f6572 	strtmi	r6, [pc], #-1394	; ec <startup-0x1fffff14>
  e8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
  ec:	442f706f 	strtmi	r7, [pc], #-111	; f4 <startup-0x1fffff0c>
  f0:	39335441 	ldmdbcc	r3!, {r0, r6, sl, ip, lr}
  f4:	616c5f30 	cmnvs	ip, r0, lsr pc
  f8:	765f6262 	ldrbvc	r6, [pc], -r2, ror #4
  fc:	70732f34 	rsbsvc	r2, r3, r4, lsr pc
 100:	00006c65 	andeq	r6, r0, r5, ror #24
 104:	6e69616d 	powvsez	f6, f1, #5.0
 108:	0100632e 	tsteq	r0, lr, lsr #6
 10c:	61670000 	cmnvs	r7, r0
 110:	735f656d 	cmpvc	pc, #457179136	; 0x1b400000
 114:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 118:	682e7075 	stmdavs	lr!, {r0, r2, r4, r5, r6, ip, sp, lr}
 11c:	00000100 	andeq	r0, r0, r0, lsl #2
 120:	6e616c70 	mcrvs	12, 3, r6, cr1, cr0, {3}
 124:	62782e74 	rsbsvs	r2, r8, #116, 28	; 0x740
 128:	0001006d 	andeq	r0, r1, sp, rrx
 12c:	63616200 	cmnvs	r1, #0, 4
 130:	6f72476b 	svcvs	0x0072476b
 134:	2e646e75 	mcrcs	14, 3, r6, cr4, cr5, {3}
 138:	006d6278 	rsbeq	r6, sp, r8, ror r2
 13c:	73000001 	movwvc	r0, #1
 140:	2e706968 	vsubcs.f16	s13, s0, s17	; <UNPREDICTABLE>
 144:	006d6278 	rsbeq	r6, sp, r8, ror r2
 148:	00000001 	andeq	r0, r0, r1
 14c:	00020500 	andeq	r0, r2, r0, lsl #10
 150:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
 154:	5e13010c 	mufpls	f0, f3, #4.0
 158:	01000302 	tsteq	r0, r2, lsl #6
 15c:	02050001 	andeq	r0, r5, #1
 160:	200002b8 			; <UNDEFINED> instruction: 0x200002b8
 164:	75011f03 	strvc	r1, [r1, #-3843]	; 0xfffff0fd
 168:	4c3d4b4b 			; <UNDEFINED> instruction: 0x4c3d4b4b
 16c:	67687576 			; <UNDEFINED> instruction: 0x67687576
 170:	3dbb3d3d 	ldccc	13, cr3, [fp, #244]!	; 0xf4
 174:	04020091 	streq	r0, [r2], #-145	; 0xffffff6f
 178:	0200e202 	andeq	lr, r0, #536870912	; 0x20000000
 17c:	3c060104 	stfccs	f0, [r6], {4}
 180:	02040200 	andeq	r0, r4, #0, 4
 184:	02003a06 	andeq	r3, r0, #24576	; 0x6000
 188:	3c060104 	stfccs	f0, [r6], {4}
 18c:	02040200 	andeq	r0, r4, #0, 4
 190:	02004906 	andeq	r4, r0, #98304	; 0x18000
 194:	3c060104 	stfccs	f0, [r6], {4}
 198:	1a036e06 	bne	db9b8 <startup-0x1ff24648>
 19c:	67753e4a 	ldrbvs	r3, [r5, -sl, asr #28]!
 1a0:	73212f4b 			; <UNDEFINED> instruction: 0x73212f4b
 1a4:	212f4b4d 			; <UNDEFINED> instruction: 0x212f4b4d
 1a8:	2f924d73 	svccs	0x00924d73
 1ac:	5978303d 	ldmdbpl	r8!, {r0, r2, r3, r4, r5, ip, sp}^
 1b0:	6733322f 	ldrvs	r3, [r3, -pc, lsr #4]!
 1b4:	04020069 	streq	r0, [r2], #-105	; 0xffffff97
 1b8:	02006801 	andeq	r6, r0, #65536	; 0x10000
 1bc:	002f0104 	eoreq	r0, pc, r4, lsl #2
 1c0:	59010402 	stmdbpl	r1, {r1, sl}
 1c4:	01040200 	mrseq	r0, R12_usr
 1c8:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 1cc:	02006801 	andeq	r6, r0, #65536	; 0x10000
 1d0:	00300104 	eorseq	r0, r0, r4, lsl #2
 1d4:	03010402 	movweq	r0, #5122	; 0x1402
 1d8:	08022e79 	stmdaeq	r2, {r0, r3, r4, r5, r6, r9, sl, fp, sp}
 1dc:	af010100 	svcge	0x00010100
 1e0:	02000000 	andeq	r0, r0, #0
 1e4:	00006200 	andeq	r6, r0, r0, lsl #4
 1e8:	fb010200 	blx	409f2 <startup-0x1ffbf60e>
 1ec:	01000d0e 	tsteq	r0, lr, lsl #26
 1f0:	00010101 	andeq	r0, r1, r1, lsl #2
 1f4:	00010000 	andeq	r0, r1, r0
 1f8:	3a430100 	bcc	10c0600 <startup-0x1ef3fa00>
 1fc:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 200:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
 204:	6572646e 	ldrbvs	r6, [r2, #-1134]!	; 0xfffffb92
 208:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 20c:	706f746b 	rsbvc	r7, pc, fp, ror #8
 210:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 214:	5f303933 	svcpl	0x00303933
 218:	6262616c 	rsbvs	r6, r2, #108, 2
 21c:	2f34765f 	svccs	0x0034765f
 220:	6c657073 	stclvs	0, cr7, [r5], #-460	; 0xfffffe34
 224:	61670000 	cmnvs	r7, r0
 228:	735f656d 	cmpvc	pc, #457179136	; 0x1b400000
 22c:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
 230:	632e7374 			; <UNDEFINED> instruction: 0x632e7374
 234:	00000100 	andeq	r0, r0, r0, lsl #2
 238:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 23c:	6174735f 	cmnvs	r4, pc, asr r3
 240:	70757472 	rsbsvc	r7, r5, r2, ror r4
 244:	0100682e 	tsteq	r0, lr, lsr #16
 248:	00000000 	andeq	r0, r0, r0
 24c:	04b40205 	ldrteq	r0, [r4], #517	; 0x205
 250:	67142000 	ldrvs	r2, [r4, -r0]
 254:	4b4c3d3d 	blmi	130f750 <startup-0x1ecf08b0>
 258:	03040200 	movweq	r0, #16896	; 0x4200
 25c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 260:	008f0803 	addeq	r0, pc, r3, lsl #16
 264:	06010402 	streq	r0, [r1], -r2, lsl #8
 268:	4d69063c 	stclmi	6, cr0, [r9, #-240]!	; 0xffffff10
 26c:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 270:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 274:	8f080304 	svchi	0x00080304
 278:	01040200 	mrseq	r0, R12_usr
 27c:	69063c06 	stmdbvs	r6, {r1, r2, sl, fp, ip, sp}
 280:	a04b4d4c 	subge	r4, fp, ip, asr #26
 284:	a04ba04b 	subge	sl, fp, fp, asr #32
 288:	7575a04b 	ldrbvc	sl, [r5, #-75]!	; 0xffffffb5
 28c:	00040259 	andeq	r0, r4, r9, asr r2
 290:	00830101 	addeq	r0, r3, r1, lsl #2
 294:	00020000 	andeq	r0, r2, r0
 298:	0000004f 	andeq	r0, r0, pc, asr #32
 29c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 2a0:	0101000d 	tsteq	r1, sp
 2a4:	00000101 	andeq	r0, r0, r1, lsl #2
 2a8:	00000100 	andeq	r0, r0, r0, lsl #2
 2ac:	2f3a4301 	svccs	0x003a4301
 2b0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 2b4:	6e412f73 	mcrvs	15, 2, r2, cr1, cr3, {3}
 2b8:	2f657264 	svccs	0x00657264
 2bc:	6b736544 	blvs	1cd97d4 <startup-0x1e32682c>
 2c0:	2f706f74 	svccs	0x00706f74
 2c4:	33544144 	cmpcc	r4, #68, 2
 2c8:	6c5f3039 	mrrcvs	0, 3, r3, pc, cr9	; <UNPREDICTABLE>
 2cc:	5f626261 	svcpl	0x00626261
 2d0:	732f3476 			; <UNDEFINED> instruction: 0x732f3476
 2d4:	006c6570 	rsbeq	r6, ip, r0, ror r5
 2d8:	6d616700 	stclvs	7, cr6, [r1, #-0]
 2dc:	65645f65 	strbvs	r5, [r4, #-3941]!	; 0xfffff09b
 2e0:	7379616c 	cmnvc	r9, #108, 2
 2e4:	0100632e 	tsteq	r0, lr, lsr #6
 2e8:	00000000 	andeq	r0, r0, r0
 2ec:	06340205 	ldrteq	r0, [r4], -r5, lsl #4
 2f0:	2f192000 	svccs	0x00192000
 2f4:	3e3d3d3d 	mrccc	13, 1, r3, cr13, cr13, {1}
 2f8:	01040200 	mrseq	r0, R12_usr
 2fc:	67062006 	strvs	r2, [r6, -r6]
 300:	214ba03d 	cmpcs	fp, sp, lsr r0
 304:	2a2f2f2f 	bcs	bcbfc8 <startup-0x1f434038>
 308:	754d4c5e 	strbvc	r4, [sp, #-3166]	; 0xfffff3a2
 30c:	5a57213f 	bpl	15c8810 <startup-0x1ea377f0>
 310:	2f2f2f4c 	svccs	0x002f2f4c
 314:	01000302 	tsteq	r0, r2, lsl #6
 318:	0000c301 	andeq	ip, r0, r1, lsl #6
 31c:	51000200 	mrspl	r0, R8_usr
 320:	02000000 	andeq	r0, r0, #0
 324:	0d0efb01 	vstreq	d15, [lr, #-4]
 328:	01010100 	mrseq	r0, (UNDEF: 17)
 32c:	00000001 	andeq	r0, r0, r1
 330:	01000001 	tsteq	r0, r1
 334:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff8f9 <ball+0xdfffe155>
 338:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 33c:	646e412f 	strbtvs	r4, [lr], #-303	; 0xfffffed1
 340:	442f6572 	strtmi	r6, [pc], #-1394	; 348 <startup-0x1ffffcb8>
 344:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 348:	442f706f 	strtmi	r7, [pc], #-111	; 350 <startup-0x1ffffcb0>
 34c:	39335441 	ldmdbcc	r3!, {r0, r6, sl, ip, lr}
 350:	616c5f30 	cmnvs	ip, r0, lsr pc
 354:	765f6262 	ldrbvc	r6, [pc], -r2, ror #4
 358:	70732f34 	rsbsvc	r2, r3, r4, lsr pc
 35c:	00006c65 	andeq	r6, r0, r5, ror #24
 360:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 364:	79656b5f 	stmdbvc	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, fp, sp, lr}^
 368:	72616f62 	rsbvc	r6, r1, #392	; 0x188
 36c:	00632e64 	rsbeq	r2, r3, r4, ror #28
 370:	00000001 	andeq	r0, r0, r1
 374:	f0020500 			; <UNDEFINED> instruction: 0xf0020500
 378:	19200006 	stmdbne	r0!, {r1, r2}
 37c:	5a685935 	bpl	1a16858 <startup-0x1e5e97a8>
 380:	9167ae75 	smcls	31461	; 0x7ae5
 384:	4b4b4b4b 	blmi	12d30b8 <startup-0x1ed2cf48>
 388:	4b4b4b4b 	blmi	12d30bc <startup-0x1ed2cf44>
 38c:	4b4b4b4b 	blmi	12d30c0 <startup-0x1ed2cf40>
 390:	4c4b4b4b 	mcrrmi	11, 4, r4, fp, cr11
 394:	914b924c 	cmpls	fp, ip, asr #4
 398:	4b4b4b4b 	blmi	12d30cc <startup-0x1ed2cf34>
 39c:	4b3d924c 	blmi	f64cd4 <startup-0x1f09b32c>
 3a0:	01040200 	mrseq	r0, R12_usr
 3a4:	2f065806 	svccs	0x00065806
 3a8:	01040200 	mrseq	r0, R12_usr
 3ac:	2f065806 	svccs	0x00065806
 3b0:	01040200 	mrseq	r0, R12_usr
 3b4:	2f065806 	svccs	0x00065806
 3b8:	01040200 	mrseq	r0, R12_usr
 3bc:	2f065806 	svccs	0x00065806
 3c0:	673e6821 	ldrvs	r6, [lr, -r1, lsr #16]!
 3c4:	3d764b3d 	fldmdbxcc	r6!, {d20-d49}	;@ Deprecated
 3c8:	02040200 	andeq	r0, r4, #0, 4
 3cc:	0402008b 	streq	r0, [r2], #-139	; 0xffffff75
 3d0:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 3d4:	02003d44 	andeq	r3, r0, #68, 26	; 0x1100
 3d8:	02210104 	eoreq	r0, r1, #4, 2
 3dc:	01010007 	tsteq	r1, r7
 3e0:	0000016f 	andeq	r0, r0, pc, ror #2
 3e4:	00630002 	rsbeq	r0, r3, r2
 3e8:	01020000 	mrseq	r0, (UNDEF: 2)
 3ec:	000d0efb 	strdeq	r0, [sp], -fp
 3f0:	01010101 	tsteq	r1, r1, lsl #2
 3f4:	01000000 	mrseq	r0, (UNDEF: 0)
 3f8:	43010000 	movwmi	r0, #4096	; 0x1000
 3fc:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 400:	2f737265 	svccs	0x00737265
 404:	72646e41 	rsbvc	r6, r4, #1040	; 0x410
 408:	65442f65 	strbvs	r2, [r4, #-3941]	; 0xfffff09b
 40c:	6f746b73 	svcvs	0x00746b73
 410:	41442f70 	hvcmi	17136	; 0x42f0
 414:	30393354 	eorscc	r3, r9, r4, asr r3
 418:	62616c5f 	rsbvs	r6, r1, #24320	; 0x5f00
 41c:	34765f62 	ldrbtcc	r5, [r6], #-3938	; 0xfffff09e
 420:	6570732f 	ldrbvs	r7, [r0, #-815]!	; 0xfffffcd1
 424:	6700006c 	strvs	r0, [r0, -ip, rrx]
 428:	5f656d61 	svcpl	0x00656d61
 42c:	70617267 	rsbvc	r7, r1, r7, ror #4
 430:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
 434:	0100632e 	tsteq	r0, lr, lsr #6
 438:	61670000 	cmnvs	r7, r0
 43c:	735f656d 	cmpvc	pc, #457179136	; 0x1b400000
 440:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 444:	682e7075 	stmdavs	lr!, {r0, r2, r4, r5, r6, ip, sp, lr}
 448:	00000100 	andeq	r0, r0, r0, lsl #2
 44c:	02050000 	andeq	r0, r5, #0
 450:	20000900 	andcs	r0, r0, r0, lsl #18
 454:	76e56719 	usatvc	r6, #5, r9, lsl #14
 458:	76130867 	ldrvc	r0, [r3], -r7, ror #16
 45c:	7a037a67 	bvc	dee00 <startup-0x1ff21200>
 460:	4b1b5020 	blmi	6d44e8 <startup-0x1f92bb18>
 464:	4c4c7575 	cfstr64mi	mvdx7, [ip], {117}	; 0x75
 468:	3d3d3d2f 	ldccc	13, cr3, [sp, #-188]!	; 0xffffff44
 46c:	393e213e 	ldmdbcc	lr!, {r1, r2, r3, r4, r5, r8, sp}
 470:	bc3d3d6c 	ldclt	13, cr3, [sp], #-432	; 0xfffffe50
 474:	3d3d3d68 	ldccc	13, cr3, [sp, #-416]!	; 0xfffffe60
 478:	3d593d5a 	ldclcc	13, cr3, [r9, #-360]	; 0xfffffe98
 47c:	303d4b3d 	eorscc	r4, sp, sp, lsr fp
 480:	3d303d4b 	ldccc	13, cr3, [r0, #-300]!	; 0xfffffed4
 484:	5a4b91ca 	bpl	12e4bb4 <startup-0x1ed1b44c>
 488:	3d593d3e 	ldclcc	13, cr3, [r9, #-248]	; 0xffffff08
 48c:	303d5930 	eorscc	r5, sp, r0, lsr r9
 490:	763d3d3d 			; <UNDEFINED> instruction: 0x763d3d3d
 494:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 498:	3d914c83 	ldccc	12, cr4, [r1, #524]	; 0x20c
 49c:	833d3d59 	teqhi	sp, #5696	; 0x1640
 4a0:	675a674c 	ldrbvs	r6, [sl, -ip, asr #14]
 4a4:	3e3e2f4c 	cdpcc	15, 3, cr2, cr14, cr12, {2}
 4a8:	4b4b3d3e 	blmi	12cf9a8 <startup-0x1ed30658>
 4ac:	3d4b4b4b 	vstrcc	d20, [fp, #-300]	; 0xfffffed4
 4b0:	ad3d3d76 	ldcge	13, cr3, [sp, #-472]!	; 0xfffffe28
 4b4:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 4b8:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 4bc:	00490304 	subeq	r0, r9, r4, lsl #6
 4c0:	06010402 	streq	r0, [r1], -r2, lsl #8
 4c4:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 4c8:	00390602 	eorseq	r0, r9, r2, lsl #12
 4cc:	06010402 	streq	r0, [r1], -r2, lsl #8
 4d0:	4e42063c 	mcrmi	6, 2, r0, cr2, cr12, {1}
 4d4:	02002f5a 	andeq	r2, r0, #360	; 0x168
 4d8:	3c060104 	stfccs	f0, [r6], {4}
 4dc:	02040200 	andeq	r0, r4, #0, 4
 4e0:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 4e4:	3f063c03 	svccc	0x00063c03
 4e8:	3f3d3d92 	svccc	0x003d3d92
 4ec:	e4750392 	ldrbt	r0, [r5], #-914	; 0xfffffc6e
 4f0:	68200c03 	stmdavs	r0!, {r0, r1, sl, fp}
 4f4:	00592f3e 	subseq	r2, r9, lr, lsr pc
 4f8:	06010402 	streq	r0, [r1], -r2, lsl #8
 4fc:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
 500:	02002e02 	andeq	r2, r0, #2, 28
 504:	00200404 	eoreq	r0, r0, r4, lsl #8
 508:	06040402 	streq	r0, [r4], -r2, lsl #8
 50c:	67c9592f 	strbvs	r5, [r9, pc, lsr #18]
 510:	03040200 	movweq	r0, #16896	; 0x4200
 514:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
 518:	02009d03 	andeq	r9, r0, #3, 26	; 0xc0
 51c:	90060104 	andls	r0, r6, r4, lsl #2
 520:	02040200 	andeq	r0, r4, #0, 4
 524:	02005506 	andeq	r5, r0, #25165824	; 0x1800000
 528:	66060104 	strvs	r0, [r6], -r4, lsl #2
 52c:	02040200 	andeq	r0, r4, #0, 4
 530:	02005606 	andeq	r5, r0, #6291456	; 0x600000
 534:	66060104 	strvs	r0, [r6], -r4, lsl #2
 538:	3e766006 	cdpcc	0, 7, cr6, cr6, cr6, {0}
 53c:	03040200 	movweq	r0, #16896	; 0x4200
 540:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 544:	02005703 	andeq	r5, r0, #786432	; 0xc0000
 548:	3c060104 	stfccs	f0, [r6], {4}
 54c:	08024c06 	stmdaeq	r2, {r1, r2, sl, fp, lr}
 550:	Address 0x00000550 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	65726461 	ldrbvs	r6, [r2, #-1121]!	; 0xfffffb9f
   4:	63007373 	movwvs	r7, #883	; 0x373
   8:	61726168 	cmnvs	r2, r8, ror #2
   c:	72657463 	rsbvc	r7, r5, #1660944384	; 0x63000000
  10:	63736100 	cmnvs	r3, #0, 2
  14:	695f6969 	ldmdbvs	pc, {r0, r3, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
  18:	0074696e 	rsbseq	r6, r4, lr, ror #18
  1c:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
  20:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
  24:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
  28:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  2c:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  30:	30373130 	eorscc	r3, r7, r0, lsr r1
  34:	20343039 	eorscs	r3, r4, r9, lsr r0
  38:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  3c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  40:	415b2029 	cmpmi	fp, r9, lsr #32
  44:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff2fa <ball+0xdfffdb56>
  48:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  4c:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  50:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  54:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  58:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  5c:	6f697369 	svcvs	0x00697369
  60:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  64:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  68:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
  6c:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  70:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  74:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  78:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  7c:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  80:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
  84:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
  88:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
  8c:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
  90:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
  94:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  98:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  9c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  a0:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  a4:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  a8:	20672d20 	rsbcs	r2, r7, r0, lsr #26
  ac:	20304f2d 	eorscs	r4, r0, sp, lsr #30
  b0:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
  b4:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
  b8:	63736100 	cmnvs	r3, #0, 2
  bc:	675f6969 	ldrbvs	r6, [pc, -r9, ror #18]
  c0:	786f746f 	stmdavc	pc!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
  c4:	6e750079 	mrcvs	0, 3, r0, cr5, cr9, {3}
  c8:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
  cc:	63206465 			; <UNDEFINED> instruction: 0x63206465
  d0:	00726168 	rsbseq	r6, r2, r8, ror #2
  d4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  d8:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
  dc:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
  e0:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
  e4:	68730073 	ldmdavs	r3!, {r0, r1, r4, r5, r6}^
  e8:	2074726f 	rsbscs	r7, r4, pc, ror #4
  ec:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  f0:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  f4:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
  f8:	2f3a4300 	svccs	0x003a4300
  fc:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 100:	6e412f73 	mcrvs	15, 2, r2, cr1, cr3, {3}
 104:	2f657264 	svccs	0x00657264
 108:	6b736544 	blvs	1cd9620 <startup-0x1e3269e0>
 10c:	2f706f74 	svccs	0x00706f74
 110:	33544144 	cmpcc	r4, #68, 2
 114:	6c5f3039 	mrrcvs	0, 3, r3, pc, cr9	; <UNPREDICTABLE>
 118:	5f626261 	svcpl	0x00626261
 11c:	732f3476 			; <UNDEFINED> instruction: 0x732f3476
 120:	2f6c6570 	svccs	0x006c6570
 124:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 128:	6373615f 	cmnvs	r3, #-1073741801	; 0xc0000017
 12c:	632e6969 			; <UNDEFINED> instruction: 0x632e6969
 130:	63736100 	cmnvs	r3, #0, 2
 134:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 138:	5f646165 	svcpl	0x00646165
 13c:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 140:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 144:	61007265 	tstvs	r0, r5, ror #4
 148:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 14c:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 150:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 154:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
 158:	3a430074 	bcc	10c0330 <startup-0x1ef3fcd0>
 15c:	6573555c 	ldrbvs	r5, [r3, #-1372]!	; 0xfffffaa4
 160:	415c7372 	cmpmi	ip, r2, ror r3
 164:	6572646e 	ldrbvs	r6, [r2, #-1134]!	; 0xfffffb92
 168:	7365445c 	cmnvc	r5, #92, 8	; 0x5c000000
 16c:	706f746b 	rsbvc	r7, pc, fp, ror #8
 170:	5441445c 	strbpl	r4, [r1], #-1116	; 0xfffffba4
 174:	5f303933 	svcpl	0x00303933
 178:	6262616c 	rsbvs	r6, r2, #108, 2
 17c:	5c34765f 	ldcpl	6, cr7, [r4], #-380	; 0xfffffe84
 180:	6c657073 	stclvs	0, cr7, [r5], #-460	; 0xfffffe34
 184:	63736100 	cmnvs	r3, #0, 2
 188:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 18c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 190:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 194:	73610061 	cmnvc	r1, #97	; 0x61
 198:	5f696963 	svcpl	0x00696963
 19c:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 1a0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 1a4:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 1a8:	61007261 	tstvs	r0, r1, ror #4
 1ac:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 1b0:	6165725f 	cmnvs	r5, pc, asr r2
 1b4:	61645f64 	cmnvs	r4, r4, ror #30
 1b8:	61006174 	tstvs	r0, r4, ror r1
 1bc:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 1c0:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 4c <startup-0x1fffffb4>
 1c4:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 1c8:	63736100 	cmnvs	r3, #0, 2
 1cc:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 1d0:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 1d4:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 1d8:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 10 <startup-0x1ffffff0>
 1dc:	0072656c 	rsbseq	r6, r2, ip, ror #10
 1e0:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 1e4:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 1e8:	5f657469 	svcpl	0x00657469
 1ec:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 1f0:	63736100 	cmnvs	r3, #0, 2
 1f4:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 1f8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 1fc:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 88 <startup-0x1fffff78>
 200:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 204:	45475000 	strbmi	r5, [r7, #-0]
 208:	54454d4f 	strbpl	r4, [r5], #-3407	; 0xfffff2b1
 20c:	73005952 	movwvc	r5, #2386	; 0x952
 210:	00706968 	rsbseq	r6, r0, r8, ror #18
 214:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff7d9 <ball+0xdfffe035>
 218:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 21c:	646e412f 	strbtvs	r4, [lr], #-303	; 0xfffffed1
 220:	442f6572 	strtmi	r6, [pc], #-1394	; 228 <startup-0x1ffffdd8>
 224:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 228:	442f706f 	strtmi	r7, [pc], #-111	; 230 <startup-0x1ffffdd0>
 22c:	39335441 	ldmdbcc	r3!, {r0, r6, sl, ip, lr}
 230:	616c5f30 	cmnvs	ip, r0, lsr pc
 234:	765f6262 	ldrbvc	r6, [pc], -r2, ror #4
 238:	70732f34 	rsbsvc	r2, r3, r4, lsr pc
 23c:	6d2f6c65 	stcvs	12, cr6, [pc, #-404]!	; b0 <startup-0x1fffff50>
 240:	2e6e6961 	vnmulcs.f16	s13, s28, s3	; <UNPREDICTABLE>
 244:	6f6d0063 	svcvs	0x006d0063
 248:	61006576 	tstvs	r0, r6, ror r5
 24c:	00766772 	rsbseq	r6, r6, r2, ror r7
 250:	78726964 	ldmdavc	r2!, {r2, r5, r6, r8, fp, sp, lr}^
 254:	72696400 	rsbvc	r6, r9, #0, 8
 258:	61620079 	smcvs	8201	; 0x2009
 25c:	675f6c6c 	ldrbvs	r6, [pc, -ip, ror #24]
 260:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 264:	00797274 	rsbseq	r7, r9, r4, ror r2
 268:	696f5074 	stmdbvs	pc!, {r2, r4, r5, r6, ip, lr}^	; <UNPREDICTABLE>
 26c:	7000746e 	andvc	r7, r0, lr, ror #8
 270:	746e616c 	strbtvc	r6, [lr], #-364	; 0xfffffe94
 274:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 278:	4f500073 	svcmi	0x00500073
 27c:	00544e49 	subseq	r4, r4, r9, asr #28
 280:	5f746573 	svcpl	0x00746573
 284:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 288:	6f700064 	svcvs	0x00700064
 28c:	70007873 	andvc	r7, r0, r3, ror r8
 290:	0079736f 	rsbseq	r7, r9, pc, ror #6
 294:	6b636162 	blvs	18d8824 <startup-0x1e7277dc>
 298:	756f7247 	strbvc	r7, [pc, #-583]!	; 59 <startup-0x1fffffa7>
 29c:	625f646e 	subsvs	r6, pc, #1845493760	; 0x6e000000
 2a0:	00737469 	rsbseq	r7, r3, r9, ror #8
 2a4:	70696873 	rsbvc	r6, r9, r3, ror r8
 2a8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 2ac:	6c700073 	ldclvs	0, cr0, [r0], #-460	; 0xfffffe34
 2b0:	00746e61 	rsbseq	r6, r4, r1, ror #28
 2b4:	67696568 	strbvs	r6, [r9, -r8, ror #10]!
 2b8:	69007468 	stmdbvs	r0, {r3, r5, r6, sl, ip, sp, lr}
 2bc:	5f74696e 	svcpl	0x0074696e
 2c0:	6c657073 	stclvs	0, cr7, [r5], #-460	; 0xfffffe34
 2c4:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 2c8:	4774006e 	ldrbmi	r0, [r4, -lr, rrx]!
 2cc:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 2d0:	00797274 	rsbseq	r7, r9, r4, ror r2
 2d4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 2d8:	656d5f69 	strbvs	r5, [sp, #-3945]!	; 0xfffff097
 2dc:	67617373 			; <UNDEFINED> instruction: 0x67617373
 2e0:	69730065 	ldmdbvs	r3!, {r0, r2, r5, r6}^
 2e4:	0078657a 	rsbseq	r6, r8, sl, ror r5
 2e8:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 2ec:	72610079 	rsbvc	r0, r1, #121	; 0x79
 2f0:	73006367 	movwvc	r6, #871	; 0x367
 2f4:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 2f8:	62007075 	andvs	r7, r0, #117	; 0x75
 2fc:	006c6c61 	rsbeq	r6, ip, r1, ror #24
 300:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 304:	64697700 	strbtvs	r7, [r9], #-1792	; 0xfffff900
 308:	77006874 	smlsdxvc	r0, r4, r8, r6
 30c:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
 310:	5f6e695f 	svcpl	0x006e695f
 314:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
 318:	6f6c0073 	svcvs	0x006c0073
 31c:	735f6461 	cmpvc	pc, #1627389952	; 0x61000000
 320:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 324:	61620065 	cmnvs	r2, r5, rrx
 328:	72476b63 	subvc	r6, r7, #101376	; 0x18c00
 32c:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
 330:	624f7400 	subvs	r7, pc, #0, 8
 334:	756e006a 	strbvc	r0, [lr, #-106]!	; 0xffffff96
 338:	696f706d 	stmdbvs	pc!, {r0, r2, r3, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
 33c:	0073746e 	rsbseq	r7, r3, lr, ror #8
 340:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 344:	7270735f 	rsbsvc	r7, r0, #2080374785	; 0x7c000001
 348:	00657469 	rsbeq	r7, r5, r9, ror #8
 34c:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
 350:	65740031 	ldrbvs	r0, [r4, #-49]!	; 0xffffffcf
 354:	00327473 	eorseq	r7, r2, r3, ror r4
 358:	4a424f50 	bmi	10940a0 <startup-0x1ef6bf60>
 35c:	00544345 	subseq	r4, r4, r5, asr #6
 360:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff925 <ball+0xdfffe181>
 364:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 368:	646e412f 	strbtvs	r4, [lr], #-303	; 0xfffffed1
 36c:	442f6572 	strtmi	r6, [pc], #-1394	; 374 <startup-0x1ffffc8c>
 370:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 374:	442f706f 	strtmi	r7, [pc], #-111	; 37c <startup-0x1ffffc84>
 378:	39335441 	ldmdbcc	r3!, {r0, r6, sl, ip, lr}
 37c:	616c5f30 	cmnvs	ip, r0, lsr pc
 380:	765f6262 	ldrbvc	r6, [pc], -r2, ror #4
 384:	70732f34 	rsbsvc	r2, r3, r4, lsr pc
 388:	672f6c65 	strvs	r6, [pc, -r5, ror #24]!
 38c:	5f656d61 	svcpl	0x00656d61
 390:	75727473 	ldrbvc	r7, [r2, #-1139]!	; 0xfffffb8d
 394:	2e737463 	cdpcs	4, 7, cr7, cr3, cr3, {3}
 398:	65730063 	ldrbvs	r0, [r3, #-99]!	; 0xffffff9d
 39c:	626f5f74 	rsbvs	r5, pc, #116, 30	; 0x1d0
 3a0:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 3a4:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 3a8:	63006465 	movwvs	r6, #1125	; 0x465
 3ac:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 3b0:	6a626f5f 	bvs	189c134 <startup-0x1e763ecc>
 3b4:	00746365 	rsbseq	r6, r4, r5, ror #6
 3b8:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 3bc:	6a626f5f 	bvs	189c140 <startup-0x1e763ec0>
 3c0:	00746365 	rsbseq	r6, r4, r5, ror #6
 3c4:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 3c8:	6a626f5f 	bvs	189c14c <startup-0x1e763eb4>
 3cc:	00746365 	rsbseq	r6, r4, r5, ror #6
 3d0:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 3d4:	73007864 	movwvc	r7, #2148	; 0x864
 3d8:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 3dc:	65640079 	strbvs	r0, [r4, #-121]!	; 0xffffff87
 3e0:	5f79616c 	svcpl	0x0079616c
 3e4:	7263696d 	rsbvc	r6, r3, #1785856	; 0x1b4000
 3e8:	6564006f 	strbvs	r0, [r4, #-111]!	; 0xffffff91
 3ec:	5f79616c 	svcpl	0x0079616c
 3f0:	6e303035 	mrcvs	0, 1, r3, cr0, cr5, {1}
 3f4:	3a430073 	bcc	10c05c8 <startup-0x1ef3fa38>
 3f8:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 3fc:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
 400:	6572646e 	ldrbvs	r6, [r2, #-1134]!	; 0xfffffb92
 404:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 408:	706f746b 	rsbvc	r7, pc, fp, ror #8
 40c:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 410:	5f303933 	svcpl	0x00303933
 414:	6262616c 	rsbvs	r6, r2, #108, 2
 418:	2f34765f 	svccs	0x0034765f
 41c:	6c657073 	stclvs	0, cr7, [r5], #-460	; 0xfffffe34
 420:	6d61672f 	stclvs	7, cr6, [r1, #-188]!	; 0xffffff44
 424:	65645f65 	strbvs	r5, [r4, #-3941]!	; 0xfffff09b
 428:	7379616c 	cmnvc	r9, #108, 2
 42c:	6400632e 	strvs	r6, [r0], #-814	; 0xfffffcd2
 430:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 434:	6c696d5f 	stclvs	13, cr6, [r9], #-380	; 0xfffffe84
 438:	6400696c 	strvs	r6, [r0], #-2412	; 0xfffff694
 43c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 440:	3035325f 	eorscc	r3, r5, pc, asr r2
 444:	4300736e 	movwmi	r7, #878	; 0x36e
 448:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 44c:	2f737265 	svccs	0x00737265
 450:	72646e41 	rsbvc	r6, r4, #1040	; 0x410
 454:	65442f65 	strbvs	r2, [r4, #-3941]	; 0xfffff09b
 458:	6f746b73 	svcvs	0x00746b73
 45c:	41442f70 	hvcmi	17136	; 0x42f0
 460:	30393354 	eorscc	r3, r9, r4, asr r3
 464:	62616c5f 	rsbvs	r6, r1, #24320	; 0x5f00
 468:	34765f62 	ldrbtcc	r5, [r6], #-3938	; 0xfffff09e
 46c:	6570732f 	ldrbvs	r7, [r0, #-815]!	; 0xfffffcd1
 470:	61672f6c 	cmnvs	r7, ip, ror #30
 474:	6b5f656d 	blvs	17d9a30 <startup-0x1e8265d0>
 478:	6f627965 	svcvs	0x00627965
 47c:	2e647261 	cdpcs	2, 6, cr7, cr4, cr1, {3}
 480:	6f630063 	svcvs	0x00630063
 484:	6e6d756c 	cdpvs	5, 6, cr7, cr13, cr12, {3}
 488:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 48c:	6e695f62 	cdpvs	15, 6, cr5, cr9, cr2, {3}
 490:	6b007469 	blvs	1d63c <startup-0x1ffe29c4>
 494:	00627965 	rsbeq	r7, r2, r5, ror #18
 498:	3774756f 	ldrbcc	r7, [r4, -pc, ror #10]!
 49c:	00676573 	rsbeq	r6, r7, r3, ror r5
 4a0:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
 4a4:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
 4a8:	6b006c6f 	blvs	1b66c <startup-0x1ffe4994>
 4ac:	41627965 	cmnmi	r2, r5, ror #18
 4b0:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 4b4:	00657461 	rsbeq	r7, r5, r1, ror #8
 4b8:	65676170 	strbvs	r6, [r7, #-368]!	; 0xfffffe90
 4bc:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
 4c0:	625f7261 	subsvs	r7, pc, #268435462	; 0x10000006
 4c4:	426b6361 	rsbmi	r6, fp, #-2080374783	; 0x84000001
 4c8:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 4cc:	3a430072 	bcc	10c069c <startup-0x1ef3f964>
 4d0:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 4d4:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
 4d8:	6572646e 	ldrbvs	r6, [r2, #-1134]!	; 0xfffffb92
 4dc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 4e0:	706f746b 	rsbvc	r7, pc, fp, ror #8
 4e4:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 4e8:	5f303933 	svcpl	0x00303933
 4ec:	6262616c 	rsbvs	r6, r2, #108, 2
 4f0:	2f34765f 	svccs	0x0034765f
 4f4:	6c657073 	stclvs	0, cr7, [r5], #-460	; 0xfffffe34
 4f8:	6d61672f 	stclvs	7, cr6, [r1, #-188]!	; 0xffffff44
 4fc:	72675f65 	rsbvc	r5, r7, #404	; 0x194
 500:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 504:	632e7363 			; <UNDEFINED> instruction: 0x632e7363
 508:	6c617600 	stclvs	6, cr7, [r1], #-0
 50c:	67006575 	smlsdxvs	r0, r5, r5, r6
 510:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 514:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 518:	5f646165 	svcpl	0x00646165
 51c:	61746164 	cmnvs	r4, r4, ror #2
 520:	61726700 	cmnvs	r2, r0, lsl #14
 524:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 528:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 52c:	73006574 	movwvc	r6, #1396	; 0x574
 530:	63656c65 	cmnvs	r5, #25856	; 0x6500
 534:	6f635f74 	svcvs	0x00635f74
 538:	6f72746e 	svcvs	0x0072746e
 53c:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 540:	61726700 	cmnvs	r2, r0, lsl #14
 544:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 548:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 54c:	72670074 	rsbvc	r0, r7, #116	; 0x74
 550:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 554:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 558:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 55c:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
 560:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 564:	61726700 	cmnvs	r2, r0, lsl #14
 568:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 56c:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 570:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 574:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
 578:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
 57c:	5f38746e 	svcpl	0x0038746e
 580:	69700074 	ldmdbvs	r0!, {r2, r4, r5, r6}^
 584:	006c6578 	rsbeq	r6, ip, r8, ror r5
 588:	6b73616d 	blvs	1cd8b44 <startup-0x1e3274bc>
 58c:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
 590:	67007865 	strvs	r7, [r0, -r5, ror #16]
 594:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 598:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 59c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 5a0:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 5a4:	72670061 	rsbvc	r0, r7, #97	; 0x61
 5a8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 5ac:	72645f63 	rsbvc	r5, r4, #396	; 0x18c
 5b0:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
 5b4:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
 5b8:	7267006e 	rsbvc	r0, r7, #110	; 0x6e
 5bc:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 5c0:	61775f63 	cmnvs	r7, r3, ror #30
 5c4:	725f7469 	subsvc	r7, pc, #1761607680	; 0x69000000
 5c8:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
 5cc:	61726700 	cmnvs	r2, r0, lsl #14
 5d0:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 5d4:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 5d8:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
 5dc:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
 5e0:	7267006e 	rsbvc	r0, r7, #110	; 0x6e
 5e4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 5e8:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 5ec:	67006461 	strvs	r6, [r0, -r1, ror #8]
 5f0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 5f4:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 5f8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 5fc:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 488 <startup-0x1ffffb78>
 600:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <ball+0xdfffdb6a>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000030 	andeq	r0, r0, r0, lsr r0
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	100e4101 	andne	r4, lr, r1, lsl #2
  2c:	00070d41 	andeq	r0, r7, r1, asr #26
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000040 	andcs	r0, r0, r0, asr #32
  3c:	00000034 	andeq	r0, r0, r4, lsr r0
  40:	40080e41 	andmi	r0, r8, r1, asr #28
  44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  48:	100e4101 	andne	r4, lr, r1, lsl #2
  4c:	00070d41 	andeq	r0, r7, r1, asr #26
  50:	0000001c 	andeq	r0, r0, ip, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000074 	andcs	r0, r0, r4, ror r0
  5c:	00000030 	andeq	r0, r0, r0, lsr r0
  60:	40080e41 	andmi	r0, r8, r1, asr #28
  64:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  68:	100e4101 	andne	r4, lr, r1, lsl #2
  6c:	00070d41 	andeq	r0, r7, r1, asr #26
  70:	0000001c 	andeq	r0, r0, ip, lsl r0
  74:	00000000 	andeq	r0, r0, r0
  78:	200000a4 	andcs	r0, r0, r4, lsr #1
  7c:	0000003c 	andeq	r0, r0, ip, lsr r0
  80:	40080e41 	andmi	r0, r8, r1, asr #28
  84:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  88:	100e4101 	andne	r4, lr, r1, lsl #2
  8c:	00070d41 	andeq	r0, r7, r1, asr #26
  90:	0000001c 	andeq	r0, r0, ip, lsl r0
  94:	00000000 	andeq	r0, r0, r0
  98:	200000e0 	andcs	r0, r0, r0, ror #1
  9c:	0000002a 	andeq	r0, r0, sl, lsr #32
  a0:	40080e41 	andmi	r0, r8, r1, asr #28
  a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a8:	100e4101 	andne	r4, lr, r1, lsl #2
  ac:	00070d41 	andeq	r0, r7, r1, asr #26
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	2000010a 	andcs	r0, r0, sl, lsl #2
  bc:	0000002a 	andeq	r0, r0, sl, lsr #32
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	100e4101 	andne	r4, lr, r1, lsl #2
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	00000020 	andeq	r0, r0, r0, lsr #32
  d4:	00000000 	andeq	r0, r0, r0
  d8:	20000134 	andcs	r0, r0, r4, lsr r1
  dc:	00000048 	andeq	r0, r0, r8, asr #32
  e0:	400c0e41 	andmi	r0, ip, r1, asr #28
  e4:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  e8:	018e4002 	orreq	r4, lr, r2
  ec:	41180e41 	tstmi	r8, r1, asr #28
  f0:	0000070d 	andeq	r0, r0, sp, lsl #14
  f4:	00000020 	andeq	r0, r0, r0, lsr #32
  f8:	00000000 	andeq	r0, r0, r0
  fc:	2000017c 	andcs	r0, r0, ip, ror r1
 100:	00000048 	andeq	r0, r0, r8, asr #32
 104:	400c0e41 	andmi	r0, ip, r1, asr #28
 108:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 10c:	018e4002 	orreq	r4, lr, r2
 110:	41180e41 	tstmi	r8, r1, asr #28
 114:	0000070d 	andeq	r0, r0, sp, lsl #14
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	00000000 	andeq	r0, r0, r0
 120:	200001c4 	andcs	r0, r0, r4, asr #3
 124:	00000032 	andeq	r0, r0, r2, lsr r0
 128:	40080e41 	andmi	r0, r8, r1, asr #28
 12c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 130:	100e4101 	andne	r4, lr, r1, lsl #2
 134:	00070d41 	andeq	r0, r7, r1, asr #26
 138:	00000018 	andeq	r0, r0, r8, lsl r0
 13c:	00000000 	andeq	r0, r0, r0
 140:	200001f6 	strdcs	r0, [r0], -r6
 144:	0000003a 	andeq	r0, r0, sl, lsr r0
 148:	40080e41 	andmi	r0, r8, r1, asr #28
 14c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 150:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 154:	0000001c 	andeq	r0, r0, ip, lsl r0
 158:	00000000 	andeq	r0, r0, r0
 15c:	20000230 	andcs	r0, r0, r0, lsr r2
 160:	0000003c 	andeq	r0, r0, ip, lsr r0
 164:	40080e41 	andmi	r0, r8, r1, asr #28
 168:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 16c:	100e4101 	andne	r4, lr, r1, lsl #2
 170:	00070d41 	andeq	r0, r7, r1, asr #26
 174:	0000001c 	andeq	r0, r0, ip, lsl r0
 178:	00000000 	andeq	r0, r0, r0
 17c:	2000026c 	andcs	r0, r0, ip, ror #4
 180:	0000004a 	andeq	r0, r0, sl, asr #32
 184:	40080e41 	andmi	r0, r8, r1, asr #28
 188:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 18c:	180e4101 	stmdane	lr, {r0, r8, lr}
 190:	00070d41 	andeq	r0, r7, r1, asr #26
 194:	0000000c 	andeq	r0, r0, ip
 198:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 19c:	7c020001 	stcvc	0, cr0, [r2], {1}
 1a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1a4:	0000000c 	andeq	r0, r0, ip
 1a8:	00000194 	muleq	r0, r4, r1
 1ac:	20000000 	andcs	r0, r0, r0
 1b0:	0000000c 	andeq	r0, r0, ip
 1b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b8:	00000194 	muleq	r0, r4, r1
 1bc:	200002b8 			; <UNDEFINED> instruction: 0x200002b8
 1c0:	0000002c 	andeq	r0, r0, ip, lsr #32
 1c4:	40080e41 	andmi	r0, r8, r1, asr #28
 1c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1cc:	180e4101 	stmdane	lr, {r0, r8, lr}
 1d0:	00070d41 	andeq	r0, r7, r1, asr #26
 1d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d8:	00000194 	muleq	r0, r4, r1
 1dc:	200002e4 	andcs	r0, r0, r4, ror #5
 1e0:	000000c2 	andeq	r0, r0, r2, asr #1
 1e4:	40080e41 	andmi	r0, r8, r1, asr #28
 1e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1ec:	300e4101 	andcc	r4, lr, r1, lsl #2
 1f0:	00070d41 	andeq	r0, r7, r1, asr #26
 1f4:	00000024 	andeq	r0, r0, r4, lsr #32
 1f8:	00000194 	muleq	r0, r4, r1
 1fc:	200003a6 	andcs	r0, r0, r6, lsr #7
 200:	0000007a 	andeq	r0, r0, sl, ror r0
 204:	40100e41 	andsmi	r0, r0, r1, asr #28
 208:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 20c:	02874003 	addeq	r4, r7, #3
 210:	41018e40 	tstmi	r1, r0, asr #28
 214:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 218:	00000007 	andeq	r0, r0, r7
 21c:	00000018 	andeq	r0, r0, r8, lsl r0
 220:	00000194 	muleq	r0, r4, r1
 224:	20000420 	andcs	r0, r0, r0, lsr #8
 228:	0000001c 	andeq	r0, r0, ip, lsl r0
 22c:	40080e41 	andmi	r0, r8, r1, asr #28
 230:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 234:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 238:	0000001c 	andeq	r0, r0, ip, lsl r0
 23c:	00000194 	muleq	r0, r4, r1
 240:	2000043c 	andcs	r0, r0, ip, lsr r4
 244:	00000078 	andeq	r0, r0, r8, ror r0
 248:	40080e41 	andmi	r0, r8, r1, asr #28
 24c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 250:	200e4101 	andcs	r4, lr, r1, lsl #2
 254:	00070d41 	andeq	r0, r7, r1, asr #26
 258:	0000000c 	andeq	r0, r0, ip
 25c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 260:	7c020001 	stcvc	0, cr0, [r2], {1}
 264:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 268:	0000001c 	andeq	r0, r0, ip, lsl r0
 26c:	00000258 	andeq	r0, r0, r8, asr r2
 270:	200004b4 			; <UNDEFINED> instruction: 0x200004b4
 274:	00000020 	andeq	r0, r0, r0, lsr #32
 278:	40080e41 	andmi	r0, r8, r1, asr #28
 27c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 280:	180e4101 	stmdane	lr, {r0, r8, lr}
 284:	00070d41 	andeq	r0, r7, r1, asr #26
 288:	0000001c 	andeq	r0, r0, ip, lsl r0
 28c:	00000258 	andeq	r0, r0, r8, asr r2
 290:	200004d4 	ldrdcs	r0, [r0], -r4
 294:	0000005c 	andeq	r0, r0, ip, asr r0
 298:	40080e41 	andmi	r0, r8, r1, asr #28
 29c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2a0:	180e4101 	stmdane	lr, {r0, r8, lr}
 2a4:	00070d41 	andeq	r0, r7, r1, asr #26
 2a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2ac:	00000258 	andeq	r0, r0, r8, asr r2
 2b0:	20000530 	andcs	r0, r0, r0, lsr r5
 2b4:	0000005c 	andeq	r0, r0, ip, asr r0
 2b8:	40080e41 	andmi	r0, r8, r1, asr #28
 2bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2c0:	180e4101 	stmdane	lr, {r0, r8, lr}
 2c4:	00070d41 	andeq	r0, r7, r1, asr #26
 2c8:	00000020 	andeq	r0, r0, r0, lsr #32
 2cc:	00000258 	andeq	r0, r0, r8, asr r2
 2d0:	2000058c 	andcs	r0, r0, ip, lsl #11
 2d4:	000000a6 	andeq	r0, r0, r6, lsr #1
 2d8:	400c0e41 	andmi	r0, ip, r1, asr #28
 2dc:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 2e0:	018e4002 	orreq	r4, lr, r2
 2e4:	41180e41 	tstmi	r8, r1, asr #28
 2e8:	0000070d 	andeq	r0, r0, sp, lsl #14
 2ec:	0000000c 	andeq	r0, r0, ip
 2f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2f4:	7c020001 	stcvc	0, cr0, [r2], {1}
 2f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2fc:	00000018 	andeq	r0, r0, r8, lsl r0
 300:	000002ec 	andeq	r0, r0, ip, ror #5
 304:	20000634 	andcs	r0, r0, r4, lsr r6
 308:	00000044 	andeq	r0, r0, r4, asr #32
 30c:	40080e41 	andmi	r0, r8, r1, asr #28
 310:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 314:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 318:	0000001c 	andeq	r0, r0, ip, lsl r0
 31c:	000002ec 	andeq	r0, r0, ip, ror #5
 320:	20000678 	andcs	r0, r0, r8, ror r6
 324:	0000002c 	andeq	r0, r0, ip, lsr #32
 328:	40080e41 	andmi	r0, r8, r1, asr #28
 32c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 330:	100e4101 	andne	r4, lr, r1, lsl #2
 334:	00070d41 	andeq	r0, r7, r1, asr #26
 338:	0000001c 	andeq	r0, r0, ip, lsl r0
 33c:	000002ec 	andeq	r0, r0, ip, ror #5
 340:	200006a4 	andcs	r0, r0, r4, lsr #13
 344:	0000003a 	andeq	r0, r0, sl, lsr r0
 348:	40080e41 	andmi	r0, r8, r1, asr #28
 34c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 350:	100e4101 	andne	r4, lr, r1, lsl #2
 354:	00070d41 	andeq	r0, r7, r1, asr #26
 358:	00000018 	andeq	r0, r0, r8, lsl r0
 35c:	000002ec 	andeq	r0, r0, ip, ror #5
 360:	200006de 	ldrdcs	r0, [r0], -lr
 364:	00000012 	andeq	r0, r0, r2, lsl r0
 368:	40080e41 	andmi	r0, r8, r1, asr #28
 36c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 370:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 374:	0000000c 	andeq	r0, r0, ip
 378:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 37c:	7c020001 	stcvc	0, cr0, [r2], {1}
 380:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 384:	00000018 	andeq	r0, r0, r8, lsl r0
 388:	00000374 	andeq	r0, r0, r4, ror r3
 38c:	200006f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 390:	00000048 	andeq	r0, r0, r8, asr #32
 394:	40080e41 	andmi	r0, r8, r1, asr #28
 398:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 39c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 3a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a4:	00000374 	andeq	r0, r0, r4, ror r3
 3a8:	20000738 	andcs	r0, r0, r8, lsr r7
 3ac:	000000b8 	strheq	r0, [r0], -r8
 3b0:	40080e41 	andmi	r0, r8, r1, asr #28
 3b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3b8:	100e4101 	andne	r4, lr, r1, lsl #2
 3bc:	00070d41 	andeq	r0, r7, r1, asr #26
 3c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c4:	00000374 	andeq	r0, r0, r4, ror r3
 3c8:	200007f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 3cc:	00000054 	andeq	r0, r0, r4, asr r0
 3d0:	40080e41 	andmi	r0, r8, r1, asr #28
 3d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3d8:	100e4101 	andne	r4, lr, r1, lsl #2
 3dc:	00070d41 	andeq	r0, r7, r1, asr #26
 3e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e4:	00000374 	andeq	r0, r0, r4, ror r3
 3e8:	20000844 	andcs	r0, r0, r4, asr #16
 3ec:	00000054 	andeq	r0, r0, r4, asr r0
 3f0:	40080e41 	andmi	r0, r8, r1, asr #28
 3f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3f8:	100e4101 	andne	r4, lr, r1, lsl #2
 3fc:	00070d41 	andeq	r0, r7, r1, asr #26
 400:	00000020 	andeq	r0, r0, r0, lsr #32
 404:	00000374 	andeq	r0, r0, r4, ror r3
 408:	20000898 	mulcs	r0, r8, r8
 40c:	00000068 	andeq	r0, r0, r8, rrx
 410:	400c0e41 	andmi	r0, ip, r1, asr #28
 414:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 418:	018e4002 	orreq	r4, lr, r2
 41c:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 420:	0000070d 	andeq	r0, r0, sp, lsl #14
 424:	0000000c 	andeq	r0, r0, ip
 428:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 42c:	7c020001 	stcvc	0, cr0, [r2], {1}
 430:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 434:	0000001c 	andeq	r0, r0, ip, lsl r0
 438:	00000424 	andeq	r0, r0, r4, lsr #8
 43c:	20000900 	andcs	r0, r0, r0, lsl #18
 440:	00000038 	andeq	r0, r0, r8, lsr r0
 444:	40080e41 	andmi	r0, r8, r1, asr #28
 448:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 44c:	100e4101 	andne	r4, lr, r1, lsl #2
 450:	00070d41 	andeq	r0, r7, r1, asr #26
 454:	0000001c 	andeq	r0, r0, ip, lsl r0
 458:	00000424 	andeq	r0, r0, r4, lsr #8
 45c:	20000938 	andcs	r0, r0, r8, lsr r9
 460:	0000003c 	andeq	r0, r0, ip, lsr r0
 464:	40080e41 	andmi	r0, r8, r1, asr #28
 468:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 46c:	100e4101 	andne	r4, lr, r1, lsl #2
 470:	00070d41 	andeq	r0, r7, r1, asr #26
 474:	0000001c 	andeq	r0, r0, ip, lsl r0
 478:	00000424 	andeq	r0, r0, r4, lsr #8
 47c:	20000974 	andcs	r0, r0, r4, ror r9
 480:	0000005a 	andeq	r0, r0, sl, asr r0
 484:	40080e41 	andmi	r0, r8, r1, asr #28
 488:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 48c:	100e4101 	andne	r4, lr, r1, lsl #2
 490:	00070d41 	andeq	r0, r7, r1, asr #26
 494:	00000018 	andeq	r0, r0, r8, lsl r0
 498:	00000424 	andeq	r0, r0, r4, lsr #8
 49c:	200009ce 	andcs	r0, r0, lr, asr #19
 4a0:	0000005a 	andeq	r0, r0, sl, asr r0
 4a4:	40080e41 	andmi	r0, r8, r1, asr #28
 4a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4ac:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 4b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b4:	00000424 	andeq	r0, r0, r4, lsr #8
 4b8:	20000a28 	andcs	r0, r0, r8, lsr #20
 4bc:	00000088 	andeq	r0, r0, r8, lsl #1
 4c0:	40080e41 	andmi	r0, r8, r1, asr #28
 4c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4c8:	180e4101 	stmdane	lr, {r0, r8, lr}
 4cc:	00070d41 	andeq	r0, r7, r1, asr #26
 4d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d4:	00000424 	andeq	r0, r0, r4, lsr #8
 4d8:	20000ab0 			; <UNDEFINED> instruction: 0x20000ab0
 4dc:	00000078 	andeq	r0, r0, r8, ror r0
 4e0:	40080e41 	andmi	r0, r8, r1, asr #28
 4e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4e8:	100e4101 	andne	r4, lr, r1, lsl #2
 4ec:	00070d41 	andeq	r0, r7, r1, asr #26
 4f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4f4:	00000424 	andeq	r0, r0, r4, lsr #8
 4f8:	20000b28 	andcs	r0, r0, r8, lsr #22
 4fc:	00000040 	andeq	r0, r0, r0, asr #32
 500:	40080e41 	andmi	r0, r8, r1, asr #28
 504:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 508:	100e4101 	andne	r4, lr, r1, lsl #2
 50c:	00070d41 	andeq	r0, r7, r1, asr #26
 510:	0000001c 	andeq	r0, r0, ip, lsl r0
 514:	00000424 	andeq	r0, r0, r4, lsr #8
 518:	20000b68 	andcs	r0, r0, r8, ror #22
 51c:	00000046 	andeq	r0, r0, r6, asr #32
 520:	40080e41 	andmi	r0, r8, r1, asr #28
 524:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 528:	100e4101 	andne	r4, lr, r1, lsl #2
 52c:	00070d41 	andeq	r0, r7, r1, asr #26
 530:	0000001c 	andeq	r0, r0, ip, lsl r0
 534:	00000424 	andeq	r0, r0, r4, lsr #8
 538:	20000bae 	andcs	r0, r0, lr, lsr #23
 53c:	0000002a 	andeq	r0, r0, sl, lsr #32
 540:	40080e41 	andmi	r0, r8, r1, asr #28
 544:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 548:	100e4101 	andne	r4, lr, r1, lsl #2
 54c:	00070d41 	andeq	r0, r7, r1, asr #26
 550:	00000018 	andeq	r0, r0, r8, lsl r0
 554:	00000424 	andeq	r0, r0, r4, lsr #8
 558:	20000bd8 	ldrdcs	r0, [r0], -r8
 55c:	00000058 	andeq	r0, r0, r8, asr r0
 560:	40080e41 	andmi	r0, r8, r1, asr #28
 564:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 568:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 56c:	0000001c 	andeq	r0, r0, ip, lsl r0
 570:	00000424 	andeq	r0, r0, r4, lsr #8
 574:	20000c30 	andcs	r0, r0, r0, lsr ip
 578:	00000058 	andeq	r0, r0, r8, asr r0
 57c:	40080e41 	andmi	r0, r8, r1, asr #28
 580:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 584:	100e4101 	andne	r4, lr, r1, lsl #2
 588:	00070d41 	andeq	r0, r7, r1, asr #26
 58c:	0000001c 	andeq	r0, r0, ip, lsl r0
 590:	00000424 	andeq	r0, r0, r4, lsr #8
 594:	20000c88 	andcs	r0, r0, r8, lsl #25
 598:	00000088 	andeq	r0, r0, r8, lsl #1
 59c:	40080e41 	andmi	r0, r8, r1, asr #28
 5a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5a4:	180e4101 	stmdane	lr, {r0, r8, lr}
 5a8:	00070d41 	andeq	r0, r7, r1, asr #26
 5ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 5b0:	00000424 	andeq	r0, r0, r4, lsr #8
 5b4:	20000d10 	andcs	r0, r0, r0, lsl sp
 5b8:	000000cc 	andeq	r0, r0, ip, asr #1
 5bc:	40080e41 	andmi	r0, r8, r1, asr #28
 5c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5c4:	180e4101 	stmdane	lr, {r0, r8, lr}
 5c8:	00070d41 	andeq	r0, r7, r1, asr #26
 5cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 5d0:	00000424 	andeq	r0, r0, r4, lsr #8
 5d4:	20000ddc 	ldrdcs	r0, [r0], -ip
 5d8:	00000034 	andeq	r0, r0, r4, lsr r0
 5dc:	40080e41 	andmi	r0, r8, r1, asr #28
 5e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5e4:	100e4101 	andne	r4, lr, r1, lsl #2
 5e8:	00070d41 	andeq	r0, r7, r1, asr #26
 5ec:	0000000c 	andeq	r0, r0, ip
 5f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 5f4:	7c010001 	stcvc	0, cr0, [r1], {1}
 5f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 5fc:	0000000c 	andeq	r0, r0, ip
 600:	000005ec 	andeq	r0, r0, ip, ror #11
 604:	20000e11 	andcs	r0, r0, r1, lsl lr
 608:	0000010a 	andeq	r0, r0, sl, lsl #2

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	200002b8 			; <UNDEFINED> instruction: 0x200002b8
   4:	200004b4 			; <UNDEFINED> instruction: 0x200004b4
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
