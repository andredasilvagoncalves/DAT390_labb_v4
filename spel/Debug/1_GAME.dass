
./Debug/1_GAME.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#include "startup.h"


void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 fafc 	bl	20000600 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250ns>:
 *
 */

#include "startup.h"

void delay_250ns(void){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	STK_CTRL = 0;
20000014:	4b0c      	ldr	r3, [pc, #48]	; (20000048 <delay_250ns+0x38>)
20000016:	2200      	movs	r2, #0
20000018:	601a      	str	r2, [r3, #0]
	STK_LOAD = ((168/4) - 1);
2000001a:	4b0c      	ldr	r3, [pc, #48]	; (2000004c <delay_250ns+0x3c>)
2000001c:	2229      	movs	r2, #41	; 0x29
2000001e:	601a      	str	r2, [r3, #0]
	STK_VAL = 0;
20000020:	4b0b      	ldr	r3, [pc, #44]	; (20000050 <delay_250ns+0x40>)
20000022:	2200      	movs	r2, #0
20000024:	601a      	str	r2, [r3, #0]
	STK_CTRL = 5;
20000026:	4b08      	ldr	r3, [pc, #32]	; (20000048 <delay_250ns+0x38>)
20000028:	2205      	movs	r2, #5
2000002a:	601a      	str	r2, [r3, #0]
	
	while((STK_CTRL & 0x10000) == 0){};
2000002c:	46c0      	nop			; (mov r8, r8)
2000002e:	4b06      	ldr	r3, [pc, #24]	; (20000048 <delay_250ns+0x38>)
20000030:	681a      	ldr	r2, [r3, #0]
20000032:	2380      	movs	r3, #128	; 0x80
20000034:	025b      	lsls	r3, r3, #9
20000036:	4013      	ands	r3, r2
20000038:	d0f9      	beq.n	2000002e <delay_250ns+0x1e>
	STK_CTRL = 0;
2000003a:	4b03      	ldr	r3, [pc, #12]	; (20000048 <delay_250ns+0x38>)
2000003c:	2200      	movs	r2, #0
2000003e:	601a      	str	r2, [r3, #0]
}
20000040:	46c0      	nop			; (mov r8, r8)
20000042:	46bd      	mov	sp, r7
20000044:	bd80      	pop	{r7, pc}
20000046:	46c0      	nop			; (mov r8, r8)
20000048:	e000e010 	and	lr, r0, r0, lsl r0
2000004c:	e000e014 	and	lr, r0, r4, lsl r0
20000050:	e000e018 	and	lr, r0, r8, lsl r0

20000054 <delay_micro>:

void delay_micro(unsigned int us){
20000054:	b580      	push	{r7, lr}
20000056:	b082      	sub	sp, #8
20000058:	af00      	add	r7, sp, #0
2000005a:	6078      	str	r0, [r7, #4]
	while(us--){
2000005c:	e007      	b.n	2000006e <delay_micro+0x1a>
		delay_250ns();
2000005e:	f7ff ffd7 	bl	20000010 <delay_250ns>
		delay_250ns();
20000062:	f7ff ffd5 	bl	20000010 <delay_250ns>
		delay_250ns(); 
20000066:	f7ff ffd3 	bl	20000010 <delay_250ns>
		delay_250ns();
2000006a:	f7ff ffd1 	bl	20000010 <delay_250ns>
	while(us--){
2000006e:	687b      	ldr	r3, [r7, #4]
20000070:	1e5a      	subs	r2, r3, #1
20000072:	607a      	str	r2, [r7, #4]
20000074:	2b00      	cmp	r3, #0
20000076:	d1f2      	bne.n	2000005e <delay_micro+0xa>
	}
}
20000078:	46c0      	nop			; (mov r8, r8)
2000007a:	46bd      	mov	sp, r7
2000007c:	b002      	add	sp, #8
2000007e:	bd80      	pop	{r7, pc}

20000080 <delay_milli>:

void delay_milli(unsigned int ms){
20000080:	b580      	push	{r7, lr}
20000082:	b082      	sub	sp, #8
20000084:	af00      	add	r7, sp, #0
20000086:	6078      	str	r0, [r7, #4]

#ifdef SIMULATOR
	ms = ms / 100;
20000088:	687b      	ldr	r3, [r7, #4]
2000008a:	2164      	movs	r1, #100	; 0x64
2000008c:	0018      	movs	r0, r3
2000008e:	f000 fb93 	bl	200007b8 <__udivsi3>
20000092:	0003      	movs	r3, r0
20000094:	607b      	str	r3, [r7, #4]
	ms++;
20000096:	687b      	ldr	r3, [r7, #4]
20000098:	3301      	adds	r3, #1
2000009a:	607b      	str	r3, [r7, #4]
#endif
	
	while( ms-- )
2000009c:	e004      	b.n	200000a8 <delay_milli+0x28>
		delay_micro(1000);
2000009e:	23fa      	movs	r3, #250	; 0xfa
200000a0:	009b      	lsls	r3, r3, #2
200000a2:	0018      	movs	r0, r3
200000a4:	f7ff ffd6 	bl	20000054 <delay_micro>
	while( ms-- )
200000a8:	687b      	ldr	r3, [r7, #4]
200000aa:	1e5a      	subs	r2, r3, #1
200000ac:	607a      	str	r2, [r7, #4]
200000ae:	2b00      	cmp	r3, #0
200000b0:	d1f5      	bne.n	2000009e <delay_milli+0x1e>
}
200000b2:	46c0      	nop			; (mov r8, r8)
200000b4:	46bd      	mov	sp, r7
200000b6:	b002      	add	sp, #8
200000b8:	bd80      	pop	{r7, pc}

200000ba <delay_500ns>:

void delay_500ns(void){
200000ba:	b580      	push	{r7, lr}
200000bc:	af00      	add	r7, sp, #0
	delay_250ns();
200000be:	f7ff ffa7 	bl	20000010 <delay_250ns>
	delay_250ns();
200000c2:	f7ff ffa5 	bl	20000010 <delay_250ns>
200000c6:	46c0      	nop			; (mov r8, r8)
200000c8:	46bd      	mov	sp, r7
200000ca:	bd80      	pop	{r7, pc}

200000cc <graphic_ctrl_bit_set>:
 *
 */

#include "startup.h"

void graphic_ctrl_bit_set(uint8_t x){
200000cc:	b580      	push	{r7, lr}
200000ce:	b082      	sub	sp, #8
200000d0:	af00      	add	r7, sp, #0
200000d2:	0002      	movs	r2, r0
200000d4:	1dfb      	adds	r3, r7, #7
200000d6:	701a      	strb	r2, [r3, #0]
	GPIO_ODR_E_LOW |= (~B_SELECT & x); 			//Dubbelkolla sedan
200000d8:	4b09      	ldr	r3, [pc, #36]	; (20000100 <graphic_ctrl_bit_set+0x34>)
200000da:	781b      	ldrb	r3, [r3, #0]
200000dc:	b2db      	uxtb	r3, r3
200000de:	b25a      	sxtb	r2, r3
200000e0:	1dfb      	adds	r3, r7, #7
200000e2:	781b      	ldrb	r3, [r3, #0]
200000e4:	b25b      	sxtb	r3, r3
200000e6:	2104      	movs	r1, #4
200000e8:	438b      	bics	r3, r1
200000ea:	b25b      	sxtb	r3, r3
200000ec:	4313      	orrs	r3, r2
200000ee:	b25a      	sxtb	r2, r3
200000f0:	4b03      	ldr	r3, [pc, #12]	; (20000100 <graphic_ctrl_bit_set+0x34>)
200000f2:	b2d2      	uxtb	r2, r2
200000f4:	701a      	strb	r2, [r3, #0]
}
200000f6:	46c0      	nop			; (mov r8, r8)
200000f8:	46bd      	mov	sp, r7
200000fa:	b002      	add	sp, #8
200000fc:	bd80      	pop	{r7, pc}
200000fe:	46c0      	nop			; (mov r8, r8)
20000100:	40021014 	andmi	r1, r2, r4, lsl r0

20000104 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x){
20000104:	b580      	push	{r7, lr}
20000106:	b082      	sub	sp, #8
20000108:	af00      	add	r7, sp, #0
2000010a:	0002      	movs	r2, r0
2000010c:	1dfb      	adds	r3, r7, #7
2000010e:	701a      	strb	r2, [r3, #0]
	GPIO_ODR_E_LOW &= ~(B_SELECT | x);			//Dubbelkolla sedan
20000110:	4b0a      	ldr	r3, [pc, #40]	; (2000013c <graphic_ctrl_bit_clear+0x38>)
20000112:	781b      	ldrb	r3, [r3, #0]
20000114:	b2db      	uxtb	r3, r3
20000116:	b25b      	sxtb	r3, r3
20000118:	1dfa      	adds	r2, r7, #7
2000011a:	7812      	ldrb	r2, [r2, #0]
2000011c:	2104      	movs	r1, #4
2000011e:	430a      	orrs	r2, r1
20000120:	b2d2      	uxtb	r2, r2
20000122:	b252      	sxtb	r2, r2
20000124:	43d2      	mvns	r2, r2
20000126:	b252      	sxtb	r2, r2
20000128:	4013      	ands	r3, r2
2000012a:	b25a      	sxtb	r2, r3
2000012c:	4b03      	ldr	r3, [pc, #12]	; (2000013c <graphic_ctrl_bit_clear+0x38>)
2000012e:	b2d2      	uxtb	r2, r2
20000130:	701a      	strb	r2, [r3, #0]
}
20000132:	46c0      	nop			; (mov r8, r8)
20000134:	46bd      	mov	sp, r7
20000136:	b002      	add	sp, #8
20000138:	bd80      	pop	{r7, pc}
2000013a:	46c0      	nop			; (mov r8, r8)
2000013c:	40021014 	andmi	r1, r2, r4, lsl r0

20000140 <select_controller>:

static void select_controller(uint8_t controller){
20000140:	b580      	push	{r7, lr}
20000142:	b082      	sub	sp, #8
20000144:	af00      	add	r7, sp, #0
20000146:	0002      	movs	r2, r0
20000148:	1dfb      	adds	r3, r7, #7
2000014a:	701a      	strb	r2, [r3, #0]
	switch(controller){
2000014c:	1dfb      	adds	r3, r7, #7
2000014e:	781b      	ldrb	r3, [r3, #0]
20000150:	2b08      	cmp	r3, #8
20000152:	d00c      	beq.n	2000016e <select_controller+0x2e>
20000154:	dc02      	bgt.n	2000015c <select_controller+0x1c>
20000156:	2b00      	cmp	r3, #0
20000158:	d005      	beq.n	20000166 <select_controller+0x26>
		case 0: graphic_ctrl_bit_clear(B_CS1 | B_CS2); break;
		case 0x08: graphic_ctrl_bit_set(B_CS1); graphic_ctrl_bit_clear(B_CS2); break;
		case 0x10: graphic_ctrl_bit_set(B_CS2); graphic_ctrl_bit_clear(B_CS1); break;
		case 0x08 | 0x10: graphic_ctrl_bit_set(B_CS1 | B_CS2); break;
	}	
}
2000015a:	e01a      	b.n	20000192 <select_controller+0x52>
	switch(controller){
2000015c:	2b10      	cmp	r3, #16
2000015e:	d00d      	beq.n	2000017c <select_controller+0x3c>
20000160:	2b18      	cmp	r3, #24
20000162:	d012      	beq.n	2000018a <select_controller+0x4a>
}
20000164:	e015      	b.n	20000192 <select_controller+0x52>
		case 0: graphic_ctrl_bit_clear(B_CS1 | B_CS2); break;
20000166:	2018      	movs	r0, #24
20000168:	f7ff ffcc 	bl	20000104 <graphic_ctrl_bit_clear>
2000016c:	e011      	b.n	20000192 <select_controller+0x52>
		case 0x08: graphic_ctrl_bit_set(B_CS1); graphic_ctrl_bit_clear(B_CS2); break;
2000016e:	2008      	movs	r0, #8
20000170:	f7ff ffac 	bl	200000cc <graphic_ctrl_bit_set>
20000174:	2010      	movs	r0, #16
20000176:	f7ff ffc5 	bl	20000104 <graphic_ctrl_bit_clear>
2000017a:	e00a      	b.n	20000192 <select_controller+0x52>
		case 0x10: graphic_ctrl_bit_set(B_CS2); graphic_ctrl_bit_clear(B_CS1); break;
2000017c:	2010      	movs	r0, #16
2000017e:	f7ff ffa5 	bl	200000cc <graphic_ctrl_bit_set>
20000182:	2008      	movs	r0, #8
20000184:	f7ff ffbe 	bl	20000104 <graphic_ctrl_bit_clear>
20000188:	e003      	b.n	20000192 <select_controller+0x52>
		case 0x08 | 0x10: graphic_ctrl_bit_set(B_CS1 | B_CS2); break;
2000018a:	2018      	movs	r0, #24
2000018c:	f7ff ff9e 	bl	200000cc <graphic_ctrl_bit_set>
20000190:	46c0      	nop			; (mov r8, r8)
}
20000192:	46c0      	nop			; (mov r8, r8)
20000194:	46bd      	mov	sp, r7
20000196:	b002      	add	sp, #8
20000198:	bd80      	pop	{r7, pc}

2000019a <graphic_wait_ready>:

static void graphic_wait_ready(void){
2000019a:	b580      	push	{r7, lr}
2000019c:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_clear(B_E);
2000019e:	2040      	movs	r0, #64	; 0x40
200001a0:	f7ff ffb0 	bl	20000104 <graphic_ctrl_bit_clear>
	GPIO_MODER_E = 0x00005555;
200001a4:	4b12      	ldr	r3, [pc, #72]	; (200001f0 <graphic_wait_ready+0x56>)
200001a6:	4a13      	ldr	r2, [pc, #76]	; (200001f4 <graphic_wait_ready+0x5a>)
200001a8:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
200001aa:	2001      	movs	r0, #1
200001ac:	f7ff ffaa 	bl	20000104 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
200001b0:	2002      	movs	r0, #2
200001b2:	f7ff ff8b 	bl	200000cc <graphic_ctrl_bit_set>
	delay_500ns();
200001b6:	f7ff ff80 	bl	200000ba <delay_500ns>
	while(GPIO_IDR_E_HIGH & LCD_BUSY){
200001ba:	e009      	b.n	200001d0 <graphic_wait_ready+0x36>
		graphic_ctrl_bit_set(B_E);
200001bc:	2040      	movs	r0, #64	; 0x40
200001be:	f7ff ff85 	bl	200000cc <graphic_ctrl_bit_set>
		delay_500ns();
200001c2:	f7ff ff7a 	bl	200000ba <delay_500ns>
		graphic_ctrl_bit_clear(B_E);
200001c6:	2040      	movs	r0, #64	; 0x40
200001c8:	f7ff ff9c 	bl	20000104 <graphic_ctrl_bit_clear>
		delay_500ns();
200001cc:	f7ff ff75 	bl	200000ba <delay_500ns>
	while(GPIO_IDR_E_HIGH & LCD_BUSY){
200001d0:	4b09      	ldr	r3, [pc, #36]	; (200001f8 <graphic_wait_ready+0x5e>)
200001d2:	781b      	ldrb	r3, [r3, #0]
200001d4:	b2db      	uxtb	r3, r3
200001d6:	b25b      	sxtb	r3, r3
200001d8:	2b00      	cmp	r3, #0
200001da:	dbef      	blt.n	200001bc <graphic_wait_ready+0x22>
	}
	graphic_ctrl_bit_set(B_E);
200001dc:	2040      	movs	r0, #64	; 0x40
200001de:	f7ff ff75 	bl	200000cc <graphic_ctrl_bit_set>
	GPIO_MODER_E = 0x55555555;
200001e2:	4b03      	ldr	r3, [pc, #12]	; (200001f0 <graphic_wait_ready+0x56>)
200001e4:	4a05      	ldr	r2, [pc, #20]	; (200001fc <graphic_wait_ready+0x62>)
200001e6:	601a      	str	r2, [r3, #0]
}
200001e8:	46c0      	nop			; (mov r8, r8)
200001ea:	46bd      	mov	sp, r7
200001ec:	bd80      	pop	{r7, pc}
200001ee:	46c0      	nop			; (mov r8, r8)
200001f0:	40021000 	andmi	r1, r2, r0
200001f4:	00005555 	andeq	r5, r0, r5, asr r5
200001f8:	40021011 	andmi	r1, r2, r1, lsl r0
200001fc:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000200 <graphic_read>:

unsigned char graphic_read(unsigned char controller){
20000200:	b580      	push	{r7, lr}
20000202:	b084      	sub	sp, #16
20000204:	af00      	add	r7, sp, #0
20000206:	0002      	movs	r2, r0
20000208:	1dfb      	adds	r3, r7, #7
2000020a:	701a      	strb	r2, [r3, #0]
	unsigned char read_data;
	graphic_ctrl_bit_clear(B_E);
2000020c:	2040      	movs	r0, #64	; 0x40
2000020e:	f7ff ff79 	bl	20000104 <graphic_ctrl_bit_clear>
	GPIO_MODER_E = 0x00005555;
20000212:	4b1a      	ldr	r3, [pc, #104]	; (2000027c <graphic_read+0x7c>)
20000214:	4a1a      	ldr	r2, [pc, #104]	; (20000280 <graphic_read+0x80>)
20000216:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS | B_RW);
20000218:	2003      	movs	r0, #3
2000021a:	f7ff ff57 	bl	200000cc <graphic_ctrl_bit_set>
	select_controller(controller);
2000021e:	1dfb      	adds	r3, r7, #7
20000220:	781b      	ldrb	r3, [r3, #0]
20000222:	0018      	movs	r0, r3
20000224:	f7ff ff8c 	bl	20000140 <select_controller>
	delay_500ns();
20000228:	f7ff ff47 	bl	200000ba <delay_500ns>
	graphic_ctrl_bit_set(B_E);
2000022c:	2040      	movs	r0, #64	; 0x40
2000022e:	f7ff ff4d 	bl	200000cc <graphic_ctrl_bit_set>
	read_data = GPIO_IDR_E_HIGH;
20000232:	4a14      	ldr	r2, [pc, #80]	; (20000284 <graphic_read+0x84>)
20000234:	230f      	movs	r3, #15
20000236:	18fb      	adds	r3, r7, r3
20000238:	7812      	ldrb	r2, [r2, #0]
2000023a:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000023c:	2040      	movs	r0, #64	; 0x40
2000023e:	f7ff ff61 	bl	20000104 <graphic_ctrl_bit_clear>
	GPIO_MODER_E = 0x55555555;
20000242:	4b0e      	ldr	r3, [pc, #56]	; (2000027c <graphic_read+0x7c>)
20000244:	4a10      	ldr	r2, [pc, #64]	; (20000288 <graphic_read+0x88>)
20000246:	601a      	str	r2, [r3, #0]
	if(controller == B_CS1){
20000248:	1dfb      	adds	r3, r7, #7
2000024a:	781b      	ldrb	r3, [r3, #0]
2000024c:	2b08      	cmp	r3, #8
2000024e:	d104      	bne.n	2000025a <graphic_read+0x5a>
		select_controller(B_CS1);
20000250:	2008      	movs	r0, #8
20000252:	f7ff ff75 	bl	20000140 <select_controller>
		graphic_wait_ready();
20000256:	f7ff ffa0 	bl	2000019a <graphic_wait_ready>
	}
	if (controller == B_CS2){
2000025a:	1dfb      	adds	r3, r7, #7
2000025c:	781b      	ldrb	r3, [r3, #0]
2000025e:	2b10      	cmp	r3, #16
20000260:	d104      	bne.n	2000026c <graphic_read+0x6c>
		select_controller(B_CS2);
20000262:	2010      	movs	r0, #16
20000264:	f7ff ff6c 	bl	20000140 <select_controller>
		graphic_wait_ready();
20000268:	f7ff ff97 	bl	2000019a <graphic_wait_ready>
	}
	return read_data;
2000026c:	230f      	movs	r3, #15
2000026e:	18fb      	adds	r3, r7, r3
20000270:	781b      	ldrb	r3, [r3, #0]
}
20000272:	0018      	movs	r0, r3
20000274:	46bd      	mov	sp, r7
20000276:	b004      	add	sp, #16
20000278:	bd80      	pop	{r7, pc}
2000027a:	46c0      	nop			; (mov r8, r8)
2000027c:	40021000 	andmi	r1, r2, r0
20000280:	00005555 	andeq	r5, r0, r5, asr r5
20000284:	40021011 	andmi	r1, r2, r1, lsl r0
20000288:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000028c <graphic_write>:

void graphic_write(unsigned char value, unsigned char controller){
2000028c:	b580      	push	{r7, lr}
2000028e:	b082      	sub	sp, #8
20000290:	af00      	add	r7, sp, #0
20000292:	0002      	movs	r2, r0
20000294:	1dfb      	adds	r3, r7, #7
20000296:	701a      	strb	r2, [r3, #0]
20000298:	1dbb      	adds	r3, r7, #6
2000029a:	1c0a      	adds	r2, r1, #0
2000029c:	701a      	strb	r2, [r3, #0]
	GPIO_ODR_E_HIGH = value;
2000029e:	4a1a      	ldr	r2, [pc, #104]	; (20000308 <graphic_write+0x7c>)
200002a0:	1dfb      	adds	r3, r7, #7
200002a2:	781b      	ldrb	r3, [r3, #0]
200002a4:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
200002a6:	1dbb      	adds	r3, r7, #6
200002a8:	781b      	ldrb	r3, [r3, #0]
200002aa:	0018      	movs	r0, r3
200002ac:	f7ff ff48 	bl	20000140 <select_controller>
	delay_500ns();
200002b0:	f7ff ff03 	bl	200000ba <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200002b4:	2040      	movs	r0, #64	; 0x40
200002b6:	f7ff ff09 	bl	200000cc <graphic_ctrl_bit_set>
	delay_500ns();
200002ba:	f7ff fefe 	bl	200000ba <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
200002be:	2040      	movs	r0, #64	; 0x40
200002c0:	f7ff ff20 	bl	20000104 <graphic_ctrl_bit_clear>
	if(controller & B_CS1){
200002c4:	1dbb      	adds	r3, r7, #6
200002c6:	781b      	ldrb	r3, [r3, #0]
200002c8:	2208      	movs	r2, #8
200002ca:	4013      	ands	r3, r2
200002cc:	d004      	beq.n	200002d8 <graphic_write+0x4c>
		select_controller(B_CS1);
200002ce:	2008      	movs	r0, #8
200002d0:	f7ff ff36 	bl	20000140 <select_controller>
		graphic_wait_ready();
200002d4:	f7ff ff61 	bl	2000019a <graphic_wait_ready>
	}
	if(controller & B_CS2){
200002d8:	1dbb      	adds	r3, r7, #6
200002da:	781b      	ldrb	r3, [r3, #0]
200002dc:	2210      	movs	r2, #16
200002de:	4013      	ands	r3, r2
200002e0:	d004      	beq.n	200002ec <graphic_write+0x60>
		select_controller(B_CS2);
200002e2:	2010      	movs	r0, #16
200002e4:	f7ff ff2c 	bl	20000140 <select_controller>
		graphic_wait_ready();
200002e8:	f7ff ff57 	bl	2000019a <graphic_wait_ready>
	}
	GPIO_ODR_E_HIGH = 0;
200002ec:	4b06      	ldr	r3, [pc, #24]	; (20000308 <graphic_write+0x7c>)
200002ee:	2200      	movs	r2, #0
200002f0:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);  		//ettställs som förberedelse för nästa arbetscykel
200002f2:	2040      	movs	r0, #64	; 0x40
200002f4:	f7ff feea 	bl	200000cc <graphic_ctrl_bit_set>
	select_controller(0);
200002f8:	2000      	movs	r0, #0
200002fa:	f7ff ff21 	bl	20000140 <select_controller>
}
200002fe:	46c0      	nop			; (mov r8, r8)
20000300:	46bd      	mov	sp, r7
20000302:	b002      	add	sp, #8
20000304:	bd80      	pop	{r7, pc}
20000306:	46c0      	nop			; (mov r8, r8)
20000308:	40021015 	andmi	r1, r2, r5, lsl r0

2000030c <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller){
2000030c:	b580      	push	{r7, lr}
2000030e:	b082      	sub	sp, #8
20000310:	af00      	add	r7, sp, #0
20000312:	0002      	movs	r2, r0
20000314:	1dfb      	adds	r3, r7, #7
20000316:	701a      	strb	r2, [r3, #0]
20000318:	1dbb      	adds	r3, r7, #6
2000031a:	1c0a      	adds	r2, r1, #0
2000031c:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000031e:	2040      	movs	r0, #64	; 0x40
20000320:	f7ff fef0 	bl	20000104 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000324:	1dbb      	adds	r3, r7, #6
20000326:	781b      	ldrb	r3, [r3, #0]
20000328:	0018      	movs	r0, r3
2000032a:	f7ff ff09 	bl	20000140 <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
2000032e:	2003      	movs	r0, #3
20000330:	f7ff fee8 	bl	20000104 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20000334:	1dbb      	adds	r3, r7, #6
20000336:	781a      	ldrb	r2, [r3, #0]
20000338:	1dfb      	adds	r3, r7, #7
2000033a:	781b      	ldrb	r3, [r3, #0]
2000033c:	0011      	movs	r1, r2
2000033e:	0018      	movs	r0, r3
20000340:	f7ff ffa4 	bl	2000028c <graphic_write>
}
20000344:	46c0      	nop			; (mov r8, r8)
20000346:	46bd      	mov	sp, r7
20000348:	b002      	add	sp, #8
2000034a:	bd80      	pop	{r7, pc}

2000034c <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
2000034c:	b580      	push	{r7, lr}
2000034e:	b082      	sub	sp, #8
20000350:	af00      	add	r7, sp, #0
20000352:	0002      	movs	r2, r0
20000354:	1dfb      	adds	r3, r7, #7
20000356:	701a      	strb	r2, [r3, #0]
20000358:	1dbb      	adds	r3, r7, #6
2000035a:	1c0a      	adds	r2, r1, #0
2000035c:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000035e:	2040      	movs	r0, #64	; 0x40
20000360:	f7ff fed0 	bl	20000104 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000364:	1dbb      	adds	r3, r7, #6
20000366:	781b      	ldrb	r3, [r3, #0]
20000368:	0018      	movs	r0, r3
2000036a:	f7ff fee9 	bl	20000140 <select_controller>
	graphic_ctrl_bit_set(B_RS);
2000036e:	2001      	movs	r0, #1
20000370:	f7ff feac 	bl	200000cc <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
20000374:	2002      	movs	r0, #2
20000376:	f7ff fec5 	bl	20000104 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
2000037a:	1dbb      	adds	r3, r7, #6
2000037c:	781a      	ldrb	r2, [r3, #0]
2000037e:	1dfb      	adds	r3, r7, #7
20000380:	781b      	ldrb	r3, [r3, #0]
20000382:	0011      	movs	r1, r2
20000384:	0018      	movs	r0, r3
20000386:	f7ff ff81 	bl	2000028c <graphic_write>
}
2000038a:	46c0      	nop			; (mov r8, r8)
2000038c:	46bd      	mov	sp, r7
2000038e:	b002      	add	sp, #8
20000390:	bd80      	pop	{r7, pc}

20000392 <graphic_read_data>:

unsigned char graphic_read_data(unsigned char controller){
20000392:	b580      	push	{r7, lr}
20000394:	b082      	sub	sp, #8
20000396:	af00      	add	r7, sp, #0
20000398:	0002      	movs	r2, r0
2000039a:	1dfb      	adds	r3, r7, #7
2000039c:	701a      	strb	r2, [r3, #0]
	(void) graphic_read(controller);
2000039e:	1dfb      	adds	r3, r7, #7
200003a0:	781b      	ldrb	r3, [r3, #0]
200003a2:	0018      	movs	r0, r3
200003a4:	f7ff ff2c 	bl	20000200 <graphic_read>
	
	return graphic_read(controller);
200003a8:	1dfb      	adds	r3, r7, #7
200003aa:	781b      	ldrb	r3, [r3, #0]
200003ac:	0018      	movs	r0, r3
200003ae:	f7ff ff27 	bl	20000200 <graphic_read>
200003b2:	0003      	movs	r3, r0
}
200003b4:	0018      	movs	r0, r3
200003b6:	46bd      	mov	sp, r7
200003b8:	b002      	add	sp, #8
200003ba:	bd80      	pop	{r7, pc}

200003bc <graphic_init>:

void graphic_init(){
200003bc:	b580      	push	{r7, lr}
200003be:	af00      	add	r7, sp, #0
	GPIO_MODER_E = 0x55555555;
200003c0:	4b15      	ldr	r3, [pc, #84]	; (20000418 <graphic_init+0x5c>)
200003c2:	4a16      	ldr	r2, [pc, #88]	; (2000041c <graphic_init+0x60>)
200003c4:	601a      	str	r2, [r3, #0]
	
	graphic_ctrl_bit_set(B_E);
200003c6:	2040      	movs	r0, #64	; 0x40
200003c8:	f7ff fe80 	bl	200000cc <graphic_ctrl_bit_set>
	delay_micro(10);
200003cc:	200a      	movs	r0, #10
200003ce:	f7ff fe41 	bl	20000054 <delay_micro>
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RESET | B_E);
200003d2:	2078      	movs	r0, #120	; 0x78
200003d4:	f7ff fe96 	bl	20000104 <graphic_ctrl_bit_clear>
	delay_milli(30);
200003d8:	201e      	movs	r0, #30
200003da:	f7ff fe51 	bl	20000080 <delay_milli>
	graphic_ctrl_bit_set(B_RESET);
200003de:	2020      	movs	r0, #32
200003e0:	f7ff fe74 	bl	200000cc <graphic_ctrl_bit_set>
	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
200003e4:	2118      	movs	r1, #24
200003e6:	203e      	movs	r0, #62	; 0x3e
200003e8:	f7ff ff90 	bl	2000030c <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);
200003ec:	2118      	movs	r1, #24
200003ee:	203f      	movs	r0, #63	; 0x3f
200003f0:	f7ff ff8c 	bl	2000030c <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
200003f4:	2118      	movs	r1, #24
200003f6:	20c0      	movs	r0, #192	; 0xc0
200003f8:	f7ff ff88 	bl	2000030c <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
200003fc:	2118      	movs	r1, #24
200003fe:	2040      	movs	r0, #64	; 0x40
20000400:	f7ff ff84 	bl	2000030c <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
20000404:	2118      	movs	r1, #24
20000406:	20b8      	movs	r0, #184	; 0xb8
20000408:	f7ff ff80 	bl	2000030c <graphic_write_command>
	select_controller(0);
2000040c:	2000      	movs	r0, #0
2000040e:	f7ff fe97 	bl	20000140 <select_controller>
}
20000412:	46c0      	nop			; (mov r8, r8)
20000414:	46bd      	mov	sp, r7
20000416:	bd80      	pop	{r7, pc}
20000418:	40021000 	andmi	r1, r2, r0
2000041c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000420 <graphic_clear_screen>:

void graphic_clear_screen(){
20000420:	b580      	push	{r7, lr}
20000422:	b082      	sub	sp, #8
20000424:	af00      	add	r7, sp, #0
	for(int page = 0; page <=7; page++){
20000426:	2300      	movs	r3, #0
20000428:	607b      	str	r3, [r7, #4]
2000042a:	e01e      	b.n	2000046a <graphic_clear_screen+0x4a>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
2000042c:	687b      	ldr	r3, [r7, #4]
2000042e:	b25b      	sxtb	r3, r3
20000430:	2248      	movs	r2, #72	; 0x48
20000432:	4252      	negs	r2, r2
20000434:	4313      	orrs	r3, r2
20000436:	b25b      	sxtb	r3, r3
20000438:	b2db      	uxtb	r3, r3
2000043a:	2118      	movs	r1, #24
2000043c:	0018      	movs	r0, r3
2000043e:	f7ff ff65 	bl	2000030c <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1 | B_CS2);
20000442:	2118      	movs	r1, #24
20000444:	2040      	movs	r0, #64	; 0x40
20000446:	f7ff ff61 	bl	2000030c <graphic_write_command>
		for (int adress = 0; adress <= 63; adress++)
2000044a:	2300      	movs	r3, #0
2000044c:	603b      	str	r3, [r7, #0]
2000044e:	e006      	b.n	2000045e <graphic_clear_screen+0x3e>
			graphic_write_data(0, B_CS1 | B_CS2);
20000450:	2118      	movs	r1, #24
20000452:	2000      	movs	r0, #0
20000454:	f7ff ff7a 	bl	2000034c <graphic_write_data>
		for (int adress = 0; adress <= 63; adress++)
20000458:	683b      	ldr	r3, [r7, #0]
2000045a:	3301      	adds	r3, #1
2000045c:	603b      	str	r3, [r7, #0]
2000045e:	683b      	ldr	r3, [r7, #0]
20000460:	2b3f      	cmp	r3, #63	; 0x3f
20000462:	ddf5      	ble.n	20000450 <graphic_clear_screen+0x30>
	for(int page = 0; page <=7; page++){
20000464:	687b      	ldr	r3, [r7, #4]
20000466:	3301      	adds	r3, #1
20000468:	607b      	str	r3, [r7, #4]
2000046a:	687b      	ldr	r3, [r7, #4]
2000046c:	2b07      	cmp	r3, #7
2000046e:	dddd      	ble.n	2000042c <graphic_clear_screen+0xc>
	}
}
20000470:	46c0      	nop			; (mov r8, r8)
20000472:	46bd      	mov	sp, r7
20000474:	b002      	add	sp, #8
20000476:	bd80      	pop	{r7, pc}

20000478 <pixel>:

uint8_t backBuffer[1024]; // 128 * 64 / 8

void pixel (unsigned int x, unsigned int y){
20000478:	b580      	push	{r7, lr}
2000047a:	b084      	sub	sp, #16
2000047c:	af00      	add	r7, sp, #0
2000047e:	6078      	str	r0, [r7, #4]
20000480:	6039      	str	r1, [r7, #0]
	uint8_t mask;
	int index = 0;
20000482:	2300      	movs	r3, #0
20000484:	60fb      	str	r3, [r7, #12]
	if (y < 1 || y > 64 || x < 1 || x > 128) 
20000486:	683b      	ldr	r3, [r7, #0]
20000488:	2b00      	cmp	r3, #0
2000048a:	d032      	beq.n	200004f2 <pixel+0x7a>
2000048c:	683b      	ldr	r3, [r7, #0]
2000048e:	2b40      	cmp	r3, #64	; 0x40
20000490:	d82f      	bhi.n	200004f2 <pixel+0x7a>
20000492:	687b      	ldr	r3, [r7, #4]
20000494:	2b00      	cmp	r3, #0
20000496:	d02c      	beq.n	200004f2 <pixel+0x7a>
20000498:	687b      	ldr	r3, [r7, #4]
2000049a:	2b80      	cmp	r3, #128	; 0x80
2000049c:	d829      	bhi.n	200004f2 <pixel+0x7a>
		return;
	
	mask = 1 << ((y-1) % 8);
2000049e:	683b      	ldr	r3, [r7, #0]
200004a0:	3b01      	subs	r3, #1
200004a2:	2207      	movs	r2, #7
200004a4:	4013      	ands	r3, r2
200004a6:	2201      	movs	r2, #1
200004a8:	409a      	lsls	r2, r3
200004aa:	230b      	movs	r3, #11
200004ac:	18fb      	adds	r3, r7, r3
200004ae:	701a      	strb	r2, [r3, #0]
	
	if(x > 64){
200004b0:	687b      	ldr	r3, [r7, #4]
200004b2:	2b40      	cmp	r3, #64	; 0x40
200004b4:	d905      	bls.n	200004c2 <pixel+0x4a>
		index = 512;
200004b6:	2380      	movs	r3, #128	; 0x80
200004b8:	009b      	lsls	r3, r3, #2
200004ba:	60fb      	str	r3, [r7, #12]
		x -= 65;
200004bc:	687b      	ldr	r3, [r7, #4]
200004be:	3b41      	subs	r3, #65	; 0x41
200004c0:	607b      	str	r3, [r7, #4]
	}
	
	index += x + ((y-1) / 8) * 64; 
200004c2:	683b      	ldr	r3, [r7, #0]
200004c4:	3b01      	subs	r3, #1
200004c6:	08db      	lsrs	r3, r3, #3
200004c8:	019a      	lsls	r2, r3, #6
200004ca:	687b      	ldr	r3, [r7, #4]
200004cc:	18d2      	adds	r2, r2, r3
200004ce:	68fb      	ldr	r3, [r7, #12]
200004d0:	18d3      	adds	r3, r2, r3
200004d2:	60fb      	str	r3, [r7, #12]
	
	backBuffer[index] |= mask;
200004d4:	4a09      	ldr	r2, [pc, #36]	; (200004fc <pixel+0x84>)
200004d6:	68fb      	ldr	r3, [r7, #12]
200004d8:	18d3      	adds	r3, r2, r3
200004da:	781a      	ldrb	r2, [r3, #0]
200004dc:	230b      	movs	r3, #11
200004de:	18fb      	adds	r3, r7, r3
200004e0:	781b      	ldrb	r3, [r3, #0]
200004e2:	4313      	orrs	r3, r2
200004e4:	b2d9      	uxtb	r1, r3
200004e6:	4a05      	ldr	r2, [pc, #20]	; (200004fc <pixel+0x84>)
200004e8:	68fb      	ldr	r3, [r7, #12]
200004ea:	18d3      	adds	r3, r2, r3
200004ec:	1c0a      	adds	r2, r1, #0
200004ee:	701a      	strb	r2, [r3, #0]
200004f0:	e000      	b.n	200004f4 <pixel+0x7c>
		return;
200004f2:	46c0      	nop			; (mov r8, r8)
}
200004f4:	46bd      	mov	sp, r7
200004f6:	b004      	add	sp, #16
200004f8:	bd80      	pop	{r7, pc}
200004fa:	46c0      	nop			; (mov r8, r8)
200004fc:	200008d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>

20000500 <graphic_draw_screen>:

void graphic_draw_screen(void) {
20000500:	b580      	push	{r7, lr}
20000502:	b084      	sub	sp, #16
20000504:	af00      	add	r7, sp, #0
	uint8_t i, j, controller, c;
	unsigned int k = 0;
20000506:	2300      	movs	r3, #0
20000508:	60bb      	str	r3, [r7, #8]
	for(c = 0; c < 2; c++) {
2000050a:	230d      	movs	r3, #13
2000050c:	18fb      	adds	r3, r7, r3
2000050e:	2200      	movs	r2, #0
20000510:	701a      	strb	r2, [r3, #0]
20000512:	e04f      	b.n	200005b4 <graphic_draw_screen+0xb4>
		controller = (c == 0) ? B_CS1 : B_CS2;
20000514:	230d      	movs	r3, #13
20000516:	18fb      	adds	r3, r7, r3
20000518:	781b      	ldrb	r3, [r3, #0]
2000051a:	2b00      	cmp	r3, #0
2000051c:	d101      	bne.n	20000522 <graphic_draw_screen+0x22>
2000051e:	2208      	movs	r2, #8
20000520:	e000      	b.n	20000524 <graphic_draw_screen+0x24>
20000522:	2210      	movs	r2, #16
20000524:	1dfb      	adds	r3, r7, #7
20000526:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 8; j++) {
20000528:	230e      	movs	r3, #14
2000052a:	18fb      	adds	r3, r7, r3
2000052c:	2200      	movs	r2, #0
2000052e:	701a      	strb	r2, [r3, #0]
20000530:	e035      	b.n	2000059e <graphic_draw_screen+0x9e>
			graphic_write_command(LCD_SET_PAGE | j, controller);
20000532:	230e      	movs	r3, #14
20000534:	18fb      	adds	r3, r7, r3
20000536:	781b      	ldrb	r3, [r3, #0]
20000538:	2248      	movs	r2, #72	; 0x48
2000053a:	4252      	negs	r2, r2
2000053c:	4313      	orrs	r3, r2
2000053e:	b2da      	uxtb	r2, r3
20000540:	1dfb      	adds	r3, r7, #7
20000542:	781b      	ldrb	r3, [r3, #0]
20000544:	0019      	movs	r1, r3
20000546:	0010      	movs	r0, r2
20000548:	f7ff fee0 	bl	2000030c <graphic_write_command>
			graphic_write_command(LCD_SET_ADD | 0, controller);
2000054c:	1dfb      	adds	r3, r7, #7
2000054e:	781b      	ldrb	r3, [r3, #0]
20000550:	0019      	movs	r1, r3
20000552:	2040      	movs	r0, #64	; 0x40
20000554:	f7ff feda 	bl	2000030c <graphic_write_command>
			for(i = 0; i <= 63; i++, k++) {
20000558:	230f      	movs	r3, #15
2000055a:	18fb      	adds	r3, r7, r3
2000055c:	2200      	movs	r2, #0
2000055e:	701a      	strb	r2, [r3, #0]
20000560:	e012      	b.n	20000588 <graphic_draw_screen+0x88>
				graphic_write_data(backBuffer[k], controller);
20000562:	4a19      	ldr	r2, [pc, #100]	; (200005c8 <graphic_draw_screen+0xc8>)
20000564:	68bb      	ldr	r3, [r7, #8]
20000566:	18d3      	adds	r3, r2, r3
20000568:	781a      	ldrb	r2, [r3, #0]
2000056a:	1dfb      	adds	r3, r7, #7
2000056c:	781b      	ldrb	r3, [r3, #0]
2000056e:	0019      	movs	r1, r3
20000570:	0010      	movs	r0, r2
20000572:	f7ff feeb 	bl	2000034c <graphic_write_data>
			for(i = 0; i <= 63; i++, k++) {
20000576:	210f      	movs	r1, #15
20000578:	187b      	adds	r3, r7, r1
2000057a:	781a      	ldrb	r2, [r3, #0]
2000057c:	187b      	adds	r3, r7, r1
2000057e:	3201      	adds	r2, #1
20000580:	701a      	strb	r2, [r3, #0]
20000582:	68bb      	ldr	r3, [r7, #8]
20000584:	3301      	adds	r3, #1
20000586:	60bb      	str	r3, [r7, #8]
20000588:	230f      	movs	r3, #15
2000058a:	18fb      	adds	r3, r7, r3
2000058c:	781b      	ldrb	r3, [r3, #0]
2000058e:	2b3f      	cmp	r3, #63	; 0x3f
20000590:	d9e7      	bls.n	20000562 <graphic_draw_screen+0x62>
		for(j = 0; j < 8; j++) {
20000592:	210e      	movs	r1, #14
20000594:	187b      	adds	r3, r7, r1
20000596:	781a      	ldrb	r2, [r3, #0]
20000598:	187b      	adds	r3, r7, r1
2000059a:	3201      	adds	r2, #1
2000059c:	701a      	strb	r2, [r3, #0]
2000059e:	230e      	movs	r3, #14
200005a0:	18fb      	adds	r3, r7, r3
200005a2:	781b      	ldrb	r3, [r3, #0]
200005a4:	2b07      	cmp	r3, #7
200005a6:	d9c4      	bls.n	20000532 <graphic_draw_screen+0x32>
	for(c = 0; c < 2; c++) {
200005a8:	210d      	movs	r1, #13
200005aa:	187b      	adds	r3, r7, r1
200005ac:	781a      	ldrb	r2, [r3, #0]
200005ae:	187b      	adds	r3, r7, r1
200005b0:	3201      	adds	r2, #1
200005b2:	701a      	strb	r2, [r3, #0]
200005b4:	230d      	movs	r3, #13
200005b6:	18fb      	adds	r3, r7, r3
200005b8:	781b      	ldrb	r3, [r3, #0]
200005ba:	2b01      	cmp	r3, #1
200005bc:	d9aa      	bls.n	20000514 <graphic_draw_screen+0x14>
	}	}	}
}
200005be:	46c0      	nop			; (mov r8, r8)
200005c0:	46bd      	mov	sp, r7
200005c2:	b004      	add	sp, #16
200005c4:	bd80      	pop	{r7, pc}
200005c6:	46c0      	nop			; (mov r8, r8)
200005c8:	200008d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>

200005cc <clear_backBuffer>:

void clear_backBuffer() {
200005cc:	b580      	push	{r7, lr}
200005ce:	b082      	sub	sp, #8
200005d0:	af00      	add	r7, sp, #0
	int i;
	for (i = 0; i < 1024; i++)
200005d2:	2300      	movs	r3, #0
200005d4:	607b      	str	r3, [r7, #4]
200005d6:	e007      	b.n	200005e8 <clear_backBuffer+0x1c>
		backBuffer[i] = 0;
200005d8:	4a07      	ldr	r2, [pc, #28]	; (200005f8 <clear_backBuffer+0x2c>)
200005da:	687b      	ldr	r3, [r7, #4]
200005dc:	18d3      	adds	r3, r2, r3
200005de:	2200      	movs	r2, #0
200005e0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 1024; i++)
200005e2:	687b      	ldr	r3, [r7, #4]
200005e4:	3301      	adds	r3, #1
200005e6:	607b      	str	r3, [r7, #4]
200005e8:	687b      	ldr	r3, [r7, #4]
200005ea:	4a04      	ldr	r2, [pc, #16]	; (200005fc <clear_backBuffer+0x30>)
200005ec:	4293      	cmp	r3, r2
200005ee:	ddf3      	ble.n	200005d8 <clear_backBuffer+0xc>
}
200005f0:	46c0      	nop			; (mov r8, r8)
200005f2:	46bd      	mov	sp, r7
200005f4:	b002      	add	sp, #8
200005f6:	bd80      	pop	{r7, pc}
200005f8:	200008d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
200005fc:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20000600 <main>:
	move_object,
	set_object_speed
};

int main(int argc, char **argv)
{
20000600:	b580      	push	{r7, lr}
20000602:	b084      	sub	sp, #16
20000604:	af00      	add	r7, sp, #0
20000606:	6078      	str	r0, [r7, #4]
20000608:	6039      	str	r1, [r7, #0]
	POBJECT p = &ball;
2000060a:	4b08      	ldr	r3, [pc, #32]	; (2000062c <main+0x2c>)
2000060c:	60fb      	str	r3, [r7, #12]
	graphic_init();
2000060e:	f7ff fed5 	bl	200003bc <graphic_init>
	
	#ifndef SIMULATOR
		graphic_clear_screen();
	#endif
	
	p->set_speed(p, 4, 1);
20000612:	68fb      	ldr	r3, [r7, #12]
20000614:	6a1b      	ldr	r3, [r3, #32]
20000616:	68f8      	ldr	r0, [r7, #12]
20000618:	2201      	movs	r2, #1
2000061a:	2104      	movs	r1, #4
2000061c:	4798      	blx	r3
	while(1){
		p->move(p);
2000061e:	68fb      	ldr	r3, [r7, #12]
20000620:	69db      	ldr	r3, [r3, #28]
20000622:	68fa      	ldr	r2, [r7, #12]
20000624:	0010      	movs	r0, r2
20000626:	4798      	blx	r3
20000628:	e7f9      	b.n	2000061e <main+0x1e>
2000062a:	46c0      	nop			; (mov r8, r8)
2000062c:	20000d04 	andcs	r0, r0, r4, lsl #26

20000630 <set_object_speed>:
#include "startup.h"


void set_object_speed(POBJECT o, int speedx, int speedy){
20000630:	b580      	push	{r7, lr}
20000632:	b084      	sub	sp, #16
20000634:	af00      	add	r7, sp, #0
20000636:	60f8      	str	r0, [r7, #12]
20000638:	60b9      	str	r1, [r7, #8]
2000063a:	607a      	str	r2, [r7, #4]
	o->dirx = speedx;
2000063c:	68fb      	ldr	r3, [r7, #12]
2000063e:	68ba      	ldr	r2, [r7, #8]
20000640:	605a      	str	r2, [r3, #4]
	o->diry = speedy;
20000642:	68fb      	ldr	r3, [r7, #12]
20000644:	687a      	ldr	r2, [r7, #4]
20000646:	609a      	str	r2, [r3, #8]
}	
20000648:	46c0      	nop			; (mov r8, r8)
2000064a:	46bd      	mov	sp, r7
2000064c:	b004      	add	sp, #16
2000064e:	bd80      	pop	{r7, pc}

20000650 <draw_object>:
 
void draw_object(POBJECT o){
20000650:	b580      	push	{r7, lr}
20000652:	b084      	sub	sp, #16
20000654:	af00      	add	r7, sp, #0
20000656:	6078      	str	r0, [r7, #4]
	for(int i= 0; i<= o->geo->numpoints; i++){
20000658:	2300      	movs	r3, #0
2000065a:	60fb      	str	r3, [r7, #12]
2000065c:	e01c      	b.n	20000698 <draw_object+0x48>
		pixel(o->posx + o->geo->px[i].x, o->posy + o->geo->px[i].y);
2000065e:	687b      	ldr	r3, [r7, #4]
20000660:	68da      	ldr	r2, [r3, #12]
20000662:	687b      	ldr	r3, [r7, #4]
20000664:	6819      	ldr	r1, [r3, #0]
20000666:	68fb      	ldr	r3, [r7, #12]
20000668:	3304      	adds	r3, #4
2000066a:	005b      	lsls	r3, r3, #1
2000066c:	18cb      	adds	r3, r1, r3
2000066e:	3304      	adds	r3, #4
20000670:	781b      	ldrb	r3, [r3, #0]
20000672:	18d3      	adds	r3, r2, r3
20000674:	0018      	movs	r0, r3
20000676:	687b      	ldr	r3, [r7, #4]
20000678:	691a      	ldr	r2, [r3, #16]
2000067a:	687b      	ldr	r3, [r7, #4]
2000067c:	6819      	ldr	r1, [r3, #0]
2000067e:	68fb      	ldr	r3, [r7, #12]
20000680:	3304      	adds	r3, #4
20000682:	005b      	lsls	r3, r3, #1
20000684:	18cb      	adds	r3, r1, r3
20000686:	3305      	adds	r3, #5
20000688:	781b      	ldrb	r3, [r3, #0]
2000068a:	18d3      	adds	r3, r2, r3
2000068c:	0019      	movs	r1, r3
2000068e:	f7ff fef3 	bl	20000478 <pixel>
	for(int i= 0; i<= o->geo->numpoints; i++){
20000692:	68fb      	ldr	r3, [r7, #12]
20000694:	3301      	adds	r3, #1
20000696:	60fb      	str	r3, [r7, #12]
20000698:	687b      	ldr	r3, [r7, #4]
2000069a:	681b      	ldr	r3, [r3, #0]
2000069c:	681b      	ldr	r3, [r3, #0]
2000069e:	68fa      	ldr	r2, [r7, #12]
200006a0:	429a      	cmp	r2, r3
200006a2:	dddc      	ble.n	2000065e <draw_object+0xe>
	}
}
200006a4:	46c0      	nop			; (mov r8, r8)
200006a6:	46bd      	mov	sp, r7
200006a8:	b004      	add	sp, #16
200006aa:	bd80      	pop	{r7, pc}

200006ac <clear_object>:

void clear_object(POBJECT o){
200006ac:	b580      	push	{r7, lr}
200006ae:	b084      	sub	sp, #16
200006b0:	af00      	add	r7, sp, #0
200006b2:	6078      	str	r0, [r7, #4]
	for(int i= 0; i<= o->geo->numpoints; i++){
200006b4:	2300      	movs	r3, #0
200006b6:	60fb      	str	r3, [r7, #12]
200006b8:	e01c      	b.n	200006f4 <clear_object+0x48>
		pixel(o->posx + o->geo->px[i].x, o->posy + o->geo->px[i].y);
200006ba:	687b      	ldr	r3, [r7, #4]
200006bc:	68da      	ldr	r2, [r3, #12]
200006be:	687b      	ldr	r3, [r7, #4]
200006c0:	6819      	ldr	r1, [r3, #0]
200006c2:	68fb      	ldr	r3, [r7, #12]
200006c4:	3304      	adds	r3, #4
200006c6:	005b      	lsls	r3, r3, #1
200006c8:	18cb      	adds	r3, r1, r3
200006ca:	3304      	adds	r3, #4
200006cc:	781b      	ldrb	r3, [r3, #0]
200006ce:	18d3      	adds	r3, r2, r3
200006d0:	0018      	movs	r0, r3
200006d2:	687b      	ldr	r3, [r7, #4]
200006d4:	691a      	ldr	r2, [r3, #16]
200006d6:	687b      	ldr	r3, [r7, #4]
200006d8:	6819      	ldr	r1, [r3, #0]
200006da:	68fb      	ldr	r3, [r7, #12]
200006dc:	3304      	adds	r3, #4
200006de:	005b      	lsls	r3, r3, #1
200006e0:	18cb      	adds	r3, r1, r3
200006e2:	3305      	adds	r3, #5
200006e4:	781b      	ldrb	r3, [r3, #0]
200006e6:	18d3      	adds	r3, r2, r3
200006e8:	0019      	movs	r1, r3
200006ea:	f7ff fec5 	bl	20000478 <pixel>
	for(int i= 0; i<= o->geo->numpoints; i++){
200006ee:	68fb      	ldr	r3, [r7, #12]
200006f0:	3301      	adds	r3, #1
200006f2:	60fb      	str	r3, [r7, #12]
200006f4:	687b      	ldr	r3, [r7, #4]
200006f6:	681b      	ldr	r3, [r3, #0]
200006f8:	681b      	ldr	r3, [r3, #0]
200006fa:	68fa      	ldr	r2, [r7, #12]
200006fc:	429a      	cmp	r2, r3
200006fe:	dddc      	ble.n	200006ba <clear_object+0xe>
	}
}
20000700:	46c0      	nop			; (mov r8, r8)
20000702:	46bd      	mov	sp, r7
20000704:	b004      	add	sp, #16
20000706:	bd80      	pop	{r7, pc}

20000708 <move_object>:
 
void move_object(POBJECT o){
20000708:	b590      	push	{r4, r7, lr}
2000070a:	b083      	sub	sp, #12
2000070c:	af00      	add	r7, sp, #0
2000070e:	6078      	str	r0, [r7, #4]
	o->clear(o);
20000710:	687b      	ldr	r3, [r7, #4]
20000712:	699b      	ldr	r3, [r3, #24]
20000714:	687a      	ldr	r2, [r7, #4]
20000716:	0010      	movs	r0, r2
20000718:	4798      	blx	r3
	
	if(o->posx < 1)
2000071a:	687b      	ldr	r3, [r7, #4]
2000071c:	68db      	ldr	r3, [r3, #12]
2000071e:	2b00      	cmp	r3, #0
20000720:	dc09      	bgt.n	20000736 <move_object+0x2e>
		o->set_speed(o, o->dirx*(-1), o->diry);
20000722:	687b      	ldr	r3, [r7, #4]
20000724:	6a1c      	ldr	r4, [r3, #32]
20000726:	687b      	ldr	r3, [r7, #4]
20000728:	685b      	ldr	r3, [r3, #4]
2000072a:	4259      	negs	r1, r3
2000072c:	687b      	ldr	r3, [r7, #4]
2000072e:	689a      	ldr	r2, [r3, #8]
20000730:	687b      	ldr	r3, [r7, #4]
20000732:	0018      	movs	r0, r3
20000734:	47a0      	blx	r4
	
	if(o->posx > 128)
20000736:	687b      	ldr	r3, [r7, #4]
20000738:	68db      	ldr	r3, [r3, #12]
2000073a:	2b80      	cmp	r3, #128	; 0x80
2000073c:	dd09      	ble.n	20000752 <move_object+0x4a>
		o->set_speed(o, -o->dirx, o->diry);
2000073e:	687b      	ldr	r3, [r7, #4]
20000740:	6a1c      	ldr	r4, [r3, #32]
20000742:	687b      	ldr	r3, [r7, #4]
20000744:	685b      	ldr	r3, [r3, #4]
20000746:	4259      	negs	r1, r3
20000748:	687b      	ldr	r3, [r7, #4]
2000074a:	689a      	ldr	r2, [r3, #8]
2000074c:	687b      	ldr	r3, [r7, #4]
2000074e:	0018      	movs	r0, r3
20000750:	47a0      	blx	r4
		
	if(o->posy < 1)
20000752:	687b      	ldr	r3, [r7, #4]
20000754:	691b      	ldr	r3, [r3, #16]
20000756:	2b00      	cmp	r3, #0
20000758:	dc09      	bgt.n	2000076e <move_object+0x66>
		o->set_speed(o, o->dirx, -o->diry);
2000075a:	687b      	ldr	r3, [r7, #4]
2000075c:	6a1c      	ldr	r4, [r3, #32]
2000075e:	687b      	ldr	r3, [r7, #4]
20000760:	6859      	ldr	r1, [r3, #4]
20000762:	687b      	ldr	r3, [r7, #4]
20000764:	689b      	ldr	r3, [r3, #8]
20000766:	425a      	negs	r2, r3
20000768:	687b      	ldr	r3, [r7, #4]
2000076a:	0018      	movs	r0, r3
2000076c:	47a0      	blx	r4
		
	if(o->posy > 64)
2000076e:	687b      	ldr	r3, [r7, #4]
20000770:	691b      	ldr	r3, [r3, #16]
20000772:	2b40      	cmp	r3, #64	; 0x40
20000774:	dd09      	ble.n	2000078a <move_object+0x82>
		o->set_speed(o, o->dirx, -o->diry);
20000776:	687b      	ldr	r3, [r7, #4]
20000778:	6a1c      	ldr	r4, [r3, #32]
2000077a:	687b      	ldr	r3, [r7, #4]
2000077c:	6859      	ldr	r1, [r3, #4]
2000077e:	687b      	ldr	r3, [r7, #4]
20000780:	689b      	ldr	r3, [r3, #8]
20000782:	425a      	negs	r2, r3
20000784:	687b      	ldr	r3, [r7, #4]
20000786:	0018      	movs	r0, r3
20000788:	47a0      	blx	r4
	
	o->posx = o->posx + o->dirx;
2000078a:	687b      	ldr	r3, [r7, #4]
2000078c:	68da      	ldr	r2, [r3, #12]
2000078e:	687b      	ldr	r3, [r7, #4]
20000790:	685b      	ldr	r3, [r3, #4]
20000792:	18d2      	adds	r2, r2, r3
20000794:	687b      	ldr	r3, [r7, #4]
20000796:	60da      	str	r2, [r3, #12]
	o->posy = o->posy + o->diry;
20000798:	687b      	ldr	r3, [r7, #4]
2000079a:	691a      	ldr	r2, [r3, #16]
2000079c:	687b      	ldr	r3, [r7, #4]
2000079e:	689b      	ldr	r3, [r3, #8]
200007a0:	18d2      	adds	r2, r2, r3
200007a2:	687b      	ldr	r3, [r7, #4]
200007a4:	611a      	str	r2, [r3, #16]
	o->draw(o);
200007a6:	687b      	ldr	r3, [r7, #4]
200007a8:	695b      	ldr	r3, [r3, #20]
200007aa:	687a      	ldr	r2, [r7, #4]
200007ac:	0010      	movs	r0, r2
200007ae:	4798      	blx	r3
}
200007b0:	46c0      	nop			; (mov r8, r8)
200007b2:	46bd      	mov	sp, r7
200007b4:	b003      	add	sp, #12
200007b6:	bd90      	pop	{r4, r7, pc}

200007b8 <__udivsi3>:
200007b8:	2200      	movs	r2, #0
200007ba:	0843      	lsrs	r3, r0, #1
200007bc:	428b      	cmp	r3, r1
200007be:	d374      	bcc.n	200008aa <__udivsi3+0xf2>
200007c0:	0903      	lsrs	r3, r0, #4
200007c2:	428b      	cmp	r3, r1
200007c4:	d35f      	bcc.n	20000886 <__udivsi3+0xce>
200007c6:	0a03      	lsrs	r3, r0, #8
200007c8:	428b      	cmp	r3, r1
200007ca:	d344      	bcc.n	20000856 <__udivsi3+0x9e>
200007cc:	0b03      	lsrs	r3, r0, #12
200007ce:	428b      	cmp	r3, r1
200007d0:	d328      	bcc.n	20000824 <__udivsi3+0x6c>
200007d2:	0c03      	lsrs	r3, r0, #16
200007d4:	428b      	cmp	r3, r1
200007d6:	d30d      	bcc.n	200007f4 <__udivsi3+0x3c>
200007d8:	22ff      	movs	r2, #255	; 0xff
200007da:	0209      	lsls	r1, r1, #8
200007dc:	ba12      	rev	r2, r2
200007de:	0c03      	lsrs	r3, r0, #16
200007e0:	428b      	cmp	r3, r1
200007e2:	d302      	bcc.n	200007ea <__udivsi3+0x32>
200007e4:	1212      	asrs	r2, r2, #8
200007e6:	0209      	lsls	r1, r1, #8
200007e8:	d065      	beq.n	200008b6 <__udivsi3+0xfe>
200007ea:	0b03      	lsrs	r3, r0, #12
200007ec:	428b      	cmp	r3, r1
200007ee:	d319      	bcc.n	20000824 <__udivsi3+0x6c>
200007f0:	e000      	b.n	200007f4 <__udivsi3+0x3c>
200007f2:	0a09      	lsrs	r1, r1, #8
200007f4:	0bc3      	lsrs	r3, r0, #15
200007f6:	428b      	cmp	r3, r1
200007f8:	d301      	bcc.n	200007fe <__udivsi3+0x46>
200007fa:	03cb      	lsls	r3, r1, #15
200007fc:	1ac0      	subs	r0, r0, r3
200007fe:	4152      	adcs	r2, r2
20000800:	0b83      	lsrs	r3, r0, #14
20000802:	428b      	cmp	r3, r1
20000804:	d301      	bcc.n	2000080a <__udivsi3+0x52>
20000806:	038b      	lsls	r3, r1, #14
20000808:	1ac0      	subs	r0, r0, r3
2000080a:	4152      	adcs	r2, r2
2000080c:	0b43      	lsrs	r3, r0, #13
2000080e:	428b      	cmp	r3, r1
20000810:	d301      	bcc.n	20000816 <__udivsi3+0x5e>
20000812:	034b      	lsls	r3, r1, #13
20000814:	1ac0      	subs	r0, r0, r3
20000816:	4152      	adcs	r2, r2
20000818:	0b03      	lsrs	r3, r0, #12
2000081a:	428b      	cmp	r3, r1
2000081c:	d301      	bcc.n	20000822 <__udivsi3+0x6a>
2000081e:	030b      	lsls	r3, r1, #12
20000820:	1ac0      	subs	r0, r0, r3
20000822:	4152      	adcs	r2, r2
20000824:	0ac3      	lsrs	r3, r0, #11
20000826:	428b      	cmp	r3, r1
20000828:	d301      	bcc.n	2000082e <__udivsi3+0x76>
2000082a:	02cb      	lsls	r3, r1, #11
2000082c:	1ac0      	subs	r0, r0, r3
2000082e:	4152      	adcs	r2, r2
20000830:	0a83      	lsrs	r3, r0, #10
20000832:	428b      	cmp	r3, r1
20000834:	d301      	bcc.n	2000083a <__udivsi3+0x82>
20000836:	028b      	lsls	r3, r1, #10
20000838:	1ac0      	subs	r0, r0, r3
2000083a:	4152      	adcs	r2, r2
2000083c:	0a43      	lsrs	r3, r0, #9
2000083e:	428b      	cmp	r3, r1
20000840:	d301      	bcc.n	20000846 <__udivsi3+0x8e>
20000842:	024b      	lsls	r3, r1, #9
20000844:	1ac0      	subs	r0, r0, r3
20000846:	4152      	adcs	r2, r2
20000848:	0a03      	lsrs	r3, r0, #8
2000084a:	428b      	cmp	r3, r1
2000084c:	d301      	bcc.n	20000852 <__udivsi3+0x9a>
2000084e:	020b      	lsls	r3, r1, #8
20000850:	1ac0      	subs	r0, r0, r3
20000852:	4152      	adcs	r2, r2
20000854:	d2cd      	bcs.n	200007f2 <__udivsi3+0x3a>
20000856:	09c3      	lsrs	r3, r0, #7
20000858:	428b      	cmp	r3, r1
2000085a:	d301      	bcc.n	20000860 <__udivsi3+0xa8>
2000085c:	01cb      	lsls	r3, r1, #7
2000085e:	1ac0      	subs	r0, r0, r3
20000860:	4152      	adcs	r2, r2
20000862:	0983      	lsrs	r3, r0, #6
20000864:	428b      	cmp	r3, r1
20000866:	d301      	bcc.n	2000086c <__udivsi3+0xb4>
20000868:	018b      	lsls	r3, r1, #6
2000086a:	1ac0      	subs	r0, r0, r3
2000086c:	4152      	adcs	r2, r2
2000086e:	0943      	lsrs	r3, r0, #5
20000870:	428b      	cmp	r3, r1
20000872:	d301      	bcc.n	20000878 <__udivsi3+0xc0>
20000874:	014b      	lsls	r3, r1, #5
20000876:	1ac0      	subs	r0, r0, r3
20000878:	4152      	adcs	r2, r2
2000087a:	0903      	lsrs	r3, r0, #4
2000087c:	428b      	cmp	r3, r1
2000087e:	d301      	bcc.n	20000884 <__udivsi3+0xcc>
20000880:	010b      	lsls	r3, r1, #4
20000882:	1ac0      	subs	r0, r0, r3
20000884:	4152      	adcs	r2, r2
20000886:	08c3      	lsrs	r3, r0, #3
20000888:	428b      	cmp	r3, r1
2000088a:	d301      	bcc.n	20000890 <__udivsi3+0xd8>
2000088c:	00cb      	lsls	r3, r1, #3
2000088e:	1ac0      	subs	r0, r0, r3
20000890:	4152      	adcs	r2, r2
20000892:	0883      	lsrs	r3, r0, #2
20000894:	428b      	cmp	r3, r1
20000896:	d301      	bcc.n	2000089c <__udivsi3+0xe4>
20000898:	008b      	lsls	r3, r1, #2
2000089a:	1ac0      	subs	r0, r0, r3
2000089c:	4152      	adcs	r2, r2
2000089e:	0843      	lsrs	r3, r0, #1
200008a0:	428b      	cmp	r3, r1
200008a2:	d301      	bcc.n	200008a8 <__udivsi3+0xf0>
200008a4:	004b      	lsls	r3, r1, #1
200008a6:	1ac0      	subs	r0, r0, r3
200008a8:	4152      	adcs	r2, r2
200008aa:	1a41      	subs	r1, r0, r1
200008ac:	d200      	bcs.n	200008b0 <__udivsi3+0xf8>
200008ae:	4601      	mov	r1, r0
200008b0:	4152      	adcs	r2, r2
200008b2:	4610      	mov	r0, r2
200008b4:	4770      	bx	lr
200008b6:	e7ff      	b.n	200008b8 <__udivsi3+0x100>
200008b8:	b501      	push	{r0, lr}
200008ba:	2000      	movs	r0, #0
200008bc:	f000 f806 	bl	200008cc <__aeabi_idiv0>
200008c0:	bd02      	pop	{r1, pc}
200008c2:	46c0      	nop			; (mov r8, r8)

200008c4 <__aeabi_uidivmod>:
200008c4:	2900      	cmp	r1, #0
200008c6:	d0f7      	beq.n	200008b8 <__udivsi3+0x100>
200008c8:	e776      	b.n	200007b8 <__udivsi3>
200008ca:	4770      	bx	lr

200008cc <__aeabi_idiv0>:
200008cc:	4770      	bx	lr
200008ce:	46c0      	nop			; (mov r8, r8)

200008d0 <backBuffer>:
	...

20000cd0 <ball_geometry>:
20000cd0:	0000000c 	andeq	r0, r0, ip
20000cd4:	00000004 	andeq	r0, r0, r4
20000cd8:	00000004 	andeq	r0, r0, r4
20000cdc:	02000100 	andeq	r0, r0, #0, 2
20000ce0:	01010001 	tsteq	r1, r1
20000ce4:	03010201 	movweq	r0, #4609	; 0x1201
20000ce8:	01020002 	tsteq	r2, r2
20000cec:	03020202 	movweq	r0, #8706	; 0x2202
20000cf0:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20000d04 <ball>:
20000d04:	20000cd0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
	...
20000d10:	00000001 	andeq	r0, r0, r1
20000d14:	00000001 	andeq	r0, r0, r1
20000d18:	20000651 	andcs	r0, r0, r1, asr r6
20000d1c:	200006ad 	andcs	r0, r0, sp, lsr #13
20000d20:	20000709 	andcs	r0, r0, r9, lsl #14
20000d24:	20000631 	andcs	r0, r0, r1, lsr r6

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000000c 	andeq	r0, r0, ip
  10:	00010e0c 	andeq	r0, r1, ip, lsl #28
  14:	0000c900 	andeq	ip, r0, r0, lsl #18
  18:	00001000 	andeq	r1, r0, r0
  1c:	0000bc20 	andeq	fp, r0, r0, lsr #24
  20:	00000000 	andeq	r0, r0, r0
  24:	08010200 	stmdaeq	r1, {r9}
  28:	00000100 	andeq	r0, r0, r0, lsl #2
  2c:	69050403 	stmdbvs	r5, {r0, r1, sl}
  30:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
  34:	00a40704 	adceq	r0, r4, r4, lsl #14
  38:	bd040000 	stclt	0, cr0, [r4, #-0]
  3c:	01000000 	mrseq	r0, (UNDEF: 0)
  40:	0000ba26 	andeq	fp, r0, r6, lsr #20
  44:	00001220 	andeq	r1, r0, r0, lsr #4
  48:	059c0100 	ldreq	r0, [ip, #256]	; 0x100
  4c:	00000000 	andeq	r0, r0, r0
  50:	00801b01 	addeq	r1, r0, r1, lsl #22
  54:	003a2000 	eorseq	r2, sl, r0
  58:	9c010000 	stcls	0, cr0, [r1], {-0}
  5c:	0000006e 	andeq	r0, r0, lr, rrx
  60:	00736d06 	rsbseq	r6, r3, r6, lsl #26
  64:	00331b01 	eorseq	r1, r3, r1, lsl #22
  68:	91020000 	mrsls	r0, (UNDEF: 2)
  6c:	f4050074 	vst4.16	{d0-d3}, [r5 :256], r4
  70:	01000000 	mrseq	r0, (UNDEF: 0)
  74:	00005412 	andeq	r5, r0, r2, lsl r4
  78:	00002c20 	andeq	r2, r0, r0, lsr #24
  7c:	919c0100 	orrsls	r0, ip, r0, lsl #2
  80:	06000000 	streq	r0, [r0], -r0
  84:	01007375 	tsteq	r0, r5, ror r3
  88:	00003312 	andeq	r3, r0, r2, lsl r3
  8c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
  90:	00b10700 	adcseq	r0, r1, r0, lsl #14
  94:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
  98:	20000010 	andcs	r0, r0, r0, lsl r0
  9c:	00000044 	andeq	r0, r0, r4, asr #32
  a0:	e4009c01 	str	r9, [r0], #-3073	; 0xfffff3ff
  a4:	04000002 	streq	r0, [r0], #-2
  a8:	00008300 	andeq	r8, r0, r0, lsl #6
  ac:	0c010400 	cfstrseq	mvf0, [r1], {-0}
  b0:	0c000000 	stceq	0, cr0, [r0], {-0}
  b4:	00000147 	andeq	r0, r0, r7, asr #2
  b8:	000000c9 	andeq	r0, r0, r9, asr #1
  bc:	200000cc 	andcs	r0, r0, ip, asr #1
  c0:	00000534 	andeq	r0, r0, r4, lsr r5
  c4:	00000082 	andeq	r0, r0, r2, lsl #1
  c8:	00020602 	andeq	r0, r2, r2, lsl #12
  cc:	303e0200 	eorscc	r0, lr, r0, lsl #4
  d0:	03000000 	movweq	r0, #0
  d4:	01000801 	tsteq	r0, r1, lsl #16
  d8:	04040000 	streq	r0, [r4], #-0
  dc:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
  e0:	07040300 	streq	r0, [r4, -r0, lsl #6]
  e4:	000000a4 	andeq	r0, r0, r4, lsr #1
  e8:	00002505 	andeq	r2, r0, r5, lsl #10
  ec:	00005600 	andeq	r5, r0, r0, lsl #12
  f0:	003e0600 	eorseq	r0, lr, r0, lsl #12
  f4:	03ff0000 	mvnseq	r0, #0
  f8:	018a0700 	orreq	r0, sl, r0, lsl #14
  fc:	81010000 	mrshi	r0, (UNDEF: 1)
 100:	00000045 	andeq	r0, r0, r5, asr #32
 104:	08d00305 	ldmeq	r0, {r0, r2, r8, r9}^
 108:	84082000 	strhi	r2, [r8], #-0
 10c:	01000001 	tsteq	r0, r1
 110:	0005cca2 	andeq	ip, r5, r2, lsr #25
 114:	00003420 	andeq	r3, r0, r0, lsr #8
 118:	899c0100 	ldmibhi	ip, {r8}
 11c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 120:	a3010069 	movwge	r0, #4201	; 0x1069
 124:	00000037 	andeq	r0, r0, r7, lsr r0
 128:	00749102 	rsbseq	r9, r4, r2, lsl #2
 12c:	0002320a 	andeq	r3, r2, sl, lsl #4
 130:	00950100 	addseq	r0, r5, r0, lsl #2
 134:	cc200005 	stcgt	0, cr0, [r0], #-20	; 0xffffffec
 138:	01000000 	mrseq	r0, (UNDEF: 0)
 13c:	0000dd9c 	muleq	r0, ip, sp
 140:	00690900 	rsbeq	r0, r9, r0, lsl #18
 144:	00259601 	eoreq	r9, r5, r1, lsl #12
 148:	91020000 	mrsls	r0, (UNDEF: 2)
 14c:	006a0977 	rsbeq	r0, sl, r7, ror r9
 150:	00259601 	eoreq	r9, r5, r1, lsl #12
 154:	91020000 	mrsls	r0, (UNDEF: 2)
 158:	01c20b76 	biceq	r0, r2, r6, ror fp
 15c:	96010000 	strls	r0, [r1], -r0
 160:	00000025 	andeq	r0, r0, r5, lsr #32
 164:	096f9102 	stmdbeq	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
 168:	96010063 	strls	r0, [r1], -r3, rrx
 16c:	00000025 	andeq	r0, r0, r5, lsr #32
 170:	09759102 	ldmdbeq	r5!, {r1, r8, ip, pc}^
 174:	9701006b 	strls	r0, [r1, -fp, rrx]
 178:	0000003e 	andeq	r0, r0, lr, lsr r0
 17c:	00709102 	rsbseq	r9, r0, r2, lsl #2
 180:	00020e0c 	andeq	r0, r2, ip, lsl #28
 184:	78830100 	stmvc	r3, {r8}
 188:	88200004 	stmdahi	r0!, {r2}
 18c:	01000000 	mrseq	r0, (UNDEF: 0)
 190:	0001279c 	muleq	r1, ip, r7
 194:	00780d00 	rsbseq	r0, r8, r0, lsl #26
 198:	003e8301 	eorseq	r8, lr, r1, lsl #6
 19c:	91020000 	mrsls	r0, (UNDEF: 2)
 1a0:	00790d6c 	rsbseq	r0, r9, ip, ror #26
 1a4:	003e8301 	eorseq	r8, lr, r1, lsl #6
 1a8:	91020000 	mrsls	r0, (UNDEF: 2)
 1ac:	02140b68 	andseq	r0, r4, #104, 22	; 0x1a000
 1b0:	84010000 	strhi	r0, [r1], #-0
 1b4:	00000025 	andeq	r0, r0, r5, lsr #32
 1b8:	0b739102 	bleq	1ce45c8 <startup-0x1e31ba38>
 1bc:	00000219 	andeq	r0, r0, r9, lsl r2
 1c0:	00378501 	eorseq	r8, r7, r1, lsl #10
 1c4:	91020000 	mrsls	r0, (UNDEF: 2)
 1c8:	590a0074 	stmdbpl	sl, {r2, r4, r5, r6}
 1cc:	01000002 	tsteq	r0, r2
 1d0:	00042078 	andeq	r2, r4, r8, ror r0
 1d4:	00005820 	andeq	r5, r0, r0, lsr #16
 1d8:	6d9c0100 	ldfvss	f0, [ip]
 1dc:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 1e0:	20000426 	andcs	r0, r0, r6, lsr #8
 1e4:	0000004a 	andeq	r0, r0, sl, asr #32
 1e8:	0001420b 	andeq	r4, r1, fp, lsl #4
 1ec:	37790100 	ldrbcc	r0, [r9, -r0, lsl #2]!
 1f0:	02000000 	andeq	r0, r0, #0
 1f4:	4a0e7491 	bmi	39d440 <startup-0x1fc62bc0>
 1f8:	1a200004 	bne	800210 <startup-0x1f7ffdf0>
 1fc:	0b000000 	bleq	204 <startup-0x1ffffdfc>
 200:	0000017d 	andeq	r0, r0, sp, ror r1
 204:	00377c01 	eorseq	r7, r7, r1, lsl #24
 208:	91020000 	mrsls	r0, (UNDEF: 2)
 20c:	00000070 	andeq	r0, r0, r0, ror r0
 210:	0001cd0f 	andeq	ip, r1, pc, lsl #26
 214:	bc680100 	stflte	f0, [r8], #-0
 218:	64200003 	strtvs	r0, [r0], #-3
 21c:	01000000 	mrseq	r0, (UNDEF: 0)
 220:	019b109c 			; <UNDEFINED> instruction: 0x019b109c
 224:	62010000 	andvs	r0, r1, #0
 228:	00000030 	andeq	r0, r0, r0, lsr r0
 22c:	20000392 	mulcs	r0, r2, r3
 230:	0000002a 	andeq	r0, r0, sl, lsr #32
 234:	01a69c01 			; <UNDEFINED> instruction: 0x01a69c01
 238:	c2110000 	andsgt	r0, r1, #0
 23c:	01000001 	tsteq	r0, r1
 240:	00003062 	andeq	r3, r0, r2, rrx
 244:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 248:	021f0a00 	andseq	r0, pc, #0, 20
 24c:	5a010000 	bpl	40254 <startup-0x1ffbfdac>
 250:	2000034c 	andcs	r0, r0, ip, asr #6
 254:	00000046 	andeq	r0, r0, r6, asr #32
 258:	01d89c01 	bicseq	r9, r8, r1, lsl #24
 25c:	a8110000 	ldmdage	r1, {}	; <UNPREDICTABLE>
 260:	01000001 	tsteq	r0, r1
 264:	0000255a 	andeq	r2, r0, sl, asr r5
 268:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 26c:	0001c211 	andeq	ip, r1, r1, lsl r2
 270:	255a0100 	ldrbcs	r0, [sl, #-256]	; 0xffffff00
 274:	02000000 	andeq	r0, r0, #0
 278:	0a007691 	beq	1dcc4 <startup-0x1ffe233c>
 27c:	0000027b 	andeq	r0, r0, fp, ror r2
 280:	030c5301 	movweq	r5, #49921	; 0xc301
 284:	00402000 	subeq	r2, r0, r0
 288:	9c010000 	stcls	0, cr0, [r1], {-0}
 28c:	0000020a 	andeq	r0, r0, sl, lsl #4
 290:	00028911 	andeq	r8, r2, r1, lsl r9
 294:	25530100 	ldrbcs	r0, [r3, #-256]	; 0xffffff00
 298:	02000000 	andeq	r0, r0, #0
 29c:	c2117791 	andsgt	r7, r1, #38010880	; 0x2440000
 2a0:	01000001 	tsteq	r0, r1
 2a4:	00002553 	andeq	r2, r0, r3, asr r5
 2a8:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 2ac:	01ad0a00 			; <UNDEFINED> instruction: 0x01ad0a00
 2b0:	3f010000 	svccc	0x00010000
 2b4:	2000028c 	andcs	r0, r0, ip, lsl #5
 2b8:	00000080 	andeq	r0, r0, r0, lsl #1
 2bc:	023c9c01 	eorseq	r9, ip, #256	; 0x100
 2c0:	95110000 	ldrls	r0, [r1, #-0]
 2c4:	01000001 	tsteq	r0, r1
 2c8:	0000303f 	andeq	r3, r0, pc, lsr r0
 2cc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 2d0:	0001c211 	andeq	ip, r1, r1, lsl r2
 2d4:	303f0100 	eorscc	r0, pc, r0, lsl #2
 2d8:	02000000 	andeq	r0, r0, #0
 2dc:	10007691 	mulne	r0, r1, r6
 2e0:	0000026e 	andeq	r0, r0, lr, ror #4
 2e4:	00302901 	eorseq	r2, r0, r1, lsl #18
 2e8:	02000000 	andeq	r0, r0, #0
 2ec:	008c2000 	addeq	r2, ip, r0
 2f0:	9c010000 	stcls	0, cr0, [r1], {-0}
 2f4:	00000272 	andeq	r0, r0, r2, ror r2
 2f8:	0001c211 	andeq	ip, r1, r1, lsl r2
 2fc:	30290100 	eorcc	r0, r9, r0, lsl #2
 300:	02000000 	andeq	r0, r0, #0
 304:	a30b6f91 	movwge	r6, #49041	; 0xbf91
 308:	01000001 	tsteq	r0, r1
 30c:	0000302a 	andeq	r3, r0, sl, lsr #32
 310:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 314:	02461200 	subeq	r1, r6, #0, 4
 318:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
 31c:	2000019a 	mulcs	r0, sl, r1
 320:	00000066 	andeq	r0, r0, r6, rrx
 324:	bb139c01 	bllt	4e7330 <startup-0x1fb18cd0>
 328:	01000001 	tsteq	r0, r1
 32c:	00014010 	andeq	r4, r1, r0, lsl r0
 330:	00005a20 	andeq	r5, r0, r0, lsr #20
 334:	a79c0100 	ldrge	r0, [ip, r0, lsl #2]
 338:	11000002 	tstne	r0, r2
 33c:	000001c2 	andeq	r0, r0, r2, asr #3
 340:	00251001 	eoreq	r1, r5, r1
 344:	91020000 	mrsls	r0, (UNDEF: 2)
 348:	da0c0077 	ble	30052c <startup-0x1fcffad4>
 34c:	01000001 	tsteq	r0, r1
 350:	0001040c 	andeq	r0, r1, ip, lsl #8
 354:	00003c20 	andeq	r3, r0, r0, lsr #24
 358:	c99c0100 	ldmibgt	ip, {r8}
 35c:	0d000002 	stceq	0, cr0, [r0, #-8]
 360:	0c010078 	stceq	0, cr0, [r1], {120}	; 0x78
 364:	00000025 	andeq	r0, r0, r5, lsr #32
 368:	00779102 	rsbseq	r9, r7, r2, lsl #2
 36c:	0001f114 	andeq	pc, r1, r4, lsl r1	; <UNPREDICTABLE>
 370:	cc080100 	stfgts	f0, [r8], {-0}
 374:	38200000 	stmdacc	r0!, {}	; <UNPREDICTABLE>
 378:	01000000 	mrseq	r0, (UNDEF: 0)
 37c:	00780d9c 			; <UNDEFINED> instruction: 0x00780d9c
 380:	00250801 	eoreq	r0, r5, r1, lsl #16
 384:	91020000 	mrsls	r0, (UNDEF: 2)
 388:	14000077 	strne	r0, [r0], #-119	; 0xffffff89
 38c:	04000002 	streq	r0, [r0], #-2
 390:	0001e800 	andeq	lr, r1, r0, lsl #16
 394:	0c010400 	cfstrseq	mvf0, [r1], {-0}
 398:	0c000000 	stceq	0, cr0, [r0], {-0}
 39c:	00000312 	andeq	r0, r0, r2, lsl r3
 3a0:	000000c9 	andeq	r0, r0, r9, asr #1
	...
 3ac:	000001f3 	strdeq	r0, [r0], -r3
 3b0:	00080102 	andeq	r0, r8, r2, lsl #2
 3b4:	03000001 	movweq	r0, #1
 3b8:	000002ae 	andeq	r0, r0, lr, lsr #5
 3bc:	4d770202 	lfmmi	f0, 2, [r7, #-8]!
 3c0:	04000000 	streq	r0, [r0], #-0
 3c4:	78020078 	stmdavc	r2, {r3, r4, r5, r6}
 3c8:	00000025 	andeq	r0, r0, r5, lsr #32
 3cc:	00790400 	rsbseq	r0, r9, r0, lsl #8
 3d0:	00257902 	eoreq	r7, r5, r2, lsl #18
 3d4:	00010000 	andeq	r0, r1, r0
 3d8:	00034905 	andeq	r4, r3, r5, lsl #18
 3dc:	2c7a0200 	lfmcs	f0, 2, [sl], #-0
 3e0:	03000000 	movweq	r0, #0
 3e4:	000002d5 	ldrdeq	r0, [r0], -r5
 3e8:	947e0234 	ldrbtls	r0, [lr], #-564	; 0xfffffdcc
 3ec:	06000000 	streq	r0, [r0], -r0
 3f0:	000002f6 	strdeq	r0, [r0], -r6
 3f4:	00947f02 	addseq	r7, r4, r2, lsl #30
 3f8:	06000000 	streq	r0, [r0], -r0
 3fc:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
 400:	00948002 	addseq	r8, r4, r2
 404:	06040000 	streq	r0, [r4], -r0
 408:	000002c0 	andeq	r0, r0, r0, asr #5
 40c:	00948102 	addseq	r8, r4, r2, lsl #2
 410:	04080000 	streq	r0, [r8], #-0
 414:	02007870 	andeq	r7, r0, #112, 16	; 0x700000
 418:	00009b82 	andeq	r9, r0, r2, lsl #23
 41c:	07000c00 	streq	r0, [r0, -r0, lsl #24]
 420:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 424:	4d080074 	stcmi	0, cr0, [r8, #-464]	; 0xfffffe30
 428:	ab000000 	blge	430 <startup-0x1ffffbd0>
 42c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 430:	000000ab 	andeq	r0, r0, fp, lsr #1
 434:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
 438:	0000a407 	andeq	sl, r0, r7, lsl #8
 43c:	02c70500 	sbceq	r0, r7, #0, 10
 440:	83020000 	movwhi	r0, #8192	; 0x2000
 444:	00000058 	andeq	r0, r0, r8, asr r0
 448:	0002c605 	andeq	ip, r2, r5, lsl #12
 44c:	c8830200 	stmgt	r3, {r9}
 450:	0a000000 	beq	458 <startup-0x1ffffba8>
 454:	00005804 	andeq	r5, r0, r4, lsl #16
 458:	03540300 	cmpeq	r4, #0, 6
 45c:	02240000 	eoreq	r0, r4, #0
 460:	00014785 	andeq	r4, r1, r5, lsl #15
 464:	65670400 	strbvs	r0, [r7, #-1024]!	; 0xfffffc00
 468:	8602006f 	strhi	r0, [r2], -pc, rrx
 46c:	000000bd 	strheq	r0, [r0], -sp
 470:	02b50600 	adcseq	r0, r5, #0, 12
 474:	87020000 	strhi	r0, [r2, -r0]
 478:	00000094 	muleq	r0, r4, r0
 47c:	02f10604 	rscseq	r0, r1, #4, 12	; 0x400000
 480:	87020000 	strhi	r0, [r2, -r0]
 484:	00000094 	muleq	r0, r4, r0
 488:	034f0608 	movteq	r0, #62984	; 0xf608
 48c:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
 490:	00000094 	muleq	r0, r4, r0
 494:	02d0060c 	sbcseq	r0, r0, #12, 12	; 0xc00000
 498:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
 49c:	00000094 	muleq	r0, r4, r0
 4a0:	02910610 	addseq	r0, r1, #16, 12	; 0x1000000
 4a4:	89020000 	stmdbhi	r2, {}	; <UNPREDICTABLE>
 4a8:	00000158 	andeq	r0, r0, r8, asr r1
 4ac:	01eb0614 	mvneq	r0, r4, lsl r6
 4b0:	8a020000 	bhi	804b8 <startup-0x1ff7fb48>
 4b4:	00000158 	andeq	r0, r0, r8, asr r1
 4b8:	03440618 	movteq	r0, #17944	; 0x4618
 4bc:	8b020000 	blhi	804c4 <startup-0x1ff7fb3c>
 4c0:	00000158 	andeq	r0, r0, r8, asr r1
 4c4:	0296061c 	addseq	r0, r6, #28, 12	; 0x1c00000
 4c8:	8c020000 	stchi	0, cr0, [r2], {-0}
 4cc:	00000173 	andeq	r0, r0, r3, ror r1
 4d0:	520b0020 	andpl	r0, fp, #32
 4d4:	0c000001 	stceq	0, cr0, [r0], {1}
 4d8:	00000152 	andeq	r0, r0, r2, asr r1
 4dc:	ce040a00 	vmlagt.f32	s0, s8, s0
 4e0:	0a000000 	beq	4e8 <startup-0x1ffffb18>
 4e4:	00014704 	andeq	r4, r1, r4, lsl #14
 4e8:	01730b00 	cmneq	r3, r0, lsl #22
 4ec:	520c0000 	andpl	r0, ip, #0
 4f0:	0c000001 	stceq	0, cr0, [r0], {1}
 4f4:	00000094 	muleq	r0, r4, r0
 4f8:	0000940c 	andeq	r9, r0, ip, lsl #8
 4fc:	040a0000 	streq	r0, [sl], #-0
 500:	0000015e 	andeq	r0, r0, lr, asr r1
 504:	00030605 	andeq	r0, r3, r5, lsl #12
 508:	ce8d0200 	cdpgt	2, 8, cr0, cr13, cr0, {0}
 50c:	05000000 	streq	r0, [r0, #-0]
 510:	00000305 	andeq	r0, r0, r5, lsl #6
 514:	01528d02 	cmpeq	r2, r2, lsl #26
 518:	a00d0000 	andge	r0, sp, r0
 51c:	01000002 	tsteq	r0, r2
 520:	0000b213 	andeq	fp, r0, r3, lsl r2
 524:	d0030500 	andle	r0, r3, r0, lsl #10
 528:	0e20000c 	cdpeq	0, 2, cr0, cr0, cr12, {0}
 52c:	0000030d 	andeq	r0, r0, sp, lsl #6
 530:	01791701 	cmneq	r9, r1, lsl #14
 534:	03050000 	movweq	r0, #20480	; 0x5000
 538:	20000d04 	andcs	r0, r0, r4, lsl #26
 53c:	0003000f 	andeq	r0, r3, pc
 540:	94220100 	strtls	r0, [r2], #-256	; 0xffffff00
 544:	00000000 	andeq	r0, r0, r0
 548:	30200006 	eorcc	r0, r0, r6
 54c:	01000000 	mrseq	r0, (UNDEF: 0)
 550:	0001f39c 	muleq	r1, ip, r3
 554:	02ec1000 	rsceq	r1, ip, #0
 558:	22010000 	andcs	r0, r1, #0
 55c:	00000094 	muleq	r0, r4, r0
 560:	106c9102 	rsbne	r9, ip, r2, lsl #2
 564:	000002df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 568:	01f32201 	mvnseq	r2, r1, lsl #4
 56c:	91020000 	mrsls	r0, (UNDEF: 2)
 570:	00701168 	rsbseq	r1, r0, r8, ror #2
 574:	01842401 	orreq	r2, r4, r1, lsl #8
 578:	91020000 	mrsls	r0, (UNDEF: 2)
 57c:	040a0074 	streq	r0, [sl], #-116	; 0xffffff8c
 580:	000001f9 	strdeq	r0, [r0], -r9
 584:	01ff040a 	mvnseq	r0, sl, lsl #8
 588:	01020000 	mrseq	r0, (UNDEF: 2)
 58c:	00010908 	andeq	r0, r1, r8, lsl #18
 590:	02e41200 	rsceq	r1, r4, #0, 4
 594:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
 598:	20000000 	andcs	r0, r0, r0
 59c:	0000000c 	andeq	r0, r0, ip
 5a0:	42009c01 	andmi	r9, r0, #256	; 0x100
 5a4:	04000002 	streq	r0, [r0], #-2
 5a8:	0002e900 	andeq	lr, r2, r0, lsl #18
 5ac:	0c010400 	cfstrseq	mvf0, [r1], {-0}
 5b0:	0c000000 	stceq	0, cr0, [r0], {-0}
 5b4:	0000039d 	muleq	r0, sp, r3
 5b8:	000000c9 	andeq	r0, r0, r9, asr #1
 5bc:	20000630 	andcs	r0, r0, r0, lsr r6
 5c0:	00000188 	andeq	r0, r0, r8, lsl #3
 5c4:	0000027a 	andeq	r0, r0, sl, ror r2
 5c8:	00080102 	andeq	r0, r8, r2, lsl #2
 5cc:	03000001 	movweq	r0, #1
 5d0:	000002ae 	andeq	r0, r0, lr, lsr #5
 5d4:	4d770202 	lfmmi	f0, 2, [r7, #-8]!
 5d8:	04000000 	streq	r0, [r0], #-0
 5dc:	78020078 	stmdavc	r2, {r3, r4, r5, r6}
 5e0:	00000025 	andeq	r0, r0, r5, lsr #32
 5e4:	00790400 	rsbseq	r0, r9, r0, lsl #8
 5e8:	00257902 	eoreq	r7, r5, r2, lsl #18
 5ec:	00010000 	andeq	r0, r1, r0
 5f0:	00034905 	andeq	r4, r3, r5, lsl #18
 5f4:	2c7a0200 	lfmcs	f0, 2, [sl], #-0
 5f8:	03000000 	movweq	r0, #0
 5fc:	000002d5 	ldrdeq	r0, [r0], -r5
 600:	947e0234 	ldrbtls	r0, [lr], #-564	; 0xfffffdcc
 604:	06000000 	streq	r0, [r0], -r0
 608:	000002f6 	strdeq	r0, [r0], -r6
 60c:	00947f02 	addseq	r7, r4, r2, lsl #30
 610:	06000000 	streq	r0, [r0], -r0
 614:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
 618:	00948002 	addseq	r8, r4, r2
 61c:	06040000 	streq	r0, [r4], -r0
 620:	000002c0 	andeq	r0, r0, r0, asr #5
 624:	00948102 	addseq	r8, r4, r2, lsl #2
 628:	04080000 	streq	r0, [r8], #-0
 62c:	02007870 	andeq	r7, r0, #112, 16	; 0x700000
 630:	00009b82 	andeq	r9, r0, r2, lsl #23
 634:	07000c00 	streq	r0, [r0, -r0, lsl #24]
 638:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 63c:	4d080074 	stcmi	0, cr0, [r8, #-464]	; 0xfffffe30
 640:	ab000000 	blge	648 <startup-0x1ffff9b8>
 644:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 648:	000000ab 	andeq	r0, r0, fp, lsr #1
 64c:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
 650:	0000a407 	andeq	sl, r0, r7, lsl #8
 654:	02c60500 	sbceq	r0, r6, #0, 10
 658:	83020000 	movwhi	r0, #8192	; 0x2000
 65c:	000000bd 	strheq	r0, [r0], -sp
 660:	0058040a 	subseq	r0, r8, sl, lsl #8
 664:	54030000 	strpl	r0, [r3], #-0
 668:	24000003 	strcs	r0, [r0], #-3
 66c:	013c8502 	teqeq	ip, r2, lsl #10
 670:	67040000 	strvs	r0, [r4, -r0]
 674:	02006f65 	andeq	r6, r0, #404	; 0x194
 678:	0000b286 	andeq	fp, r0, r6, lsl #5
 67c:	b5060000 	strlt	r0, [r6, #-0]
 680:	02000002 	andeq	r0, r0, #2
 684:	00009487 	andeq	r9, r0, r7, lsl #9
 688:	f1060400 			; <UNDEFINED> instruction: 0xf1060400
 68c:	02000002 	andeq	r0, r0, #2
 690:	00009487 	andeq	r9, r0, r7, lsl #9
 694:	4f060800 	svcmi	0x00060800
 698:	02000003 	andeq	r0, r0, #3
 69c:	00009488 	andeq	r9, r0, r8, lsl #9
 6a0:	d0060c00 	andle	r0, r6, r0, lsl #24
 6a4:	02000002 	andeq	r0, r0, #2
 6a8:	00009488 	andeq	r9, r0, r8, lsl #9
 6ac:	91061000 	mrsls	r1, (UNDEF: 6)
 6b0:	02000002 	andeq	r0, r0, #2
 6b4:	00014d89 	andeq	r4, r1, r9, lsl #27
 6b8:	eb061400 	bl	1856c0 <startup-0x1fe7a940>
 6bc:	02000001 	andeq	r0, r0, #1
 6c0:	00014d8a 	andeq	r4, r1, sl, lsl #27
 6c4:	44061800 	strmi	r1, [r6], #-2048	; 0xfffff800
 6c8:	02000003 	andeq	r0, r0, #3
 6cc:	00014d8b 	andeq	r4, r1, fp, lsl #27
 6d0:	96061c00 	strls	r1, [r6], -r0, lsl #24
 6d4:	02000002 	andeq	r0, r0, #2
 6d8:	0001688c 	andeq	r6, r1, ip, lsl #17
 6dc:	0b002000 	bleq	86e4 <startup-0x1fff791c>
 6e0:	00000147 	andeq	r0, r0, r7, asr #2
 6e4:	0001470c 	andeq	r4, r1, ip, lsl #14
 6e8:	040a0000 	streq	r0, [sl], #-0
 6ec:	000000c3 	andeq	r0, r0, r3, asr #1
 6f0:	013c040a 	teqeq	ip, sl, lsl #8
 6f4:	680b0000 	stmdavs	fp, {}	; <UNPREDICTABLE>
 6f8:	0c000001 	stceq	0, cr0, [r0], {1}
 6fc:	00000147 	andeq	r0, r0, r7, asr #2
 700:	0000940c 	andeq	r9, r0, ip, lsl #8
 704:	00940c00 	addseq	r0, r4, r0, lsl #24
 708:	0a000000 	beq	710 <startup-0x1ffff8f0>
 70c:	00015304 	andeq	r5, r1, r4, lsl #6
 710:	03050500 	movweq	r0, #21760	; 0x5500
 714:	8d020000 	stchi	0, cr0, [r2, #-0]
 718:	00000147 	andeq	r0, r0, r7, asr #2
 71c:	0003910d 	andeq	r9, r3, sp, lsl #2
 720:	08150100 	ldmdaeq	r5, {r8}
 724:	b0200007 	eorlt	r0, r0, r7
 728:	01000000 	mrseq	r0, (UNDEF: 0)
 72c:	00019b9c 	muleq	r1, ip, fp
 730:	006f0e00 	rsbeq	r0, pc, r0, lsl #28
 734:	016e1501 	cmneq	lr, r1, lsl #10
 738:	91020000 	mrsls	r0, (UNDEF: 2)
 73c:	840d006c 	strhi	r0, [sp], #-108	; 0xffffff94
 740:	01000003 	tsteq	r0, r3
 744:	0006ac0f 	andeq	sl, r6, pc, lsl #24
 748:	00005c20 	andeq	r5, r0, r0, lsr #24
 74c:	d39c0100 	orrsle	r0, ip, #0, 2
 750:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 754:	0f01006f 	svceq	0x0001006f
 758:	0000016e 	andeq	r0, r0, lr, ror #2
 75c:	0f6c9102 	svceq	0x006c9102
 760:	200006b4 			; <UNDEFINED> instruction: 0x200006b4
 764:	0000004c 	andeq	r0, r0, ip, asr #32
 768:	01006910 	tsteq	r0, r0, lsl r9
 76c:	00009410 	andeq	r9, r0, r0, lsl r4
 770:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 774:	780d0000 	stmdavc	sp, {}	; <UNPREDICTABLE>
 778:	01000003 	tsteq	r0, r3
 77c:	00065009 	andeq	r5, r6, r9
 780:	00005c20 	andeq	r5, r0, r0, lsr #24
 784:	0b9c0100 	bleq	fe700b8c <ball+0xde6ffe88>
 788:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
 78c:	0901006f 	stmdbeq	r1, {r0, r1, r2, r3, r5, r6}
 790:	0000016e 	andeq	r0, r0, lr, ror #2
 794:	0f6c9102 	svceq	0x006c9102
 798:	20000658 	andcs	r0, r0, r8, asr r6
 79c:	0000004c 	andeq	r0, r0, ip, asr #32
 7a0:	01006910 	tsteq	r0, r0, lsl r9
 7a4:	0000940a 	andeq	r9, r0, sl, lsl #8
 7a8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 7ac:	60110000 	andsvs	r0, r1, r0
 7b0:	01000003 	tsteq	r0, r3
 7b4:	00063004 	andeq	r3, r6, r4
 7b8:	00002020 	andeq	r2, r0, r0, lsr #32
 7bc:	0e9c0100 	fmleqe	f0, f4, f0
 7c0:	0401006f 	streq	r0, [r1], #-111	; 0xffffff91
 7c4:	0000016e 	andeq	r0, r0, lr, ror #2
 7c8:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
 7cc:	00000359 	andeq	r0, r0, r9, asr r3
 7d0:	00940401 	addseq	r0, r4, r1, lsl #8
 7d4:	91020000 	mrsls	r0, (UNDEF: 2)
 7d8:	03711270 	cmneq	r1, #112, 4
 7dc:	04010000 	streq	r0, [r1], #-0
 7e0:	00000094 	muleq	r0, r4, r0
 7e4:	006c9102 	rsbeq	r9, ip, r2, lsl #2
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	24030000 	strcs	r0, [r3], #-0
  20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  24:	0008030b 	andeq	r0, r8, fp, lsl #6
  28:	002e0400 	eoreq	r0, lr, r0, lsl #8
  2c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  30:	0b3b0b3a 	bleq	ec2d20 <startup-0x1f13d2e0>
  34:	01111927 	tsteq	r1, r7, lsr #18
  38:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  3c:	00194296 	mulseq	r9, r6, r2
  40:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
  44:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  48:	0b3b0b3a 	bleq	ec2d38 <startup-0x1f13d2c8>
  4c:	01111927 	tsteq	r1, r7, lsr #18
  50:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  54:	01194296 			; <UNDEFINED> instruction: 0x01194296
  58:	06000013 			; <UNDEFINED> instruction: 0x06000013
  5c:	08030005 	stmdaeq	r3, {r0, r2}
  60:	0b3b0b3a 	bleq	ec2d50 <startup-0x1f13d2b0>
  64:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  68:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
  6c:	03193f00 	tsteq	r9, #0, 30
  70:	3b0b3a0e 	blcc	2ce8b0 <startup-0x1fd31750>
  74:	1119270b 	tstne	r9, fp, lsl #14
  78:	40061201 	andmi	r1, r6, r1, lsl #4
  7c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  80:	01000000 	mrseq	r0, (UNDEF: 0)
  84:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
  88:	0e030b13 	vmoveq.32	d3[0], r0
  8c:	01110e1b 	tsteq	r1, fp, lsl lr
  90:	17100612 			; <UNDEFINED> instruction: 0x17100612
  94:	16020000 	strne	r0, [r2], -r0
  98:	3a0e0300 	bcc	380ca0 <startup-0x1fc7f360>
  9c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  a0:	03000013 	movweq	r0, #19
  a4:	0b0b0024 	bleq	2c013c <startup-0x1fd3fec4>
  a8:	0e030b3e 	vmoveq.16	d3[0], r0
  ac:	24040000 	strcs	r0, [r4], #-0
  b0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  b4:	0008030b 	andeq	r0, r8, fp, lsl #6
  b8:	01010500 	tsteq	r1, r0, lsl #10
  bc:	13011349 	movwne	r1, #4937	; 0x1349
  c0:	21060000 	mrscs	r0, (UNDEF: 6)
  c4:	2f134900 	svccs	0x00134900
  c8:	07000005 	streq	r0, [r0, -r5]
  cc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  d0:	0b3b0b3a 	bleq	ec2dc0 <startup-0x1f13d240>
  d4:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  d8:	00001802 	andeq	r1, r0, r2, lsl #16
  dc:	3f012e08 	svccc	0x00012e08
  e0:	3a0e0319 	bcc	380d4c <startup-0x1fc7f2b4>
  e4:	110b3b0b 	tstne	fp, fp, lsl #22
  e8:	40061201 	andmi	r1, r6, r1, lsl #4
  ec:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  f0:	00001301 	andeq	r1, r0, r1, lsl #6
  f4:	03003409 	movweq	r3, #1033	; 0x409
  f8:	3b0b3a08 	blcc	2ce920 <startup-0x1fd316e0>
  fc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 100:	0a000018 	beq	168 <startup-0x1ffffe98>
 104:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 108:	0b3a0e03 	bleq	e8391c <startup-0x1f17c6e4>
 10c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 110:	06120111 			; <UNDEFINED> instruction: 0x06120111
 114:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 118:	00130119 	andseq	r0, r3, r9, lsl r1
 11c:	00340b00 	eorseq	r0, r4, r0, lsl #22
 120:	0b3a0e03 	bleq	e83934 <startup-0x1f17c6cc>
 124:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 128:	00001802 	andeq	r1, r0, r2, lsl #16
 12c:	3f012e0c 	svccc	0x00012e0c
 130:	3a0e0319 	bcc	380d9c <startup-0x1fc7f264>
 134:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 138:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 13c:	97184006 	ldrls	r4, [r8, -r6]
 140:	13011942 	movwne	r1, #6466	; 0x1942
 144:	050d0000 	streq	r0, [sp, #-0]
 148:	3a080300 	bcc	200d50 <startup-0x1fdff2b0>
 14c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 150:	00180213 	andseq	r0, r8, r3, lsl r2
 154:	010b0e00 	tsteq	fp, r0, lsl #28
 158:	06120111 			; <UNDEFINED> instruction: 0x06120111
 15c:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
 160:	03193f00 	tsteq	r9, #0, 30
 164:	3b0b3a0e 	blcc	2ce9a4 <startup-0x1fd3165c>
 168:	1119270b 	tstne	r9, fp, lsl #14
 16c:	40061201 	andmi	r1, r6, r1, lsl #4
 170:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 174:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 178:	03193f01 	tsteq	r9, #1, 30
 17c:	3b0b3a0e 	blcc	2ce9bc <startup-0x1fd31644>
 180:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 184:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 188:	96184006 	ldrls	r4, [r8], -r6
 18c:	13011942 	movwne	r1, #6466	; 0x1942
 190:	05110000 	ldreq	r0, [r1, #-0]
 194:	3a0e0300 	bcc	380d9c <startup-0x1fc7f264>
 198:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 19c:	00180213 	andseq	r0, r8, r3, lsl r2
 1a0:	002e1200 	eoreq	r1, lr, r0, lsl #4
 1a4:	0b3a0e03 	bleq	e839b8 <startup-0x1f17c648>
 1a8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1ac:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1b0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1b4:	13000019 	movwne	r0, #25
 1b8:	0e03012e 	adfeqsp	f0, f3, #0.5
 1bc:	0b3b0b3a 	bleq	ec2eac <startup-0x1f13d154>
 1c0:	01111927 	tsteq	r1, r7, lsr #18
 1c4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1c8:	01194296 			; <UNDEFINED> instruction: 0x01194296
 1cc:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 1d0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1d4:	0b3a0e03 	bleq	e839e8 <startup-0x1f17c618>
 1d8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1dc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1e0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1e4:	00000019 	andeq	r0, r0, r9, lsl r0
 1e8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 1ec:	030b130e 	movweq	r1, #45838	; 0xb30e
 1f0:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
 1f4:	10011117 	andne	r1, r1, r7, lsl r1
 1f8:	02000017 	andeq	r0, r0, #23
 1fc:	0b0b0024 	bleq	2c0294 <startup-0x1fd3fd6c>
 200:	0e030b3e 	vmoveq.16	d3[0], r0
 204:	13030000 	movwne	r0, #12288	; 0x3000
 208:	0b0e0301 	bleq	380e14 <startup-0x1fc7f1ec>
 20c:	3b0b3a0b 	blcc	2cea40 <startup-0x1fd315c0>
 210:	0013010b 	andseq	r0, r3, fp, lsl #2
 214:	000d0400 	andeq	r0, sp, r0, lsl #8
 218:	0b3a0803 	bleq	e8222c <startup-0x1f17ddd4>
 21c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 220:	00000b38 	andeq	r0, r0, r8, lsr fp
 224:	03001605 	movweq	r1, #1541	; 0x605
 228:	3b0b3a0e 	blcc	2cea68 <startup-0x1fd31598>
 22c:	0013490b 	andseq	r4, r3, fp, lsl #18
 230:	000d0600 	andeq	r0, sp, r0, lsl #12
 234:	0b3a0e03 	bleq	e83a48 <startup-0x1f17c5b8>
 238:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 23c:	00000b38 	andeq	r0, r0, r8, lsr fp
 240:	0b002407 	bleq	9264 <startup-0x1fff6d9c>
 244:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 248:	08000008 	stmdaeq	r0, {r3}
 24c:	13490101 	movtne	r0, #37121	; 0x9101
 250:	00001301 	andeq	r1, r0, r1, lsl #6
 254:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
 258:	000b2f13 	andeq	r2, fp, r3, lsl pc
 25c:	000f0a00 	andeq	r0, pc, r0, lsl #20
 260:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 264:	150b0000 	strne	r0, [fp, #-0]
 268:	01192701 	tsteq	r9, r1, lsl #14
 26c:	0c000013 	stceq	0, cr0, [r0], {19}
 270:	13490005 	movtne	r0, #36869	; 0x9005
 274:	340d0000 	strcc	r0, [sp], #-0
 278:	3a0e0300 	bcc	380e80 <startup-0x1fc7f180>
 27c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 280:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 284:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
 288:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 28c:	0b3b0b3a 	bleq	ec2f7c <startup-0x1f13d084>
 290:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 294:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
 298:	03193f01 	tsteq	r9, #1, 30
 29c:	3b0b3a0e 	blcc	2ceadc <startup-0x1fd31524>
 2a0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 2a4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 2a8:	96184006 	ldrls	r4, [r8], -r6
 2ac:	13011942 	movwne	r1, #6466	; 0x1942
 2b0:	05100000 	ldreq	r0, [r0, #-0]
 2b4:	3a0e0300 	bcc	380ebc <startup-0x1fc7f144>
 2b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2bc:	00180213 	andseq	r0, r8, r3, lsl r2
 2c0:	00341100 	eorseq	r1, r4, r0, lsl #2
 2c4:	0b3a0803 	bleq	e822d8 <startup-0x1f17dd28>
 2c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2cc:	00001802 	andeq	r1, r0, r2, lsl #16
 2d0:	3f002e12 	svccc	0x00002e12
 2d4:	3a0e0319 	bcc	380f40 <startup-0x1fc7f0c0>
 2d8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 2dc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 2e0:	97184006 	ldrls	r4, [r8, -r6]
 2e4:	00001942 	andeq	r1, r0, r2, asr #18
 2e8:	01110100 	tsteq	r1, r0, lsl #2
 2ec:	0b130e25 	bleq	4c3b88 <startup-0x1fb3c478>
 2f0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 2f4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2f8:	00001710 	andeq	r1, r0, r0, lsl r7
 2fc:	0b002402 	bleq	930c <startup-0x1fff6cf4>
 300:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 304:	0300000e 	movweq	r0, #14
 308:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 30c:	0b3a0b0b 	bleq	e82f40 <startup-0x1f17d0c0>
 310:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 314:	0d040000 	stceq	0, cr0, [r4, #-0]
 318:	3a080300 	bcc	200f20 <startup-0x1fdff0e0>
 31c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 320:	000b3813 	andeq	r3, fp, r3, lsl r8
 324:	00160500 	andseq	r0, r6, r0, lsl #10
 328:	0b3a0e03 	bleq	e83b3c <startup-0x1f17c4c4>
 32c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 330:	0d060000 	stceq	0, cr0, [r6, #-0]
 334:	3a0e0300 	bcc	380f3c <startup-0x1fc7f0c4>
 338:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 33c:	000b3813 	andeq	r3, fp, r3, lsl r8
 340:	00240700 	eoreq	r0, r4, r0, lsl #14
 344:	0b3e0b0b 	bleq	f82f78 <startup-0x1f07d088>
 348:	00000803 	andeq	r0, r0, r3, lsl #16
 34c:	49010108 	stmdbmi	r1, {r3, r8}
 350:	00130113 	andseq	r0, r3, r3, lsl r1
 354:	00210900 	eoreq	r0, r1, r0, lsl #18
 358:	0b2f1349 	bleq	bc5084 <startup-0x1f43af7c>
 35c:	0f0a0000 	svceq	0x000a0000
 360:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 364:	0b000013 	bleq	3b8 <startup-0x1ffffc48>
 368:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 36c:	00001301 	andeq	r1, r0, r1, lsl #6
 370:	4900050c 	stmdbmi	r0, {r2, r3, r8, sl}
 374:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 378:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 37c:	0b3a0e03 	bleq	e83b90 <startup-0x1f17c470>
 380:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 384:	06120111 			; <UNDEFINED> instruction: 0x06120111
 388:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 38c:	00130119 	andseq	r0, r3, r9, lsl r1
 390:	00050e00 	andeq	r0, r5, r0, lsl #28
 394:	0b3a0803 	bleq	e823a8 <startup-0x1f17dc58>
 398:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 39c:	00001802 	andeq	r1, r0, r2, lsl #16
 3a0:	11010b0f 	tstne	r1, pc, lsl #22
 3a4:	00061201 	andeq	r1, r6, r1, lsl #4
 3a8:	00341000 	eorseq	r1, r4, r0
 3ac:	0b3a0803 	bleq	e823c0 <startup-0x1f17dc40>
 3b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3b4:	00001802 	andeq	r1, r0, r2, lsl #16
 3b8:	3f012e11 	svccc	0x00012e11
 3bc:	3a0e0319 	bcc	381028 <startup-0x1fc7efd8>
 3c0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 3c4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 3c8:	97184006 	ldrls	r4, [r8, -r6]
 3cc:	00001942 	andeq	r1, r0, r2, asr #18
 3d0:	03000512 	movweq	r0, #1298	; 0x512
 3d4:	3b0b3a0e 	blcc	2cec14 <startup-0x1fd313ec>
 3d8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 3dc:	00000018 	andeq	r0, r0, r8, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000000bc 	strheq	r0, [r0], -ip
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00a30002 	adceq	r0, r3, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	200000cc 	andcs	r0, r0, ip, asr #1
  34:	00000534 	andeq	r0, r0, r4, lsr r5
	...
  40:	00000024 	andeq	r0, r0, r4, lsr #32
  44:	038b0002 	orreq	r0, fp, #2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	20000600 	andcs	r0, r0, r0, lsl #12
  54:	00000030 	andeq	r0, r0, r0, lsr r0
  58:	20000000 	andcs	r0, r0, r0
  5c:	0000000c 	andeq	r0, r0, ip
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	05a30002 	streq	r0, [r3, #2]!
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000630 	andcs	r0, r0, r0, lsr r6
  7c:	00000188 	andeq	r0, r0, r8, lsl #3
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000007e 	andeq	r0, r0, lr, ror r0
   4:	004a0002 	subeq	r0, sl, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	72646e41 	rsbvc	r6, r4, #1040	; 0x410
  28:	65442f65 	strbvs	r2, [r4, #-3941]	; 0xfffff09b
  2c:	6f746b73 	svcvs	0x00746b73
  30:	41442f70 	hvcmi	17136	; 0x42f0
  34:	30393354 	eorscc	r3, r9, r4, asr r3
  38:	62616c5f 	rsbvs	r6, r1, #24320	; 0x5f00
  3c:	34765f62 	ldrbtcc	r5, [r6], #-3938	; 0xfffff09e
  40:	6570732f 	ldrbvs	r7, [r0, #-815]!	; 0xfffffcd1
  44:	6400006c 	strvs	r0, [r0], #-108	; 0xffffff94
  48:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
  4c:	00632e73 	rsbeq	r2, r3, r3, ror lr
  50:	00000001 	andeq	r0, r0, r1
  54:	10020500 	andne	r0, r2, r0, lsl #10
  58:	19200000 	stmdbne	r0!, {}	; <UNPREDICTABLE>
  5c:	3d3d3d2f 	ldccc	13, cr3, [sp, #-188]!	; 0xffffff44
  60:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
  64:	06200601 	strteq	r0, [r0], -r1, lsl #12
  68:	4ba03d67 	blmi	fe80f60c <ball+0xde80e908>
  6c:	2f2f2f21 	svccs	0x002f2f21
  70:	4d4c5e2a 	stclmi	14, cr5, [ip, #-168]	; 0xffffff58
  74:	57213f75 			; <UNDEFINED> instruction: 0x57213f75
  78:	2f2f4c5a 	svccs	0x002f4c5a
  7c:	0003022f 	andeq	r0, r3, pc, lsr #4
  80:	016d0101 	cmneq	sp, r1, lsl #2
  84:	00020000 	andeq	r0, r2, r0
  88:	00000059 	andeq	r0, r0, r9, asr r0
  8c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
  90:	0101000d 	tsteq	r1, sp
  94:	00000101 	andeq	r0, r0, r1, lsl #2
  98:	00000100 	andeq	r0, r0, r0, lsl #2
  9c:	2f3a4301 	svccs	0x003a4301
  a0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
  a4:	6e412f73 	mcrvs	15, 2, r2, cr1, cr3, {3}
  a8:	2f657264 	svccs	0x00657264
  ac:	6b736544 	blvs	1cd95c4 <startup-0x1e326a3c>
  b0:	2f706f74 	svccs	0x00706f74
  b4:	33544144 	cmpcc	r4, #68, 2
  b8:	6c5f3039 	mrrcvs	0, 3, r3, pc, cr9	; <UNPREDICTABLE>
  bc:	5f626261 	svcpl	0x00626261
  c0:	732f3476 			; <UNDEFINED> instruction: 0x732f3476
  c4:	006c6570 	rsbeq	r6, ip, r0, ror r5
  c8:	61726700 	cmnvs	r2, r0, lsl #14
  cc:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  d0:	00632e73 	rsbeq	r2, r3, r3, ror lr
  d4:	73000001 	movwvc	r0, #1
  d8:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  dc:	682e7075 	stmdavs	lr!, {r0, r2, r4, r5, r6, ip, sp, lr}
  e0:	00000100 	andeq	r0, r0, r0, lsl #2
  e4:	02050000 	andeq	r0, r5, #0
  e8:	200000cc 	andcs	r0, r0, ip, asr #1
  ec:	76e56719 	usatvc	r6, #5, r9, lsl #14
  f0:	76130867 	ldrvc	r0, [r3], -r7, ror #16
  f4:	7a037a67 	bvc	dea98 <startup-0x1ff21568>
  f8:	4b1b5020 	blmi	6d4180 <startup-0x1f92be80>
  fc:	4c4c7575 	cfstr64mi	mvdx7, [ip], {117}	; 0x75
 100:	3d3d3d2f 	ldccc	13, cr3, [sp, #-188]!	; 0xffffff44
 104:	3d212f3d 	stccc	15, cr2, [r1, #-244]!	; 0xffffff0c
 108:	6c2a3d2f 	stcvs	13, cr3, [sl], #-188	; 0xffffff44
 10c:	68bc3d3d 	ldmvs	ip!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 110:	593d3d3d 	ldmdbpl	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 114:	3d593d2f 	ldclcc	13, cr3, [r9, #-188]	; 0xffffff44
 118:	303d4b3d 	eorscc	r4, sp, sp, lsr fp
 11c:	3d303d4b 	ldccc	13, cr3, [r0, #-300]!	; 0xfffffed4
 120:	594b91ca 	stmdbpl	fp, {r1, r3, r6, r7, r8, ip, pc}^
 124:	3d2f3d2f 	stccc	13, cr3, [pc, #-188]!	; 70 <startup-0x1fffff90>
 128:	59303d59 	ldmdbpl	r0!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}
 12c:	3d3d303d 	ldccc	0, cr3, [sp, #-244]!	; 0xffffff0c
 130:	3d91763d 	ldccc	6, cr7, [r1, #244]	; 0xf4
 134:	4c833d59 	stcmi	13, cr3, [r3], {89}	; 0x59
 138:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 13c:	674c833d 	smlaldxvs	r8, ip, sp, r3
 140:	2f4c675a 	svccs	0x004c675a
 144:	3d3d3d3e 	ldccc	13, cr3, [sp, #-248]!	; 0xffffff08
 148:	4b4b3d3d 	blmi	12cf644 <startup-0x1ed309bc>
 14c:	3d4b4b4b 	vstrcc	d20, [fp, #-300]	; 0xfffffed4
 150:	ad3d3d76 	ldcge	13, cr3, [sp, #-472]!	; 0xfffffe28
 154:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 158:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 15c:	00490304 	subeq	r0, r9, r4, lsl #6
 160:	06010402 	streq	r0, [r1], -r2, lsl #8
 164:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 168:	00390602 	eorseq	r0, r9, r2, lsl #12
 16c:	06010402 	streq	r0, [r1], -r2, lsl #8
 170:	4e42063c 	mcrmi	6, 2, r0, cr2, cr12, {1}
 174:	02002f5a 	andeq	r2, r0, #360	; 0x168
 178:	3c060104 	stfccs	f0, [r6], {4}
 17c:	02040200 	andeq	r0, r4, #0, 4
 180:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 184:	3f063c03 	svccc	0x00063c03
 188:	3f3d3d92 	svccc	0x003d3d92
 18c:	e4750392 	ldrbt	r0, [r5], #-914	; 0xfffffc6e
 190:	68200c03 	stmdavs	r0!, {r0, r1, sl, fp}
 194:	00592f3e 	subseq	r2, r9, lr, lsr pc
 198:	06010402 	streq	r0, [r1], -r2, lsl #8
 19c:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
 1a0:	02002e02 	andeq	r2, r0, #2, 28
 1a4:	00200404 	eoreq	r0, r0, r4, lsl #8
 1a8:	06040402 	streq	r0, [r4], -r2, lsl #8
 1ac:	67c9592f 	strbvs	r5, [r9, pc, lsr #18]
 1b0:	03040200 	movweq	r0, #16896	; 0x4200
 1b4:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
 1b8:	02009d03 	andeq	r9, r0, #3, 26	; 0xc0
 1bc:	90060104 	andls	r0, r6, r4, lsl #2
 1c0:	02040200 	andeq	r0, r4, #0, 4
 1c4:	02005506 	andeq	r5, r0, #25165824	; 0x1800000
 1c8:	66060104 	strvs	r0, [r6], -r4, lsl #2
 1cc:	02040200 	andeq	r0, r4, #0, 4
 1d0:	02005606 	andeq	r5, r0, #6291456	; 0x600000
 1d4:	66060104 	strvs	r0, [r6], -r4, lsl #2
 1d8:	3e766006 	cdpcc	0, 7, cr6, cr6, cr6, {0}
 1dc:	03040200 	movweq	r0, #16896	; 0x4200
 1e0:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 1e4:	02005703 	andeq	r5, r0, #786432	; 0xc0000
 1e8:	3c060104 	stfccs	f0, [r6], {4}
 1ec:	08024c06 	stmdaeq	r2, {r1, r2, sl, fp, lr}
 1f0:	83010100 	movwhi	r0, #4352	; 0x1100
 1f4:	02000000 	andeq	r0, r0, #0
 1f8:	00005500 	andeq	r5, r0, r0, lsl #10
 1fc:	fb010200 	blx	40a06 <startup-0x1ffbf5fa>
 200:	01000d0e 	tsteq	r0, lr, lsl #26
 204:	00010101 	andeq	r0, r1, r1, lsl #2
 208:	00010000 	andeq	r0, r1, r0
 20c:	3a430100 	bcc	10c0614 <startup-0x1ef3f9ec>
 210:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 214:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
 218:	6572646e 	ldrbvs	r6, [r2, #-1134]!	; 0xfffffb92
 21c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 220:	706f746b 	rsbvc	r7, pc, fp, ror #8
 224:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 228:	5f303933 	svcpl	0x00303933
 22c:	6262616c 	rsbvs	r6, r2, #108, 2
 230:	2f34765f 	svccs	0x0034765f
 234:	6c657073 	stclvs	0, cr7, [r5], #-460	; 0xfffffe34
 238:	616d0000 	cmnvs	sp, r0
 23c:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
 240:	00000100 	andeq	r0, r0, r0, lsl #2
 244:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 248:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
 24c:	00010068 	andeq	r0, r1, r8, rrx
 250:	05000000 	streq	r0, [r0, #-0]
 254:	00000002 	andeq	r0, r0, r2
 258:	01090320 	tsteq	r9, r0, lsr #6
 25c:	03025e13 	movweq	r5, #11795	; 0x2e13
 260:	00010100 	andeq	r0, r1, r0, lsl #2
 264:	06000205 	streq	r0, [r0], -r5, lsl #4
 268:	22032000 	andcs	r2, r3, #0
 26c:	342f5901 	strtcc	r5, [pc], #-2305	; 274 <startup-0x1ffffd8c>
 270:	01040200 	mrseq	r0, R12_usr
 274:	00090268 	andeq	r0, r9, r8, ror #4
 278:	00a60101 	adceq	r0, r6, r1, lsl #2
 27c:	00020000 	andeq	r0, r2, r0
 280:	00000058 	andeq	r0, r0, r8, asr r0
 284:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 288:	0101000d 	tsteq	r1, sp
 28c:	00000101 	andeq	r0, r0, r1, lsl #2
 290:	00000100 	andeq	r0, r0, r0, lsl #2
 294:	2f3a4301 	svccs	0x003a4301
 298:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 29c:	6e412f73 	mcrvs	15, 2, r2, cr1, cr3, {3}
 2a0:	2f657264 	svccs	0x00657264
 2a4:	6b736544 	blvs	1cd97bc <startup-0x1e326844>
 2a8:	2f706f74 	svccs	0x00706f74
 2ac:	33544144 	cmpcc	r4, #68, 2
 2b0:	6c5f3039 	mrrcvs	0, 3, r3, pc, cr9	; <UNPREDICTABLE>
 2b4:	5f626261 	svcpl	0x00626261
 2b8:	732f3476 			; <UNDEFINED> instruction: 0x732f3476
 2bc:	006c6570 	rsbeq	r6, ip, r0, ror r5
 2c0:	72747300 	rsbsvc	r7, r4, #0, 6
 2c4:	73746375 	cmnvc	r4, #-738197503	; 0xd4000001
 2c8:	0100632e 	tsteq	r0, lr, lsr #6
 2cc:	74730000 	ldrbtvc	r0, [r3], #-0
 2d0:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 2d4:	00682e70 	rsbeq	r2, r8, r0, ror lr
 2d8:	00000001 	andeq	r0, r0, r1
 2dc:	30020500 	andcc	r0, r2, r0, lsl #10
 2e0:	15200006 	strne	r0, [r0, #-6]!
 2e4:	4c3d3d67 	ldcmi	13, cr3, [sp], #-412	; 0xfffffe64
 2e8:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 2ec:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 2f0:	8f080304 	svchi	0x00080304
 2f4:	01040200 	mrseq	r0, R12_usr
 2f8:	69063c06 	stmdbvs	r6, {r1, r2, sl, fp, ip, sp}
 2fc:	02004b4c 	andeq	r4, r0, #76, 22	; 0x13000
 300:	003d0304 	eorseq	r0, sp, r4, lsl #6
 304:	08030402 	stmdaeq	r3, {r1, sl}
 308:	0402008f 	streq	r0, [r2], #-143	; 0xffffff71
 30c:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 310:	5a4b4c69 	bpl	12d34bc <startup-0x1ed2cb44>
 314:	a04ba04b 	subge	sl, fp, fp, asr #32
 318:	a04ba04b 	subge	sl, fp, fp, asr #32
 31c:	02597575 	subseq	r7, r9, #490733568	; 0x1d400000
 320:	01010004 	tsteq	r1, r4

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	616c6564 	cmnvs	ip, r4, ror #10
   4:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
   8:	00696c6c 	rsbeq	r6, r9, ip, ror #24
   c:	20554e47 	subscs	r4, r5, r7, asr #28
  10:	20393943 	eorscs	r3, r9, r3, asr #18
  14:	2e322e37 	mrccs	14, 1, r2, cr2, cr7, {1}
  18:	30322031 	eorscc	r2, r2, r1, lsr r0
  1c:	39303731 	ldmdbcc	r0!, {r0, r4, r5, r8, r9, sl, ip, sp}
  20:	28203430 	stmdacs	r0!, {r4, r5, sl, ip, sp}
  24:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  28:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  2c:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
  30:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
  34:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
  38:	372d6465 	strcc	r6, [sp, -r5, ror #8]!
  3c:	6172622d 	cmnvs	r2, sp, lsr #4
  40:	2068636e 	rsbcs	r6, r8, lr, ror #6
  44:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  48:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  4c:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
  50:	5d343032 	ldcpl	0, cr3, [r4, #-200]!	; 0xffffff38
  54:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  58:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  5c:	616d2d20 	cmnvs	sp, r0, lsr #26
  60:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  64:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  68:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  6c:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  70:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  74:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  78:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  7c:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  80:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  84:	616d2d20 	cmnvs	sp, r0, lsr #26
  88:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  8c:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  90:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  94:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
  98:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
  9c:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
  a0:	00393963 	eorseq	r3, r9, r3, ror #18
  a4:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  a8:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  ac:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
  b0:	6c656400 	cfstrdvs	mvd6, [r5], #-0
  b4:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
  b8:	736e3035 	cmnvc	lr, #53	; 0x35
  bc:	6c656400 	cfstrdvs	mvd6, [r5], #-0
  c0:	355f7961 	ldrbcc	r7, [pc, #-2401]	; fffff767 <ball+0xdfffea63>
  c4:	736e3030 	cmnvc	lr, #48	; 0x30
  c8:	5c3a4300 	ldcpl	3, cr4, [sl], #-0
  cc:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
  d0:	6e415c73 	mcrvs	12, 2, r5, cr1, cr3, {3}
  d4:	5c657264 	sfmpl	f7, 2, [r5], #-400	; 0xfffffe70
  d8:	6b736544 	blvs	1cd95f0 <startup-0x1e326a10>
  dc:	5c706f74 	ldclpl	15, cr6, [r0], #-464	; 0xfffffe30
  e0:	33544144 	cmpcc	r4, #68, 2
  e4:	6c5f3039 	mrrcvs	0, 3, r3, pc, cr9	; <UNPREDICTABLE>
  e8:	5f626261 	svcpl	0x00626261
  ec:	735c3476 	cmpvc	ip, #1979711488	; 0x76000000
  f0:	006c6570 	rsbeq	r6, ip, r0, ror r5
  f4:	616c6564 	cmnvs	ip, r4, ror #10
  f8:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
  fc:	006f7263 	rsbeq	r7, pc, r3, ror #4
 100:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 104:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 108:	61686320 	cmnvs	r8, r0, lsr #6
 10c:	3a430072 	bcc	10c02dc <startup-0x1ef3fd24>
 110:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 114:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
 118:	6572646e 	ldrbvs	r6, [r2, #-1134]!	; 0xfffffb92
 11c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 120:	706f746b 	rsbvc	r7, pc, fp, ror #8
 124:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 128:	5f303933 	svcpl	0x00303933
 12c:	6262616c 	rsbvs	r6, r2, #108, 2
 130:	2f34765f 	svccs	0x0034765f
 134:	6c657073 	stclvs	0, cr7, [r5], #-460	; 0xfffffe34
 138:	6c65642f 	cfstrdvs	mvd6, [r5], #-188	; 0xffffff44
 13c:	2e737961 	vsubcs.f16	s15, s6, s3	; <UNPREDICTABLE>
 140:	61700063 	cmnvs	r0, r3, rrx
 144:	43006567 	movwmi	r6, #1383	; 0x567
 148:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 14c:	2f737265 	svccs	0x00737265
 150:	72646e41 	rsbvc	r6, r4, #1040	; 0x410
 154:	65442f65 	strbvs	r2, [r4, #-3941]	; 0xfffff09b
 158:	6f746b73 	svcvs	0x00746b73
 15c:	41442f70 	hvcmi	17136	; 0x42f0
 160:	30393354 	eorscc	r3, r9, r4, asr r3
 164:	62616c5f 	rsbvs	r6, r1, #24320	; 0x5f00
 168:	34765f62 	ldrbtcc	r5, [r6], #-3938	; 0xfffff09e
 16c:	6570732f 	ldrbvs	r7, [r0, #-815]!	; 0xfffffcd1
 170:	72672f6c 	rsbvc	r2, r7, #108, 30	; 0x1b0
 174:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 178:	632e7363 			; <UNDEFINED> instruction: 0x632e7363
 17c:	72646100 	rsbvc	r6, r4, #0, 2
 180:	00737365 	rsbseq	r7, r3, r5, ror #6
 184:	61656c63 	cmnvs	r5, r3, ror #24
 188:	61625f72 	smcvs	9714	; 0x25f2
 18c:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
 190:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 194:	6c617600 	stclvs	6, cr7, [r1], #-0
 198:	67006575 	smlsdxvs	r0, r5, r5, r6
 19c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 1a0:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 1a4:	5f646165 	svcpl	0x00646165
 1a8:	61746164 	cmnvs	r4, r4, ror #2
 1ac:	61726700 	cmnvs	r2, r0, lsl #14
 1b0:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 1b4:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 1b8:	73006574 	movwvc	r6, #1396	; 0x574
 1bc:	63656c65 	cmnvs	r5, #25856	; 0x6500
 1c0:	6f635f74 	svcvs	0x00635f74
 1c4:	6f72746e 	svcvs	0x0072746e
 1c8:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 1cc:	61726700 	cmnvs	r2, r0, lsl #14
 1d0:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 1d4:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 1d8:	72670074 	rsbvc	r0, r7, #116	; 0x74
 1dc:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 1e0:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 1e4:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 1e8:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
 1ec:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 1f0:	61726700 	cmnvs	r2, r0, lsl #14
 1f4:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 1f8:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 1fc:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 200:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
 204:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
 208:	5f38746e 	svcpl	0x0038746e
 20c:	69700074 	ldmdbvs	r0!, {r2, r4, r5, r6}^
 210:	006c6578 	rsbeq	r6, ip, r8, ror r5
 214:	6b73616d 	blvs	1cd87d0 <startup-0x1e327830>
 218:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
 21c:	67007865 	strvs	r7, [r0, -r5, ror #16]
 220:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 224:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 228:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 22c:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 230:	72670061 	rsbvc	r0, r7, #97	; 0x61
 234:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 238:	72645f63 	rsbvc	r5, r4, #396	; 0x18c
 23c:	735f7761 	cmpvc	pc, #25427968	; 0x1840000
 240:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
 244:	7267006e 	rsbvc	r0, r7, #110	; 0x6e
 248:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 24c:	61775f63 	cmnvs	r7, r3, ror #30
 250:	725f7469 	subsvc	r7, pc, #1761607680	; 0x69000000
 254:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
 258:	61726700 	cmnvs	r2, r0, lsl #14
 25c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 260:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 264:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
 268:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
 26c:	7267006e 	rsbvc	r0, r7, #110	; 0x6e
 270:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 274:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 278:	67006461 	strvs	r6, [r0, -r1, ror #8]
 27c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 280:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 284:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 288:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 114 <startup-0x1ffffeec>
 28c:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 290:	61726400 	cmnvs	r2, r0, lsl #8
 294:	65730077 	ldrbvs	r0, [r3, #-119]!	; 0xffffff89
 298:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 29c:	00646565 	rsbeq	r6, r4, r5, ror #10
 2a0:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 2a4:	6f65675f 	svcvs	0x0065675f
 2a8:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 2ac:	50740079 	rsbspl	r0, r4, r9, ror r0
 2b0:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 2b4:	72696400 	rsbvc	r6, r9, #0, 8
 2b8:	69730078 	ldmdbvs	r3!, {r3, r4, r5, r6}^
 2bc:	0078657a 	rsbseq	r6, r8, sl, ror r5
 2c0:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 2c4:	47500079 			; <UNDEFINED> instruction: 0x47500079
 2c8:	454d4f45 	strbmi	r4, [sp, #-3909]	; 0xfffff0bb
 2cc:	00595254 	subseq	r5, r9, r4, asr r2
 2d0:	79736f70 	ldmdbvc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 2d4:	65477400 	strbvs	r7, [r7, #-1024]	; 0xfffffc00
 2d8:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 2dc:	61007972 	tstvs	r0, r2, ror r9
 2e0:	00766772 	rsbseq	r6, r6, r2, ror r7
 2e4:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 2e8:	00707574 	rsbseq	r7, r0, r4, ror r5
 2ec:	63677261 	cmnvs	r7, #268435462	; 0x10000006
 2f0:	72696400 	rsbvc	r6, r9, #0, 8
 2f4:	756e0079 	strbvc	r0, [lr, #-121]!	; 0xffffff87
 2f8:	696f706d 	stmdbvs	pc!, {r0, r2, r3, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
 2fc:	0073746e 	rsbseq	r7, r3, lr, ror #8
 300:	6e69616d 	powvsez	f6, f1, #5.0
 304:	424f5000 	submi	r5, pc, #0
 308:	5443454a 	strbpl	r4, [r3], #-1354	; 0xfffffab6
 30c:	6c616200 	sfmvs	f6, 2, [r1], #-0
 310:	3a43006c 	bcc	10c04c8 <startup-0x1ef3fb38>
 314:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 318:	412f7372 			; <UNDEFINED> instruction: 0x412f7372
 31c:	6572646e 	ldrbvs	r6, [r2, #-1134]!	; 0xfffffb92
 320:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
 324:	706f746b 	rsbvc	r7, pc, fp, ror #8
 328:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 32c:	5f303933 	svcpl	0x00303933
 330:	6262616c 	rsbvs	r6, r2, #108, 2
 334:	2f34765f 	svccs	0x0034765f
 338:	6c657073 	stclvs	0, cr7, [r5], #-460	; 0xfffffe34
 33c:	69616d2f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r8, sl, fp, sp, lr}^
 340:	00632e6e 	rsbeq	r2, r3, lr, ror #28
 344:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 348:	494f5000 	stmdbmi	pc, {ip, lr}^	; <UNPREDICTABLE>
 34c:	7000544e 	andvc	r5, r0, lr, asr #8
 350:	0078736f 	rsbseq	r7, r8, pc, ror #6
 354:	6a624f74 	bvs	189412c <startup-0x1e76bed4>
 358:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 35c:	00786465 	rsbseq	r6, r8, r5, ror #8
 360:	5f746573 	svcpl	0x00746573
 364:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 368:	735f7463 	cmpvc	pc, #1660944384	; 0x63000000
 36c:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 370:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 374:	00796465 	rsbseq	r6, r9, r5, ror #8
 378:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 37c:	6a626f5f 	bvs	189c100 <startup-0x1e763f00>
 380:	00746365 	rsbseq	r6, r4, r5, ror #6
 384:	61656c63 	cmnvs	r5, r3, ror #24
 388:	626f5f72 	rsbvs	r5, pc, #456	; 0x1c8
 38c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 390:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 394:	626f5f65 	rsbvs	r5, pc, #404	; 0x194
 398:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 39c:	2f3a4300 	svccs	0x003a4300
 3a0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 3a4:	6e412f73 	mcrvs	15, 2, r2, cr1, cr3, {3}
 3a8:	2f657264 	svccs	0x00657264
 3ac:	6b736544 	blvs	1cd98c4 <startup-0x1e32673c>
 3b0:	2f706f74 	svccs	0x00706f74
 3b4:	33544144 	cmpcc	r4, #68, 2
 3b8:	6c5f3039 	mrrcvs	0, 3, r3, pc, cr9	; <UNPREDICTABLE>
 3bc:	5f626261 	svcpl	0x00626261
 3c0:	732f3476 			; <UNDEFINED> instruction: 0x732f3476
 3c4:	2f6c6570 	svccs	0x006c6570
 3c8:	75727473 	ldrbvc	r7, [r2, #-1139]!	; 0xfffffb8d
 3cc:	2e737463 	cdpcs	4, 7, cr7, cr3, cr3, {3}
 3d0:	Address 0x000003d0 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <ball+0xdfffe60a>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000018 	andeq	r0, r0, r8, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000044 	andeq	r0, r0, r4, asr #32
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  2c:	0000001c 	andeq	r0, r0, ip, lsl r0
  30:	00000000 	andeq	r0, r0, r0
  34:	20000054 	andcs	r0, r0, r4, asr r0
  38:	0000002c 	andeq	r0, r0, ip, lsr #32
  3c:	40080e41 	andmi	r0, r8, r1, asr #28
  40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  44:	100e4101 	andne	r4, lr, r1, lsl #2
  48:	00070d41 	andeq	r0, r7, r1, asr #26
  4c:	0000001c 	andeq	r0, r0, ip, lsl r0
  50:	00000000 	andeq	r0, r0, r0
  54:	20000080 	andcs	r0, r0, r0, lsl #1
  58:	0000003a 	andeq	r0, r0, sl, lsr r0
  5c:	40080e41 	andmi	r0, r8, r1, asr #28
  60:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  64:	100e4101 	andne	r4, lr, r1, lsl #2
  68:	00070d41 	andeq	r0, r7, r1, asr #26
  6c:	00000018 	andeq	r0, r0, r8, lsl r0
  70:	00000000 	andeq	r0, r0, r0
  74:	200000ba 	strhcs	r0, [r0], -sl
  78:	00000012 	andeq	r0, r0, r2, lsl r0
  7c:	40080e41 	andmi	r0, r8, r1, asr #28
  80:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  84:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  88:	0000000c 	andeq	r0, r0, ip
  8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  90:	7c020001 	stcvc	0, cr0, [r2], {1}
  94:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	00000088 	andeq	r0, r0, r8, lsl #1
  a0:	200000cc 	andcs	r0, r0, ip, asr #1
  a4:	00000038 	andeq	r0, r0, r8, lsr r0
  a8:	40080e41 	andmi	r0, r8, r1, asr #28
  ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b0:	100e4101 	andne	r4, lr, r1, lsl #2
  b4:	00070d41 	andeq	r0, r7, r1, asr #26
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000088 	andeq	r0, r0, r8, lsl #1
  c0:	20000104 	andcs	r0, r0, r4, lsl #2
  c4:	0000003c 	andeq	r0, r0, ip, lsr r0
  c8:	40080e41 	andmi	r0, r8, r1, asr #28
  cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d0:	100e4101 	andne	r4, lr, r1, lsl #2
  d4:	00070d41 	andeq	r0, r7, r1, asr #26
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000088 	andeq	r0, r0, r8, lsl #1
  e0:	20000140 	andcs	r0, r0, r0, asr #2
  e4:	0000005a 	andeq	r0, r0, sl, asr r0
  e8:	40080e41 	andmi	r0, r8, r1, asr #28
  ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f0:	100e4101 	andne	r4, lr, r1, lsl #2
  f4:	00070d41 	andeq	r0, r7, r1, asr #26
  f8:	00000018 	andeq	r0, r0, r8, lsl r0
  fc:	00000088 	andeq	r0, r0, r8, lsl #1
 100:	2000019a 	mulcs	r0, sl, r1
 104:	00000066 	andeq	r0, r0, r6, rrx
 108:	40080e41 	andmi	r0, r8, r1, asr #28
 10c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 110:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 114:	0000001c 	andeq	r0, r0, ip, lsl r0
 118:	00000088 	andeq	r0, r0, r8, lsl #1
 11c:	20000200 	andcs	r0, r0, r0, lsl #4
 120:	0000008c 	andeq	r0, r0, ip, lsl #1
 124:	40080e41 	andmi	r0, r8, r1, asr #28
 128:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 12c:	180e4101 	stmdane	lr, {r0, r8, lr}
 130:	00070d41 	andeq	r0, r7, r1, asr #26
 134:	0000001c 	andeq	r0, r0, ip, lsl r0
 138:	00000088 	andeq	r0, r0, r8, lsl #1
 13c:	2000028c 	andcs	r0, r0, ip, lsl #5
 140:	00000080 	andeq	r0, r0, r0, lsl #1
 144:	40080e41 	andmi	r0, r8, r1, asr #28
 148:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 14c:	100e4101 	andne	r4, lr, r1, lsl #2
 150:	00070d41 	andeq	r0, r7, r1, asr #26
 154:	0000001c 	andeq	r0, r0, ip, lsl r0
 158:	00000088 	andeq	r0, r0, r8, lsl #1
 15c:	2000030c 	andcs	r0, r0, ip, lsl #6
 160:	00000040 	andeq	r0, r0, r0, asr #32
 164:	40080e41 	andmi	r0, r8, r1, asr #28
 168:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 16c:	100e4101 	andne	r4, lr, r1, lsl #2
 170:	00070d41 	andeq	r0, r7, r1, asr #26
 174:	0000001c 	andeq	r0, r0, ip, lsl r0
 178:	00000088 	andeq	r0, r0, r8, lsl #1
 17c:	2000034c 	andcs	r0, r0, ip, asr #6
 180:	00000046 	andeq	r0, r0, r6, asr #32
 184:	40080e41 	andmi	r0, r8, r1, asr #28
 188:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 18c:	100e4101 	andne	r4, lr, r1, lsl #2
 190:	00070d41 	andeq	r0, r7, r1, asr #26
 194:	0000001c 	andeq	r0, r0, ip, lsl r0
 198:	00000088 	andeq	r0, r0, r8, lsl #1
 19c:	20000392 	mulcs	r0, r2, r3
 1a0:	0000002a 	andeq	r0, r0, sl, lsr #32
 1a4:	40080e41 	andmi	r0, r8, r1, asr #28
 1a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1ac:	100e4101 	andne	r4, lr, r1, lsl #2
 1b0:	00070d41 	andeq	r0, r7, r1, asr #26
 1b4:	00000018 	andeq	r0, r0, r8, lsl r0
 1b8:	00000088 	andeq	r0, r0, r8, lsl #1
 1bc:	200003bc 			; <UNDEFINED> instruction: 0x200003bc
 1c0:	00000064 	andeq	r0, r0, r4, rrx
 1c4:	40080e41 	andmi	r0, r8, r1, asr #28
 1c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1cc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d4:	00000088 	andeq	r0, r0, r8, lsl #1
 1d8:	20000420 	andcs	r0, r0, r0, lsr #8
 1dc:	00000058 	andeq	r0, r0, r8, asr r0
 1e0:	40080e41 	andmi	r0, r8, r1, asr #28
 1e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1e8:	100e4101 	andne	r4, lr, r1, lsl #2
 1ec:	00070d41 	andeq	r0, r7, r1, asr #26
 1f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f4:	00000088 	andeq	r0, r0, r8, lsl #1
 1f8:	20000478 	andcs	r0, r0, r8, ror r4
 1fc:	00000088 	andeq	r0, r0, r8, lsl #1
 200:	40080e41 	andmi	r0, r8, r1, asr #28
 204:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 208:	180e4101 	stmdane	lr, {r0, r8, lr}
 20c:	00070d41 	andeq	r0, r7, r1, asr #26
 210:	0000001c 	andeq	r0, r0, ip, lsl r0
 214:	00000088 	andeq	r0, r0, r8, lsl #1
 218:	20000500 	andcs	r0, r0, r0, lsl #10
 21c:	000000cc 	andeq	r0, r0, ip, asr #1
 220:	40080e41 	andmi	r0, r8, r1, asr #28
 224:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 228:	180e4101 	stmdane	lr, {r0, r8, lr}
 22c:	00070d41 	andeq	r0, r7, r1, asr #26
 230:	0000001c 	andeq	r0, r0, ip, lsl r0
 234:	00000088 	andeq	r0, r0, r8, lsl #1
 238:	200005cc 	andcs	r0, r0, ip, asr #11
 23c:	00000034 	andeq	r0, r0, r4, lsr r0
 240:	40080e41 	andmi	r0, r8, r1, asr #28
 244:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 248:	100e4101 	andne	r4, lr, r1, lsl #2
 24c:	00070d41 	andeq	r0, r7, r1, asr #26
 250:	0000000c 	andeq	r0, r0, ip
 254:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 258:	7c020001 	stcvc	0, cr0, [r2], {1}
 25c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 260:	0000000c 	andeq	r0, r0, ip
 264:	00000250 	andeq	r0, r0, r0, asr r2
 268:	20000000 	andcs	r0, r0, r0
 26c:	0000000c 	andeq	r0, r0, ip
 270:	0000001c 	andeq	r0, r0, ip, lsl r0
 274:	00000250 	andeq	r0, r0, r0, asr r2
 278:	20000600 	andcs	r0, r0, r0, lsl #12
 27c:	00000030 	andeq	r0, r0, r0, lsr r0
 280:	40080e41 	andmi	r0, r8, r1, asr #28
 284:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 288:	180e4101 	stmdane	lr, {r0, r8, lr}
 28c:	00070d41 	andeq	r0, r7, r1, asr #26
 290:	0000000c 	andeq	r0, r0, ip
 294:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 298:	7c020001 	stcvc	0, cr0, [r2], {1}
 29c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a4:	00000290 	muleq	r0, r0, r2
 2a8:	20000630 	andcs	r0, r0, r0, lsr r6
 2ac:	00000020 	andeq	r0, r0, r0, lsr #32
 2b0:	40080e41 	andmi	r0, r8, r1, asr #28
 2b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b8:	180e4101 	stmdane	lr, {r0, r8, lr}
 2bc:	00070d41 	andeq	r0, r7, r1, asr #26
 2c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c4:	00000290 	muleq	r0, r0, r2
 2c8:	20000650 	andcs	r0, r0, r0, asr r6
 2cc:	0000005c 	andeq	r0, r0, ip, asr r0
 2d0:	40080e41 	andmi	r0, r8, r1, asr #28
 2d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d8:	180e4101 	stmdane	lr, {r0, r8, lr}
 2dc:	00070d41 	andeq	r0, r7, r1, asr #26
 2e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2e4:	00000290 	muleq	r0, r0, r2
 2e8:	200006ac 	andcs	r0, r0, ip, lsr #13
 2ec:	0000005c 	andeq	r0, r0, ip, asr r0
 2f0:	40080e41 	andmi	r0, r8, r1, asr #28
 2f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2f8:	180e4101 	stmdane	lr, {r0, r8, lr}
 2fc:	00070d41 	andeq	r0, r7, r1, asr #26
 300:	00000020 	andeq	r0, r0, r0, lsr #32
 304:	00000290 	muleq	r0, r0, r2
 308:	20000708 	andcs	r0, r0, r8, lsl #14
 30c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 310:	400c0e41 	andmi	r0, ip, r1, asr #28
 314:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 318:	018e4002 	orreq	r4, lr, r2
 31c:	41180e41 	tstmi	r8, r1, asr #28
 320:	0000070d 	andeq	r0, r0, sp, lsl #14
 324:	0000000c 	andeq	r0, r0, ip
 328:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 32c:	7c010001 	stcvc	0, cr0, [r1], {1}
 330:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 334:	0000000c 	andeq	r0, r0, ip
 338:	00000324 	andeq	r0, r0, r4, lsr #6
 33c:	200007b9 			; <UNDEFINED> instruction: 0x200007b9
 340:	0000010a 	andeq	r0, r0, sl, lsl #2

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000600 	andcs	r0, r0, r0, lsl #12
   4:	20000630 	andcs	r0, r0, r0, lsr r6
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
