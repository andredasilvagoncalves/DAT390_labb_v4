
./Debug/sys_tick.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f8f6 	bl	200001f4 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250ns>:
 *
 */

#include "startup.h"

void delay_250ns(void){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	STK_CTRL = 0;
20000014:	4b0c      	ldr	r3, [pc, #48]	; (20000048 <delay_250ns+0x38>)
20000016:	2200      	movs	r2, #0
20000018:	601a      	str	r2, [r3, #0]
	STK_LOAD = ((168/4) - 1);
2000001a:	4b0c      	ldr	r3, [pc, #48]	; (2000004c <delay_250ns+0x3c>)
2000001c:	2229      	movs	r2, #41	; 0x29
2000001e:	601a      	str	r2, [r3, #0]
	STK_VAL = 0;
20000020:	4b0b      	ldr	r3, [pc, #44]	; (20000050 <delay_250ns+0x40>)
20000022:	2200      	movs	r2, #0
20000024:	601a      	str	r2, [r3, #0]
	STK_CTRL = 5;
20000026:	4b08      	ldr	r3, [pc, #32]	; (20000048 <delay_250ns+0x38>)
20000028:	2205      	movs	r2, #5
2000002a:	601a      	str	r2, [r3, #0]
	
	while((STK_CTRL & 0x10000) == 0){};
2000002c:	46c0      	nop			; (mov r8, r8)
2000002e:	4b06      	ldr	r3, [pc, #24]	; (20000048 <delay_250ns+0x38>)
20000030:	681a      	ldr	r2, [r3, #0]
20000032:	2380      	movs	r3, #128	; 0x80
20000034:	025b      	lsls	r3, r3, #9
20000036:	4013      	ands	r3, r2
20000038:	d0f9      	beq.n	2000002e <delay_250ns+0x1e>
	STK_CTRL = 0;
2000003a:	4b03      	ldr	r3, [pc, #12]	; (20000048 <delay_250ns+0x38>)
2000003c:	2200      	movs	r2, #0
2000003e:	601a      	str	r2, [r3, #0]
}
20000040:	46c0      	nop			; (mov r8, r8)
20000042:	46bd      	mov	sp, r7
20000044:	bd80      	pop	{r7, pc}
20000046:	46c0      	nop			; (mov r8, r8)
20000048:	e000e010 	and	lr, r0, r0, lsl r0
2000004c:	e000e014 	and	lr, r0, r4, lsl r0
20000050:	e000e018 	and	lr, r0, r8, lsl r0

20000054 <delay_micro>:

void delay_micro(unsigned int us){
20000054:	b580      	push	{r7, lr}
20000056:	b082      	sub	sp, #8
20000058:	af00      	add	r7, sp, #0
2000005a:	6078      	str	r0, [r7, #4]
	while(us--){
2000005c:	e007      	b.n	2000006e <delay_micro+0x1a>
		delay_250ns();
2000005e:	f7ff ffd7 	bl	20000010 <delay_250ns>
		delay_250ns();
20000062:	f7ff ffd5 	bl	20000010 <delay_250ns>
		delay_250ns(); 
20000066:	f7ff ffd3 	bl	20000010 <delay_250ns>
		delay_250ns();
2000006a:	f7ff ffd1 	bl	20000010 <delay_250ns>
	while(us--){
2000006e:	687b      	ldr	r3, [r7, #4]
20000070:	1e5a      	subs	r2, r3, #1
20000072:	607a      	str	r2, [r7, #4]
20000074:	2b00      	cmp	r3, #0
20000076:	d1f2      	bne.n	2000005e <delay_micro+0xa>
	}
}
20000078:	46c0      	nop			; (mov r8, r8)
2000007a:	46bd      	mov	sp, r7
2000007c:	b002      	add	sp, #8
2000007e:	bd80      	pop	{r7, pc}

20000080 <delay_milli>:

void delay_milli(unsigned int ms){
20000080:	b580      	push	{r7, lr}
20000082:	b082      	sub	sp, #8
20000084:	af00      	add	r7, sp, #0
20000086:	6078      	str	r0, [r7, #4]

#ifdef SIMULATOR
	ms = ms / 100;
20000088:	687b      	ldr	r3, [r7, #4]
2000008a:	2164      	movs	r1, #100	; 0x64
2000008c:	0018      	movs	r0, r3
2000008e:	f000 f8d9 	bl	20000244 <__udivsi3>
20000092:	0003      	movs	r3, r0
20000094:	607b      	str	r3, [r7, #4]
	ms++;
20000096:	687b      	ldr	r3, [r7, #4]
20000098:	3301      	adds	r3, #1
2000009a:	607b      	str	r3, [r7, #4]
#endif
	
	while( ms-- )
2000009c:	e004      	b.n	200000a8 <delay_milli+0x28>
		delay_micro(1000);
2000009e:	23fa      	movs	r3, #250	; 0xfa
200000a0:	009b      	lsls	r3, r3, #2
200000a2:	0018      	movs	r0, r3
200000a4:	f7ff ffd6 	bl	20000054 <delay_micro>
	while( ms-- )
200000a8:	687b      	ldr	r3, [r7, #4]
200000aa:	1e5a      	subs	r2, r3, #1
200000ac:	607a      	str	r2, [r7, #4]
200000ae:	2b00      	cmp	r3, #0
200000b0:	d1f5      	bne.n	2000009e <delay_milli+0x1e>
}
200000b2:	46c0      	nop			; (mov r8, r8)
200000b4:	46bd      	mov	sp, r7
200000b6:	b002      	add	sp, #8
200000b8:	bd80      	pop	{r7, pc}

200000ba <delay_500ns>:

void delay_500ns(void){
200000ba:	b580      	push	{r7, lr}
200000bc:	af00      	add	r7, sp, #0
	delay_250ns();
200000be:	f7ff ffa7 	bl	20000010 <delay_250ns>
	delay_250ns();
200000c2:	f7ff ffa5 	bl	20000010 <delay_250ns>
200000c6:	46c0      	nop			; (mov r8, r8)
200000c8:	46bd      	mov	sp, r7
200000ca:	bd80      	pop	{r7, pc}

200000cc <getPsrReg>:

__attribute__((naked)) unsigned int getPsrReg (void)
{
	__asm (
200000cc:	f3ef 8000 	mrs	r0, CPSR
200000d0:	4770      	bx	lr
	" MRS	R0, APSR\n"
	" BX	LR\n"
	);
}
200000d2:	46c0      	nop			; (mov r8, r8)
200000d4:	0018      	movs	r0, r3

200000d6 <getControlReg>:

__attribute__((naked)) unsigned int getControlReg (void)
{
	__asm (
200000d6:	f3ef 8014 	mrs	r0, CONTROL
200000da:	4770      	bx	lr
	" MRS	R0, CONTROL\n"
	" BX	LR\n"
	);
}
200000dc:	46c0      	nop			; (mov r8, r8)
200000de:	0018      	movs	r0, r3

200000e0 <setPsrReg>:

__attribute__((naked)) void setPsrReg (unsigned int apsr)
{
	__asm (
200000e0:	f380 8800 	msr	CPSR_f, r0
200000e4:	4770      	bx	lr
	" MSR	APSR, R0\n"
	" BX	LR\n"
	);
}
200000e6:	46c0      	nop			; (mov r8, r8)

200000e8 <setControlReg>:

__attribute__((naked)) void setControlReg (unsigned int ctrlReg)
{
	__asm (
200000e8:	f380 8814 	msr	CONTROL, r0
200000ec:	4770      	bx	lr
	" MSR	CONTROL, R0\n"
	" BX	LR\n"
	);
}
200000ee:	46c0      	nop			; (mov r8, r8)

200000f0 <setUnprivileged>:

void setUnprivileged(void){
200000f0:	b580      	push	{r7, lr}
200000f2:	af00      	add	r7, sp, #0
	setControlReg(getControlReg() | 2);
200000f4:	f7ff ffef 	bl	200000d6 <getControlReg>
200000f8:	0002      	movs	r2, r0
200000fa:	2302      	movs	r3, #2
200000fc:	4313      	orrs	r3, r2
200000fe:	0018      	movs	r0, r3
20000100:	f7ff fff2 	bl	200000e8 <setControlReg>
}
20000104:	46c0      	nop			; (mov r8, r8)
20000106:	46bd      	mov	sp, r7
20000108:	bd80      	pop	{r7, pc}

2000010a <enable_interrupt>:

__attribute__((naked)) void enable_interrupt (void)
{
	__asm volatile(
2000010a:	b662      	cpsie	i
2000010c:	4770      	bx	lr
	" CPSIE	I\n"
	" BX	LR\n"
	);
}
2000010e:	46c0      	nop			; (mov r8, r8)

20000110 <disable_interrupt>:

__attribute__((naked)) void disable_interrupt (void)
{
	__asm volatile(
20000110:	b672      	cpsid	i
20000112:	4770      	bx	lr
	" CPSID	I\n"
	" BX	LR\n"
	);
}
20000114:	46c0      	nop			; (mov r8, r8)

20000116 <delay_1mikro>:


static int systick_flag;
static int delay_count;

void delay_1mikro(){
20000116:	b580      	push	{r7, lr}
20000118:	af00      	add	r7, sp, #0
	systick_flag = 0;
2000011a:	4b09      	ldr	r3, [pc, #36]	; (20000140 <delay_1mikro+0x2a>)
2000011c:	2200      	movs	r2, #0
2000011e:	601a      	str	r2, [r3, #0]
	
	STK_CTRL = 0;
20000120:	4b08      	ldr	r3, [pc, #32]	; (20000144 <delay_1mikro+0x2e>)
20000122:	2200      	movs	r2, #0
20000124:	601a      	str	r2, [r3, #0]
	STK_LOAD = ((168) - 1);
20000126:	4b08      	ldr	r3, [pc, #32]	; (20000148 <delay_1mikro+0x32>)
20000128:	22a7      	movs	r2, #167	; 0xa7
2000012a:	601a      	str	r2, [r3, #0]
	STK_VAL = 0;
2000012c:	4b07      	ldr	r3, [pc, #28]	; (2000014c <delay_1mikro+0x36>)
2000012e:	2200      	movs	r2, #0
20000130:	601a      	str	r2, [r3, #0]
	STK_CTRL = 7;
20000132:	4b04      	ldr	r3, [pc, #16]	; (20000144 <delay_1mikro+0x2e>)
20000134:	2207      	movs	r2, #7
20000136:	601a      	str	r2, [r3, #0]
}
20000138:	46c0      	nop			; (mov r8, r8)
2000013a:	46bd      	mov	sp, r7
2000013c:	bd80      	pop	{r7, pc}
2000013e:	46c0      	nop			; (mov r8, r8)
20000140:	2000035c 	andcs	r0, r0, ip, asr r3
20000144:	e000e010 	and	lr, r0, r0, lsl r0
20000148:	e000e014 	and	lr, r0, r4, lsl r0
2000014c:	e000e018 	and	lr, r0, r8, lsl r0

20000150 <systick_irq_handler>:

void systick_irq_handler(){
20000150:	b580      	push	{r7, lr}
20000152:	af00      	add	r7, sp, #0
	STK_CTRL = 0;
20000154:	4b0a      	ldr	r3, [pc, #40]	; (20000180 <systick_irq_handler+0x30>)
20000156:	2200      	movs	r2, #0
20000158:	601a      	str	r2, [r3, #0]
	delay_count--;
2000015a:	4b0a      	ldr	r3, [pc, #40]	; (20000184 <systick_irq_handler+0x34>)
2000015c:	681b      	ldr	r3, [r3, #0]
2000015e:	1e5a      	subs	r2, r3, #1
20000160:	4b08      	ldr	r3, [pc, #32]	; (20000184 <systick_irq_handler+0x34>)
20000162:	601a      	str	r2, [r3, #0]
	if (delay_count > 0){
20000164:	4b07      	ldr	r3, [pc, #28]	; (20000184 <systick_irq_handler+0x34>)
20000166:	681b      	ldr	r3, [r3, #0]
20000168:	2b00      	cmp	r3, #0
2000016a:	dd02      	ble.n	20000172 <systick_irq_handler+0x22>
		delay_1mikro();
2000016c:	f7ff ffd3 	bl	20000116 <delay_1mikro>
	}
	else
		systick_flag = 1;
}
20000170:	e002      	b.n	20000178 <systick_irq_handler+0x28>
		systick_flag = 1;
20000172:	4b05      	ldr	r3, [pc, #20]	; (20000188 <systick_irq_handler+0x38>)
20000174:	2201      	movs	r2, #1
20000176:	601a      	str	r2, [r3, #0]
}
20000178:	46c0      	nop			; (mov r8, r8)
2000017a:	46bd      	mov	sp, r7
2000017c:	bd80      	pop	{r7, pc}
2000017e:	46c0      	nop			; (mov r8, r8)
20000180:	e000e010 	and	lr, r0, r0, lsl r0
20000184:	20000360 	andcs	r0, r0, r0, ror #6
20000188:	2000035c 	andcs	r0, r0, ip, asr r3

2000018c <delay>:

void delay(unsigned int count){
2000018c:	b580      	push	{r7, lr}
2000018e:	b082      	sub	sp, #8
20000190:	af00      	add	r7, sp, #0
20000192:	6078      	str	r0, [r7, #4]
	delay_count = count;
20000194:	687a      	ldr	r2, [r7, #4]
20000196:	4b06      	ldr	r3, [pc, #24]	; (200001b0 <delay+0x24>)
20000198:	601a      	str	r2, [r3, #0]
	if(delay_count == 0)
2000019a:	4b05      	ldr	r3, [pc, #20]	; (200001b0 <delay+0x24>)
2000019c:	681b      	ldr	r3, [r3, #0]
2000019e:	2b00      	cmp	r3, #0
200001a0:	d002      	beq.n	200001a8 <delay+0x1c>
		return;
	delay_1mikro();
200001a2:	f7ff ffb8 	bl	20000116 <delay_1mikro>
200001a6:	e000      	b.n	200001aa <delay+0x1e>
		return;
200001a8:	46c0      	nop			; (mov r8, r8)
}
200001aa:	46bd      	mov	sp, r7
200001ac:	b002      	add	sp, #8
200001ae:	bd80      	pop	{r7, pc}
200001b0:	20000360 	andcs	r0, r0, r0, ror #6

200001b4 <init_handler>:

void init_handler(){
200001b4:	b580      	push	{r7, lr}
200001b6:	af00      	add	r7, sp, #0
	GPIO_MODER_D = 0x55555555; /* initiera port D och undantagsvektor*/
200001b8:	4b07      	ldr	r3, [pc, #28]	; (200001d8 <init_handler+0x24>)
200001ba:	4a08      	ldr	r2, [pc, #32]	; (200001dc <init_handler+0x28>)
200001bc:	601a      	str	r2, [r3, #0]
	
	#define SCB_VTOR ((volatile unsigned int *) 0xE000ED08) //måste finnas in i en funktion?
		*SCB_VTOR = 0x2001C000;
200001be:	4b08      	ldr	r3, [pc, #32]	; (200001e0 <init_handler+0x2c>)
200001c0:	4a08      	ldr	r2, [pc, #32]	; (200001e4 <init_handler+0x30>)
200001c2:	601a      	str	r2, [r3, #0]
	
	*((void (**) (void)) 0x2001C03C) = systick_irq_handler;
200001c4:	4b08      	ldr	r3, [pc, #32]	; (200001e8 <init_handler+0x34>)
200001c6:	4a09      	ldr	r2, [pc, #36]	; (200001ec <init_handler+0x38>)
200001c8:	601a      	str	r2, [r3, #0]
	systick_flag = 0;
200001ca:	4b09      	ldr	r3, [pc, #36]	; (200001f0 <init_handler+0x3c>)
200001cc:	2200      	movs	r2, #0
200001ce:	601a      	str	r2, [r3, #0]
}
200001d0:	46c0      	nop			; (mov r8, r8)
200001d2:	46bd      	mov	sp, r7
200001d4:	bd80      	pop	{r7, pc}
200001d6:	46c0      	nop			; (mov r8, r8)
200001d8:	40020c00 	andmi	r0, r2, r0, lsl #24
200001dc:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
200001e0:	e000ed08 	and	lr, r0, r8, lsl #26
200001e4:	2001c000 	andcs	ip, r1, r0
200001e8:	2001c03c 	andcs	ip, r1, ip, lsr r0
200001ec:	20000151 	andcs	r0, r0, r1, asr r1
200001f0:	2000035c 	andcs	r0, r0, ip, asr r3

200001f4 <main>:


void main(void)
{
200001f4:	b580      	push	{r7, lr}
200001f6:	af00      	add	r7, sp, #0
	init_handler();
200001f8:	f7ff ffdc 	bl	200001b4 <init_handler>
	GPIO_ODR_D_LOW = 0;
200001fc:	4b0e      	ldr	r3, [pc, #56]	; (20000238 <main+0x44>)
200001fe:	2200      	movs	r2, #0
20000200:	701a      	strb	r2, [r3, #0]
	delay(DELAY_COUNT);
20000202:	23fa      	movs	r3, #250	; 0xfa
20000204:	009b      	lsls	r3, r3, #2
20000206:	0018      	movs	r0, r3
20000208:	f7ff ffc0 	bl	2000018c <delay>
	GPIO_ODR_D_LOW = 0xFF;
2000020c:	4b0a      	ldr	r3, [pc, #40]	; (20000238 <main+0x44>)
2000020e:	22ff      	movs	r2, #255	; 0xff
20000210:	701a      	strb	r2, [r3, #0]
	while(1){
		if (systick_flag)
20000212:	4b0a      	ldr	r3, [pc, #40]	; (2000023c <main+0x48>)
20000214:	681b      	ldr	r3, [r3, #0]
20000216:	2b00      	cmp	r3, #0
20000218:	d107      	bne.n	2000022a <main+0x36>
			break;
		/* Här placeras kod som kan utföras så länge */
		//for (int i =0; i < 1000; i++){};
		GPIO_ODR_D_HIGH ^= 0xFF;
2000021a:	4b09      	ldr	r3, [pc, #36]	; (20000240 <main+0x4c>)
2000021c:	781b      	ldrb	r3, [r3, #0]
2000021e:	b2db      	uxtb	r3, r3
20000220:	4a07      	ldr	r2, [pc, #28]	; (20000240 <main+0x4c>)
20000222:	43db      	mvns	r3, r3
20000224:	b2db      	uxtb	r3, r3
20000226:	7013      	strb	r3, [r2, #0]
		if (systick_flag)
20000228:	e7f3      	b.n	20000212 <main+0x1e>
			break;
2000022a:	46c0      	nop			; (mov r8, r8)
		
	}
	
	/* Här finns koden som väntar på time-out */
	
	GPIO_ODR_D_LOW = 0;
2000022c:	4b02      	ldr	r3, [pc, #8]	; (20000238 <main+0x44>)
2000022e:	2200      	movs	r2, #0
20000230:	701a      	strb	r2, [r3, #0]
}
20000232:	46c0      	nop			; (mov r8, r8)
20000234:	46bd      	mov	sp, r7
20000236:	bd80      	pop	{r7, pc}
20000238:	40020c14 	andmi	r0, r2, r4, lsl ip
2000023c:	2000035c 	andcs	r0, r0, ip, asr r3
20000240:	40020c15 	andmi	r0, r2, r5, lsl ip

20000244 <__udivsi3>:
20000244:	2200      	movs	r2, #0
20000246:	0843      	lsrs	r3, r0, #1
20000248:	428b      	cmp	r3, r1
2000024a:	d374      	bcc.n	20000336 <__udivsi3+0xf2>
2000024c:	0903      	lsrs	r3, r0, #4
2000024e:	428b      	cmp	r3, r1
20000250:	d35f      	bcc.n	20000312 <__udivsi3+0xce>
20000252:	0a03      	lsrs	r3, r0, #8
20000254:	428b      	cmp	r3, r1
20000256:	d344      	bcc.n	200002e2 <__udivsi3+0x9e>
20000258:	0b03      	lsrs	r3, r0, #12
2000025a:	428b      	cmp	r3, r1
2000025c:	d328      	bcc.n	200002b0 <__udivsi3+0x6c>
2000025e:	0c03      	lsrs	r3, r0, #16
20000260:	428b      	cmp	r3, r1
20000262:	d30d      	bcc.n	20000280 <__udivsi3+0x3c>
20000264:	22ff      	movs	r2, #255	; 0xff
20000266:	0209      	lsls	r1, r1, #8
20000268:	ba12      	rev	r2, r2
2000026a:	0c03      	lsrs	r3, r0, #16
2000026c:	428b      	cmp	r3, r1
2000026e:	d302      	bcc.n	20000276 <__udivsi3+0x32>
20000270:	1212      	asrs	r2, r2, #8
20000272:	0209      	lsls	r1, r1, #8
20000274:	d065      	beq.n	20000342 <__udivsi3+0xfe>
20000276:	0b03      	lsrs	r3, r0, #12
20000278:	428b      	cmp	r3, r1
2000027a:	d319      	bcc.n	200002b0 <__udivsi3+0x6c>
2000027c:	e000      	b.n	20000280 <__udivsi3+0x3c>
2000027e:	0a09      	lsrs	r1, r1, #8
20000280:	0bc3      	lsrs	r3, r0, #15
20000282:	428b      	cmp	r3, r1
20000284:	d301      	bcc.n	2000028a <__udivsi3+0x46>
20000286:	03cb      	lsls	r3, r1, #15
20000288:	1ac0      	subs	r0, r0, r3
2000028a:	4152      	adcs	r2, r2
2000028c:	0b83      	lsrs	r3, r0, #14
2000028e:	428b      	cmp	r3, r1
20000290:	d301      	bcc.n	20000296 <__udivsi3+0x52>
20000292:	038b      	lsls	r3, r1, #14
20000294:	1ac0      	subs	r0, r0, r3
20000296:	4152      	adcs	r2, r2
20000298:	0b43      	lsrs	r3, r0, #13
2000029a:	428b      	cmp	r3, r1
2000029c:	d301      	bcc.n	200002a2 <__udivsi3+0x5e>
2000029e:	034b      	lsls	r3, r1, #13
200002a0:	1ac0      	subs	r0, r0, r3
200002a2:	4152      	adcs	r2, r2
200002a4:	0b03      	lsrs	r3, r0, #12
200002a6:	428b      	cmp	r3, r1
200002a8:	d301      	bcc.n	200002ae <__udivsi3+0x6a>
200002aa:	030b      	lsls	r3, r1, #12
200002ac:	1ac0      	subs	r0, r0, r3
200002ae:	4152      	adcs	r2, r2
200002b0:	0ac3      	lsrs	r3, r0, #11
200002b2:	428b      	cmp	r3, r1
200002b4:	d301      	bcc.n	200002ba <__udivsi3+0x76>
200002b6:	02cb      	lsls	r3, r1, #11
200002b8:	1ac0      	subs	r0, r0, r3
200002ba:	4152      	adcs	r2, r2
200002bc:	0a83      	lsrs	r3, r0, #10
200002be:	428b      	cmp	r3, r1
200002c0:	d301      	bcc.n	200002c6 <__udivsi3+0x82>
200002c2:	028b      	lsls	r3, r1, #10
200002c4:	1ac0      	subs	r0, r0, r3
200002c6:	4152      	adcs	r2, r2
200002c8:	0a43      	lsrs	r3, r0, #9
200002ca:	428b      	cmp	r3, r1
200002cc:	d301      	bcc.n	200002d2 <__udivsi3+0x8e>
200002ce:	024b      	lsls	r3, r1, #9
200002d0:	1ac0      	subs	r0, r0, r3
200002d2:	4152      	adcs	r2, r2
200002d4:	0a03      	lsrs	r3, r0, #8
200002d6:	428b      	cmp	r3, r1
200002d8:	d301      	bcc.n	200002de <__udivsi3+0x9a>
200002da:	020b      	lsls	r3, r1, #8
200002dc:	1ac0      	subs	r0, r0, r3
200002de:	4152      	adcs	r2, r2
200002e0:	d2cd      	bcs.n	2000027e <__udivsi3+0x3a>
200002e2:	09c3      	lsrs	r3, r0, #7
200002e4:	428b      	cmp	r3, r1
200002e6:	d301      	bcc.n	200002ec <__udivsi3+0xa8>
200002e8:	01cb      	lsls	r3, r1, #7
200002ea:	1ac0      	subs	r0, r0, r3
200002ec:	4152      	adcs	r2, r2
200002ee:	0983      	lsrs	r3, r0, #6
200002f0:	428b      	cmp	r3, r1
200002f2:	d301      	bcc.n	200002f8 <__udivsi3+0xb4>
200002f4:	018b      	lsls	r3, r1, #6
200002f6:	1ac0      	subs	r0, r0, r3
200002f8:	4152      	adcs	r2, r2
200002fa:	0943      	lsrs	r3, r0, #5
200002fc:	428b      	cmp	r3, r1
200002fe:	d301      	bcc.n	20000304 <__udivsi3+0xc0>
20000300:	014b      	lsls	r3, r1, #5
20000302:	1ac0      	subs	r0, r0, r3
20000304:	4152      	adcs	r2, r2
20000306:	0903      	lsrs	r3, r0, #4
20000308:	428b      	cmp	r3, r1
2000030a:	d301      	bcc.n	20000310 <__udivsi3+0xcc>
2000030c:	010b      	lsls	r3, r1, #4
2000030e:	1ac0      	subs	r0, r0, r3
20000310:	4152      	adcs	r2, r2
20000312:	08c3      	lsrs	r3, r0, #3
20000314:	428b      	cmp	r3, r1
20000316:	d301      	bcc.n	2000031c <__udivsi3+0xd8>
20000318:	00cb      	lsls	r3, r1, #3
2000031a:	1ac0      	subs	r0, r0, r3
2000031c:	4152      	adcs	r2, r2
2000031e:	0883      	lsrs	r3, r0, #2
20000320:	428b      	cmp	r3, r1
20000322:	d301      	bcc.n	20000328 <__udivsi3+0xe4>
20000324:	008b      	lsls	r3, r1, #2
20000326:	1ac0      	subs	r0, r0, r3
20000328:	4152      	adcs	r2, r2
2000032a:	0843      	lsrs	r3, r0, #1
2000032c:	428b      	cmp	r3, r1
2000032e:	d301      	bcc.n	20000334 <__udivsi3+0xf0>
20000330:	004b      	lsls	r3, r1, #1
20000332:	1ac0      	subs	r0, r0, r3
20000334:	4152      	adcs	r2, r2
20000336:	1a41      	subs	r1, r0, r1
20000338:	d200      	bcs.n	2000033c <__udivsi3+0xf8>
2000033a:	4601      	mov	r1, r0
2000033c:	4152      	adcs	r2, r2
2000033e:	4610      	mov	r0, r2
20000340:	4770      	bx	lr
20000342:	e7ff      	b.n	20000344 <__udivsi3+0x100>
20000344:	b501      	push	{r0, lr}
20000346:	2000      	movs	r0, #0
20000348:	f000 f806 	bl	20000358 <__aeabi_idiv0>
2000034c:	bd02      	pop	{r1, pc}
2000034e:	46c0      	nop			; (mov r8, r8)

20000350 <__aeabi_uidivmod>:
20000350:	2900      	cmp	r1, #0
20000352:	d0f7      	beq.n	20000344 <__udivsi3+0x100>
20000354:	e776      	b.n	20000244 <__udivsi3>
20000356:	4770      	bx	lr

20000358 <__aeabi_idiv0>:
20000358:	4770      	bx	lr
2000035a:	46c0      	nop			; (mov r8, r8)

2000035c <systick_flag>:
2000035c:	00000000 	andeq	r0, r0, r0

20000360 <delay_count>:
20000360:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000001dd 	ldrdeq	r0, [r0], -sp
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000002f 	andeq	r0, r0, pc, lsr #32
  10:	0001c90c 	andeq	ip, r1, ip, lsl #18
	...
  24:	08010200 	stmdaeq	r1, {r9}
  28:	00000155 	andeq	r0, r0, r5, asr r1
  2c:	00017403 	andeq	r7, r1, r3, lsl #8
  30:	3d500100 	ldfcce	f0, [r0, #-0]
  34:	05000000 	streq	r0, [r0, #-0]
  38:	00035c03 	andeq	r5, r3, r3, lsl #24
  3c:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
  40:	00746e69 	rsbseq	r6, r4, r9, ror #28
  44:	00016303 	andeq	r6, r1, r3, lsl #6
  48:	3d510100 	ldfcce	f0, [r1, #-0]
  4c:	05000000 	streq	r0, [r0, #-0]
  50:	00036003 	andeq	r6, r3, r3
  54:	016f0520 	cmneq	pc, r0, lsr #10
  58:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
  5c:	200001f4 	strdcs	r0, [r0], -r4
  60:	00000050 	andeq	r0, r0, r0, asr r0
  64:	dc069c01 	stcle	12, cr9, [r6], {1}
  68:	01000000 	mrseq	r0, (UNDEF: 0)
  6c:	0001b46d 	andeq	fp, r1, sp, ror #8
  70:	00004020 	andeq	r4, r0, r0, lsr #32
  74:	079c0100 	ldreq	r0, [ip, r0, lsl #2]
  78:	000001c3 	andeq	r0, r0, r3, asr #3
  7c:	018c6601 	orreq	r6, ip, r1, lsl #12
  80:	00282000 	eoreq	r2, r8, r0
  84:	9c010000 	stcls	0, cr0, [r1], {-0}
  88:	0000009b 	muleq	r0, fp, r0
  8c:	00016908 	andeq	r6, r1, r8, lsl #18
  90:	9b660100 	blls	1980498 <startup-0x1e67fb68>
  94:	02000000 	andeq	r0, r0, #0
  98:	02007491 	andeq	r7, r0, #-1862270976	; 0x91000000
  9c:	00c70704 	sbceq	r0, r7, r4, lsl #14
  a0:	41090000 	mrsmi	r0, (UNDEF: 9)
  a4:	01000001 	tsteq	r0, r1
  a8:	0001505c 	andeq	r5, r1, ip, asr r0
  ac:	00003c20 	andeq	r3, r0, r0, lsr #24
  b0:	069c0100 	ldreq	r0, [ip], r0, lsl #2
  b4:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
  b8:	01165301 	tsteq	r6, r1, lsl #6
  bc:	003a2000 	eorseq	r2, sl, r0
  c0:	9c010000 	stcls	0, cr0, [r1], {-0}
  c4:	0000f90a 	andeq	pc, r0, sl, lsl #18
  c8:	10410100 	subne	r0, r1, r0, lsl #2
  cc:	06200001 	strteq	r0, [r0], -r1
  d0:	01000000 	mrseq	r0, (UNDEF: 0)
  d4:	018f0a9c 			; <UNDEFINED> instruction: 0x018f0a9c
  d8:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
  dc:	2000010a 	andcs	r0, r0, sl, lsl #2
  e0:	00000006 	andeq	r0, r0, r6
  e4:	e9059c01 	stmdb	r5, {r0, sl, fp, ip, pc}
  e8:	01000000 	mrseq	r0, (UNDEF: 0)
  ec:	0000f035 	andeq	pc, r0, r5, lsr r0	; <UNPREDICTABLE>
  f0:	00001a20 	andeq	r1, r0, r0, lsr #20
  f4:	0b9c0100 	bleq	fe7004fc <delay_count+0xde70019c>
  f8:	00000181 	andeq	r0, r0, r1, lsl #3
  fc:	00e82d01 	rsceq	r2, r8, r1, lsl #26
 100:	00082000 	andeq	r2, r8, r0
 104:	9c010000 	stcls	0, cr0, [r1], {-0}
 108:	0000011a 	andeq	r0, r0, sl, lsl r1
 10c:	0000d408 	andeq	sp, r0, r8, lsl #8
 110:	9b2d0100 	blls	b40518 <startup-0x1f4bfae8>
 114:	01000000 	mrseq	r0, (UNDEF: 0)
 118:	a00b0050 	andge	r0, fp, r0, asr r0
 11c:	01000001 	tsteq	r0, r1
 120:	0000e025 	andeq	lr, r0, r5, lsr #32
 124:	00000820 	andeq	r0, r0, r0, lsr #16
 128:	3d9c0100 	ldfccs	f0, [ip]
 12c:	08000001 	stmdaeq	r0, {r0}
 130:	00000202 	andeq	r0, r0, r2, lsl #4
 134:	009b2501 	addseq	r2, fp, r1, lsl #10
 138:	50010000 	andpl	r0, r1, r0
 13c:	02070c00 	andeq	r0, r7, #0, 24
 140:	1d010000 	stcne	0, cr0, [r1, #-0]
 144:	0000009b 	muleq	r0, fp, r0
 148:	200000d6 	ldrdcs	r0, [r0], -r6
 14c:	0000000a 	andeq	r0, r0, sl
 150:	170c9c01 	strne	r9, [ip, -r1, lsl #24]
 154:	01000001 	tsteq	r0, r1
 158:	00009b15 	andeq	r9, r0, r5, lsl fp
 15c:	0000cc00 	andeq	ip, r0, r0, lsl #24
 160:	00000a20 	andeq	r0, r0, r0, lsr #20
 164:	059c0100 	ldreq	r0, [ip, #256]	; 0x100
 168:	00000121 	andeq	r0, r0, r1, lsr #2
 16c:	00ba2602 	adcseq	r2, sl, r2, lsl #12
 170:	00122000 	andseq	r2, r2, r0
 174:	9c010000 	stcls	0, cr0, [r1], {-0}
 178:	0001aa07 	andeq	sl, r1, r7, lsl #20
 17c:	801b0200 	andshi	r0, fp, r0, lsl #4
 180:	3a200000 	bcc	800188 <startup-0x1f7ffe78>
 184:	01000000 	mrseq	r0, (UNDEF: 0)
 188:	00019b9c 	muleq	r1, ip, fp
 18c:	736d0d00 	cmnvc	sp, #0, 26
 190:	9b1b0200 	blls	6c0998 <startup-0x1f93f668>
 194:	02000000 	andeq	r0, r0, #0
 198:	07007491 			; <UNDEFINED> instruction: 0x07007491
 19c:	0000012d 	andeq	r0, r0, sp, lsr #2
 1a0:	00541202 	subseq	r1, r4, r2, lsl #4
 1a4:	002c2000 	eoreq	r2, ip, r0
 1a8:	9c010000 	stcls	0, cr0, [r1], {-0}
 1ac:	000001be 			; <UNDEFINED> instruction: 0x000001be
 1b0:	0073750d 	rsbseq	r7, r3, sp, lsl #10
 1b4:	009b1202 	addseq	r1, fp, r2, lsl #4
 1b8:	91020000 	mrsls	r0, (UNDEF: 2)
 1bc:	0b0a0074 	bleq	280394 <startup-0x1fd7fc6c>
 1c0:	02000001 	andeq	r0, r0, #1
 1c4:	00001008 	andeq	r1, r0, r8
 1c8:	00004420 	andeq	r4, r0, r0, lsr #8
 1cc:	0a9c0100 	beq	fe7005d4 <delay_count+0xde700274>
 1d0:	00000139 	andeq	r0, r0, r9, lsr r1
 1d4:	00000b01 	andeq	r0, r0, r1, lsl #22
 1d8:	000c2000 	andeq	r2, ip, r0
 1dc:	9c010000 	stcls	0, cr0, [r1], {-0}
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	34030000 	strcc	r0, [r3], #-0
  20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
  24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	00180213 	andseq	r0, r8, r3, lsl r2
  2c:	00240400 	eoreq	r0, r4, r0, lsl #8
  30:	0b3e0b0b 	bleq	f82c64 <startup-0x1f07d39c>
  34:	00000803 	andeq	r0, r0, r3, lsl #16
  38:	3f002e05 	svccc	0x00002e05
  3c:	3a0e0319 	bcc	380ca8 <startup-0x1fc7f358>
  40:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  44:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  48:	96184006 	ldrls	r4, [r8], -r6
  4c:	00001942 	andeq	r1, r0, r2, asr #18
  50:	3f002e06 	svccc	0x00002e06
  54:	3a0e0319 	bcc	380cc0 <startup-0x1fc7f340>
  58:	110b3b0b 	tstne	fp, fp, lsl #22
  5c:	40061201 	andmi	r1, r6, r1, lsl #4
  60:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  64:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
  68:	03193f01 	tsteq	r9, #1, 30
  6c:	3b0b3a0e 	blcc	2ce8ac <startup-0x1fd31754>
  70:	1119270b 	tstne	r9, fp, lsl #14
  74:	40061201 	andmi	r1, r6, r1, lsl #4
  78:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  7c:	00001301 	andeq	r1, r0, r1, lsl #6
  80:	03000508 	movweq	r0, #1288	; 0x508
  84:	3b0b3a0e 	blcc	2ce8c4 <startup-0x1fd3173c>
  88:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  8c:	09000018 	stmdbeq	r0, {r3, r4}
  90:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  94:	0b3a0e03 	bleq	e838a8 <startup-0x1f17c758>
  98:	01110b3b 	tsteq	r1, fp, lsr fp
  9c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  a0:	00194296 	mulseq	r9, r6, r2
  a4:	002e0a00 	eoreq	r0, lr, r0, lsl #20
  a8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  ac:	0b3b0b3a 	bleq	ec2d9c <startup-0x1f13d264>
  b0:	01111927 	tsteq	r1, r7, lsr #18
  b4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  b8:	00194297 	mulseq	r9, r7, r2
  bc:	012e0b00 			; <UNDEFINED> instruction: 0x012e0b00
  c0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  c4:	0b3b0b3a 	bleq	ec2db4 <startup-0x1f13d24c>
  c8:	01111927 	tsteq	r1, r7, lsr #18
  cc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  d0:	01194297 			; <UNDEFINED> instruction: 0x01194297
  d4:	0c000013 	stceq	0, cr0, [r0], {19}
  d8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  dc:	0b3a0e03 	bleq	e838f0 <startup-0x1f17c710>
  e0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  e4:	01111349 	tsteq	r1, r9, asr #6
  e8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  ec:	00194297 	mulseq	r9, r7, r2
  f0:	00050d00 	andeq	r0, r5, r0, lsl #26
  f4:	0b3a0803 	bleq	e82108 <startup-0x1f17def8>
  f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  fc:	00001802 	andeq	r1, r0, r2, lsl #16
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000234 	andeq	r0, r0, r4, lsr r2
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000244 	andcs	r0, r0, r4, asr #4
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000000e6 	andeq	r0, r0, r6, ror #1
   4:	005b0002 	subseq	r0, fp, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	72646e41 	rsbvc	r6, r4, #1040	; 0x410
  28:	65442f65 	strbvs	r2, [r4, #-3941]	; 0xfffff09b
  2c:	6f746b73 	svcvs	0x00746b73
  30:	41442f70 	hvcmi	17136	; 0x42f0
  34:	30393354 	eorscc	r3, r9, r4, asr r3
  38:	62616c5f 	rsbvs	r6, r1, #24320	; 0x5f00
  3c:	34765f62 	ldrbtcc	r5, [r6], #-3938	; 0xfffff09e
  40:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
  44:	6369745f 	cmnvs	r9, #1593835520	; 0x5f000000
  48:	7300006b 	movwvc	r0, #107	; 0x6b
  4c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  50:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
  54:	00000100 	andeq	r0, r0, r0, lsl #2
  58:	616c6564 	cmnvs	ip, r4, ror #10
  5c:	632e7379 			; <UNDEFINED> instruction: 0x632e7379
  60:	00000100 	andeq	r0, r0, r0, lsl #2
  64:	02050000 	andeq	r0, r5, #0
  68:	20000000 	andcs	r0, r0, r0
  6c:	13010b03 	movwne	r0, #6915	; 0x1b03
  70:	0003025e 	andeq	r0, r3, lr, asr r2
  74:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
  78:	10020500 	andne	r0, r2, r0, lsl #10
  7c:	19200000 	stmdbne	r0!, {}	; <UNPREDICTABLE>
  80:	3d3d3d2f 	ldccc	13, cr3, [sp, #-188]!	; 0xffffff44
  84:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
  88:	06200601 	strteq	r0, [r0], -r1, lsl #12
  8c:	4ba03d67 	blmi	fe80f630 <delay_count+0xde80f2d0>
  90:	2f2f2f21 	svccs	0x002f2f21
  94:	4d4c5e2a 	stclmi	14, cr5, [ip, #-168]	; 0xffffff58
  98:	57213f75 			; <UNDEFINED> instruction: 0x57213f75
  9c:	2f2f4c5a 	svccs	0x002f4c5a
  a0:	0301042f 	movweq	r0, #5167	; 0x142f
  a4:	40133c6d 	andsmi	r3, r3, sp, ror #24
  a8:	31401331 	cmpcc	r0, r1, lsr r3
  ac:	13234013 			; <UNDEFINED> instruction: 0x13234013
  b0:	832f2240 			; <UNDEFINED> instruction: 0x832f2240
  b4:	2332133f 	teqcs	r2, #-67108864	; 0xfc000000
  b8:	0c033213 	sfmeq	f3, 4, [r3], {19}
  bc:	3d3e2f20 	ldccc	15, cr2, [lr, #-128]!	; 0xffffff80
  c0:	bc3d3d3d 	ldclt	13, cr3, [sp], #-244	; 0xffffff0c
  c4:	4b593d2f 	blmi	164f588 <startup-0x1e9b0a78>
  c8:	a03d1f32 	eorsge	r1, sp, r2, lsr pc
  cc:	3b4c3d4b 	blcc	130f600 <startup-0x1ecf0a00>
  d0:	3f2f5a22 	svccc	0x002f5a22
  d4:	083d3d3e 	ldmdaeq	sp!, {r1, r2, r3, r4, r5, r8, sl, fp, ip, sp}
  d8:	3d2f2f24 	stccc	15, cr2, [pc, #-144]!	; 50 <startup-0x1fffffb0>
  dc:	704e3e59 	subvc	r3, lr, r9, asr lr
  e0:	20090321 	andcs	r0, r9, r1, lsr #6
  e4:	0009023d 	andeq	r0, r9, sp, lsr r2
  e8:	Address 0x000000e8 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	555c3a43 	ldrbpl	r3, [ip, #-2627]	; 0xfffff5bd
   4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
   8:	646e415c 	strbtvs	r4, [lr], #-348	; 0xfffffea4
   c:	445c6572 	ldrbmi	r6, [ip], #-1394	; 0xfffffa8e
  10:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
  14:	445c706f 	ldrbmi	r7, [ip], #-111	; 0xffffff91
  18:	39335441 	ldmdbcc	r3!, {r0, r6, sl, ip, lr}
  1c:	616c5f30 	cmnvs	ip, r0, lsr pc
  20:	765f6262 	ldrbvc	r6, [pc], -r2, ror #4
  24:	79735c34 	ldmdbvc	r3!, {r2, r4, r5, sl, fp, ip, lr}^
  28:	69745f73 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
  2c:	47006b63 	strmi	r6, [r0, -r3, ror #22]
  30:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
  34:	37203939 			; <UNDEFINED> instruction: 0x37203939
  38:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
  3c:	31303220 	teqcc	r0, r0, lsr #4
  40:	30393037 	eorscc	r3, r9, r7, lsr r0
  44:	72282034 	eorvc	r2, r8, #52	; 0x34
  48:	61656c65 	cmnvs	r5, r5, ror #24
  4c:	20296573 	eorcs	r6, r9, r3, ror r5
  50:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
  54:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
  58:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  5c:	2d372d64 	ldccs	13, cr2, [r7, #-400]!	; 0xfffffe70
  60:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  64:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  68:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  6c:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  70:	32353532 	eorscc	r3, r5, #209715200	; 0xc800000
  74:	205d3430 	subscs	r3, sp, r0, lsr r4
  78:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  7c:	20626d75 	rsbcs	r6, r2, r5, ror sp
  80:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  84:	613d6863 	teqvs	sp, r3, ror #16
  88:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
  8c:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
  90:	6f6c666d 	svcvs	0x006c666d
  94:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
  98:	733d6962 	teqvc	sp, #1605632	; 0x188000
  9c:	2074666f 	rsbscs	r6, r4, pc, ror #12
  a0:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  a4:	20626d75 	rsbcs	r6, r2, r5, ror sp
  a8:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  ac:	613d6863 	teqvs	sp, r3, ror #16
  b0:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
  b4:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
  b8:	4f2d2067 	svcmi	0x002d2067
  bc:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
  c0:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
  c4:	75003939 	strvc	r3, [r0, #-2361]	; 0xfffff6c7
  c8:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  cc:	2064656e 	rsbcs	r6, r4, lr, ror #10
  d0:	00746e69 	rsbseq	r6, r4, r9, ror #28
  d4:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
  d8:	00676552 	rsbeq	r6, r7, r2, asr r5
  dc:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
  e0:	6e61685f 	mcrvs	8, 3, r6, cr1, cr15, {2}
  e4:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
  e8:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
  ec:	72706e55 	rsbsvc	r6, r0, #1360	; 0x550
  f0:	6c697669 	stclvs	6, cr7, [r9], #-420	; 0xfffffe5c
  f4:	64656765 	strbtvs	r6, [r5], #-1893	; 0xfffff89b
  f8:	73696400 	cmnvc	r9, #0, 8
  fc:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 100:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
 104:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
 108:	64007470 	strvs	r7, [r0], #-1136	; 0xfffffb90
 10c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 110:	3035325f 	eorscc	r3, r5, pc, asr r2
 114:	6700736e 	strvs	r7, [r0, -lr, ror #6]
 118:	73507465 	cmpvc	r0, #1694498816	; 0x65000000
 11c:	67655272 			; <UNDEFINED> instruction: 0x67655272
 120:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 124:	355f7961 	ldrbcc	r7, [pc, #-2401]	; fffff7cb <delay_count+0xdffff46b>
 128:	736e3030 	cmnvc	lr, #48	; 0x30
 12c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 130:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 76 <startup-0x1fffff8a>	; <UNPREDICTABLE>
 134:	6f726369 	svcvs	0x00726369
 138:	61747300 	cmnvs	r4, r0, lsl #6
 13c:	70757472 	rsbsvc	r7, r5, r2, ror r4
 140:	73797300 	cmnvc	r9, #0, 6
 144:	6b636974 	blvs	18da71c <startup-0x1e7258e4>
 148:	7172695f 	cmnvc	r2, pc, asr r9
 14c:	6e61685f 	mcrvs	8, 3, r6, cr1, cr15, {2}
 150:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
 154:	736e7500 	cmnvc	lr, #0, 10
 158:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 15c:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
 160:	64007261 	strvs	r7, [r0], #-609	; 0xfffffd9f
 164:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 168:	756f635f 	strbvc	r6, [pc, #-863]!	; fffffe11 <delay_count+0xdffffab1>
 16c:	6d00746e 	cfstrsvs	mvf7, [r0, #-440]	; 0xfffffe48
 170:	006e6961 	rsbeq	r6, lr, r1, ror #18
 174:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 178:	5f6b6369 	svcpl	0x006b6369
 17c:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
 180:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 184:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
 188:	526c6f72 	rsbpl	r6, ip, #456	; 0x1c8
 18c:	65006765 	strvs	r6, [r0, #-1893]	; 0xfffff89b
 190:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
 194:	6e695f65 	cdpvs	15, 6, cr5, cr9, cr5, {3}
 198:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
 19c:	00747075 	rsbseq	r7, r4, r5, ror r0
 1a0:	50746573 	rsbspl	r6, r4, r3, ror r5
 1a4:	65527273 	ldrbvs	r7, [r2, #-627]	; 0xfffffd8d
 1a8:	65640067 	strbvs	r0, [r4, #-103]!	; 0xffffff99
 1ac:	5f79616c 	svcpl	0x0079616c
 1b0:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
 1b4:	65640069 	strbvs	r0, [r4, #-105]!	; 0xffffff97
 1b8:	5f79616c 	svcpl	0x0079616c
 1bc:	6b696d31 	blvs	1a5b688 <startup-0x1e5a4978>
 1c0:	64006f72 	strvs	r6, [r0], #-3954	; 0xfffff08e
 1c4:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 1c8:	2f3a4300 	svccs	0x003a4300
 1cc:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 1d0:	6e412f73 	mcrvs	15, 2, r2, cr1, cr3, {3}
 1d4:	2f657264 	svccs	0x00657264
 1d8:	6b736544 	blvs	1cd96f0 <startup-0x1e326910>
 1dc:	2f706f74 	svccs	0x00706f74
 1e0:	33544144 	cmpcc	r4, #68, 2
 1e4:	6c5f3039 	mrrcvs	0, 3, r3, pc, cr9	; <UNPREDICTABLE>
 1e8:	5f626261 	svcpl	0x00626261
 1ec:	732f3476 			; <UNDEFINED> instruction: 0x732f3476
 1f0:	745f7379 	ldrbvc	r7, [pc], #-889	; 1f8 <startup-0x1ffffe08>
 1f4:	2f6b6369 	svccs	0x006b6369
 1f8:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 1fc:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
 200:	70610063 	rsbvc	r0, r1, r3, rrx
 204:	67007273 	smlsdxvs	r0, r3, r2, r7
 208:	6f437465 	svcvs	0x00437465
 20c:	6f72746e 	svcvs	0x0072746e
 210:	6765526c 	strbvs	r5, [r5, -ip, ror #4]!
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <delay_count+0xdfffefae>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000044 	andeq	r0, r0, r4, asr #32
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000054 	andcs	r0, r0, r4, asr r0
  48:	0000002c 	andeq	r0, r0, ip, lsr #32
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	100e4101 	andne	r4, lr, r1, lsl #2
  58:	00070d41 	andeq	r0, r7, r1, asr #26
  5c:	0000001c 	andeq	r0, r0, ip, lsl r0
  60:	00000000 	andeq	r0, r0, r0
  64:	20000080 	andcs	r0, r0, r0, lsl #1
  68:	0000003a 	andeq	r0, r0, sl, lsr r0
  6c:	40080e41 	andmi	r0, r8, r1, asr #28
  70:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  74:	100e4101 	andne	r4, lr, r1, lsl #2
  78:	00070d41 	andeq	r0, r7, r1, asr #26
  7c:	00000018 	andeq	r0, r0, r8, lsl r0
  80:	00000000 	andeq	r0, r0, r0
  84:	200000ba 	strhcs	r0, [r0], -sl
  88:	00000012 	andeq	r0, r0, r2, lsl r0
  8c:	40080e41 	andmi	r0, r8, r1, asr #28
  90:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  94:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  98:	0000000c 	andeq	r0, r0, ip
  9c:	00000000 	andeq	r0, r0, r0
  a0:	200000cc 	andcs	r0, r0, ip, asr #1
  a4:	0000000a 	andeq	r0, r0, sl
  a8:	0000000c 	andeq	r0, r0, ip
  ac:	00000000 	andeq	r0, r0, r0
  b0:	200000d6 	ldrdcs	r0, [r0], -r6
  b4:	0000000a 	andeq	r0, r0, sl
  b8:	0000000c 	andeq	r0, r0, ip
  bc:	00000000 	andeq	r0, r0, r0
  c0:	200000e0 	andcs	r0, r0, r0, ror #1
  c4:	00000008 	andeq	r0, r0, r8
  c8:	0000000c 	andeq	r0, r0, ip
  cc:	00000000 	andeq	r0, r0, r0
  d0:	200000e8 	andcs	r0, r0, r8, ror #1
  d4:	00000008 	andeq	r0, r0, r8
  d8:	00000018 	andeq	r0, r0, r8, lsl r0
  dc:	00000000 	andeq	r0, r0, r0
  e0:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
  e4:	0000001a 	andeq	r0, r0, sl, lsl r0
  e8:	40080e41 	andmi	r0, r8, r1, asr #28
  ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  f4:	0000000c 	andeq	r0, r0, ip
  f8:	00000000 	andeq	r0, r0, r0
  fc:	2000010a 	andcs	r0, r0, sl, lsl #2
 100:	00000006 	andeq	r0, r0, r6
 104:	0000000c 	andeq	r0, r0, ip
 108:	00000000 	andeq	r0, r0, r0
 10c:	20000110 	andcs	r0, r0, r0, lsl r1
 110:	00000006 	andeq	r0, r0, r6
 114:	00000018 	andeq	r0, r0, r8, lsl r0
 118:	00000000 	andeq	r0, r0, r0
 11c:	20000116 	andcs	r0, r0, r6, lsl r1
 120:	0000003a 	andeq	r0, r0, sl, lsr r0
 124:	40080e41 	andmi	r0, r8, r1, asr #28
 128:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 12c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 130:	00000018 	andeq	r0, r0, r8, lsl r0
 134:	00000000 	andeq	r0, r0, r0
 138:	20000150 	andcs	r0, r0, r0, asr r1
 13c:	0000003c 	andeq	r0, r0, ip, lsr r0
 140:	40080e41 	andmi	r0, r8, r1, asr #28
 144:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 148:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 14c:	0000001c 	andeq	r0, r0, ip, lsl r0
 150:	00000000 	andeq	r0, r0, r0
 154:	2000018c 	andcs	r0, r0, ip, lsl #3
 158:	00000028 	andeq	r0, r0, r8, lsr #32
 15c:	40080e41 	andmi	r0, r8, r1, asr #28
 160:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 164:	100e4101 	andne	r4, lr, r1, lsl #2
 168:	00070d41 	andeq	r0, r7, r1, asr #26
 16c:	00000018 	andeq	r0, r0, r8, lsl r0
 170:	00000000 	andeq	r0, r0, r0
 174:	200001b4 			; <UNDEFINED> instruction: 0x200001b4
 178:	00000040 	andeq	r0, r0, r0, asr #32
 17c:	40080e41 	andmi	r0, r8, r1, asr #28
 180:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 184:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 188:	00000018 	andeq	r0, r0, r8, lsl r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	200001f4 	strdcs	r0, [r0], -r4
 194:	00000050 	andeq	r0, r0, r0, asr r0
 198:	40080e41 	andmi	r0, r8, r1, asr #28
 19c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1a0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1a4:	0000000c 	andeq	r0, r0, ip
 1a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1ac:	7c010001 	stcvc	0, cr0, [r1], {1}
 1b0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1b4:	0000000c 	andeq	r0, r0, ip
 1b8:	000001a4 	andeq	r0, r0, r4, lsr #3
 1bc:	20000245 	andcs	r0, r0, r5, asr #4
 1c0:	0000010a 	andeq	r0, r0, sl, lsl #2
