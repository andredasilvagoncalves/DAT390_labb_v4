
./Debug/flipflop_irq_vectors.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:



void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f946 	bl	20000294 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <irq_handler_0>:

static volatile unsigned char count;

void irq_handler_0(){
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
	unsigned char x = (EXTI_PR & 0x1);
20000016:	4b16      	ldr	r3, [pc, #88]	; (20000070 <irq_handler_0+0x60>)
20000018:	681b      	ldr	r3, [r3, #0]
2000001a:	b2da      	uxtb	r2, r3
2000001c:	1dfb      	adds	r3, r7, #7
2000001e:	2101      	movs	r1, #1
20000020:	400a      	ands	r2, r1
20000022:	701a      	strb	r2, [r3, #0]
	if(EXTI_PR & 0x1){
20000024:	4b12      	ldr	r3, [pc, #72]	; (20000070 <irq_handler_0+0x60>)
20000026:	681b      	ldr	r3, [r3, #0]
20000028:	2201      	movs	r2, #1
2000002a:	4013      	ands	r3, r2
2000002c:	d01c      	beq.n	20000068 <irq_handler_0+0x58>
		EXTI_PR |= 0x1; 							//kvittera avbrottet
2000002e:	4b10      	ldr	r3, [pc, #64]	; (20000070 <irq_handler_0+0x60>)
20000030:	681a      	ldr	r2, [r3, #0]
20000032:	4b0f      	ldr	r3, [pc, #60]	; (20000070 <irq_handler_0+0x60>)
20000034:	2101      	movs	r1, #1
20000036:	430a      	orrs	r2, r1
20000038:	601a      	str	r2, [r3, #0]
		
	GPIO_ODR_E_LOW |= (1<<4); 		//kvittera irq0
2000003a:	4b0e      	ldr	r3, [pc, #56]	; (20000074 <irq_handler_0+0x64>)
2000003c:	781b      	ldrb	r3, [r3, #0]
2000003e:	b2db      	uxtb	r3, r3
20000040:	4a0c      	ldr	r2, [pc, #48]	; (20000074 <irq_handler_0+0x64>)
20000042:	2110      	movs	r1, #16
20000044:	430b      	orrs	r3, r1
20000046:	b2db      	uxtb	r3, r3
20000048:	7013      	strb	r3, [r2, #0]
	count++;
2000004a:	4b0b      	ldr	r3, [pc, #44]	; (20000078 <irq_handler_0+0x68>)
2000004c:	781b      	ldrb	r3, [r3, #0]
2000004e:	b2db      	uxtb	r3, r3
20000050:	3301      	adds	r3, #1
20000052:	b2da      	uxtb	r2, r3
20000054:	4b08      	ldr	r3, [pc, #32]	; (20000078 <irq_handler_0+0x68>)
20000056:	701a      	strb	r2, [r3, #0]
	GPIO_ODR_E_LOW &= ~(1<<4);
20000058:	4b06      	ldr	r3, [pc, #24]	; (20000074 <irq_handler_0+0x64>)
2000005a:	781b      	ldrb	r3, [r3, #0]
2000005c:	b2db      	uxtb	r3, r3
2000005e:	4a05      	ldr	r2, [pc, #20]	; (20000074 <irq_handler_0+0x64>)
20000060:	2110      	movs	r1, #16
20000062:	438b      	bics	r3, r1
20000064:	b2db      	uxtb	r3, r3
20000066:	7013      	strb	r3, [r2, #0]
	}
}
20000068:	46c0      	nop			; (mov r8, r8)
2000006a:	46bd      	mov	sp, r7
2000006c:	b002      	add	sp, #8
2000006e:	bd80      	pop	{r7, pc}
20000070:	40013c14 	andmi	r3, r1, r4, lsl ip
20000074:	40021014 	andmi	r1, r2, r4, lsl r0
20000078:	200002b0 			; <UNDEFINED> instruction: 0x200002b0

2000007c <irq_handler_1>:

void irq_handler_1(){
2000007c:	b580      	push	{r7, lr}
2000007e:	b082      	sub	sp, #8
20000080:	af00      	add	r7, sp, #0
	unsigned char x = (EXTI_PR & 0x2);
20000082:	4b14      	ldr	r3, [pc, #80]	; (200000d4 <irq_handler_1+0x58>)
20000084:	681b      	ldr	r3, [r3, #0]
20000086:	b2da      	uxtb	r2, r3
20000088:	1dfb      	adds	r3, r7, #7
2000008a:	2102      	movs	r1, #2
2000008c:	400a      	ands	r2, r1
2000008e:	701a      	strb	r2, [r3, #0]
	if(EXTI_PR & EXTI1_BPOS){
20000090:	4b10      	ldr	r3, [pc, #64]	; (200000d4 <irq_handler_1+0x58>)
20000092:	681b      	ldr	r3, [r3, #0]
20000094:	2202      	movs	r2, #2
20000096:	4013      	ands	r3, r2
20000098:	d018      	beq.n	200000cc <irq_handler_1+0x50>
		EXTI_PR |= EXTI1_BPOS; 							//kvittera avbrottet
2000009a:	4b0e      	ldr	r3, [pc, #56]	; (200000d4 <irq_handler_1+0x58>)
2000009c:	681a      	ldr	r2, [r3, #0]
2000009e:	4b0d      	ldr	r3, [pc, #52]	; (200000d4 <irq_handler_1+0x58>)
200000a0:	2102      	movs	r1, #2
200000a2:	430a      	orrs	r2, r1
200000a4:	601a      	str	r2, [r3, #0]
				
	GPIO_ODR_E_LOW |= (1<<5); 		//kvittera irq1
200000a6:	4b0c      	ldr	r3, [pc, #48]	; (200000d8 <irq_handler_1+0x5c>)
200000a8:	781b      	ldrb	r3, [r3, #0]
200000aa:	b2db      	uxtb	r3, r3
200000ac:	4a0a      	ldr	r2, [pc, #40]	; (200000d8 <irq_handler_1+0x5c>)
200000ae:	2120      	movs	r1, #32
200000b0:	430b      	orrs	r3, r1
200000b2:	b2db      	uxtb	r3, r3
200000b4:	7013      	strb	r3, [r2, #0]
	count = 0;
200000b6:	4b09      	ldr	r3, [pc, #36]	; (200000dc <irq_handler_1+0x60>)
200000b8:	2200      	movs	r2, #0
200000ba:	701a      	strb	r2, [r3, #0]
	GPIO_ODR_E_LOW &= ~(1<<5);
200000bc:	4b06      	ldr	r3, [pc, #24]	; (200000d8 <irq_handler_1+0x5c>)
200000be:	781b      	ldrb	r3, [r3, #0]
200000c0:	b2db      	uxtb	r3, r3
200000c2:	4a05      	ldr	r2, [pc, #20]	; (200000d8 <irq_handler_1+0x5c>)
200000c4:	2120      	movs	r1, #32
200000c6:	438b      	bics	r3, r1
200000c8:	b2db      	uxtb	r3, r3
200000ca:	7013      	strb	r3, [r2, #0]
	}
}
200000cc:	46c0      	nop			; (mov r8, r8)
200000ce:	46bd      	mov	sp, r7
200000d0:	b002      	add	sp, #8
200000d2:	bd80      	pop	{r7, pc}
200000d4:	40013c14 	andmi	r3, r1, r4, lsl ip
200000d8:	40021014 	andmi	r1, r2, r4, lsl r0
200000dc:	200002b0 			; <UNDEFINED> instruction: 0x200002b0

200000e0 <irq_handler_2>:

void irq_handler_2(){
200000e0:	b580      	push	{r7, lr}
200000e2:	b082      	sub	sp, #8
200000e4:	af00      	add	r7, sp, #0
	unsigned char x = (EXTI_PR & 0x4);
200000e6:	4b16      	ldr	r3, [pc, #88]	; (20000140 <irq_handler_2+0x60>)
200000e8:	681b      	ldr	r3, [r3, #0]
200000ea:	b2da      	uxtb	r2, r3
200000ec:	1dfb      	adds	r3, r7, #7
200000ee:	2104      	movs	r1, #4
200000f0:	400a      	ands	r2, r1
200000f2:	701a      	strb	r2, [r3, #0]
	if(EXTI_PR & EXTI2_BPOS){
200000f4:	4b12      	ldr	r3, [pc, #72]	; (20000140 <irq_handler_2+0x60>)
200000f6:	681b      	ldr	r3, [r3, #0]
200000f8:	2204      	movs	r2, #4
200000fa:	4013      	ands	r3, r2
200000fc:	d01c      	beq.n	20000138 <irq_handler_2+0x58>
		EXTI_PR |= EXTI2_BPOS; 							//kvittera avbrottet
200000fe:	4b10      	ldr	r3, [pc, #64]	; (20000140 <irq_handler_2+0x60>)
20000100:	681a      	ldr	r2, [r3, #0]
20000102:	4b0f      	ldr	r3, [pc, #60]	; (20000140 <irq_handler_2+0x60>)
20000104:	2104      	movs	r1, #4
20000106:	430a      	orrs	r2, r1
20000108:	601a      	str	r2, [r3, #0]
		
	GPIO_ODR_E_LOW |= (1<<6); 		//kvittera irq2
2000010a:	4b0e      	ldr	r3, [pc, #56]	; (20000144 <irq_handler_2+0x64>)
2000010c:	781b      	ldrb	r3, [r3, #0]
2000010e:	b2db      	uxtb	r3, r3
20000110:	4a0c      	ldr	r2, [pc, #48]	; (20000144 <irq_handler_2+0x64>)
20000112:	2140      	movs	r1, #64	; 0x40
20000114:	430b      	orrs	r3, r1
20000116:	b2db      	uxtb	r3, r3
20000118:	7013      	strb	r3, [r2, #0]
	
	GPIO_ODR_E_LOW &= ~(1<<6);
2000011a:	4b0a      	ldr	r3, [pc, #40]	; (20000144 <irq_handler_2+0x64>)
2000011c:	781b      	ldrb	r3, [r3, #0]
2000011e:	b2db      	uxtb	r3, r3
20000120:	4a08      	ldr	r2, [pc, #32]	; (20000144 <irq_handler_2+0x64>)
20000122:	2140      	movs	r1, #64	; 0x40
20000124:	438b      	bics	r3, r1
20000126:	b2db      	uxtb	r3, r3
20000128:	7013      	strb	r3, [r2, #0]
	
	GPIO_ODR_D_LOW ^= 0xFF;
2000012a:	4b07      	ldr	r3, [pc, #28]	; (20000148 <irq_handler_2+0x68>)
2000012c:	781b      	ldrb	r3, [r3, #0]
2000012e:	b2db      	uxtb	r3, r3
20000130:	4a05      	ldr	r2, [pc, #20]	; (20000148 <irq_handler_2+0x68>)
20000132:	43db      	mvns	r3, r3
20000134:	b2db      	uxtb	r3, r3
20000136:	7013      	strb	r3, [r2, #0]
			}
}
20000138:	46c0      	nop			; (mov r8, r8)
2000013a:	46bd      	mov	sp, r7
2000013c:	b002      	add	sp, #8
2000013e:	bd80      	pop	{r7, pc}
20000140:	40013c14 	andmi	r3, r1, r4, lsl ip
20000144:	40021014 	andmi	r1, r2, r4, lsl r0
20000148:	40020c14 	andmi	r0, r2, r4, lsl ip

2000014c <out7seg>:

void out7seg (unsigned char c){
2000014c:	b580      	push	{r7, lr}
2000014e:	b082      	sub	sp, #8
20000150:	af00      	add	r7, sp, #0
20000152:	0002      	movs	r2, r0
20000154:	1dfb      	adds	r3, r7, #7
20000156:	701a      	strb	r2, [r3, #0]
	switch(c){
20000158:	1dfb      	adds	r3, r7, #7
2000015a:	781b      	ldrb	r3, [r3, #0]
2000015c:	2b09      	cmp	r3, #9
2000015e:	d82c      	bhi.n	200001ba <out7seg+0x6e>
20000160:	009a      	lsls	r2, r3, #2
20000162:	4b1a      	ldr	r3, [pc, #104]	; (200001cc <out7seg+0x80>)
20000164:	18d3      	adds	r3, r2, r3
20000166:	681b      	ldr	r3, [r3, #0]
20000168:	469f      	mov	pc, r3
		case 0: GPIO_ODR_D_HIGH = 0x3F; break;
2000016a:	4b19      	ldr	r3, [pc, #100]	; (200001d0 <out7seg+0x84>)
2000016c:	223f      	movs	r2, #63	; 0x3f
2000016e:	701a      	strb	r2, [r3, #0]
20000170:	e027      	b.n	200001c2 <out7seg+0x76>
		case 1: GPIO_ODR_D_HIGH = 0x06; break;
20000172:	4b17      	ldr	r3, [pc, #92]	; (200001d0 <out7seg+0x84>)
20000174:	2206      	movs	r2, #6
20000176:	701a      	strb	r2, [r3, #0]
20000178:	e023      	b.n	200001c2 <out7seg+0x76>
		case 2: GPIO_ODR_D_HIGH = 0x5B; break;
2000017a:	4b15      	ldr	r3, [pc, #84]	; (200001d0 <out7seg+0x84>)
2000017c:	225b      	movs	r2, #91	; 0x5b
2000017e:	701a      	strb	r2, [r3, #0]
20000180:	e01f      	b.n	200001c2 <out7seg+0x76>
		case 3: GPIO_ODR_D_HIGH = 0x4F; break;
20000182:	4b13      	ldr	r3, [pc, #76]	; (200001d0 <out7seg+0x84>)
20000184:	224f      	movs	r2, #79	; 0x4f
20000186:	701a      	strb	r2, [r3, #0]
20000188:	e01b      	b.n	200001c2 <out7seg+0x76>
		case 4: GPIO_ODR_D_HIGH = 0x66; break;
2000018a:	4b11      	ldr	r3, [pc, #68]	; (200001d0 <out7seg+0x84>)
2000018c:	2266      	movs	r2, #102	; 0x66
2000018e:	701a      	strb	r2, [r3, #0]
20000190:	e017      	b.n	200001c2 <out7seg+0x76>
		case 5: GPIO_ODR_D_HIGH = 0x6D; break;
20000192:	4b0f      	ldr	r3, [pc, #60]	; (200001d0 <out7seg+0x84>)
20000194:	226d      	movs	r2, #109	; 0x6d
20000196:	701a      	strb	r2, [r3, #0]
20000198:	e013      	b.n	200001c2 <out7seg+0x76>
		case 6: GPIO_ODR_D_HIGH = 0x7D; break;
2000019a:	4b0d      	ldr	r3, [pc, #52]	; (200001d0 <out7seg+0x84>)
2000019c:	227d      	movs	r2, #125	; 0x7d
2000019e:	701a      	strb	r2, [r3, #0]
200001a0:	e00f      	b.n	200001c2 <out7seg+0x76>
		case 7: GPIO_ODR_D_HIGH = 0x07; break;
200001a2:	4b0b      	ldr	r3, [pc, #44]	; (200001d0 <out7seg+0x84>)
200001a4:	2207      	movs	r2, #7
200001a6:	701a      	strb	r2, [r3, #0]
200001a8:	e00b      	b.n	200001c2 <out7seg+0x76>
		case 8: GPIO_ODR_D_HIGH = 0x7F; break;
200001aa:	4b09      	ldr	r3, [pc, #36]	; (200001d0 <out7seg+0x84>)
200001ac:	227f      	movs	r2, #127	; 0x7f
200001ae:	701a      	strb	r2, [r3, #0]
200001b0:	e007      	b.n	200001c2 <out7seg+0x76>
		case 9: GPIO_ODR_D_HIGH = 0x6F; break;
200001b2:	4b07      	ldr	r3, [pc, #28]	; (200001d0 <out7seg+0x84>)
200001b4:	226f      	movs	r2, #111	; 0x6f
200001b6:	701a      	strb	r2, [r3, #0]
200001b8:	e003      	b.n	200001c2 <out7seg+0x76>
//		case 0xC: GPIO_ODR_D_LOW = 0x39; break;
//		case 0xD: GPIO_ODR_D_LOW = 0x3F; break;
//		case 0xE: GPIO_ODR_D_LOW = 0x79; break;
//		case 0xF: GPIO_ODR_D_LOW = 0x71; break;
		
		default: GPIO_ODR_D_HIGH = 0x00; break;
200001ba:	4b05      	ldr	r3, [pc, #20]	; (200001d0 <out7seg+0x84>)
200001bc:	2200      	movs	r2, #0
200001be:	701a      	strb	r2, [r3, #0]
200001c0:	46c0      	nop			; (mov r8, r8)
	}
}
200001c2:	46c0      	nop			; (mov r8, r8)
200001c4:	46bd      	mov	sp, r7
200001c6:	b002      	add	sp, #8
200001c8:	bd80      	pop	{r7, pc}
200001ca:	46c0      	nop			; (mov r8, r8)
200001cc:	200002b4 			; <UNDEFINED> instruction: 0x200002b4
200001d0:	40020c15 	andmi	r0, r2, r5, lsl ip

200001d4 <init_flipflop>:

void init_flipflop(){
200001d4:	b580      	push	{r7, lr}
200001d6:	af00      	add	r7, sp, #0
	GPIO_MODER_D = 0x55555555;
200001d8:	4b1d      	ldr	r3, [pc, #116]	; (20000250 <init_flipflop+0x7c>)
200001da:	4a1e      	ldr	r2, [pc, #120]	; (20000254 <init_flipflop+0x80>)
200001dc:	601a      	str	r2, [r3, #0]
	GPIO_MODER_LOW_E = 0x5500;
200001de:	4b1e      	ldr	r3, [pc, #120]	; (20000258 <init_flipflop+0x84>)
200001e0:	22aa      	movs	r2, #170	; 0xaa
200001e2:	01d2      	lsls	r2, r2, #7
200001e4:	801a      	strh	r2, [r3, #0]
	
	/* SET REGISTERS TO 0 */
	SYSCFG_EXTICR1 &= ~(0xFFFF); 
200001e6:	4b1d      	ldr	r3, [pc, #116]	; (2000025c <init_flipflop+0x88>)
200001e8:	681a      	ldr	r2, [r3, #0]
200001ea:	4b1c      	ldr	r3, [pc, #112]	; (2000025c <init_flipflop+0x88>)
200001ec:	0c12      	lsrs	r2, r2, #16
200001ee:	0412      	lsls	r2, r2, #16
200001f0:	601a      	str	r2, [r3, #0]
	
	/* PE = 4 till avbrottslina EXTI0 &  EXTI2 & EXTI1 */
	SYSCFG_EXTICR1 |= 0x0444;
200001f2:	4b1a      	ldr	r3, [pc, #104]	; (2000025c <init_flipflop+0x88>)
200001f4:	681a      	ldr	r2, [r3, #0]
200001f6:	4b19      	ldr	r3, [pc, #100]	; (2000025c <init_flipflop+0x88>)
200001f8:	4919      	ldr	r1, [pc, #100]	; (20000260 <init_flipflop+0x8c>)
200001fa:	430a      	orrs	r2, r1
200001fc:	601a      	str	r2, [r3, #0]
	
	EXTI_IMR |= (EXTI0_BPOS | EXTI2_BPOS | EXTI1_BPOS); 			//aktivera avbrott EXTI0 &  EXTI2 & EXTI1 : motsvarande bits
200001fe:	4b19      	ldr	r3, [pc, #100]	; (20000264 <init_flipflop+0x90>)
20000200:	681a      	ldr	r2, [r3, #0]
20000202:	4b18      	ldr	r3, [pc, #96]	; (20000264 <init_flipflop+0x90>)
20000204:	2107      	movs	r1, #7
20000206:	430a      	orrs	r2, r1
20000208:	601a      	str	r2, [r3, #0]
	
//	EXTI_RTSR &= ~(EXTI0_BPOS | EXTI2_BPOS | EXTI1_BPOS);			//maskera positiv flank
//	EXTI_FTSR |= (EXTI0_BPOS | EXTI2_BPOS | EXTI1_BPOS);			//aktivera negativ flank
	
	EXTI_RTSR |= (EXTI0_BPOS | EXTI2_BPOS | EXTI1_BPOS);			//aktivera positiv flank
2000020a:	4b17      	ldr	r3, [pc, #92]	; (20000268 <init_flipflop+0x94>)
2000020c:	681a      	ldr	r2, [r3, #0]
2000020e:	4b16      	ldr	r3, [pc, #88]	; (20000268 <init_flipflop+0x94>)
20000210:	2107      	movs	r1, #7
20000212:	430a      	orrs	r2, r1
20000214:	601a      	str	r2, [r3, #0]
	EXTI_FTSR &= ~(EXTI0_BPOS | EXTI2_BPOS | EXTI1_BPOS);			//maskera negativ flank
20000216:	4b15      	ldr	r3, [pc, #84]	; (2000026c <init_flipflop+0x98>)
20000218:	681a      	ldr	r2, [r3, #0]
2000021a:	4b14      	ldr	r3, [pc, #80]	; (2000026c <init_flipflop+0x98>)
2000021c:	2107      	movs	r1, #7
2000021e:	438a      	bics	r2, r1
20000220:	601a      	str	r2, [r3, #0]
	
	SCB_VTOR = 0x2001C000; 											//relokera avbrottsvektorn
20000222:	4b13      	ldr	r3, [pc, #76]	; (20000270 <init_flipflop+0x9c>)
20000224:	4a13      	ldr	r2, [pc, #76]	; (20000274 <init_flipflop+0xa0>)
20000226:	601a      	str	r2, [r3, #0]
	
	EXTI1_IRQVEC = irq_handler_1;					//motsvarar avbrottsnummer 7, vektor offset 0x5C
20000228:	4b13      	ldr	r3, [pc, #76]	; (20000278 <init_flipflop+0xa4>)
2000022a:	4a14      	ldr	r2, [pc, #80]	; (2000027c <init_flipflop+0xa8>)
2000022c:	601a      	str	r2, [r3, #0]
	EXTI2_IRQVEC = irq_handler_2;					//motsvarar avbrottsnummer 8, vektor offset 0x60
2000022e:	4b14      	ldr	r3, [pc, #80]	; (20000280 <init_flipflop+0xac>)
20000230:	4a14      	ldr	r2, [pc, #80]	; (20000284 <init_flipflop+0xb0>)
20000232:	601a      	str	r2, [r3, #0]
	EXTI0_IRQVEC = irq_handler_0;				//motsvarar avbrottsnummer 9, vektor offset 0x58
20000234:	4b14      	ldr	r3, [pc, #80]	; (20000288 <init_flipflop+0xb4>)
20000236:	4a15      	ldr	r2, [pc, #84]	; (2000028c <init_flipflop+0xb8>)
20000238:	601a      	str	r2, [r3, #0]
	
	NVIC_ISER0 |= (NVIC_EXTI1_BPOS | NVIC_EXTI2_BPOS | NVIC_EXTI0_BPOS); 							//bit b9 | b8 | b7 i set-enable register
2000023a:	4b15      	ldr	r3, [pc, #84]	; (20000290 <init_flipflop+0xbc>)
2000023c:	681a      	ldr	r2, [r3, #0]
2000023e:	4b14      	ldr	r3, [pc, #80]	; (20000290 <init_flipflop+0xbc>)
20000240:	21e0      	movs	r1, #224	; 0xe0
20000242:	0049      	lsls	r1, r1, #1
20000244:	430a      	orrs	r2, r1
20000246:	601a      	str	r2, [r3, #0]
}
20000248:	46c0      	nop			; (mov r8, r8)
2000024a:	46bd      	mov	sp, r7
2000024c:	bd80      	pop	{r7, pc}
2000024e:	46c0      	nop			; (mov r8, r8)
20000250:	40020c00 	andmi	r0, r2, r0, lsl #24
20000254:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000258:	40021000 	andmi	r1, r2, r0
2000025c:	40013808 	andmi	r3, r1, r8, lsl #16
20000260:	00000444 	andeq	r0, r0, r4, asr #8
20000264:	40013c00 	andmi	r3, r1, r0, lsl #24
20000268:	40013c08 	andmi	r3, r1, r8, lsl #24
2000026c:	40013c0c 	andmi	r3, r1, ip, lsl #24
20000270:	e000ed08 	and	lr, r0, r8, lsl #26
20000274:	2001c000 	andcs	ip, r1, r0
20000278:	2001c05c 	andcs	ip, r1, ip, asr r0
2000027c:	2000007d 	andcs	r0, r0, sp, ror r0
20000280:	2001c060 	andcs	ip, r1, r0, rrx
20000284:	200000e1 	andcs	r0, r0, r1, ror #1
20000288:	2001c058 	andcs	ip, r1, r8, asr r0
2000028c:	20000011 	andcs	r0, r0, r1, lsl r0
20000290:	e000e100 	and	lr, r0, r0, lsl #2

20000294 <main>:

void main(void)
{
20000294:	b580      	push	{r7, lr}
20000296:	af00      	add	r7, sp, #0
	init_flipflop();
20000298:	f7ff ff9c 	bl	200001d4 <init_flipflop>
	while(1){
		out7seg(count);
2000029c:	4b03      	ldr	r3, [pc, #12]	; (200002ac <main+0x18>)
2000029e:	781b      	ldrb	r3, [r3, #0]
200002a0:	b2db      	uxtb	r3, r3
200002a2:	0018      	movs	r0, r3
200002a4:	f7ff ff52 	bl	2000014c <out7seg>
200002a8:	e7f8      	b.n	2000029c <main+0x8>
200002aa:	46c0      	nop			; (mov r8, r8)
200002ac:	200002b0 			; <UNDEFINED> instruction: 0x200002b0

200002b0 <count>:
200002b0:	00000000 	andeq	r0, r0, r0
200002b4:	2000016a 	andcs	r0, r0, sl, ror #2
200002b8:	20000172 	andcs	r0, r0, r2, ror r1
200002bc:	2000017a 	andcs	r0, r0, sl, ror r1
200002c0:	20000182 	andcs	r0, r0, r2, lsl #3
200002c4:	2000018a 	andcs	r0, r0, sl, lsl #3
200002c8:	20000192 	mulcs	r0, r2, r1
200002cc:	2000019a 	mulcs	r0, sl, r1
200002d0:	200001a2 	andcs	r0, r0, r2, lsr #3
200002d4:	200001aa 	andcs	r0, r0, sl, lsr #3
200002d8:	200001b2 			; <UNDEFINED> instruction: 0x200001b2

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000000fa 	strdeq	r0, [r0], -sl
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000091 	muleq	r0, r1, r0
  10:	0001290c 	andeq	r2, r1, ip, lsl #18
	...
  24:	08010200 	stmdaeq	r1, {r9}
  28:	00000083 	andeq	r0, r0, r3, lsl #1
  2c:	00002503 	andeq	r2, r0, r3, lsl #10
  30:	01730400 	cmneq	r3, r0, lsl #8
  34:	15010000 	strne	r0, [r1, #-0]
  38:	0000002c 	andeq	r0, r0, ip, lsr #32
  3c:	02b00305 	adcseq	r0, r0, #335544320	; 0x14000000
  40:	6e052000 	cdpvs	0, 0, cr2, cr5, cr0, {0}
  44:	01000001 	tsteq	r0, r1
  48:	0002946c 	andeq	r9, r2, ip, ror #8
  4c:	00001c20 	andeq	r1, r0, r0, lsr #24
  50:	069c0100 	ldreq	r0, [ip], r0, lsl #2
  54:	00000075 	andeq	r0, r0, r5, ror r0
  58:	01d45101 	bicseq	r5, r4, r1, lsl #2
  5c:	00c02000 	sbceq	r2, r0, r0
  60:	9c010000 	stcls	0, cr0, [r1], {-0}
  64:	00006507 	andeq	r6, r0, r7, lsl #10
  68:	4c3a0100 	ldfmis	f0, [sl], #-0
  6c:	88200001 	stmdahi	r0!, {r0}
  70:	01000000 	mrseq	r0, (UNDEF: 0)
  74:	0000869c 	muleq	r0, ip, r6
  78:	00630800 	rsbeq	r0, r3, r0, lsl #16
  7c:	00253a01 	eoreq	r3, r5, r1, lsl #20
  80:	91020000 	mrsls	r0, (UNDEF: 2)
  84:	57090077 	smlsdxpl	r9, r7, r0, r0
  88:	01000000 	mrseq	r0, (UNDEF: 0)
  8c:	0000e02d 	andeq	lr, r0, sp, lsr #32
  90:	00006c20 	andeq	r6, r0, r0, lsr #24
  94:	a89c0100 	ldmge	ip, {r8}
  98:	0a000000 	beq	a0 <startup-0x1fffff60>
  9c:	2e010078 	mcrcs	0, 0, r0, cr1, cr8, {3}
  a0:	00000025 	andeq	r0, r0, r5, lsr #32
  a4:	00779102 	rsbseq	r9, r7, r2, lsl #2
  a8:	00004909 	andeq	r4, r0, r9, lsl #18
  ac:	7c220100 	stfvcs	f0, [r2], #-0
  b0:	64200000 	strtvs	r0, [r0], #-0
  b4:	01000000 	mrseq	r0, (UNDEF: 0)
  b8:	0000ca9c 	muleq	r0, ip, sl
  bc:	00780a00 	rsbseq	r0, r8, r0, lsl #20
  c0:	00252301 	eoreq	r2, r5, r1, lsl #6
  c4:	91020000 	mrsls	r0, (UNDEF: 2)
  c8:	3b090077 	blcc	2402ac <startup-0x1fdbfd54>
  cc:	01000000 	mrseq	r0, (UNDEF: 0)
  d0:	00001017 	andeq	r1, r0, r7, lsl r0
  d4:	00006c20 	andeq	r6, r0, r0, lsr #24
  d8:	ec9c0100 	ldfs	f0, [ip], {0}
  dc:	0a000000 	beq	e4 <startup-0x1fffff1c>
  e0:	18010078 	stmdane	r1, {r3, r4, r5, r6}
  e4:	00000025 	andeq	r0, r0, r5, lsr #32
  e8:	00779102 	rsbseq	r9, r7, r2, lsl #2
  ec:	00006d0b 	andeq	r6, r0, fp, lsl #26
  f0:	000b0100 	andeq	r0, fp, r0, lsl #2
  f4:	0c200000 	stceq	0, cr0, [r0], #-0
  f8:	01000000 	mrseq	r0, (UNDEF: 0)
  fc:	Address 0x000000fc is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	35030000 	strcc	r0, [r3, #-0]
  20:	00134900 	andseq	r4, r3, r0, lsl #18
  24:	00340400 	eorseq	r0, r4, r0, lsl #8
  28:	0b3a0e03 	bleq	e8383c <startup-0x1f17c7c4>
  2c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  30:	00001802 	andeq	r1, r0, r2, lsl #16
  34:	3f002e05 	svccc	0x00002e05
  38:	3a0e0319 	bcc	380ca4 <startup-0x1fc7f35c>
  3c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  40:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  44:	96184006 	ldrls	r4, [r8], -r6
  48:	00001942 	andeq	r1, r0, r2, asr #18
  4c:	3f002e06 	svccc	0x00002e06
  50:	3a0e0319 	bcc	380cbc <startup-0x1fc7f344>
  54:	110b3b0b 	tstne	fp, fp, lsl #22
  58:	40061201 	andmi	r1, r6, r1, lsl #4
  5c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  60:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
  64:	03193f01 	tsteq	r9, #1, 30
  68:	3b0b3a0e 	blcc	2ce8a8 <startup-0x1fd31758>
  6c:	1119270b 	tstne	r9, fp, lsl #14
  70:	40061201 	andmi	r1, r6, r1, lsl #4
  74:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  78:	00001301 	andeq	r1, r0, r1, lsl #6
  7c:	03000508 	movweq	r0, #1288	; 0x508
  80:	3b0b3a08 	blcc	2ce8a8 <startup-0x1fd31758>
  84:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  88:	09000018 	stmdbeq	r0, {r3, r4}
  8c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  90:	0b3a0e03 	bleq	e838a4 <startup-0x1f17c75c>
  94:	01110b3b 	tsteq	r1, fp, lsr fp
  98:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  9c:	01194297 			; <UNDEFINED> instruction: 0x01194297
  a0:	0a000013 	beq	f4 <startup-0x1fffff0c>
  a4:	08030034 	stmdaeq	r3, {r2, r4, r5}
  a8:	0b3b0b3a 	bleq	ec2d98 <startup-0x1f13d268>
  ac:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  b0:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
  b4:	03193f00 	tsteq	r9, #0, 30
  b8:	3b0b3a0e 	blcc	2ce8f8 <startup-0x1fd31708>
  bc:	1119270b 	tstne	r9, fp, lsl #14
  c0:	40061201 	andmi	r1, r6, r1, lsl #4
  c4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  c8:	Address 0x000000c8 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000002a0 	andeq	r0, r0, r0, lsr #5
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200002b0 			; <UNDEFINED> instruction: 0x200002b0
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000000bd 	strheq	r0, [r0], -sp
   4:	005b0002 	subseq	r0, fp, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	72646e41 	rsbvc	r6, r4, #1040	; 0x410
  28:	65442f65 	strbvs	r2, [r4, #-3941]	; 0xfffff09b
  2c:	6f746b73 	svcvs	0x00746b73
  30:	41442f70 	hvcmi	17136	; 0x42f0
  34:	30393354 	eorscc	r3, r9, r4, asr r3
  38:	62616c5f 	rsbvs	r6, r1, #24320	; 0x5f00
  3c:	34765f62 	ldrbtcc	r5, [r6], #-3938	; 0xfffff09e
  40:	696c662f 	stmdbvs	ip!, {r0, r1, r2, r3, r5, r9, sl, sp, lr}^
  44:	6f6c6670 	svcvs	0x006c6670
  48:	72695f70 	rsbvc	r5, r9, #112, 30	; 0x1c0
  4c:	65765f71 	ldrbvs	r5, [r6, #-3953]!	; 0xfffff08f
  50:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
  54:	73000073 	movwvc	r0, #115	; 0x73
  58:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  5c:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
  60:	00000100 	andeq	r0, r0, r0, lsl #2
  64:	02050000 	andeq	r0, r5, #0
  68:	20000000 	andcs	r0, r0, r0
  6c:	13010b03 	movwne	r0, #6915	; 0x1b03
  70:	0003025e 	andeq	r0, r3, lr, asr r2
  74:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
  78:	00001002 	andeq	r1, r0, r2
  7c:	01160320 	tsteq	r6, r0, lsr #6
  80:	6859753d 	ldmdavs	r9, {r0, r2, r3, r4, r5, r8, sl, ip, sp, lr}^
  84:	a0847583 	addge	r7, r4, r3, lsl #11
  88:	6859753d 	ldmdavs	r9, {r0, r2, r3, r4, r5, r8, sl, ip, sp, lr}^
  8c:	a0843d83 	addge	r3, r4, r3, lsl #27
  90:	6859753d 	ldmdavs	r9, {r0, r2, r3, r4, r5, r8, sl, ip, sp, lr}^
  94:	a0768484 	rsbsge	r8, r6, r4, lsl #9
  98:	4b4b9167 	blmi	12e463c <startup-0x1ed1b9c4>
  9c:	4b4b4b4b 	blmi	12d2dd0 <startup-0x1ed2d230>
  a0:	524b4b4b 	subpl	r4, fp, #76800	; 0x12c00
  a4:	3d2f924c 	sfmcc	f1, 1, [pc, #-304]!	; ffffff7c <count+0xdffffccc>
  a8:	6b68694d 	blvs	1a1a5e4 <startup-0x1e5e5a1c>
  ac:	3d3e6867 	ldccc	8, cr6, [lr, #-412]!	; 0xfffffe64
  b0:	02753e3d 	rsbseq	r3, r5, #976	; 0x3d0
  b4:	002f1526 	eoreq	r1, pc, r6, lsr #10
  b8:	30010402 	andcc	r0, r1, r2, lsl #8
  bc:	01000a02 	tsteq	r0, r2, lsl #20
  c0:	Address 0x000000c0 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	555c3a43 	ldrbpl	r3, [ip, #-2627]	; 0xfffff5bd
   4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
   8:	646e415c 	strbtvs	r4, [lr], #-348	; 0xfffffea4
   c:	445c6572 	ldrbmi	r6, [ip], #-1394	; 0xfffffa8e
  10:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
  14:	445c706f 	ldrbmi	r7, [ip], #-111	; 0xffffff91
  18:	39335441 	ldmdbcc	r3!, {r0, r6, sl, ip, lr}
  1c:	616c5f30 	cmnvs	ip, r0, lsr pc
  20:	765f6262 	ldrbvc	r6, [pc], -r2, ror #4
  24:	6c665c34 	stclvs	12, cr5, [r6], #-208	; 0xffffff30
  28:	6c667069 	stclvs	0, cr7, [r6], #-420	; 0xfffffe5c
  2c:	695f706f 	ldmdbvs	pc, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
  30:	765f7172 			; <UNDEFINED> instruction: 0x765f7172
  34:	6f746365 	svcvs	0x00746365
  38:	69007372 	stmdbvs	r0, {r1, r4, r5, r6, r8, r9, ip, sp, lr}
  3c:	685f7172 	ldmdavs	pc, {r1, r4, r5, r6, r8, ip, sp, lr}^	; <UNPREDICTABLE>
  40:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
  44:	305f7265 	subscc	r7, pc, r5, ror #4
  48:	71726900 	cmnvc	r2, r0, lsl #18
  4c:	6e61685f 	mcrvs	8, 3, r6, cr1, cr15, {2}
  50:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
  54:	6900315f 	stmdbvs	r0, {r0, r1, r2, r3, r4, r6, r8, ip, sp}
  58:	685f7172 	ldmdavs	pc, {r1, r4, r5, r6, r8, ip, sp, lr}^	; <UNPREDICTABLE>
  5c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
  60:	325f7265 	subscc	r7, pc, #1342177286	; 0x50000006
  64:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xfffff100
  68:	67657337 			; <UNDEFINED> instruction: 0x67657337
  6c:	61747300 	cmnvs	r4, r0, lsl #6
  70:	70757472 	rsbsvc	r7, r5, r2, ror r4
  74:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
  78:	6c665f74 	stclvs	15, cr5, [r6], #-464	; 0xfffffe30
  7c:	6c667069 	stclvs	0, cr7, [r6], #-420	; 0xfffffe5c
  80:	7500706f 	strvc	r7, [r0, #-111]	; 0xffffff91
  84:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  88:	2064656e 	rsbcs	r6, r4, lr, ror #10
  8c:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
  90:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
  94:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
  98:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  9c:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  a0:	30373130 	eorscc	r3, r7, r0, lsr r1
  a4:	20343039 	eorscs	r3, r4, r9, lsr r0
  a8:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  ac:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  b0:	415b2029 	cmpmi	fp, r9, lsr #32
  b4:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff36a <count+0xdffff0ba>
  b8:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  bc:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  c0:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  c4:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  c8:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  cc:	6f697369 	svcvs	0x00697369
  d0:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  d4:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  d8:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
  dc:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  e0:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  e4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  e8:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  ec:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  f0:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
  f4:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
  f8:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
  fc:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
 100:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
 104:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
 108:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
 10c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
 110:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
 114:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
 118:	20672d20 	rsbcs	r2, r7, r0, lsr #26
 11c:	20304f2d 	eorscs	r4, r0, sp, lsr #30
 120:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
 124:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
 128:	2f3a4300 	svccs	0x003a4300
 12c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 130:	6e412f73 	mcrvs	15, 2, r2, cr1, cr3, {3}
 134:	2f657264 	svccs	0x00657264
 138:	6b736544 	blvs	1cd9650 <startup-0x1e3269b0>
 13c:	2f706f74 	svccs	0x00706f74
 140:	33544144 	cmpcc	r4, #68, 2
 144:	6c5f3039 	mrrcvs	0, 3, r3, pc, cr9	; <UNPREDICTABLE>
 148:	5f626261 	svcpl	0x00626261
 14c:	662f3476 			; <UNDEFINED> instruction: 0x662f3476
 150:	6670696c 	ldrbtvs	r6, [r0], -ip, ror #18
 154:	5f706f6c 	svcpl	0x00706f6c
 158:	5f717269 	svcpl	0x00717269
 15c:	74636576 	strbtvc	r6, [r3], #-1398	; 0xfffffa8a
 160:	2f73726f 	svccs	0x0073726f
 164:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 168:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
 16c:	616d0063 	cmnvs	sp, r3, rrx
 170:	63006e69 	movwvs	r6, #3689	; 0xe69
 174:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <count+0xdffff05e>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	0000006c 	andeq	r0, r0, ip, rrx
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	100e4101 	andne	r4, lr, r1, lsl #2
  3c:	00070d41 	andeq	r0, r7, r1, asr #26
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	00000000 	andeq	r0, r0, r0
  48:	2000007c 	andcs	r0, r0, ip, ror r0
  4c:	00000064 	andeq	r0, r0, r4, rrx
  50:	40080e41 	andmi	r0, r8, r1, asr #28
  54:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  58:	100e4101 	andne	r4, lr, r1, lsl #2
  5c:	00070d41 	andeq	r0, r7, r1, asr #26
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	00000000 	andeq	r0, r0, r0
  68:	200000e0 	andcs	r0, r0, r0, ror #1
  6c:	0000006c 	andeq	r0, r0, ip, rrx
  70:	40080e41 	andmi	r0, r8, r1, asr #28
  74:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  78:	100e4101 	andne	r4, lr, r1, lsl #2
  7c:	00070d41 	andeq	r0, r7, r1, asr #26
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	00000000 	andeq	r0, r0, r0
  88:	2000014c 	andcs	r0, r0, ip, asr #2
  8c:	00000088 	andeq	r0, r0, r8, lsl #1
  90:	40080e41 	andmi	r0, r8, r1, asr #28
  94:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  98:	100e4101 	andne	r4, lr, r1, lsl #2
  9c:	00070d41 	andeq	r0, r7, r1, asr #26
  a0:	00000018 	andeq	r0, r0, r8, lsl r0
  a4:	00000000 	andeq	r0, r0, r0
  a8:	200001d4 	ldrdcs	r0, [r0], -r4
  ac:	000000c0 	andeq	r0, r0, r0, asr #1
  b0:	40080e41 	andmi	r0, r8, r1, asr #28
  b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  bc:	00000018 	andeq	r0, r0, r8, lsl r0
  c0:	00000000 	andeq	r0, r0, r0
  c4:	20000294 	mulcs	r0, r4, r2
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	40080e41 	andmi	r0, r8, r1, asr #28
  d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
